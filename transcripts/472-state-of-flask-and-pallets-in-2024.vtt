WEBVTT

00:00:00.001 --> 00:00:04.480
Flask is one of the most important Python web frameworks and it powers a bunch of the internet.

00:00:04.480 --> 00:00:09.520
David Lord, Flask's lead maintainer, is here to give us an update on the state of Flask and

00:00:09.520 --> 00:00:14.960
palettes in 2024. If you care about Flask and where it is and where it's going, you'll definitely

00:00:14.960 --> 00:00:21.280
want to listen in. This is Talk Python to Me, episode 472, recorded July 9th, 2024.

00:00:21.280 --> 00:00:27.680
Are you ready for your host, Darius? You're listening to Michael Kennedy on Talk Python to Me.

00:00:28.240 --> 00:00:31.520
Live from Portland, Oregon, and this segment was made with Python.

00:00:31.520 --> 00:00:39.920
Welcome to Talk Python to Me, a weekly podcast on Python. This is your host, Michael Kennedy.

00:00:39.920 --> 00:00:45.440
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython,

00:00:45.440 --> 00:00:51.040
both accounts over at fosstodon.org. And keep up with the show and listen to over nine years of

00:00:51.040 --> 00:00:56.400
episodes at talkpython.fm. If you want to be part of our live episodes, you can find the live

00:00:56.400 --> 00:01:02.160
streams over on YouTube. Subscribe to our YouTube channel over at talkpython.fm/youtube and get

00:01:02.160 --> 00:01:07.600
notified about upcoming shows. This episode is sponsored by Sentry. Don't let those errors go

00:01:07.600 --> 00:01:14.800
unnoticed. Use Sentry. Get started at talkpython.fm/sentry. And it's also brought to you by

00:01:14.800 --> 00:01:21.840
us over at Talk Python Training. Did you know that we have over 250 hours of Python courses?

00:01:21.840 --> 00:01:26.560
Yeah, that's right. Check them out at talkpython.fm/courses. Before we jump into the

00:01:26.560 --> 00:01:31.360
interview, I want to let you know that we still have some spots left in my Code in a Castle event.

00:01:31.360 --> 00:01:36.000
If you're looking to learn some of the premier frameworks and techniques in Python,

00:01:36.000 --> 00:01:40.160
and you'd like to have a bucket list type of experience while doing so, then check out

00:01:40.160 --> 00:01:47.600
talkpython.fm/castle. In October, I'll be running a six-day Python course for an intimate audience

00:01:47.600 --> 00:01:52.640
in a villa in Tuscany. Half the time we'll be learning Python, and the other half will be

00:01:52.640 --> 00:01:57.200
exploring the best of what Italy has to offer. Check out the course outline, the excursions,

00:01:57.200 --> 00:02:03.600
and all the details at talkpython.fm/castle. Or if you'd like to just shoot me an email,

00:02:03.600 --> 00:02:07.520
michael@talkpython.fm, or find me on the socials, and I'm happy to talk about it.

00:02:07.520 --> 00:02:11.920
I hope to see you there. David, welcome back to Talk Python To Me. Great to have you here.

00:02:11.920 --> 00:02:12.800
Yeah, hello.

00:02:12.800 --> 00:02:19.520
Going to be super fun to talk about Flask and more broadly, Palettes, just all the different

00:02:19.520 --> 00:02:26.800
projects around Flask and tools and variations like Court and so on. You give a really nice talk

00:02:26.800 --> 00:02:32.480
at Embedded FlaskCon, talk a bit about that in a second, about the state of Palettes. I thought,

00:02:32.480 --> 00:02:36.640
"You know what? Let's just take that idea and share it with everyone." Looking forward to

00:02:36.640 --> 00:02:37.280
talking about that.

00:02:37.280 --> 00:02:39.120
Yeah, there's been a lot going on.

00:02:39.680 --> 00:02:46.160
I bet there has. I bet there has. I can't remember exactly when you were on. I think it's about 100

00:02:46.160 --> 00:02:50.080
episodes ago, which puts that at a couple of years. What have you been up to the last couple of years?

00:02:50.080 --> 00:02:53.840
Just more Flask. It's all Flask all the time.

00:02:53.840 --> 00:02:57.840
Seems like such a simple API, but you can work on it forever, right?

00:02:57.840 --> 00:03:01.440
I've acquired a few more libraries, so I've written more libraries and stuff as well.

00:03:01.440 --> 00:03:05.520
But still same job. Well, I guess I got a house. I got married.

00:03:05.520 --> 00:03:09.440
Okay. Congratulations, two times. That's awesome.

00:03:09.440 --> 00:03:11.280
So a little bit of life changes.

00:03:11.280 --> 00:03:17.760
Life keeps marching on. It's amazing. Flask is certainly one of the most popular web frameworks.

00:03:17.760 --> 00:03:23.920
I guess we could start with giving people a sense of the popularity, but my thought is just like,

00:03:23.920 --> 00:03:30.080
"Wow, the pressure of working on something that affects so many folks." Have you pushed out a

00:03:30.080 --> 00:03:30.400
change?

00:03:30.400 --> 00:03:37.120
Yeah. I've had a weird thought before that I try not to think about the numbers too often,

00:03:37.120 --> 00:03:41.920
because it's like 100 million or more if you add up all the different libraries and stuff a month.

00:03:41.920 --> 00:03:47.120
I've had a thought before, if I push out something that doesn't work for enough people,

00:03:47.120 --> 00:03:57.040
that probably has some very minor but noticeable effect on the tech sector for that day or hour,

00:03:57.040 --> 00:03:59.200
which is scary.

00:03:59.200 --> 00:04:06.400
Yeah. It's not quite an AWS US-1 East downtime, but it's also not that.

00:04:07.360 --> 00:04:15.440
Yeah. I think definitely since I've started, a lot more people have become aware of better

00:04:15.440 --> 00:04:22.800
practices around pinning their dependencies, that sort of thing. In part because we did make some

00:04:22.800 --> 00:04:28.320
deprecations and then breaking changes in Flask and the other libraries, and people came to our

00:04:28.320 --> 00:04:34.080
issue tracker saying, "Oh, you broke something." And ultimately, I had to tell them, "You need to

00:04:34.080 --> 00:04:38.960
be using a tool. There's quite a few tools out now, although we don't have a lockfile standard

00:04:38.960 --> 00:04:44.400
yet, but there's pip compile, there's PDM, there's Rai. You need to use a tool and pin your

00:04:44.400 --> 00:04:50.800
dependency tree, because then you can see when there's updates, and you can update them deliberately

00:04:50.800 --> 00:04:58.240
and test and adapt to those changes." I was giving that message a lot in the beginning, and over the

00:04:58.240 --> 00:05:03.840
past five years or so, I've definitely had to post it less often. I feel like more people are

00:05:03.840 --> 00:05:10.640
like aware of those tools and practices now. I would also add that the tooling has gotten a lot

00:05:10.640 --> 00:05:16.560
better at that. It used to be, "Okay, so what you're going to do is you're going to write a

00:05:16.560 --> 00:05:21.520
requirements.txt file, and then you set your versions explicitly." And that, for many people,

00:05:21.520 --> 00:05:27.440
only addressed the primary dependencies, not the transitive dependency. They might pin Flask,

00:05:27.440 --> 00:05:32.960
but did they pin Werkzeug? I don't know. They may have, probably they didn't, unless they use pip

00:05:32.960 --> 00:05:37.680
freeze, but then you gather a bunch of garbage that isn't actually about your project that got

00:05:37.680 --> 00:05:44.480
sucked in from some other thing. It was really sort of funky before. I don't know, you mentioned

00:05:44.480 --> 00:05:48.400
pip tools and pip compile. I am loving that workflow these days.

00:05:48.400 --> 00:05:53.440
Yeah, that's what I've switched all the projects themselves to. If you go look at Flask or Werkzeug

00:05:53.440 --> 00:05:59.120
or any of those, we have a requirements folder with different environment files that say, "Here

00:05:59.120 --> 00:06:04.160
are our direct dependencies," and then we compile those into fully locked dependencies. All our

00:06:04.160 --> 00:06:10.720
tests run off of those. Our build and publish workflow runs off of those. It's not quite the

00:06:10.720 --> 00:06:15.600
same because those are our development dependencies instead of our runtime dependencies, but it's still

00:06:15.600 --> 00:06:20.960
really helpful just to know that if we don't do anything, our process will continue to work

00:06:20.960 --> 00:06:28.000
because it worked last time. If we have contributors at sprints, now it's much easier.

00:06:28.000 --> 00:06:32.800
I had a problem the first few sprints I was running where every developer would try to set

00:06:32.800 --> 00:06:36.080
up their own machine and get different versions of things or have different versions.

00:06:36.080 --> 00:06:39.520
Point in time snapshots, just whenever they got started, right?

00:06:39.520 --> 00:06:42.720
Yeah, so now they all install the exact same list of dependencies,

00:06:42.720 --> 00:06:47.360
so everybody's development environment looks exactly the same, which is a lot more usable.

00:06:47.360 --> 00:06:51.760
Yeah, that's excellent. I have the same workflow. I have a top level dependencies that I actually

00:06:51.760 --> 00:06:56.880
would consider my dependencies, and then I pip compile, and then unpin, and I pip compile those

00:06:56.880 --> 00:07:02.000
to a pin dependencies, and I just do the upgrade when I feel like, "Oh, let's go get some new

00:07:02.000 --> 00:07:06.800
dependencies and see how that goes." Yeah, yeah, very nice. Okay, well, let's start with FlaskCon.

00:07:06.800 --> 00:07:12.800
I called it an embedded conference, and this is different than it has been before. I think FlaskCon

00:07:12.800 --> 00:07:16.960
at one point was a purely online one, or maybe that was just COVID, and we just didn't have

00:07:16.960 --> 00:07:25.520
the timing or memory. Yeah, so it was timing, really. Years ago, right before COVID started,

00:07:25.520 --> 00:07:32.320
or quarantine started, I had been working myself up to do an in-person conference. It's something

00:07:32.320 --> 00:07:37.120
I've wanted to do for a while because I love attending conferences. I love the community

00:07:37.120 --> 00:07:42.720
around it. DjangoCon happened in San Diego a few times, and that was really fun. I just crashed it.

00:07:42.720 --> 00:07:50.000
It's the Flask person, the San Diego Flask person. I was getting ready to do that, and then

00:07:50.000 --> 00:07:56.080
COVID happened, but some other members of the community, the Palettes team, stepped up and said,

00:07:56.080 --> 00:08:01.840
"Hey, we can do an online one." Running a conference, even online, is very hard. There's

00:08:01.840 --> 00:08:09.440
a lot of stuff to keep track of. Oh, yeah. We ran three online conferences, I think 2020, 2021,

00:08:09.440 --> 00:08:15.360
and 2023. I think we skipped one, but those are all on pyvideo.org if you want to find them.

00:08:15.360 --> 00:08:23.840
Now FlaskCon 2024 is there also. I finally got the opportunity with PyCon. They previously had

00:08:23.840 --> 00:08:29.920
this hatchery program where you could propose, "I want to do this event," and the hatchery program

00:08:29.920 --> 00:08:37.920
will say, "That sounds great. We'll handle the venue, the food, the insurance, the legal stuff.

00:08:38.640 --> 00:08:42.960
You get one of our rooms, and you can do whatever you want in it or whatever you propose in it."

00:08:42.960 --> 00:08:49.200
Last year at PyCon, I talked to some of the organizers, and they suggested, "Hey,

00:08:49.200 --> 00:08:53.600
the hatchery is coming back. This would be a great way to do it so that you don't have to

00:08:53.600 --> 00:09:00.480
learn everything at once. You can practice." We managed to do some advertising. It's hard to

00:09:00.480 --> 00:09:08.240
advertise new conferences in general, and then especially now that a lot of the Python community

00:09:08.640 --> 00:09:14.640
is not on Twitter anymore, I'm not, and even if they were, everything is fragmented more.

00:09:14.640 --> 00:09:21.680
So it was hard to get the reach and get enough CFP proposals, but we did get a few and ended up

00:09:21.680 --> 00:09:25.120
accepting two people from the community that gave just wonderful talks.

00:09:25.120 --> 00:09:30.320
I saw one on doing PWAs. What was the other one on?

00:09:30.320 --> 00:09:34.560
Was it progressive monomers? No, there was one on-

00:09:34.560 --> 00:09:35.520
Single page, sorry.

00:09:36.240 --> 00:09:44.240
And there was one on observability, and then PWAs or single page apps, and the extension

00:09:44.240 --> 00:09:49.680
ecosystem and the idea around defining Flask plugins. Then there was my talk, which was just

00:09:49.680 --> 00:09:52.480
the subject of this podcast.

00:09:52.480 --> 00:09:53.200
Welcome, people.

00:09:53.200 --> 00:10:01.200
So will it maybe be at PyCon next year, or are you going to branch out?

00:10:01.200 --> 00:10:06.640
I don't know yet. I think they would accept me back, but I wouldn't want to... I kind of

00:10:06.640 --> 00:10:09.440
view the hat tree... I don't know if this is true, but I kind of view the hat tree as like,

00:10:09.440 --> 00:10:12.880
"We're going to help you get started, but not keep coming back for the same thing."

00:10:12.880 --> 00:10:14.640
But I don't want to take it...

00:10:14.640 --> 00:10:18.640
Right, right, right. I'm a 10-year rookie. You're not a rookie anymore. Get out here with the...

00:10:18.640 --> 00:10:27.200
I would still love to run a conference, somewhat selfishly, so that I can run one in San Diego or

00:10:27.200 --> 00:10:28.240
on the West Coast at least.

00:10:28.880 --> 00:10:32.720
That's what I was going to say. How about San Diego? Then we can all come down there and stay

00:10:32.720 --> 00:10:33.600
by the beach.

00:10:33.600 --> 00:10:37.840
Yeah, I mentioned DjangoCon before, but they stayed in San Diego for three years straight

00:10:37.840 --> 00:10:43.200
at this little hotel that was really nice, had a pool. People just kind of congregated,

00:10:43.200 --> 00:10:49.280
and it was like a 15-minute drive for me. So yeah, next year at PyCon, I might not be there.

00:10:49.280 --> 00:10:54.240
We're expecting our daughter to be born in January next year.

00:10:54.240 --> 00:10:57.840
Congratulations. And that might take precedence over PyCon?

00:10:57.840 --> 00:11:01.680
I'm going to have a lot less time in general, which will come up in other things we're going

00:11:01.680 --> 00:11:08.080
to talk about. But yeah, I probably, for the first time since 2016 or 2015, I will not go to PyCon,

00:11:08.080 --> 00:11:14.160
probably. But there was a conference, right? This was the last conference I went to before

00:11:14.160 --> 00:11:19.440
quarantine. Two weeks before quarantine hit, I went up to Los Angeles for PyBeach, which was this

00:11:19.440 --> 00:11:27.440
very, very small first-time conference. I just love those little ones. And I met the organizer

00:11:28.000 --> 00:11:33.280
Nick Kentar at North Bay Python a few times now, and I've told him, "We should try to bring that

00:11:33.280 --> 00:11:38.400
back." I think there's a few other people who are interested as well. It doesn't have to be FlaskCon

00:11:38.400 --> 00:11:42.800
specifically, but if I could run some sort of local conference and I could do some Flask stuff

00:11:42.800 --> 00:11:48.240
or attract some Flask stuff. Well, I'm pretty excited that PyCon is going to be in Long Beach

00:11:48.240 --> 00:11:52.320
year after next. Yeah, two years from now, that'll be really nice as well.

00:11:52.320 --> 00:11:56.880
So that'll be really nice. But maybe you can drum up a bunch of interests and connect with

00:11:57.360 --> 00:12:02.080
a lot of people who are conference goers of that place, but encourage them to sign up for a list

00:12:02.080 --> 00:12:06.880
and get notified about whatever this other thing is. Because it'll be in the same basic neighborhood.

00:12:06.880 --> 00:12:13.200
Yeah. So Jazzy out in the audience asked, "Can we attend FlaskCon online?"

00:12:13.200 --> 00:12:20.560
This year, or this in-person one in 2024, we weren't able to do that. But all the talks are

00:12:20.560 --> 00:12:27.040
available now on our YouTube channel. If you just search FlaskCon 2024, you'll find it. Or

00:12:27.040 --> 00:12:33.360
pyvideo.org has all of them listed. The first three we ran were purely online. So you could

00:12:33.360 --> 00:12:37.600
watch them streaming. This year, we just didn't have the infrastructure for it. So we couldn't

00:12:37.600 --> 00:12:42.640
really manage to do a live stream and the recordings at the same time. I was lucky enough

00:12:42.640 --> 00:12:48.240
to get Elaine Wong's help doing the recordings. And she brought all her cool specialized equipment.

00:12:48.240 --> 00:12:50.480
So we were able to get the recordings up really fast, at least.

00:12:50.480 --> 00:12:54.960
Yeah, that's really good. Are the ones for PyCon even up yet? I don't think they are.

00:12:54.960 --> 00:12:55.840
Not that I'm aware of.

00:12:55.840 --> 00:12:59.920
Maybe they're going really slowly. But yeah, it was really nice. We just recorded this hard drive

00:12:59.920 --> 00:13:05.440
and she was like, "Oh, you guys timed all your starts and stops really well." So all I have to

00:13:05.440 --> 00:13:10.480
do is do these simple cuts and it's all up. Just trim the edges and upload. Perfect.

00:13:10.480 --> 00:13:10.960
Yeah.

00:13:10.960 --> 00:13:16.640
Yeah. That's really cool. So yeah, I'll link to the playlist of FlaskCon 2024 for folks in the

00:13:16.640 --> 00:13:21.520
show notes. They can check that out. Awesome. Well, we'll see what 2025 brings. Hopefully,

00:13:21.520 --> 00:13:23.440
some more good conference. So let's-

00:13:23.440 --> 00:13:30.160
Yeah, we might have other team members besides me attending PyCon as well. So we'll see what

00:13:30.160 --> 00:13:30.640
happens.

00:13:30.640 --> 00:13:31.280
Sure.

00:13:31.280 --> 00:13:35.760
If nothing else, I usually just run out of space or something. So there's always something going on.

00:13:35.760 --> 00:13:42.640
Yeah, for sure. Now, I want to talk about the state of palettes in 2024. But surely there are

00:13:42.640 --> 00:13:47.200
quite a few people out there who listen who are really new to Python and programming. You'd be

00:13:47.200 --> 00:13:51.600
surprised. A lot of people say they use it like this podcast, like language immersion. Like you

00:13:51.600 --> 00:13:56.080
want to learn Portuguese, you move to Brazil, you want to learn Python, you just put it on your

00:13:56.080 --> 00:13:59.920
earbuds and listen until it makes sense. So especially for those folks, what is palettes?

00:13:59.920 --> 00:14:07.840
Palettes is an open source organization. So we're not a company, but we do have a team of

00:14:07.840 --> 00:14:13.440
volunteer open source maintainers who volunteer their free time to work on Flask and the libraries

00:14:13.440 --> 00:14:14.560
that make up Flask.

00:14:14.560 --> 00:14:21.360
This portion of Talk Python to Me is brought to you by Sentry. Code breaks, it's a fact of life.

00:14:21.360 --> 00:14:27.200
With Sentry, you can fix it faster. As I've told you all before, we use Sentry on many of our apps

00:14:27.200 --> 00:14:32.480
and APIs here at Talk Python. I recently used Sentry to help me track down one of the weirdest

00:14:32.480 --> 00:14:38.000
bugs I've run into in a long time. Here's what happened. When signing up for our mailing list,

00:14:38.000 --> 00:14:43.440
it would crash under a non-common execution path, like situations where someone was already

00:14:43.440 --> 00:14:49.680
subscribed or entered an invalid email address or something like this. The bizarre part was that our

00:14:49.680 --> 00:14:56.640
logging of that unusual condition itself was crashing. How is it possible for her log to crash?

00:14:56.640 --> 00:15:02.320
It's basically a glorified print statement. Well, Sentry to the rescue. I'm looking at the crash

00:15:02.320 --> 00:15:07.520
report right now, and I see way more information than you'd expect to find in any log statement.

00:15:07.520 --> 00:15:13.040
And because it's production, debuggers are out of the question. I see the traceback, of course,

00:15:13.040 --> 00:15:19.200
but also the browser version, client OS, server OS, server OS version, whether it's production

00:15:19.200 --> 00:15:24.000
or Q&A, the email and name of the person signing up, that's the person who actually experienced

00:15:24.000 --> 00:15:28.800
the crash, dictionaries of data on the call stack, and so much more. What was the problem?

00:15:28.800 --> 00:15:35.920
I initialized the logger with the string info for the level rather than the enumeration dot info,

00:15:35.920 --> 00:15:41.520
which was an integer-based enum. So the logging statement would crash, saying that I could not

00:15:41.520 --> 00:15:49.040
use less than or equal to between strings and ints. Crazy town. But with Sentry, I captured it,

00:15:49.040 --> 00:15:54.160
fixed it, and I even helped the user who experienced that crash. Don't fly blind. Fix

00:15:54.160 --> 00:16:00.160
code faster with Sentry. Create your Sentry account now at talkpython.fm/sentry. And if you

00:16:00.160 --> 00:16:07.040
sign up with the code TALKPYTHON, all capital, no spaces, it's good for two free months of Sentry's

00:16:07.040 --> 00:16:11.600
business plan, which will give you up to 20 times as many monthly events as well as other features.

00:16:11.600 --> 00:16:17.680
That was kind of its purpose when it was created was, hey, Flask has these set of libraries,

00:16:17.680 --> 00:16:23.680
Armin, the original author of them, was not as involved in them anymore. And like the community,

00:16:23.680 --> 00:16:26.960
he wanted the community to be more involved in them. So he created this organization. This was

00:16:26.960 --> 00:16:31.760
right around when I was becoming maintainer, too, eight years ago. And so it's kind of the

00:16:31.760 --> 00:16:39.520
organization that holds those projects and like the team that kind of maintains and sets policies

00:16:39.520 --> 00:16:45.040
and that sort of thing. So Flask is like the most popular library that everybody heard of,

00:16:45.040 --> 00:16:50.000
followed by Jinja and Click. But then we also have Werkzeug, which is the lower level stuff

00:16:50.000 --> 00:16:54.240
below Flask, and then MarkupSafe and It's Dangerous are two little helper libraries

00:16:54.240 --> 00:17:01.040
for those things. And then now we've also got Quart, which is the async version of Flask.

00:17:01.040 --> 00:17:06.640
That's an official Palettes project now, even though it started as just kind of a separate

00:17:06.640 --> 00:17:08.960
thing made by Flask. Yeah, it was an outside thing that

00:17:08.960 --> 00:17:14.000
Philip Jones worked on, and now it's coming closer and closer to being official.

00:17:14.640 --> 00:17:22.000
Yeah. And like we're doing a lot of work on that to kind of try to unify Flask and Quart as much

00:17:22.000 --> 00:17:28.400
as possible. So behind the scenes, they're sharing a lot more code now. Quart, like Werkzeug,

00:17:28.400 --> 00:17:33.520
is all like the low level request response handling for the Flask users. And Quart wasn't

00:17:33.520 --> 00:17:37.840
using that at first because it needed like much more async things. But we've managed to

00:17:38.720 --> 00:17:44.320
develop a lot more things called, the term is called SansIO, like without input/output,

00:17:44.320 --> 00:17:50.160
where we have all like the behavior that's common to both. It doesn't require asyncIO versus

00:17:50.160 --> 00:17:56.560
sync processes shared between Quart and Flask. And eventually we're slowly moving in that

00:17:56.560 --> 00:18:03.040
direction. The idea is that at some point you will not pip install Quart or import Quart anymore.

00:18:03.040 --> 00:18:07.600
You'll just pip install Flask and then do like from Flask import Quart instead.

00:18:07.600 --> 00:18:09.040
Oh, interesting.

00:18:09.040 --> 00:18:12.720
Library as well. Once we get to like a point that we're really comfortable with.

00:18:12.720 --> 00:18:14.320
See, you're shipping one thing.

00:18:14.320 --> 00:18:15.200
Yeah.

00:18:15.200 --> 00:18:19.920
Will you be able to use the same app? You want to say @appget or will that be a...

00:18:19.920 --> 00:18:22.160
Yeah. That's the one thing.

00:18:22.160 --> 00:18:25.760
App F equals Flask and app Q equals Quart?

00:18:25.760 --> 00:18:30.480
Yeah. You'll still have one single app, but you're going to have to pick ahead of time.

00:18:30.480 --> 00:18:35.520
We've tried to think of ways around this, but just the way that Flask is constructed

00:18:36.800 --> 00:18:44.160
means that so much of it is customizable by extensions. And those hook APIs that extensions

00:18:44.160 --> 00:18:48.880
can customize, all the extensions out there expect that they're sync, they're def whatever,

00:18:48.880 --> 00:18:55.680
not async def. And maybe we'll figure out something, but so far we can't figure out a way

00:18:55.680 --> 00:19:01.520
to unify that into a single object. So you're going to have to still pick, I want to be async

00:19:01.520 --> 00:19:03.680
first or sync first. And...

00:19:03.680 --> 00:19:04.320
Yeah.

00:19:04.320 --> 00:19:08.560
Yeah. But at least it'll be in one place. You're not going to have to decide,

00:19:08.560 --> 00:19:12.160
"Oh, I need to know about Quart." You can just look at the Flask docs and see, "Oh,

00:19:12.160 --> 00:19:17.920
I'm going to be doing mostly web requests or video processing or something that's I/O

00:19:17.920 --> 00:19:24.000
intensive. I should pick Quart or I'm just doing the basic API that everybody makes for their

00:19:24.000 --> 00:19:27.680
data science project. I just need Flask." Hopefully it makes it a little easier.

00:19:27.680 --> 00:19:33.280
Yeah. Yeah. Really interesting. Question out in the audience. It sounds like it'll work both

00:19:33.280 --> 00:19:42.560
WWSGI, WSGI and ASGI. Any future where it just goes all async? Not likely in the short term,

00:19:42.560 --> 00:19:43.280
it sounds like, right?

00:19:43.280 --> 00:19:53.040
Yeah. Flask will always be WSGI because it's so tied to how sync processes work. ASGI has

00:19:53.040 --> 00:19:59.920
an ability to... And so if you use Hypercorn, which is a popular ASGI server, which is also

00:19:59.920 --> 00:20:08.000
by Phil from Quart, you can run a WSGI application as an ASGI application. You don't necessarily get

00:20:08.000 --> 00:20:14.400
all the benefits of ASGI, but you can at least run it with that. And in a similar vein, if you're

00:20:14.400 --> 00:20:20.800
using Quart, you can write both sync and async things and they all just work together. And with

00:20:20.800 --> 00:20:26.720
Flask, you can write async stuff in Flask right now. You just don't get the benefits of ASGI's

00:20:26.720 --> 00:20:32.640
connection pooling. So you're still doing one worker per request response, but you can in that

00:20:32.640 --> 00:20:35.200
worker kick off async code.

00:20:35.200 --> 00:20:35.700
Right. Okay.

00:20:35.700 --> 00:20:42.720
Interesting. Yeah. I've done stuff for like a FastAPI. I've written a decorator that it decorates

00:20:42.720 --> 00:20:47.280
both sync and async methods. And it's pretty tricky. There's just basically...

00:20:47.280 --> 00:20:48.240
Yeah.

00:20:48.240 --> 00:20:52.400
It has two wrappers. It goes, "All right. Well, which are you? We're going to actually apply

00:20:52.400 --> 00:20:58.640
that one too." It's tricky to juggle. And then all the plugins, it's got to be a gnarly combination.

00:20:58.640 --> 00:21:05.040
Yeah. Basically, we're just taking it in baby steps and we're hoping as we keep unifying their

00:21:05.040 --> 00:21:12.560
shared code more and more, we can start discovering good patterns for writing an extension that works

00:21:12.560 --> 00:21:18.880
in both, for example, and documenting those and maybe helping some extensions that are popular

00:21:18.880 --> 00:21:19.600
update to that.

00:21:19.600 --> 00:21:20.400
Yeah.

00:21:20.400 --> 00:21:23.200
So it's a slow process, but it's surmountable.

00:21:23.200 --> 00:21:27.760
Yeah. Maybe you get to a point where they're close enough. You're like, "Oh, now it's really

00:21:27.760 --> 00:21:33.520
obvious how these things unify. At the beginning, it wasn't right." Okay. So what's the state?

00:21:33.520 --> 00:21:34.160
How are things?

00:21:34.160 --> 00:21:35.040
What's the state?

00:21:35.040 --> 00:21:41.120
Maybe you start with the big boy flask. And inbox zero is one of the biggest takeaways I've heard.

00:21:41.120 --> 00:21:46.400
Inbox zero. That was... It was actually... That wasn't 2024. That was a 2021 or 22, I think.

00:21:46.400 --> 00:21:48.240
Still look at that.

00:21:48.240 --> 00:21:48.800
Look at that.

00:21:48.800 --> 00:21:53.120
Yeah. We don't have true zero most of the time, although I do get down to it every now and then.

00:21:53.120 --> 00:21:59.280
But I did hit inbox zero. So when I first started maintaining all these libraries,

00:21:59.280 --> 00:22:03.360
I think combined, there was probably over a thousand open issues and PRs.

00:22:03.360 --> 00:22:10.000
And that's a nightmare if you know all the code. If you were the author, but I was not the author

00:22:10.000 --> 00:22:16.000
of this code. So I was both unfamiliar with the internals of all these libraries and had to keep

00:22:16.000 --> 00:22:20.400
track of all these issues. So I was learning libraries, learning how to be a maintainer,

00:22:20.400 --> 00:22:25.760
and trying to keep track of all these requests going back and forth and computing PRs and all

00:22:25.760 --> 00:22:31.920
that sort of stuff. So early on, it was a goal I identified of, "I just need to make this manageable."

00:22:31.920 --> 00:22:35.680
And once I got there, it's become a lot easier. Once you're at inbox zero,

00:22:35.680 --> 00:22:37.600
it's a lot easier to keep it hovering around there.

00:22:37.600 --> 00:22:42.560
It is. I'm really feeling... I'm feeling rough about my true inbox. I'm looking at five or

00:22:42.560 --> 00:22:46.240
six persistent emails. I really got to get back to you, but it's a whole different deal than if

00:22:46.240 --> 00:22:52.640
it's 10,000. Did you declare any sort of bankruptcy equivalent of inbox bank, where you just go like,

00:22:52.640 --> 00:22:56.560
"Archive a good... If it's two years or older, I'm just going to archive it and it'll come back

00:22:56.560 --> 00:23:00.400
if it matters." Or did you literally go through every one and deal with it?

00:23:00.400 --> 00:23:05.920
I did go through every one individually. I didn't just blanket say, "Everything older than two years

00:23:05.920 --> 00:23:13.680
is closed." But I did treat things as... I don't like stale bots. So we don't run a stale bot.

00:23:13.680 --> 00:23:15.200
Yeah, I don't like those either.

00:23:15.200 --> 00:23:15.700
Yeah.

00:23:15.700 --> 00:23:24.240
I don't object to things being closed as the resolution versus fixed, but I want somebody to

00:23:24.240 --> 00:23:32.320
be making that decision and put a reason behind it. So yeah, I tried going through every single

00:23:32.320 --> 00:23:38.480
issue. Basically, my workflow is just every single day, pick an issue, work on it. Pick another one,

00:23:38.480 --> 00:23:44.400
okay, spend a couple hours, wait until the next day. And yeah, just had to keep making calls on

00:23:44.400 --> 00:23:44.900
them.

00:23:44.900 --> 00:23:48.400
Yeah. You're like, "All right, two come in a day. I'm going to do 20 a day until

00:23:48.400 --> 00:23:50.080
I catch up." Or something like that, right?

00:23:50.080 --> 00:23:57.520
There was a lot of stuff also where it had just been sitting open for years and nobody had

00:23:57.520 --> 00:24:03.040
really commented on it besides... Or maybe the most people had commented on it was saying, "Me

00:24:03.040 --> 00:24:11.040
too." But they hadn't actually moved the discussion forward. And it would be nice if open source,

00:24:11.040 --> 00:24:16.480
if more people contribute. I don't blame anybody for not contributing or being a contributor,

00:24:16.480 --> 00:24:20.720
but I would love to attract more long-term contributors and stuff. But that's the way

00:24:20.720 --> 00:24:24.800
it starts is you need to help people make calls on stuff, evaluate things, right?

00:24:25.600 --> 00:24:30.800
So instead of saying, "Me too," start looking into it and saying, "Okay, me too. And okay,

00:24:30.800 --> 00:24:34.560
here's all the issues that might come up when we do this." Or, "I looked at the code base and

00:24:34.560 --> 00:24:35.360
we could do it this way."

00:24:35.360 --> 00:24:36.720
Right, exactly.

00:24:36.720 --> 00:24:37.280
People weren't doing that.

00:24:37.280 --> 00:24:41.760
I also want it, but I want it and I think here's a path forward or here's a prototype.

00:24:41.760 --> 00:24:47.520
Yeah. They have to advance the conversation. And that wasn't happening in a lot of the old

00:24:47.520 --> 00:24:52.160
issues. So I did kind of... I didn't outright just close old issues, but I did say, "Okay,

00:24:52.160 --> 00:24:56.800
this thing is old and it hasn't seen any movement." There's a lot of things also where it's like,

00:24:56.800 --> 00:25:03.200
yeah, it's a reasonable request, but is it necessary for Flask? Does it belong in Flask

00:25:03.200 --> 00:25:09.280
or in extension? This is something I'm trying to figure out. I want to be writing documentation

00:25:09.280 --> 00:25:14.240
for other maintainers on the team so they understand how I did this sort of stuff.

00:25:14.240 --> 00:25:20.000
This is the trickiest problem. I don't know how I'm going to document yet, but I got a sense over

00:25:20.000 --> 00:25:25.920
time of just being able to really quickly make a call of yes or no on things. I can look at an

00:25:25.920 --> 00:25:33.200
issue and say, "Okay, no, this doesn't belong in for X, Y, Z or something." Because Flask,

00:25:33.200 --> 00:25:39.680
like all the libraries in Palettes have very focused core goal of them. And they try to be

00:25:39.680 --> 00:25:44.000
extensible to some degree. So a lot of the things you can do by picking extension. So really what I

00:25:44.000 --> 00:25:49.040
try to look for is I need this thing in Flask because it is literally not possible to write

00:25:49.040 --> 00:25:52.800
an extension to do this without being able to hook into it this way or something like that.

00:25:52.800 --> 00:25:58.960
Oh, that makes sense. Sure. Part of the Zen of Flask is that it's minimal. And then you build

00:25:58.960 --> 00:26:03.280
around it. You pick your database, you pick your whatever, and then go from there. Yeah.

00:26:03.280 --> 00:26:10.160
Yeah. Cool. All right. Well, three open issues is incredible. As in 67,000 stars,

00:26:10.160 --> 00:26:14.400
that's also pretty incredible. Let's see. So you joined each one of these different ones. You

00:26:14.400 --> 00:26:19.360
gave a sense of how many downloads. So for Flask, maybe these numbers change, but I think it hasn't

00:26:19.360 --> 00:26:25.760
been but a couple of months. It's around 75 million downloads a month. That's a hefty chunk of user

00:26:25.760 --> 00:26:33.840
base there. Yeah. I occasionally look at pypistats.org or pepi.tech are the two websites that

00:26:33.840 --> 00:26:43.120
track these numbers. So I can look at the current one. Flask is downloads in the last day, 3.15

00:26:43.120 --> 00:26:49.840
million downloads in the last month, 66 million. OK. It's not what people are telling. Yeah. Look

00:26:49.840 --> 00:26:55.040
at that. Look at that. Yeah. Yeah. And there's like sometimes there's like random. You can see

00:26:55.040 --> 00:27:00.240
in this graph here, like there's just random times where it just suddenly drops by like a

00:27:00.240 --> 00:27:05.280
couple of hundred thousand or right or rises. Yeah. Like if you look at the left half of this

00:27:05.280 --> 00:27:10.960
graph, it's higher. But like I think that's just because like big services like come in and out

00:27:10.960 --> 00:27:17.600
of existence or like do an upgrade or whatever. So there are some very big systems out there that

00:27:17.600 --> 00:27:23.280
are just downloading, doing a ton of downloads. Yeah, it's pretty wild. You'll probably also spot

00:27:23.280 --> 00:27:29.760
some PyPI outages. Well, I imagine that got nothing to do. And like they also change the

00:27:29.760 --> 00:27:36.240
way they report over time, like pip and stuff change how they report statistics. So I usually

00:27:36.240 --> 00:27:41.200
just look at like the overall numbers. Pretty consistent. Yeah. Try not to look at it too

00:27:41.200 --> 00:27:45.840
often. Like I said at the beginning, like it's a it's a big number to know that like this many

00:27:45.840 --> 00:27:50.320
people are about to download any change you make. Yeah. And when I think about these kinds of

00:27:50.320 --> 00:27:56.080
numbers, it's not just if you make a change to Flask, then it affects this many people. But

00:27:56.080 --> 00:28:02.000
these are themselves applications using this, each of which has many, many, many users potentially.

00:28:02.000 --> 00:28:07.360
So there's a multiplier on top of this, right? Yeah. And yeah, that's been that's been

00:28:07.360 --> 00:28:12.160
difficult. That's one of the other state of Flask. That's the other half of the state of Flask. It's

00:28:12.160 --> 00:28:19.280
like we've been making a lot of progress, but like this amount of responsibility rests pretty heavily

00:28:19.280 --> 00:28:24.800
on it. It's like it can be pretty stressful. And you did mention a baby and being potentially tired

00:28:24.800 --> 00:28:29.840
in the future and stuff like that as well. Yeah, absolutely. But like combined, you know,

00:28:29.840 --> 00:28:34.480
these numbers combined with the thought that anything I do could break a bunch of people and

00:28:34.480 --> 00:28:39.280
get them to complain at me or people will complain to me even if I don't break a ton of people. And

00:28:39.280 --> 00:28:44.880
just kind of like the ever present notion of we are not at inbox zero on some of the projects

00:28:44.880 --> 00:28:49.520
and stuff. So there is still a lot of open stuff. It's. Yeah, it's a lot of stress for me. And it's

00:28:49.520 --> 00:28:55.120
been I've like suffered burnout a few times from her year for the last four years or so.

00:28:55.120 --> 00:28:59.120
Oh, man, that's rough. Are you getting some support from the other people at the org and

00:28:59.120 --> 00:29:04.480
potentially from the outside? Yeah, I I there is there are other people on the team. So it's not

00:29:04.480 --> 00:29:09.360
like we're a bus factor of one in the sense of like if I was not here for some reason,

00:29:09.360 --> 00:29:15.200
other people would have access to these things and could keep them going. But the reality is

00:29:15.200 --> 00:29:21.200
not to downplay all the work that they do in the community and when they they are working on code.

00:29:21.200 --> 00:29:27.280
But like I do probably 90 percent of the code and like the decision making and all that sort of

00:29:27.280 --> 00:29:32.960
stuff. So it would definitely be a very different project if I wasn't around. It would at minimum

00:29:32.960 --> 00:29:39.200
be a scramble. Right. Like when Guido stepped down, like, wait a minute. Yeah. What now? Yeah.

00:29:39.200 --> 00:29:44.720
So like I so this is what I've been like trying to work for a long time because I've kind of

00:29:44.720 --> 00:29:51.440
always recognized that I've been kind of the not limiting factor, but like I'm like the point of

00:29:51.440 --> 00:29:57.840
failure in this thing. And so I've been trying to grow the team and trying to make our processes

00:29:57.840 --> 00:30:04.080
more automated, you know, try. And then now what I'm trying to do is because I know I have this

00:30:04.080 --> 00:30:10.400
hard deadline in January when I'm going to have less time is I'm trying to document how to do

00:30:10.400 --> 00:30:14.560
what I've learned to do, like how to be a maintainer is something we don't really have a

00:30:14.560 --> 00:30:20.480
lot of. It feels like is we have we have a contributing guide, right? Or we have user

00:30:20.480 --> 00:30:25.280
documentation or a developer guide, like how to use Flask, but we don't have a how to maintain

00:30:25.280 --> 00:30:31.280
Flask documentation. Yeah. It's kind of missing from the community in general. Yeah. I presume

00:30:31.280 --> 00:30:35.200
that'd be out in public. People interested could check it out whenever that gets written. Oh,

00:30:35.200 --> 00:30:39.200
yeah. It's not like a private it's not going to be a private thing, but yeah, of course it's not.

00:30:39.200 --> 00:30:43.440
It's not ready yet, but it's something I'm actively working on this, like identifying,

00:30:43.440 --> 00:30:50.000
like all the stuff I've accumulated in my head and what I've learned how to do or decisions I've

00:30:50.000 --> 00:30:55.120
made or like services we use, like just the fact that, oh, you know, we're part of the PSF.

00:30:55.120 --> 00:31:02.160
This is how you contact the PSF. Yeah. It's not written down. Yeah, exactly. Or like that we're

00:31:02.160 --> 00:31:09.440
part of Tidelift and, you know, these other donation sources. Yeah. Also, like stuff like

00:31:09.440 --> 00:31:15.200
how do I make a decision on whether to keep something closed or open or when is it time to

00:31:15.200 --> 00:31:21.200
make a new release or what is our version policy or our support policy or our security policy? Like

00:31:21.200 --> 00:31:26.800
a lot of these things are under documented right now if they're documented at all. And so that's

00:31:26.800 --> 00:31:32.320
kind of my goal for the rest of this year is to like make palettes more sustainable, regardless of

00:31:32.320 --> 00:31:39.760
how much availability I have. Maybe a little more systematized, maybe a little bit. Yeah. So before

00:31:39.760 --> 00:31:45.520
we move off of PyPI stats, Gusra has an interesting meta question. Is PyPI stats built on Flask

00:31:45.520 --> 00:31:52.320
itself? Do you have any idea? I have no idea. I know they're open source. Oh yeah. Okay. So maybe

00:31:52.320 --> 00:31:56.000
you could tell. I was going to say there's not like a header or something that Flask sends. So

00:31:56.000 --> 00:32:02.880
yeah. I can't find it. Yeah. We don't know. It is open source. Oh, here we go. Here we go.

00:32:02.880 --> 00:32:07.600
Have we got a requirement? We've got pyproject.toml. Oh yeah. It's Flask.

00:32:08.240 --> 00:32:14.800
There you have it. I love that. There we go. Beautiful. It's very rewarding every time I find

00:32:14.800 --> 00:32:19.600
out a new place that like just decided to use Flask and has been using it and it's just completely

00:32:19.600 --> 00:32:24.880
behind the scenes and you can't tell like nothing's like it's all just working. Yeah. But I love going

00:32:24.880 --> 00:32:28.560
to like conferences for that reason too. Cause so many people come up to me and like say like,

00:32:28.560 --> 00:32:38.000
oh yeah, we use Flask to like run the Mars Rover or somebody, one of the people giving a talk

00:32:38.320 --> 00:32:46.640
at FlaskCon was like, my company writes the like energy management software for this conference

00:32:46.640 --> 00:32:53.200
center and it's in Flask. It's very fun to learn all those new uses. Have you ever gotten onto the

00:32:53.200 --> 00:32:58.240
JPL? I know it's like a blower's drive. That'd be fun, right? To go out there and actually see the

00:32:58.240 --> 00:33:02.960
Flask. I would see it. This is what runs in the Rover and the helicopter. Awesome. All right. So

00:33:03.520 --> 00:33:08.160
that's Flask. What one do you want to talk about next? Next on my tab list, I got Jinja,

00:33:08.160 --> 00:33:12.960
we can go wherever you want. So maybe that a good foundation? Yeah, we did like Flask and

00:33:12.960 --> 00:33:18.880
Vericsoig are pretty tied because most of the stuff that people report to Flask is actually

00:33:18.880 --> 00:33:24.000
an issue with one of the other libraries that Flask is using. And most often that's with Vericsoig.

00:33:24.000 --> 00:33:28.960
So you can see we're not at inbox zero, we're at inbox nine right now. That's incredible. You know,

00:33:28.960 --> 00:33:33.280
maybe like I asked you to explain palettes like Vericsoig, you know, that's probably not how

00:33:33.280 --> 00:33:38.880
English speaking folks would say that. Werkzeug or Werkzug or something. Right. But Armen,

00:33:38.880 --> 00:33:43.040
I don't know if you're the creator of this, is German or Austrian but speaks German. And so

00:33:43.040 --> 00:33:46.560
that's the German pronunciation. And hence, that's why we're saying it that way. Right?

00:33:46.560 --> 00:33:50.080
That's my best approximation. I'm sure I'm doing it wrong also.

00:33:50.080 --> 00:33:51.440
Pretty close.

00:33:51.440 --> 00:33:56.720
Yeah. It literally is like, it means like work thing, which is like tool.

00:33:56.720 --> 00:34:02.080
Yeah. Yeah. Basically tool. Yeah. It's like tools like work, your carpentry tools or yes,

00:34:02.080 --> 00:34:03.520
handyman tools type thing. Yeah.

00:34:03.520 --> 00:34:11.200
Yeah. But this was written before Flask existed. And I think it was written more when like WSGI

00:34:11.200 --> 00:34:16.560
was becoming a spec or had just become a spec because it is just a bunch of utilities for

00:34:16.560 --> 00:34:23.200
doing HTTP header parsing, doing all the low level WSGI environment management,

00:34:24.480 --> 00:34:29.200
wrapping that information in request and response objects. So you can kind of work with them a

00:34:29.200 --> 00:34:37.680
little easier. So it's all like the underlying tools that you need to build Flask. There's also

00:34:37.680 --> 00:34:43.440
like the whole routing system, you know, so you can in Flask, you just do at app dot route. But

00:34:43.440 --> 00:34:49.200
behind the scenes, what that's doing is it's adding it to a route map that Werkzeug defines.

00:34:49.200 --> 00:34:53.520
And that defines like, here's how we actually like collect that and like turn it into a bunch

00:34:53.520 --> 00:34:57.920
of rules that we can match URLs against. And there's other things in there as well. The

00:34:57.920 --> 00:35:02.640
reloader, the debugger, the dev server. Yeah. So one of the updates you gave on

00:35:02.640 --> 00:35:10.480
Werkzeug is a performance improvement by way of getting rid of the stir bytes duopoly.

00:35:10.480 --> 00:35:17.840
Yeah. I've been doing a lot in Werkzeug. So that one and the URL lib one that we'll talk about

00:35:17.840 --> 00:35:22.080
were two big things. But basically like this library, like I just described it,

00:35:22.080 --> 00:35:26.240
it's like just a huge collection of tools and little utility functions.

00:35:26.240 --> 00:35:33.600
And there's a history there because when all these libraries first started, Python 3 didn't

00:35:33.600 --> 00:35:38.720
exist or barely existed. And so everything was written originally for Python 2 where

00:35:38.720 --> 00:35:46.160
strings and bytes worked a lot differently. It was one of the primary break-in changes.

00:35:46.160 --> 00:35:50.880
There were other changes, but that was the long, the one that people really had a long live

00:35:50.880 --> 00:35:55.440
bug tracking. If it's different syntax, you just change the syntax, but if it's

00:35:55.440 --> 00:35:58.000
subtle behavior changes, then trouble looms.

00:35:58.000 --> 00:36:05.040
Yeah. And so, yeah, in Python 2, it was much easier to like, well not, yeah, it was easier

00:36:05.040 --> 00:36:10.160
to treat like incoming data as bytes, but like treat it as a string. There wasn't like as big

00:36:10.160 --> 00:36:15.440
a distinction between strings and bytes, which was convenient in some ways, especially for like

00:36:15.440 --> 00:36:18.960
low level tools like HTTP, where you just work in ASCII bytes.

00:36:19.680 --> 00:36:23.600
Say if you like ASCII, it's probably fine. If you don't like ASCII, you might not like it so much.

00:36:23.600 --> 00:36:29.840
Yeah. But it also like caused, like, I first learned Python 3, so I like, I don't have a

00:36:29.840 --> 00:36:34.720
difference on this, but I like Python 3's distinction. I think it's much better to

00:36:34.720 --> 00:36:35.920
have that distinction.

00:36:35.920 --> 00:36:37.120
Yeah. You and me both.

00:36:37.120 --> 00:36:41.680
Strings and bytes. But at the time, like when it was first happening, it wasn't as clear cut.

00:36:41.680 --> 00:36:46.880
Like, oh yeah, this is better or this is easier because you had to support both. And so when

00:36:46.880 --> 00:36:52.000
Python 3 came out and started getting like more momentum, all these libraries tacked on

00:36:52.000 --> 00:36:57.760
support for both Python 2 and Python 3, which among other things meant that you had to

00:36:57.760 --> 00:37:04.560
now check for like whether you were getting strings or bytes everywhere. Because you might

00:37:04.560 --> 00:37:07.760
be in Python 2 land where you're getting bytes, or you might be in Python 3 land where you're

00:37:07.760 --> 00:37:13.040
getting strings and need to like do other conversions. There, so it was especially bad

00:37:13.040 --> 00:37:18.480
because it's a collection of like kind of independent utility functions. Some functions

00:37:18.480 --> 00:37:23.280
build on each other, but every function could potentially be imported and used for its own

00:37:23.280 --> 00:37:28.080
little piece of functionality. And so every single function needed to check all its arguments

00:37:28.080 --> 00:37:33.200
for like my string or bytes. Even if most of the time, especially nowadays, people aren't

00:37:33.200 --> 00:37:37.120
using Verixoic directly and all these tools. They're using Flask, which just does the right

00:37:37.120 --> 00:37:41.520
thing from the get-go, which means all those intermediate checks on the way are totally

00:37:41.520 --> 00:37:45.040
unnecessary. Because you already knew from like the first function that started calling.

00:37:45.040 --> 00:37:45.280
Right.

00:37:45.280 --> 00:37:45.680
It's already handled.

00:37:45.680 --> 00:37:48.320
Testing 10 times for the same thing down the process.

00:37:48.320 --> 00:37:53.920
Right. And this was just pervasive throughout. Verixoic was just everywhere with all these

00:37:53.920 --> 00:37:58.800
unnecessary checks. And it made the code more complex to maintain, reason about,

00:37:58.800 --> 00:38:05.840
made the execution slower. There's kind of another thing going on at the same time, which is like

00:38:05.840 --> 00:38:10.160
we had, because we could support, like because we were working with bytes in a lot of places,

00:38:10.880 --> 00:38:15.600
there was also like a lot more support for, well, maybe the data is encoded in this encoding or this

00:38:15.600 --> 00:38:21.600
one. But nowadays everybody, like I looked at, before I made this decision, I looked at stats.

00:38:21.600 --> 00:38:29.200
Everybody, 99.5% of people, web applications on the web right now are using UTF-8. So they're

00:38:29.200 --> 00:38:32.800
never dealing with their encodings. And UTF-8 can encode everything.

00:38:32.800 --> 00:38:33.520
Yeah.

00:38:33.520 --> 00:38:38.960
And so like Verixoic was doing all these things about letting you pass encodings all over the

00:38:38.960 --> 00:38:45.120
place and switch between things. And that was also complexity. So I finally decided, okay,

00:38:45.120 --> 00:38:50.800
I had heard some anecdotes as well from people who had switched from using Python 2 to Python 3,

00:38:50.800 --> 00:38:56.720
or had stuck with Python 2 and old versions of Verixoic because they had noticed a significant

00:38:56.720 --> 00:39:00.880
performance difference in the first versions of Verixoic that added that 2 and 3 compatibility.

00:39:00.880 --> 00:39:05.680
And so I figured, okay, I'm going to get a similar speed up if I remove that now,

00:39:05.680 --> 00:39:12.080
now that we don't support Python 2 at all. That was very complicated. I basically just had to

00:39:12.080 --> 00:39:16.640
go through every single function and start removing it, run all the tests, see what failed,

00:39:16.640 --> 00:39:20.800
pick another function to keep working on and just slowly, slowly pull it all apart.

00:39:20.800 --> 00:39:27.760
But I did end up with, so now Verixoic just supports strings everywhere, except in the

00:39:27.760 --> 00:39:33.920
very few places where it works directly with the request and response data where it handles bytes.

00:39:33.920 --> 00:39:35.840
Like multi-part form file.

00:39:35.840 --> 00:39:40.640
Yeah. When you first get the request in and it's just the raw body that you might turn into JSON

00:39:40.640 --> 00:39:47.360
or form data, et cetera. Or when you're finally producing the response and taking either file

00:39:47.360 --> 00:39:53.760
data, which is binary or string data and turning it into the bytes. That's the only place now where

00:39:53.760 --> 00:40:00.160
it deals with bytes. Everywhere else is strings. And the boundary there is always UTF-8. And if

00:40:00.160 --> 00:40:04.800
UTF-8 isn't your thing, we're not preventing you from using other things. It just means that when

00:40:04.800 --> 00:40:12.000
you're at those boundaries, you can take the bytes directly and work with them. Surprisingly,

00:40:12.000 --> 00:40:18.080
this was a huge, massive change and I have not gotten any bug reports about it.

00:40:18.080 --> 00:40:19.040
Wow.

00:40:19.040 --> 00:40:28.080
I was stressing so much about, okay, this is huge. We tested it first and made beta releases and

00:40:28.080 --> 00:40:33.280
everything, but those go to almost no attempt. Talk Python to Me is partially supported by our

00:40:33.280 --> 00:40:38.720
training courses. Do you want to learn Python, but you can't bear to subscribe to yet another service?

00:40:38.720 --> 00:40:43.520
At Talk Python Training, we hate subscriptions too. That's why our course bundle gives you full

00:40:43.520 --> 00:40:48.880
access to the entire library of courses for just one fair price. That's right. With the everything

00:40:48.880 --> 00:40:55.120
bundle, you save over 80% off the full price of our courses and you own them all forever.

00:40:55.120 --> 00:40:59.600
That includes the courses published at the time of purchase, as well as courses released within

00:40:59.600 --> 00:41:06.400
about a year after the bundle. Stop subscribing and start learning at talkpython.fm/everything.

00:41:06.400 --> 00:41:11.760
All right. I can't leave the house for the next week. Publish.

00:41:11.760 --> 00:41:16.240
Yeah. No, like you joke, but like, seriously, when I hit the publish button or when I used to hit the

00:41:16.240 --> 00:41:21.280
publish button, I would be like, I want to go for a walk now because I just did a ton of work and I

00:41:21.280 --> 00:41:26.400
just want to clear my head. But oh God, then an hour from now when I get back, what is my inbox

00:41:26.400 --> 00:41:33.440
going to look like? Yeah. Yeah. That's great. You know, you talk another part of your presentation

00:41:33.440 --> 00:41:40.960
at FlaskCon was about project level stuff. And you also talked about the systemization type of

00:41:40.960 --> 00:41:45.200
thing you're looking for. So one of the things you switched to is the trusted publishers. That's kind

00:41:45.200 --> 00:41:51.520
of cool, right? Yeah. So I mentioned a little bit about like when we were talking about, sorry,

00:41:51.520 --> 00:41:56.400
when we were talking about pinning requirements, I was saying, oh, you know, it makes it a lot

00:41:56.400 --> 00:42:02.320
easier for every contributor to work on things at Sprint if every single environment is the same.

00:42:02.320 --> 00:42:10.640
And so kind of on a meta level, there's a lot of like different tools and configurations and

00:42:10.640 --> 00:42:17.200
workflows we use across projects, but they've kind of been developed over time as I've learned them.

00:42:17.200 --> 00:42:23.520
And so I've been doing work on like a meta level. So every project now, if you go look at Flask

00:42:23.520 --> 00:42:28.000
and Ferg, so again, Jinja and you clone all the repos, all the repos look exactly the same. They

00:42:28.000 --> 00:42:33.360
all have the same files, the same directory layout, same tool configurations, et cetera.

00:42:33.360 --> 00:42:38.080
Because just like it should be easy for every contributor to get the same environment,

00:42:38.080 --> 00:42:41.760
it should be easy for anybody who's used to contributing to Flask to go over to VeriXoic

00:42:41.760 --> 00:42:47.520
and be just as comfortable in that project. It's the Flask way and it all goes the same, right?

00:42:47.520 --> 00:42:54.480
So yeah, like trusted publishing, that was another big part of this was like making workflows. So we

00:42:54.480 --> 00:43:00.880
have a workflow for running tests, for example. But publishing used to be a very manual process

00:43:00.880 --> 00:43:06.160
and it's evolved over the years too, because we were on Travis before and then we needed to make

00:43:06.160 --> 00:43:12.640
like Windows builds for Markup Safe, which has wheels. So we were on AppVeyor also.

00:43:12.640 --> 00:43:18.720
Then Travis went away and stuff and GitHub Actions became more. But that was all for tests.

00:43:18.720 --> 00:43:24.960
Like for building, we basically, when we wanted to make a new release, it was way harder in the

00:43:24.960 --> 00:43:31.120
past, which is why releases happened less often, because I would have to say like, "Okay, I'm ready.

00:43:31.120 --> 00:43:35.680
Do all the little bookkeeping stuff to set the release version and the release date and

00:43:35.680 --> 00:43:41.280
everything. Now I have to go get my Mac, get my Windows machine, get my Linux machine, make the

00:43:41.280 --> 00:43:47.680
builds on all of them, then manually consolidate them, upload them manually to PyPI, et cetera,

00:43:47.680 --> 00:43:53.680
and make sure that all worked." So what I have now is I have a standard publish workflow on every

00:43:53.680 --> 00:43:58.960
single project. It works exactly the same way. And you make a PR so that you can see all the

00:43:58.960 --> 00:44:03.840
tests run. You make a PR that just does that version bump and the date, says the release date.

00:44:03.840 --> 00:44:08.640
You watch all the tests pass and then you push a tag before you merge. You push the release tag,

00:44:08.640 --> 00:44:17.360
and that kicks off the build workflow. So we run our build. We do SLSA or Salsa out of station.

00:44:17.360 --> 00:44:22.800
Say like these builds are associated with these commits in Git and were built by these workers.

00:44:22.800 --> 00:44:28.160
It's kind of like a supply chain level thing. And then we automatically, it will collect all

00:44:28.160 --> 00:44:32.640
that stuff, show you here's the release, like here's a draft release for this. Here are all

00:44:32.640 --> 00:44:36.720
the, like you have one more opportunity to look at the files and then a maintainer can go in and

00:44:36.720 --> 00:44:43.040
click publish in GitHub's UI. And that will kick off like, okay, maintainer said everything's good.

00:44:43.040 --> 00:44:49.600
We're just going to upload it now. And that's all automated. We're using the trusted publishing

00:44:49.600 --> 00:44:57.200
workflow between PyPI and GitHub. So I no longer have to have my password stored locally for PyPI

00:44:57.200 --> 00:45:02.720
or have like tokens made for each project. All the authentication happens between GitHub and

00:45:02.720 --> 00:45:08.000
PyPI automatically and securely. It's pretty cool. If you go look up like trusted publishing on

00:45:08.000 --> 00:45:14.000
PyPI has like a blog or documentation that explains it. But it is really, really convenient.

00:45:14.000 --> 00:45:17.840
And it makes like this whole workflow means that whenever I want to make a new release,

00:45:17.840 --> 00:45:23.360
I just make a regular PR, push a tag and then see everything pass and say, yes, we're good.

00:45:23.360 --> 00:45:29.120
So I just basically have to push three buttons now. It's a lot easier to just make more regular

00:45:29.120 --> 00:45:33.840
releases, like even bug fix releases. I was always willing to make them fast because it was so much

00:45:33.840 --> 00:45:37.600
work. Well, if it's a matter of just pushing, pushing a commit and then saying, okay,

00:45:37.600 --> 00:45:42.720
you're way more likely to quickly ship fixes and ship smaller releases and all sorts of stuff.

00:45:42.720 --> 00:45:47.920
It's really good. And you don't have the whole supply chain problem of your machine somehow

00:45:47.920 --> 00:45:53.600
got hacked. But then now when you do your build, somebody's injected something gnarly into the

00:45:53.600 --> 00:45:58.240
wheel, right? Because it never goes through you. It just goes from GitHub directly to PyPI through

00:45:58.240 --> 00:46:04.960
GitHub actions, right? Yeah. And GitHub added their own. So the SLSA out of station that

00:46:04.960 --> 00:46:11.840
I was talking about, if you scroll down on this screen, you can see that multiple.intodo.jsonl.

00:46:11.840 --> 00:46:16.800
If you click on it, it's just a big blob of text, but that's basically describing here are these

00:46:16.800 --> 00:46:23.760
wheel files, like those wheel files and S dist files. And here's like signatures and about like

00:46:23.760 --> 00:46:29.680
the GitHub environment that built this and everything. GitHub itself is adding that similar

00:46:29.680 --> 00:46:35.760
sort of out of station. And then PyPI is also adding more out of stations. It's not out yet

00:46:35.760 --> 00:46:40.160
though, but I'm sure I will be testing it once they're starting it and they release it in beta.

00:46:40.160 --> 00:46:45.440
So being able to attest that like our build environment was consistent with what the

00:46:45.440 --> 00:46:51.760
artifacts you're seeing and like the upload along the way was secured and like it is gaining more,

00:46:51.760 --> 00:46:55.600
like that's more gaining more attention nowadays and importance. Yeah, that's really-

00:46:55.600 --> 00:46:58.960
Trying to keep up with it all. It's excellent. It also makes it easier to

00:46:58.960 --> 00:47:03.680
hand it over to someone else and trust that they're doing it right. Not like something,

00:47:03.680 --> 00:47:07.760
they only like wheel seven, so you got a weird wheel or something now.

00:47:07.760 --> 00:47:12.400
Yeah. I mean, this, yeah, this line of silence like was such an impediment to finding other

00:47:12.400 --> 00:47:17.040
maintainers because you had to teach like, I think I probably had some document that explained how to

00:47:17.040 --> 00:47:22.320
do this build before, like all the steps I went through, but it was like, it was so complicated.

00:47:22.320 --> 00:47:25.760
And like, yeah, if somebody else wanted to make a release, I would have to make sure they did

00:47:25.760 --> 00:47:30.720
everything correctly. I had just gotten used to it. It was like rote for me, but it was a lot of

00:47:30.720 --> 00:47:36.320
steps. Now it's just anybody does the same, you know, make a PR, push a button. Everything else

00:47:36.320 --> 00:47:41.040
is done for them. Yeah. Yeah. That's awesome. All right. So the two takeaways that I got from

00:47:41.040 --> 00:47:48.160
Veric'soic's update was this dropping of the two to three juggling made it 50% faster for request

00:47:48.160 --> 00:47:55.120
response and URL lib is no longer URL lib-ish. Yeah. Yeah. So that was the other part of it.

00:47:55.120 --> 00:48:02.240
If we're going back to Vericoic, so we removed the string bytes, testing all over the place.

00:48:02.240 --> 00:48:08.240
And Vericoic, this was again, historically because of like Python two versus Python three

00:48:08.240 --> 00:48:12.640
differences and then compatibility and stuff. But another of the changes in Python three was

00:48:12.640 --> 00:48:18.400
URL lib. In Python two, there was like URL lib and URL lib two. And that's why there's also the

00:48:18.400 --> 00:48:25.680
project URL lib three. But Python three kind of consolidated that back into URL lib with sub

00:48:25.680 --> 00:48:31.920
packages instead. So it kind of changed the interfaces and where everything was. So at the

00:48:31.920 --> 00:48:37.920
time it made sense for Vericoic to just copy that code into our own code base and then make

00:48:37.920 --> 00:48:43.840
our own tweaks to it to be compatible with everything. But what that ended up meaning

00:48:43.840 --> 00:48:50.800
was we had an entire copy of URL lib with our own tweaks in our code base. And then we weren't

00:48:50.800 --> 00:48:56.880
keeping up with changes. So like CPython has like a hundred different core devs on it. I mean,

00:48:56.880 --> 00:49:02.160
they're not all paying attention to URL lib, but they're making regular security updates or just

00:49:02.160 --> 00:49:05.440
performance improvements and that sort of stuff. And we're not getting any of those benefits

00:49:05.440 --> 00:49:08.960
because we now have like this vendored copy that we've changed ourselves. We couldn't even bring

00:49:08.960 --> 00:49:14.560
in the changes. And just like the string bytes everywhere, having that our own copy of that

00:49:14.560 --> 00:49:20.640
really complex low level code made it harder to reason about the code and maintain it. And all

00:49:20.640 --> 00:49:25.040
this stuff is kind of like, it's not the essential parts of Vericoic. Vericoic is like trying to be

00:49:25.040 --> 00:49:29.600
the WSGI utilities and stuff. It's not trying to be like every single possible, like it's not

00:49:29.600 --> 00:49:34.240
trying to, we don't need to make our own URL lib utility and everything to be Vericoic. So that

00:49:34.240 --> 00:49:38.240
was another big one where I identified like, okay, this is just a lot of complexity. I didn't

00:49:38.240 --> 00:49:43.360
actually expect this to be a performance improvement, but when I actually went through

00:49:43.360 --> 00:49:51.040
and removed URL lib and our own copy and replaced it with Python's version, we got like a 30% speed

00:49:51.040 --> 00:49:56.320
up just on our own. So the combined of those two big changes was like about a 50% speed up in our

00:49:56.320 --> 00:50:03.680
request response. It turns out that the Python's implementation of all this was just faster than

00:50:03.680 --> 00:50:09.840
ours and it still does all the same things. Yeah. So now you don't have to mess with it.

00:50:09.840 --> 00:50:12.320
You get it for free. Yeah, exactly. Like everyone else.

00:50:12.320 --> 00:50:19.840
A lot of these changes, a lot of the changes in all the libraries are stuff where I've been,

00:50:19.840 --> 00:50:25.360
like I said, I wasn't the original author of this stuff. So I've had to learn the code bases. I've

00:50:25.360 --> 00:50:29.920
had to dig into them and say like, what is written here? Why is it written this way? How is it all

00:50:29.920 --> 00:50:37.840
related? And along the way, I just keep identifying like, okay, this is the actual purpose of this

00:50:37.840 --> 00:50:43.440
library. Does this fit into that purpose or can we be doing something different? And so kind of

00:50:43.440 --> 00:50:50.720
trying to like slim down the libraries and like focus, tighten up the focus on their purposes more.

00:50:50.720 --> 00:50:54.560
Right. If there's parts that are, it needs to work, but it's not its purpose, maybe that can

00:50:54.560 --> 00:51:01.280
come from somewhere else. Yeah. Yeah. All right. Yeah, absolutely. We've got about 10 more minutes

00:51:01.280 --> 00:51:06.800
tops probably. So what else do we want to cover to give us the stage?

00:51:06.800 --> 00:51:14.560
I'll mention Jinja and Click really briefly because these two libraries are also huge. They're used

00:51:14.560 --> 00:51:20.560
everywhere. Downloaded a ton. Jinja is a templating library. You write template files and then you can

00:51:20.560 --> 00:51:28.160
render them with variables to produce output. HTML, but also like text files or all sorts of stuff.

00:51:28.160 --> 00:51:35.840
Yeah. I think people pigeonhole Jinja2 much. They think, okay, well I'm generating dynamic

00:51:35.840 --> 00:51:41.600
HTML from a server request. Like you can use Jinja to generate all sorts of files. I use it on

00:51:41.600 --> 00:51:48.480
stuff basically on Python generate like emails. Somebody wants to reset their password, right?

00:51:48.480 --> 00:51:53.040
Like I'll generate an email body from it, for example. Right. That kind of stuff.

00:51:53.040 --> 00:51:58.000
Yeah. And then Click is a, just like Flask is a framework for web applications, Click is a

00:51:58.000 --> 00:52:04.720
framework for command line applications. And both of these libraries have gotten a lot of attention

00:52:04.720 --> 00:52:09.120
from me, but they are not at inbox zero. Unlike the other libraries, I have not managed to get

00:52:09.120 --> 00:52:16.240
them down there because I was working with the other libraries. And so these are where I'm like

00:52:16.240 --> 00:52:21.040
going to need to focus. Like I said, my current focus for the rest of this year is writing

00:52:21.040 --> 00:52:25.760
maintainer documentation. So I'm trying to do less code and all of these libraries are stable.

00:52:25.760 --> 00:52:29.120
Everybody downloads them. Like ton of people download them. They all work. We can make them

00:52:29.120 --> 00:52:34.160
better and everything, but they're not in like, it's not like they're immediate danger or need of

00:52:34.160 --> 00:52:39.920
anything. But I do want to like clear out the backlogs of those as well. And looking for more

00:52:39.920 --> 00:52:45.280
contributors for that help with that. You said you're looking for contributors who are really

00:52:45.280 --> 00:52:50.800
psyched about typing and also for... Oh God, if anybody is, if anybody knows,

00:52:50.800 --> 00:52:56.080
like is an expert in typing and like type annotations and static type tools, all the

00:52:56.080 --> 00:53:05.040
libraries do pass mypy strict tests and export. Like we do do some testing against pyright to

00:53:05.040 --> 00:53:12.560
some degree, but I'm just typing just, it's very hard for me to understand. Like it's a very

00:53:12.560 --> 00:53:19.040
complicated subject on its own versus all the other stuff I have to be doing. So I really would

00:53:19.040 --> 00:53:24.000
like somebody who's like, I am an expert at typing. I'm going to like start fixing up what you're,

00:53:24.000 --> 00:53:28.400
cause I like had to, I had to learn typing as I was like adding it to these libraries.

00:53:28.400 --> 00:53:29.360
Yeah.

00:53:29.360 --> 00:53:35.840
Yeah. That's a big thing that we can improve. And yeah, you know, there's like, we've gotten a lot

00:53:35.840 --> 00:53:41.040
of attention, a lot of the stuff in Click and Jinja also, we have PRs for a lot of stuff. It's just a

00:53:41.040 --> 00:53:45.120
matter of me having the time to go through and review all of them to cut down that backlog,

00:53:45.120 --> 00:53:47.120
but we're getting there. I'll get there eventually.

00:53:47.120 --> 00:53:47.760
Yeah. Beautiful.

00:53:47.760 --> 00:53:52.000
And then the last, so the last thing I want to mention, or we ran out of time completely is

00:53:52.000 --> 00:53:58.560
besides Palettes, the core projects itself. I've kind of mentioned this theme of trying to make

00:53:58.560 --> 00:54:03.520
the projects more maintainable and grow the community and the team. And part of that that

00:54:03.520 --> 00:54:12.240
I've started identifying is the greater ecosystem around these projects. So Flask is great to use on

00:54:12.240 --> 00:54:17.840
its own, but it's made even better by all the extensions out there that people have written,

00:54:17.840 --> 00:54:24.000
you know, for doing email, doing database stuff, authentication, all sorts of things.

00:54:24.000 --> 00:54:31.360
And just like Flask itself, you know, and all those libraries, there was a long period where

00:54:31.360 --> 00:54:35.040
they weren't getting as maintained, you know, as much attention and stuff. And then I started

00:54:35.040 --> 00:54:40.320
stepping in. A lot of those extensions were written quite a long time ago now, and the

00:54:40.320 --> 00:54:44.160
maintainers of those have kind of moved on to different things. And so there's a lot of stuff

00:54:44.160 --> 00:54:48.640
in the ecosystem that isn't getting as much attention as it needs. And a lot of the times,

00:54:48.640 --> 00:54:54.480
maintainers are aware of this and they're willing to like, say, like to take help,

00:54:54.480 --> 00:54:59.840
you know, to get help with those things. And so I was really inspired by a project for Django

00:54:59.840 --> 00:55:04.960
extensions called Jazz Band. Oh, yeah. We're basically they're an organization that says,

00:55:04.960 --> 00:55:11.120
are you a popular Django extension or pip or pip tools? For some reason, they also control pip

00:55:11.120 --> 00:55:17.120
tools. But do you not have time to be the maintainer of it anymore? Come over to Jazz

00:55:17.120 --> 00:55:22.320
Band. You'll still be like, you can still be involved in the project, but we'll also help you

00:55:22.320 --> 00:55:30.720
find more people from the community. Like we will open up the maintaining process to your interested

00:55:30.720 --> 00:55:36.800
users in the community. And so I'm doing a similar thing with palettes called palettes eco

00:55:36.800 --> 00:55:45.440
for ecosystem. Okay. So if you go to github.com/palettes-eco. Yeah, palettes-eco.

00:55:46.320 --> 00:55:53.120
GitHub. What we've started to do is reach out to maintainers of like, Flask SQLAlchemy, Flask

00:55:53.120 --> 00:56:00.160
admin, Flask security, Flask mail, Blinker, caching, debug toolbar, like all these huge

00:56:00.160 --> 00:56:04.640
extensions. So many of them have these huge backlogs, just like Flask and all the other

00:56:04.640 --> 00:56:08.800
projects did when I got started with them, you know, and their maintainers are overwhelmed.

00:56:08.800 --> 00:56:13.440
And so I reach out to them. I've been reaching out to them and kind of explaining, hey, we're

00:56:13.440 --> 00:56:18.080
starting this thing up. Do you want to add your project? So we've had some successful already.

00:56:18.080 --> 00:56:23.680
We've had people at sprints contribute to them. And like I was talking about, I've kind of

00:56:23.680 --> 00:56:28.640
standardized how Flask and the other projects look like all the tools they're using, the layouts

00:56:28.640 --> 00:56:33.120
they're using, the workflows they're using. I'm taking that same approach and trying to

00:56:33.120 --> 00:56:39.440
standardize all the extensions we get to. So the idea is that anybody who's used to contributing

00:56:39.440 --> 00:56:44.320
to one of these extensions, it should be just as familiar to them to jump into another extension

00:56:44.320 --> 00:56:49.600
and contribute there as well. Right. That's a great idea. Yeah. And so with Palettes Eco,

00:56:49.600 --> 00:56:57.600
we can help find maintainers from the community, add them. But the core team for Palettes themselves

00:56:57.600 --> 00:57:03.120
still has access as well. So, you know, if we make some change to Flask that finally

00:57:03.120 --> 00:57:07.520
removes something that some like some internal thing that somebody was relying on, and like

00:57:07.520 --> 00:57:12.000
suddenly this popular live extension no longer works, we at least have access. Like we're not,

00:57:12.000 --> 00:57:14.960
we're probably not going to take on the responsibility of being the like core

00:57:14.960 --> 00:57:18.720
maintainers of all these things, but we can step in and make an emergency release that just,

00:57:18.720 --> 00:57:22.800
oh, you just need to change this line here, make a bug fix release really quick. So we can at least

00:57:22.800 --> 00:57:29.040
keep the ecosystem going while we like work on finding longer term sustainability with more

00:57:29.040 --> 00:57:33.760
maintainers. I love that idea because a lot of times it is a really small change, but if it

00:57:33.760 --> 00:57:37.920
doesn't work, it doesn't work. Right. Right. Exactly. Like a lot of the times it's been like,

00:57:37.920 --> 00:57:42.240
we have made like little deprecations and then reveals and stuff, which have just,

00:57:42.240 --> 00:57:47.280
that was the one thing that some random extension was relying on that every, like half the ecosystem

00:57:47.280 --> 00:57:51.360
ended up relying on. And we just had to like, you know, change a line or change an import or

00:57:51.360 --> 00:57:58.480
add an argument. So yeah, like that's my big focus now. If people are interested in contributing

00:57:58.480 --> 00:58:03.360
to palettes, they're welcome to, you know, contribute to like Jinja and Click or any of

00:58:03.360 --> 00:58:08.080
the projects as well. If there's open issues, they can work on them, but like a huge new source of

00:58:08.080 --> 00:58:12.800
like involvement for people can be, what are the extensions you're using? Let's get you involved

00:58:12.800 --> 00:58:17.280
in those as well. Yeah. It makes a lot of sense because to make a change to Flask is, it's a

00:58:17.280 --> 00:58:23.600
highly polished piece of software, but the extensions potentially are more open to just

00:58:23.600 --> 00:58:28.720
jumping in and getting into it. Yeah. It's really, it's really hard for people. It's hard to tell

00:58:28.720 --> 00:58:32.320
people this, but like, you know, people come in excited, like, oh, I want to contribute to Flask.

00:58:32.320 --> 00:58:37.280
And then they look at it and they're like, oh, three open issues. What do I do? You know,

00:58:37.280 --> 00:58:40.800
or like, and these three issues are like really low level stuff or like, they've already been

00:58:40.800 --> 00:58:46.000
handled or something. Sure. And so we like, yeah, like what we're telling people now is like, okay,

00:58:46.000 --> 00:58:50.640
well, Flask, not only is it made up of these five other libraries, but there's also this whole

00:58:50.640 --> 00:58:55.360
extension ecosystem out there for you to contribute to. Like everybody's heard of Flask, you know,

00:58:55.360 --> 00:59:00.240
so we can point them at the right place. They come to us and then we point them. Yeah. Excellent.

00:59:00.240 --> 00:59:04.320
Well, I'll be sure to link to that in the show notes as well. Yeah. And with that, I think we're

00:59:04.320 --> 00:59:08.800
out of time. Thank you for being here. Just final call to action. You know, people either want to

00:59:08.800 --> 00:59:13.200
contribute or just want to use Flask. What do you tell them? Yeah. Yeah. So like I said, we're like

00:59:13.200 --> 00:59:18.480
developing Alex Eco. I'm currently writing maintainer documentation, so it'll make it

00:59:18.480 --> 00:59:22.800
easier for people to get involved in that way. I'm writing a new website with a lot of our policies

00:59:22.800 --> 00:59:28.240
and everything. But the main point of contact for all of this and the way we coordinate with

00:59:28.240 --> 00:59:36.560
our community is on our Discord server. So if you go to discord.gg/palettes, that will let you join

00:59:36.560 --> 00:59:41.920
the palettes server. It's, you know, open to everybody. We need help, you know, not only

00:59:41.920 --> 00:59:46.320
contributing to the libraries, but answering questions in our questions channel or, you know,

00:59:47.200 --> 00:59:51.840
like triaging issues and all sorts of things. There's lots of different ways to be involved

00:59:51.840 --> 00:59:56.320
in the projects without writing code. And it all starts on that Discord server. Awesome. Well,

00:59:56.320 --> 01:00:00.480
thanks again for being here and catch you next time. Yeah. Thank you. Bye.

01:00:00.480 --> 01:00:07.440
This has been another episode of Talk Python to Me. Thank you to our sponsors. Be sure to

01:00:07.440 --> 01:00:11.680
check out what they're offering. It really helps support the show. Take some stress out of your

01:00:11.680 --> 01:00:16.640
life. Get notified immediately about errors and performance issues in your web or mobile

01:00:16.640 --> 01:00:22.640
applications with Sentry. Just visit talkpython.fm/sentry and get started for free.

01:00:22.640 --> 01:00:26.160
Be sure to use the promo code Talk Python all onward. We have one of the largest catalogs of

01:00:26.160 --> 01:00:31.040
Python video courses over at Talk Python. Our content ranges from true beginners to deeply

01:00:31.040 --> 01:00:36.080
advanced topics like memory and async. And best of all, there's not a subscription in sight.

01:00:36.080 --> 01:00:41.360
Check it out for yourself at training.talkpython.fm. Be sure to subscribe to the show. Open your

01:00:41.360 --> 01:00:46.160
favorite podcast app and search for Python. We should be right at the top. You can also find

01:00:46.160 --> 01:00:53.200
the iTunes feed at /itunes, the Google Play feed at /play, and the Direct RSS feed at /rss on

01:00:53.200 --> 01:00:58.240
talkpython.fm. We're live streaming most of our recordings these days. If you want to be part of

01:00:58.240 --> 01:01:02.800
the show and have your comments featured on the air, be sure to subscribe to our YouTube channel

01:01:02.800 --> 01:01:08.560
at talkpython.fm/youtube. This is your host, Michael Kennedy. Thanks so much for listening.

01:01:08.560 --> 01:01:12.320
I really appreciate it. Now get out there and write some Python code.

