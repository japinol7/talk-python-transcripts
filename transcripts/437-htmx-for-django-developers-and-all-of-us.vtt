WEBVTT

00:00:00.000 --> 00:00:04.560
Are you considering or struggling with replacing much of the interactivity of your Django app


00:00:04.560 --> 00:00:10.080
with front end JavaScript? After all, your users do expect an interactive and modern app, right?


00:00:10.080 --> 00:00:16.240
Before you make a rash decision, you owe it to yourself to check out HTMX. It goes really well


00:00:16.240 --> 00:00:22.080
with Django. We have Christopher Trudeau here to run us through the whole awesome list of HTMX


00:00:22.080 --> 00:00:28.720
and Python things and tell us about his new HTMX and Django course. This is Talk Python to Me,


00:00:28.720 --> 00:00:32.880
episode 437, recorded October 5th, 2023.


00:00:32.880 --> 00:00:52.160
Welcome to Talk Python to Me, a weekly podcast on Python. This is your host, Michael Kennedy.


00:00:52.160 --> 00:00:57.360
Follow me on Mastodon, where I'm@mkennedy, and follow the podcast @talkpython,


00:00:57.360 --> 00:01:03.280
both on mastodon.org. Keep up with the show and listen to over seven years of past episodes at


00:01:03.280 --> 00:01:09.200
talkpython.fm. We've started streaming most of our episodes live on YouTube. Subscribe to our


00:01:09.200 --> 00:01:15.120
YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part


00:01:15.120 --> 00:01:22.000
of that episode. This episode is brought to you by IRL, an original podcast from Mozilla.


00:01:22.000 --> 00:01:26.480
When it comes to artificial intelligence, AI, what's good for trillion dollar companies isn't


00:01:26.480 --> 00:01:32.640
necessarily good for people. That's the theme of season seven of IRL, Mozilla's multi award-winning


00:01:32.640 --> 00:01:38.240
podcast hosted by Bridget Todd. Season seven is all about putting people over profit in AI.


00:01:38.240 --> 00:01:43.440
Check them out and listen to an episode at talkpython.fm/IRL. And it's brought to you


00:01:43.440 --> 00:01:48.560
by Sentry. They have a special live event, like a mini online conference where you can connect


00:01:48.560 --> 00:01:54.240
with the team and take a deep dive into different products and services every day for a week.


00:01:54.240 --> 00:01:59.440
Join them for launch week, new product releases, exclusive demos, and discussions with experts


00:01:59.440 --> 00:02:03.920
from their community on the latest with Sentry. You'll see how Sentry's latest product updates


00:02:03.920 --> 00:02:11.520
can make your work life easier. Visit talkpython.fm/Sentry dash launch dash week to register for


00:02:11.520 --> 00:02:17.440
free. Hey, Christopher, welcome to Talk Python To Me. Ah, it's been a little over a year. I just


00:02:17.440 --> 00:02:23.200
looked it up. It's nice to be back. Yes, the annual appearance. Sure. You want to make it


00:02:23.200 --> 00:02:30.160
annual? I can go for three or four and that's the look like you see into the future. We both spend a


00:02:30.160 --> 00:02:36.080
decent amount of time behind microphones these days, don't we? I seem to. Yes, yes, it does seem


00:02:36.080 --> 00:02:40.320
to be the way it is. It's a funny world, right? I was just looking it up because I figured, you know,


00:02:40.320 --> 00:02:44.400
your standard interview question. So what have you been doing? It's like, well, I put out over a


00:02:44.400 --> 00:02:49.680
dozen courses since the last time I was on. So yes, as you said, it's a lot of time behind the mic.


00:02:49.680 --> 00:02:56.240
So not so much the live mic. So if I'm doing a little nervous, say the word so too many times,


00:02:56.240 --> 00:03:01.520
it's makes me more human than in my courses, I guess. That's right. The magic of editing.


00:03:01.520 --> 00:03:07.520
That was a concise and quick response. Now, well, it's great to have you back on the show


00:03:07.520 --> 00:03:12.480
and looking forward to talking about one of my very, very favorite topics,


00:03:12.480 --> 00:03:18.400
HTML. So this time in the context of Django. Yeah, I was actually just the other day listening to


00:03:19.120 --> 00:03:26.960
your episode. What is it? 428 when you had Vincent and Gibson on and you delve into HTML a little


00:03:26.960 --> 00:03:32.880
bit. They seem to be big fans. It's one of the sort of semi gags in the course that we're going


00:03:32.880 --> 00:03:38.240
to talk about a little bit is I just kept telling people that I'm in love. Like it's it really is


00:03:38.240 --> 00:03:44.000
the answer. I'd love to see it become part of the HTML standard. It's a much, much happier way of


00:03:44.000 --> 00:03:49.600
coding. Makes me feel like the old days, things are much simpler with it. Yeah, I totally agree.


00:03:49.600 --> 00:03:54.800
And Carson gross, the creator of it does often say it's kind of like HTML just kind of stopped


00:03:54.800 --> 00:03:59.440
growing when JavaScript came along and this is what it should have been. But well, if I've got


00:03:59.440 --> 00:04:03.680
to do it, I'll take one for the team and build a HTMX for everyone. But yeah, it really should


00:04:03.680 --> 00:04:06.720
just be built in more or less. Shouldn't it? Yeah. Every once in a while you come across


00:04:06.720 --> 00:04:09.600
something where you sort of look at it and you're like, wait, this is the right way.


00:04:11.440 --> 00:04:15.680
Crap. I've been doing it wrong for almost 30 years. This is the right way.


00:04:15.680 --> 00:04:21.280
So why didn't anyone tell me? That's right. Yeah. Yeah. Yeah. A little bit of a,


00:04:21.280 --> 00:04:25.680
oh, wait, if, if I, if I'd had this so long ago, it would have made this and this and this


00:04:25.680 --> 00:04:30.160
so much easier. So yeah, it's definitely a pro, definitely some forward progress.


00:04:30.160 --> 00:04:36.640
It is. Well, you mentioned when I had the Django chat guys on the show, not too long ago, that was


00:04:36.640 --> 00:04:42.160
when we talked about Django surprise, surprise, but mostly, you know, we started out with the


00:04:42.160 --> 00:04:47.360
focus of Django turning 18 and, you know, maybe, you know, we can just start with Django itself


00:04:47.360 --> 00:04:54.160
before we dive into HTMX, because I think Django more than the other frameworks has its opinions


00:04:54.160 --> 00:05:00.080
and its styles and its way of doing things. And so integrating with that, with the HTMX, I think is a


00:05:00.080 --> 00:05:03.920
pretty interesting thing that, you know, other people, and you've done with, as we'll talk about


00:05:03.920 --> 00:05:07.600
through this course that I'm going to mention in a moment, but yeah, just, you know, what are your


00:05:07.600 --> 00:05:12.400
thoughts on Django over the years and Django being, you know, old enough to vote now?


00:05:12.400 --> 00:05:17.120
Well, you know, that there's a, there's this line I came across that, that I've since stolen.


00:05:17.120 --> 00:05:22.800
Somebody said, it's not a dinosaur, it's a shark. And I love that concept, right? It's still growing


00:05:22.800 --> 00:05:27.280
and it's still changing. It's still very actively developed, but you know, I've been playing with


00:05:27.280 --> 00:05:33.200
Django five recently and there's nothing in there that broke any of my four code. And if you're


00:05:33.200 --> 00:05:37.440
going to be coding with the same library over and over again, that's actually desirable, right? You


00:05:37.440 --> 00:05:41.760
want the new features, but you don't want to have to go and redo something every single time.


00:05:41.760 --> 00:05:45.920
You know, I don't want to knock view. It's got some strengths. We'll talk a little bit about that


00:05:45.920 --> 00:05:50.320
as well when we start getting into some of the HTMX stuff. But by example, because I don't use


00:05:50.320 --> 00:05:54.000
it very frequently, it seems every time I go back, it's like, oh, they've changed how this happens.


00:05:54.000 --> 00:05:59.040
And I have to rethink this. Right. And I don't run into that with Django. It's become so large


00:05:59.040 --> 00:06:03.360
that it's also addresses different problems for different people. I love that they're adding all


00:06:03.360 --> 00:06:07.680
this asynchronous stuff. I will probably never use it. And I think it's great that it's out there


00:06:07.680 --> 00:06:12.800
because it, it solves a problem for those kinds of, for the folks who are trying to use that kind


00:06:12.800 --> 00:06:17.200
of thing and they don't have to go off to another library. But for those of us who don't use it,


00:06:17.200 --> 00:06:20.640
it's like, yep, that's fine, whatever. It doesn't break anything. They don't have to start from


00:06:20.640 --> 00:06:27.680
scratch and they keep chugging along. And you know, both Will and Carlton sort of commented about the


00:06:27.680 --> 00:06:32.880
community and they're right. It's there. You know, Django, the project site that has all of the


00:06:32.880 --> 00:06:38.560
add-ons, there's like over 4,000 different apps and libraries that you can use. So it's not just


00:06:38.560 --> 00:06:43.680
the framework. It's not just the core, it's the ecosystem. And it makes a big difference. It makes


00:06:43.680 --> 00:06:48.880
your life a lot easier that way. A lot of choice. More than almost any other individual library in


00:06:48.880 --> 00:06:53.520
Python. Django has got a massive community behind it, doesn't it? Yeah. Yeah. Well, you know, it's,


00:06:53.520 --> 00:06:57.920
there aren't other conferences, right? There's PyCon and there's DjangoCon and everything else


00:06:57.920 --> 00:07:03.040
is go to a PyCon and talk about it in a room. And then there's an entire conference for it.


00:07:03.040 --> 00:07:07.760
And two of them, right? There's Europe and the US, right? So it's, yeah, it's a big deal.


00:07:07.760 --> 00:07:12.320
It is. And it's been a while since I've been to a requests con, although I do like requests. Yeah.


00:07:12.320 --> 00:07:16.480
Yeah. Also, you mentioned the async stuff and some of these new things,


00:07:16.480 --> 00:07:21.840
Python and Django, it's just amazing how stable they are in the sense of two to three aside,


00:07:21.840 --> 00:07:27.120
right? Like it's very, very, very rare, not never, but very rare that you have to


00:07:27.120 --> 00:07:30.880
go and fix code because a new version of Python came out. Yeah. It's the same thing, right? So


00:07:30.880 --> 00:07:36.560
3.12 just launched. I've been playing with the, the RCs for a little bit, just, you know, swap


00:07:36.560 --> 00:07:40.960
out the virtual env and my code just keeps chucking along, right? Like there's no, I've,


00:07:40.960 --> 00:07:48.080
haven't run into a problem even with beta versions in years, right? So that, and that stability is,


00:07:48.080 --> 00:07:53.120
it's important, right? It's like you kind of said, we're, we're still, still hurting a little bit


00:07:53.120 --> 00:07:57.520
from the scars from two to three. So I think everybody's being cautious in the right way.


00:07:57.520 --> 00:08:03.040
Yeah. I think that's probably true. Also some of those new features that maybe you won't use,


00:08:03.040 --> 00:08:07.600
or I won't use or whatever. I think they're still really important to have because I don't really


00:08:07.600 --> 00:08:12.320
hear it so much anymore, actually, but there used to be a lot of talk of like, Oh, we're switching


00:08:12.320 --> 00:08:17.360
to go because of async. We need async. So we're switching to go and because we need, you know,


00:08:17.360 --> 00:08:25.200
and even if you individually don't use it, having those features in Django or in Python,


00:08:25.200 --> 00:08:30.240
they're really important because they kind of knock that conversation out, right? They're like,


00:08:30.240 --> 00:08:34.240
Oh, we had all these people love Python, but they had this one special case. So they were forced to


00:08:34.240 --> 00:08:38.000
leave like, well, now they're not necessarily forced to leave because of that. And I think,


00:08:38.000 --> 00:08:41.760
you know, that's positive for everyone, even if many people don't use it directly.


00:08:41.760 --> 00:08:46.880
Yeah. Well, for sure. Right. Like if, you know, if async is what was stopping you from using Django


00:08:46.880 --> 00:08:52.480
and switching to FastAPI, then, you know, now you don't necessarily have to, right. And again,


00:08:52.480 --> 00:08:58.320
I'm a fan of FastAPI. A lot of it comes down to what you're building. And, you know, I often get


00:08:58.320 --> 00:09:02.240
the question also, well, why would I pick Django versus this versus that? And I'm like, well, if


00:09:02.240 --> 00:09:08.000
you're, if you're building an actual project where you need web pages, as well as the API, as well as


00:09:08.000 --> 00:09:12.400
this, and as well as that, well, you can do that with FastAPI plus SQLAlchemy plus something


00:09:12.400 --> 00:09:17.520
else. But, you know, it's all self-contained in Django. And so things tend to work better. So


00:09:17.520 --> 00:09:21.840
those edge cases that you talk about that might cause you to go off to another library,


00:09:21.840 --> 00:09:27.200
even if they don't do it quite as well, it might just having it enough so that you don't leave is,


00:09:27.200 --> 00:09:31.680
makes the difference for sure. It does. It does. There's a whole show comparing


00:09:31.680 --> 00:09:34.400
Django to FastAPI right there, isn't there? Probably.


00:09:34.400 --> 00:09:38.160
In Django or Django Ninja. Probably several. Yes.


00:09:38.160 --> 00:09:42.480
Probably, but not this show, not this one. All right. What's next? So let's talk about your book


00:09:42.480 --> 00:09:43.360
next. Sure.


00:09:43.360 --> 00:09:48.800
So one of the things you've been up to in addition to courses is writing books,


00:09:48.800 --> 00:09:52.400
Django in action, almost released. Is that right? What's the status?


00:09:52.400 --> 00:10:00.080
So speak in singular, it's, this is my first, so be kind. It's in early release. So you're able to


00:10:00.080 --> 00:10:05.680
purchase the, the first, I think we're up to seven chapters. And essentially, if you buy the


00:10:05.680 --> 00:10:10.640
electronic edition, then you get a chapter about a chapter or two a month, it kind of comes out


00:10:10.640 --> 00:10:17.440
piecemeal. It's called Django in action. It's on Django. It's divided into three parts. So part one


00:10:17.440 --> 00:10:22.960
primarily is sort of that intro stuff, how to get projects going, what a view is routes and all that


00:10:22.960 --> 00:10:28.240
kind of good thing. Part two is around the tools that are built into Django. So how to use the


00:10:28.240 --> 00:10:33.760
admin, you know, slightly more advanced topics. And I'm currently in the process of writing part


00:10:33.760 --> 00:10:40.560
three. And the intent of part three is how to extend your use to the third party libraries.


00:10:40.560 --> 00:10:43.920
You know, you just mentioned Django Ninja. So I'm hoping to have a chapter,


00:10:43.920 --> 00:10:48.960
both on Ninja and a chapter on HTMX. And both of these will guide people to, okay, great. So now


00:10:48.960 --> 00:10:53.200
you've got Django, but you want to build X, I need an API. Well, how do I do that? Well,


00:10:53.200 --> 00:10:58.160
there's Ninja and there's the DRF. I want to have a little more functionality, a little more


00:10:58.160 --> 00:11:03.840
dynamicism. Oh, okay. Well, a good answer to that now is HTMX. So this is how you wrap those things


00:11:03.840 --> 00:11:09.440
together. So the intent is to try and cover that. I'm sort of hoping that there's enough there in


00:11:09.440 --> 00:11:15.120
part three that folks who have done a bit of Django before are still interested in it and


00:11:15.120 --> 00:11:21.520
can pick some new things up as you go along. And, you know, with the release of Django five,


00:11:21.520 --> 00:11:26.000
I've been busy going back in and, you know, adding, Hey, and this is what they added in five.


00:11:26.000 --> 00:11:32.320
And this is what changes. So trying to cover all of that full publication, they'll probably be early


00:11:32.320 --> 00:11:37.360
next year. But if you're on the electronic copy, you can start now and go from there. So yeah,


00:11:37.360 --> 00:11:42.400
it's available. And, and I guess while I'm on the topic, I've been getting a lot of great feedback


00:11:42.400 --> 00:11:46.560
and we've got a forum for folks who've read the book and it's, it makes a big difference to me


00:11:46.560 --> 00:11:51.040
because, you know, somebody says, Oh, Hey, I did this and it didn't quite work. And I'm like, Oh,


00:11:51.040 --> 00:11:54.640
okay, it shouldn't, but like, add a couple sentences about that. So it's, it's kind of


00:11:54.640 --> 00:12:00.000
great to have this dynamic process going, improve it as, as I go along, which is so,


00:12:00.000 --> 00:12:04.560
so those folks who have been participating in the early release, I very much appreciate that


00:12:04.560 --> 00:12:09.920
feedback. It's cool to be able to build it out in public and not just drop 300 pages of printed


00:12:09.920 --> 00:12:14.000
something. Well, you know, and it's something I'm sure you, you, you know, you encounter with the


00:12:14.000 --> 00:12:19.120
courses all the time, right? Like I I've got, we'll call it a particular sense of humor, shall we?


00:12:19.120 --> 00:12:25.120
And when I, you know, I put something in a, in a course that I find funny, it's not like you're,


00:12:25.120 --> 00:12:30.160
there's no audience, right? Like you have no idea whether or not the joke lands.


00:12:30.160 --> 00:12:34.320
And it's sort of the same thing. Like you get, you never get any of that kind of feedback with,


00:12:34.320 --> 00:12:38.880
with a course and the book can very much be the same way. So yeah, that early release in the


00:12:38.880 --> 00:12:43.840
forum helps a little bit. So, and so nobody's, nobody's going to tell me whether or not I'm


00:12:43.840 --> 00:12:47.120
funny, but they can at least catch whether or not the code works, which is a useful.


00:12:47.760 --> 00:12:52.560
Exactly. And speaking of projects, we've been working on one of the things that kind of inspired


00:12:52.560 --> 00:12:57.280
me to have you on the show to just dive into Django and HTMX is you actually did a talk Python


00:12:57.280 --> 00:13:02.960
course, HTMX and Django modern Python web apps hold the JavaScript, which is awesome. That's a


00:13:02.960 --> 00:13:08.960
really fun, just under two hours course that really shows people like how to integrate HTMX


00:13:08.960 --> 00:13:09.760
into Django.


00:13:09.760 --> 00:13:14.400
Yeah. And you know, we should shout out the, there's a sister course on there that you started


00:13:14.400 --> 00:13:19.520
out with with Flask and essentially I took the same concepts and then stuck it in the Django


00:13:19.520 --> 00:13:26.080
world. So if you're coming from Django instead of Flask, then this I guess it's a, it's sort of the


00:13:26.080 --> 00:13:32.160
equivalent of translating it into Spanish. So we cover a lot of the same kind of concepts in both


00:13:32.160 --> 00:13:37.840
courses. We start with this video collector project. So it's an actual project with clickable


00:13:37.840 --> 00:13:43.360
links and it allows you to sort of store videos that you see from YouTube and shows a little


00:13:43.360 --> 00:13:49.040
image of the thumbnail and you know, the, the, who the author is. So a little database kind of


00:13:49.040 --> 00:13:54.800
application. We start there with a working project and then we HTMX-ify it. I'm just going to make


00:13:54.800 --> 00:13:55.280
words up.


00:13:55.280 --> 00:13:57.840
Yeah. It's a verb. We can do it. We're making verbs today. Come on.


00:13:57.840 --> 00:14:02.080
That's it works in both courses. We add like a click to edit. So you've got a little link,


00:14:02.080 --> 00:14:06.480
you click on the link and it turns into a form infinite scroll. The idea is you scroll down,


00:14:06.480 --> 00:14:12.240
the content keeps getting added searches you type, which to me is just such a beautiful example,


00:14:12.240 --> 00:14:17.600
right? Like if you've already got search on the website, HTMX, it's like four lines of code.


00:14:17.600 --> 00:14:23.920
Like it's, it's startlingly easy to do it in a dynamic fashion and it's complete with things


00:14:23.920 --> 00:14:29.200
like it updates the URL so you can do deep linking and you can do a, you know, back button goes to


00:14:29.200 --> 00:14:34.000
the previous search and all that basically comes by adding just a few attributes. So that's,


00:14:34.000 --> 00:14:38.880
that's beautiful. And then the Django version of the course also has a fourth example, which


00:14:38.880 --> 00:14:44.800
is how to take HTMX and integrate it in with bootstraps. You've got libraries on top of


00:14:44.800 --> 00:14:50.000
libraries and how sort of that JavaScript event system works in that situation and how you can


00:14:50.000 --> 00:14:56.960
get those things going. So, so yeah, so it's very example driven, Lex add features and learn how


00:14:56.960 --> 00:15:03.360
HTMX works along the way. This portion of talk Python to me is brought to you by IRL,


00:15:03.360 --> 00:15:08.080
an original podcast from Mozilla. When it comes to artificial intelligence, AI,


00:15:08.080 --> 00:15:12.800
what's good for trillion dollar companies isn't necessarily good for people. Can the risk and


00:15:12.800 --> 00:15:18.640
rewards be balanced? That's the theme of season seven of IRL, Mozilla's multi award-winning


00:15:18.640 --> 00:15:24.160
podcast hosted by Bridget Todd. Season seven is all about putting people over profit in AI.


00:15:24.160 --> 00:15:30.720
I think you'll find episode two pretty interesting. As you surely know, LLMs like ChatGPT are all the


00:15:30.720 --> 00:15:36.080
rage these days. Do they seem like magic? Well, it turns out that much of their power comes from


00:15:36.080 --> 00:15:41.120
millions of people entering and correcting data in these LLMs. Episode two, the humans in the


00:15:41.120 --> 00:15:47.600
machine gives us a glimpse into the world of these people behind the AIs. For policy junkies, IRL


00:15:47.600 --> 00:15:52.960
looks at the idea that we're all just guinea pigs in a big AI experiment, like the meal planning


00:15:52.960 --> 00:15:58.720
app that suggests bizarre recipes such as Oreo vegetable stir fries and flawed technologies that


00:15:58.720 --> 00:16:03.520
compose more deadly risks when it comes to something going wrong, like self-driving cars


00:16:03.520 --> 00:16:08.720
blocking emergency responders. You'll also hear from people building more responsible ways to test


00:16:08.720 --> 00:16:14.400
new AI technology. And we find out why it's taking so long to regulate this massive industry.


00:16:14.400 --> 00:16:20.160
That's IRL season seven from Mozilla. Check them out and listen to an episode at talkpython.fm


00:16:20.160 --> 00:16:26.160
slash IRL. The link is in your podcast player show notes. Thank you to IRL and Mozilla for


00:16:26.160 --> 00:16:33.120
sponsoring the show. You know what surprised me about getting into HTMX was


00:16:33.440 --> 00:16:38.320
you add all this functionality to this existing app, kind of like you do in this course or I did


00:16:38.320 --> 00:16:44.560
in the Flask course, and the code actually gets cleaner and simpler at the end. How can it do more


00:16:44.560 --> 00:16:48.880
and be more easy to understand and clean than the previous version, you know?


00:16:48.880 --> 00:16:52.080
Yeah. And you know what we're going to spend a bunch of time talking about today too,


00:16:52.080 --> 00:16:56.640
is there's some libraries out there that make it even better. And some of these I found after


00:16:56.640 --> 00:17:00.720
writing the course. So it's sort of like, oh, well, hey, if I do that and go back, use that.


00:17:00.720 --> 00:17:04.000
And I will write even less code, which is fantastic.


00:17:04.000 --> 00:17:08.720
Yeah. All right. Let's, you know, not everyone has already had this love affair that you and


00:17:08.720 --> 00:17:15.840
I have had with HTMX. So maybe you could just give us like a really quick overview of what HTMX is.


00:17:15.840 --> 00:17:20.240
And I think maybe the way to do it would be just we could make a concrete example, like


00:17:20.240 --> 00:17:24.080
click to edit or something like that. We could just show like, maybe you could just talk us


00:17:24.080 --> 00:17:27.680
through an example real quick. And that would suffice is what the idea is.


00:17:27.680 --> 00:17:33.520
Yeah. So it's a HTMX is a JavaScript library and it's a JavaScript library that if you're lucky


00:17:33.520 --> 00:17:37.440
means you'll never have to write JavaScript. So you essentially drop it into your page


00:17:37.440 --> 00:17:46.160
and how it works is you apply a set of attributes to your HTML and those attributes affect how


00:17:46.160 --> 00:17:52.080
things work. All of the attributes are named spaced. They all start with HX and the key ones


00:17:52.080 --> 00:17:58.800
are HX get an HX post, which you can see on the example there on the button, there's an HX get.


00:17:58.800 --> 00:18:04.480
And essentially what happens is for a button or a link, you're replacing something like an H ref


00:18:04.480 --> 00:18:11.680
with this concept. And when you click the button or the link that get fires, an Ajax call to the


00:18:11.680 --> 00:18:18.160
server. And the intent is instead of getting a full new page, like you normally would, when you


00:18:18.160 --> 00:18:24.480
click a link, it will send back a little piece. And that little piece is then injected into the


00:18:24.480 --> 00:18:29.440
page. And you can use different attributes to control how the example that's up on the screen


00:18:29.440 --> 00:18:36.240
here is using the HX swap attribute. And that essentially says replace the entire outer div


00:18:36.240 --> 00:18:42.800
with the content that comes back from the server. So the div with the first name, last name, email,


00:18:42.800 --> 00:18:48.640
which is just a read only gets replaced with the form that comes down from the servers. And now


00:18:48.640 --> 00:18:53.760
essentially we've got click to edit on something that was display and now is a form. That's the


00:18:53.760 --> 00:19:01.040
general idea. HTML sets some headers so that when the server side, you can tell whether or not it's


00:19:01.040 --> 00:19:07.280
actually a HTML call or not. And in the Django world, this works really, really well. So a common


00:19:07.280 --> 00:19:12.800
pattern with a Django view when you're dealing with forms is say, have a get and a post inside


00:19:12.800 --> 00:19:16.960
of the same view. So you're, you know, you do a get to get the page and then the post when you're


00:19:16.960 --> 00:19:21.760
actually submitting the form for that page and you keep it all together inside of the same view


00:19:21.760 --> 00:19:27.520
function. HTMX can do something very similar. And essentially instead of checking for get or post,


00:19:27.520 --> 00:19:32.240
you check for this HTMX header, and then you can either send down the whole page or the little


00:19:32.240 --> 00:19:36.960
partial replacement. And like in this example, it's the form that goes with it. In addition to


00:19:36.960 --> 00:19:43.280
things like this form, you can attach it to say, we kind of talked about searches you type as you


00:19:43.280 --> 00:19:48.640
can attach these kinds of attributes to say an input tag. And then when, yeah, maybe you want


00:19:48.640 --> 00:19:52.720
to bring one of those up. We've got it somewhere. Yeah, perfect. There's additional things that you


00:19:52.720 --> 00:19:58.400
can set that change how it behaves. So for example, you want to activate this event when someone has


00:19:58.400 --> 00:20:02.800
typed something in. So you're looking at the JavaScript key up event. You only want to do it


00:20:02.800 --> 00:20:08.400
if the input has changed, not just if the event fired. So if I'm using my arrow keys, it doesn't


00:20:08.400 --> 00:20:13.760
send something off to the server. And then you can put a delay in so that if we get a bunch of events


00:20:13.760 --> 00:20:18.000
at the same time, it's not until there's a pause where you send it to the server. So if somebody's


00:20:18.000 --> 00:20:23.760
rapidly typing, you don't send every single keystroke up. In the course I also cover, you can


00:20:23.760 --> 00:20:30.240
set up conditionals on it as well. So I've got to check in one version of one sample that checks


00:20:30.240 --> 00:20:34.160
whether or not there's actually content. So you have to have typed at least three letters, for


00:20:34.160 --> 00:20:39.280
example, right? So you can put these kinds of checks in. And essentially it really is very much


00:20:39.280 --> 00:20:46.800
like round trip 1.0 web, except in what you're getting down is instead of a whole new page is


00:20:46.800 --> 00:20:52.320
you're getting a partial and the HTMX library injects this in. It's a way of doing some very


00:20:52.320 --> 00:20:59.280
2.0 stuff in a very 1.0 way, which means you have very little JavaScript to have to write.


00:20:59.280 --> 00:21:04.560
So I personally have always found React to be overkill and that's not, I'm not trying to slag


00:21:04.560 --> 00:21:09.760
React people. Programming languages are a religious topic, right? This isn't me saying you shouldn't.


00:21:09.760 --> 00:21:15.280
This is me saying it doesn't work for me. I started coding for the web back in the pearls CGI days.


00:21:15.280 --> 00:21:20.000
And when JavaScript was first introduced, one of the arguments for it was, oh, you don't need a


00:21:20.000 --> 00:21:26.000
tool chain, right? It just worked. And you just refresh the page and it goes. So the whole concept


00:21:26.000 --> 00:21:31.040
of like TypeScript and a transpiler and web packaging and all the other stuff that's attached


00:21:31.040 --> 00:21:37.360
to modern web dev, I find exhausting. And because of that, I've kind of always headed towards view


00:21:37.360 --> 00:21:41.520
because it's a little lighter weight. But even then I'm often doing things against recommendation.


00:21:41.520 --> 00:21:48.080
I have been known to serve few JavaScript files through the Django template engine so that I can


00:21:48.080 --> 00:21:54.400
embed JSON objects. And that's a no, no, but it's worked for me. But I often find with view, even


00:21:54.400 --> 00:21:59.360
though it's lighter weight, because it's written for folks who primarily use node, there's some


00:21:59.360 --> 00:22:04.080
assumptions in the documentation. There's always this bit of a challenge to sort of get it to work


00:22:04.080 --> 00:22:09.280
in Django. And what I've, I've gone back and looked at everywhere I've coded with view,


00:22:09.280 --> 00:22:17.280
HTMX solves like 95 to 99% of the things that I would have done with view that I've done with


00:22:17.280 --> 00:22:22.800
view in the past. And the only exception was I once wrote a drag and drop card game.


00:22:22.800 --> 00:22:29.280
And I don't know if I could do that in HTMX, but pretty much everything else I could replace with


00:22:29.280 --> 00:22:34.560
HTMX and the amount of code I'd have to write would be a lot less the amount of JavaScript I'd


00:22:34.560 --> 00:22:40.720
have to write, which I've always sort of felt is a necessary evil. It would almost just go away and


00:22:40.720 --> 00:22:46.640
now it would be unnecessary and still evil, but yeah, that's me on my soapbox. So yeah,


00:22:46.640 --> 00:22:51.040
that's the short version of it. You've played with it a bit. Did I miss anything? Something


00:22:51.040 --> 00:22:54.640
you should highlight? No, I think that was a really great summary. The one thing I would


00:22:54.640 --> 00:22:59.920
like to throw out there that is not immediately apparent to people, but is a tremendous advantage


00:22:59.920 --> 00:23:07.520
of HTMX is that typical web development puts you into different mindsets for different parts of the


00:23:07.520 --> 00:23:12.160
application and context. So I'm working on the database. So I've got to think about database


00:23:12.160 --> 00:23:16.480
access and security in that context. Now I'm working on server side code and what can I do


00:23:16.480 --> 00:23:21.040
on the server? What kind of code can I run on the server? What packages do I have available?


00:23:21.040 --> 00:23:25.280
Now I'm on the client side. I can't do direct stuff. I have to have an API to interact with


00:23:25.280 --> 00:23:28.960
the server. So how do I build the API? And there's all the restrictions of the code,


00:23:28.960 --> 00:23:32.240
regardless of whether it's JavaScript or something else in the front end. And so you


00:23:32.240 --> 00:23:37.120
have these context switches of like, where are you in the app? And with HTMX, it's like,


00:23:37.120 --> 00:23:41.600
everything's on the server. Everything's in one language. Everything's in Python and Django. And


00:23:41.600 --> 00:23:47.040
whatever you do, you do it in Python and Django in this context or whatever your web framework is.


00:23:47.040 --> 00:23:53.360
And the title of the course, Hold the JavaScript. When I did the original Flask course, I got a


00:23:53.360 --> 00:23:59.440
bunch of flack from somebody on the thing that artists formerly known as Twitter. Like, why are


00:23:59.440 --> 00:24:03.520
you hating on JavaScript? This is just not what the world needs. I'm like, I'm not hating on


00:24:03.520 --> 00:24:08.160
JavaScript. I'm hating on the idea of having to write in three or four languages to accomplish


00:24:08.160 --> 00:24:13.600
one thing. And evidence of this, like evidence of this benefit is it's popular in the node community.


00:24:13.600 --> 00:24:20.240
Right. It's popular in the JavaScript community and they don't hate JavaScript, but they, like us,


00:24:20.240 --> 00:24:25.120
would also like to not have two different styles of JavaScript, two different modes of JavaScript,


00:24:25.120 --> 00:24:30.480
two different contexts of code execution and just one place. And I think it's, it's easy to see,


00:24:30.480 --> 00:24:36.480
like, oh, how does this do something similar, but cleaner than React? It's, it also transforms like


00:24:36.480 --> 00:24:39.680
where and how your code runs. And I think that's really a big deal.


00:24:39.680 --> 00:24:46.080
Yeah. Well, at risk of getting too far off topic, right? Like the web is a giant house of cards and


00:24:46.080 --> 00:24:51.520
it always has been. And our answer every single time has been, oh, let's add another layer of


00:24:51.520 --> 00:24:57.920
cards. And we've been adding layers of cards for, you know, 20 years and it's shaky in places,


00:24:57.920 --> 00:25:02.400
right? So anything that takes a couple layers off the top and simplifies how you think about things,


00:25:02.400 --> 00:25:09.440
I think is, is definitely a benefit. And like you said, HTMX is tool agnostic, right? So it's got


00:25:09.440 --> 00:25:14.560
nothing to do with Python. It works with whatever your stack is. And that in itself is something


00:25:14.560 --> 00:25:19.600
that is a thing of beauty because if you're, if you're an old person, knock yourself out, right?


00:25:19.600 --> 00:25:25.680
You want to PHP, whatever, go for it. It's, it doesn't matter because essentially it's back to


00:25:25.680 --> 00:25:31.520
the fundamental idea that HTML is based on, which is that hypertext concept of I click on something,


00:25:31.520 --> 00:25:35.520
it goes and gets a new thing and it puts it in the page. And in this case, instead of it being the


00:25:35.520 --> 00:25:39.200
whole page, it's part, it's a partial, it's a powerful, powerful tool.


00:25:39.200 --> 00:25:43.920
Indeed. Just to kind of put a, to finalize this whole thought here is like, so Mark's out there


00:25:43.920 --> 00:25:49.200
in the audience asking, so most business cases, use cases can be solved with HTMX. My vote is,


00:25:49.200 --> 00:25:53.520
yeah. I like, especially if you put business use case, if you're writing forms over data,


00:25:53.520 --> 00:25:59.840
like sort of enterprise apps, like 99%, right? All the crud stuff. Like I said, like I think


00:25:59.840 --> 00:26:03.760
the only thing I would, the only place that it doesn't really fit is when you're getting like


00:26:03.760 --> 00:26:08.240
to the level of something like games. And in fact, so we'll talk about it briefly, but there's a


00:26:08.240 --> 00:26:13.200
white paper on htmx.org that talks about one of the companies that actually did a conversion.


00:26:13.200 --> 00:26:20.400
And, you know, they had a fully running site and converted it over to HTMX and they had some big


00:26:20.400 --> 00:26:25.520
wins by doing that. Come back to it in a minute, but I'm hard pressed to think of a business use


00:26:25.520 --> 00:26:31.040
case that wouldn't be improved by using HTMX instead. Yeah. And it's so simple that like a


00:26:31.040 --> 00:26:35.680
lot of times the use case was, well, just the web app. It's not dynamic. It doesn't do that.


00:26:35.680 --> 00:26:40.400
You can add a lot of cool dynamic features to an existing app rather than like, oh,


00:26:40.400 --> 00:26:44.800
we have this really complex react app that we're going to simplify. I imagine usually it's kind of


00:26:44.800 --> 00:26:49.280
like a lift up the feature set, then bring down as well there. Some of this comes out of things


00:26:49.280 --> 00:26:54.800
like HTML5 as well. Right. So having email type on your input field means that there's a certain


00:26:54.800 --> 00:26:58.560
amount of validation that's happening in the browser now. Right. So things that we used to


00:26:58.560 --> 00:27:03.280
have to do in JavaScript, now the browser is taking care of some of that. So by taking some


00:27:03.280 --> 00:27:08.480
of those kinds of features, you know, I don't have to have that check manually written on the browser


00:27:08.480 --> 00:27:14.400
side anymore. And then adding HTMX to give that dynamicism, it just sort of tops it up. Right. So


00:27:14.400 --> 00:27:18.960
it's like I said, it's a step forward. The one other area where HTMX seems like it's just not


00:27:18.960 --> 00:27:24.400
going to work is if you want to build offline progressive web apps, because offline is like


00:27:24.400 --> 00:27:29.680
the antithesis of HTMX. Yeah. So what I thought we could do for our conversation here would be


00:27:29.680 --> 00:27:38.400
to focus on just a bunch of tools that people can bring to bear on making working mostly with


00:27:38.400 --> 00:27:43.440
Django, but also some of the other web frameworks, like other Python web frameworks and HTMX together,


00:27:43.440 --> 00:27:48.480
make that more seamless. And we worked together to put together quite a list here, didn't we?


00:27:48.480 --> 00:27:54.320
So here's two awesome lists we'll talk about. So the 95% of what we're talking about,


00:27:54.320 --> 00:28:00.160
we found sourced off of these two curated lists. The first one's called Awesome HTMX.


00:28:00.160 --> 00:28:08.000
And the second one is called Awesome Python HTMX. The first one is a collection of all languages.


00:28:08.000 --> 00:28:14.320
So it's got a section on Python, but as we were saying, if you're right there, HTMX and Rails.


00:28:14.320 --> 00:28:19.200
So if you're coming from somewhere else and you want to use HTMX, there's a whole lot of pieces


00:28:19.200 --> 00:28:26.400
in here. And it ranges from things like tools and articles and that kind of stuff. The second one


00:28:26.400 --> 00:28:32.720
is a Python specific one, which is Awesome Python HTMX. They call themselves PyHat.


00:28:33.360 --> 00:28:38.400
Little bit overlap between the tool sets. But again, this is just sort of some master lists for


00:28:38.400 --> 00:28:44.480
the places you can go and get content and examples and all that kind of good stuff.


00:28:44.480 --> 00:28:49.120
And in fact, one of the first white papers that I wanted to talk about a little bit


00:28:49.120 --> 00:28:55.680
is on the Awesome Python HTMX list. As I mentioned, there's a link to it on this list.


00:28:55.680 --> 00:29:02.320
And as I mentioned, this is actually a case study off of htmx.org. It was presented at a


00:29:02.320 --> 00:29:07.200
Django con in 2022. So if you don't feel like reading, you can go off and see the video.


00:29:07.200 --> 00:29:13.680
But it's about a conversion and it took them about two months to completely convert


00:29:13.680 --> 00:29:20.400
from a React based site to HTMX. They had zero reduction in functionality,


00:29:20.400 --> 00:29:25.360
67% reduction in the size of the code base. So that's significant, right? Like that's


00:29:25.360 --> 00:29:28.800
two thirds of your code you no longer have to maintain because it's gone.


00:29:28.800 --> 00:29:29.440
Wow.


00:29:29.440 --> 00:29:34.560
Increase the Python code by 140%. So that's sort of the trade off, right? We're moving


00:29:34.560 --> 00:29:38.640
some of that JavaScript stuff onto the server side. They reduced their total


00:29:38.640 --> 00:29:43.760
JavaScript dependencies by 96%, which essentially means it's almost gone.


00:29:43.760 --> 00:29:48.640
As a result of that, they had shorter web build times, shorter page loads,


00:29:48.640 --> 00:29:54.000
less memory. And because of the less memory, they were also able to handle larger data sets.


00:29:54.000 --> 00:30:00.800
So they were able to put more content on the page at a time using HTMX than React because


00:30:00.800 --> 00:30:05.520
the amount of overhead React put on the page meant it was eating up space and it just couldn't


00:30:05.520 --> 00:30:10.240
handle it. It's one white paper. And of course, it's on the htmx.org site. So of course, it's


00:30:10.240 --> 00:30:14.880
going to be biased towards you should use HTMX. It does show that this is being used in the real


00:30:14.880 --> 00:30:19.520
world and with a lot of success. It's definitely something that you kind of want to look at.


00:30:19.520 --> 00:30:24.480
I can't remember if I sent you the link, but there's another one recently that showed up on


00:30:24.480 --> 00:30:31.760
Bytecode. This is a site that frequently link to in the PyCoder newsletter. A lot of really good


00:30:31.760 --> 00:30:37.520
content with the Bytecode guy there. He's done something called... Nope, that's not it. It's


00:30:37.520 --> 00:30:44.480
three in real life use cases for Python and HTMX. It's Byte with an I, that's why.


00:30:45.200 --> 00:30:50.880
It's the other kind of Byte. He's a little cranky. This is more of an anecdote than case study,


00:30:50.880 --> 00:30:56.640
but essentially he's gone through three kinds of projects that he's recently done with Python


00:30:56.640 --> 00:31:01.920
that are web-based and went, oh, let's use HTMX instead. And it's made his life easier.


00:31:01.920 --> 00:31:05.520
And so essentially he's just saying, hey, here are some cases where I've actually done this and


00:31:05.520 --> 00:31:10.400
it's been useful. To the question we got earlier, really it is that sort of, hey, I've got a form


00:31:10.400 --> 00:31:14.240
and I want the form to be slightly more dynamic. So, hey, it would be an awful lot easier if I


00:31:14.240 --> 00:31:19.200
just stick this in and go. And if I remember correctly, he's using FastAPI with this as well.


00:31:19.200 --> 00:31:23.680
Right? So it's not just Django or Flask. There's lots of choices out there.


00:31:23.680 --> 00:31:27.680
Yeah, it works really well. Yeah. He's using FastAPI. FastAPI works


00:31:27.680 --> 00:31:33.200
equally well with it. And some of the tools we'll talk about are relevant as well. So very cool.


00:31:33.200 --> 00:31:40.400
This portion of Talk Python To Me is brought to you by Sentry. You've heard me sing the praises of


00:31:40.400 --> 00:31:44.720
Sentry for their error tracking and performance monitoring plenty of times on the show.


00:31:44.720 --> 00:31:49.760
But this time is different. They have a special live event, like a mini online conference,


00:31:49.760 --> 00:31:54.720
where you can connect with the team and take a deep dive into different products and services


00:31:54.720 --> 00:31:59.520
every day for a week. Join them for Launch Week, new product releases, exclusive demos,


00:31:59.520 --> 00:32:03.440
and discussions with experts from their community on the latest with Sentry.


00:32:03.440 --> 00:32:07.520
You'll see how Sentry's latest product updates can make your work life easier.


00:32:08.080 --> 00:32:14.080
New announcements will be released every day on YouTube at exactly 9am Pacific time on Monday,


00:32:14.080 --> 00:32:19.920
November 13th. Performance Tuesday, user feedback and session replay Wednesday,


00:32:19.920 --> 00:32:24.640
data resiliency and platform Thursday, frameworks, community and integrations.


00:32:24.640 --> 00:32:30.800
And finally, Friday, November 17th. Open Source sustainability. I'm already signed up. Join me


00:32:30.800 --> 00:32:36.560
at talkpython.fm/Sentry dash launch dash week. The link is in your podcast player show


00:32:36.560 --> 00:32:41.840
notes. I'll see you there. Thank you to Sentry for their continued support of Talk Python to me.


00:32:41.840 --> 00:32:48.000
Some other things on the list I'm just seeing on screen right now is like there's an IntelliJ,


00:32:48.000 --> 00:32:54.240
aka PyCharm, plugin for HTMX. So it gives you autocomplete for all your HTMX stuff and


00:32:54.240 --> 00:32:59.440
probably for VS Code as well. So if you're going to use one of those editors and do HTMX,


00:32:59.440 --> 00:33:03.920
you know, be sure to install this. You get autocomplete and validation for the different


00:33:03.920 --> 00:33:10.640
things. So cool. All right. Well, let's talk about maybe the big first one, Django dash HTMX.


00:33:10.640 --> 00:33:17.040
Just under extensions for using Django with HTMX. So this is the go to this is not only is this the


00:33:17.040 --> 00:33:22.560
right way to do things, but this is also in fact, talk about this in the Django version of the


00:33:22.560 --> 00:33:27.360
course. There's also a about a half dozen libraries out there that all said, oh, we're just going to


00:33:27.360 --> 00:33:32.000
do what he did, but we're going to do it for our library. So this has been an inspiration to other


00:33:32.000 --> 00:33:38.160
folks as well. It's by a gentleman named Adam Johnson, and it's essentially some Django middleware


00:33:38.160 --> 00:33:45.120
and some utility classes. So in Django, each view gets a request object. This library adds a member


00:33:45.120 --> 00:33:52.720
to that request object called HTMX. You can use that member as a Boolean. And if it evaluates to


00:33:52.720 --> 00:33:58.720
true, then it was there's an HTMX header. So it was an HTMX call. And if it's false, it wasn't.


00:33:58.720 --> 00:34:03.440
So this is what I was referring to earlier about that idea of being able to have one view


00:34:03.440 --> 00:34:07.920
manage multiple things, because essentially you just check this Boolean and either I'm


00:34:07.920 --> 00:34:12.000
feeding out the full page or I'm feeding out the partial. Right? Because the big


00:34:12.000 --> 00:34:16.000
concept in HTMX is there'll be a request for the page, which shows you the whole thing,


00:34:16.000 --> 00:34:20.160
but an interaction won't want all the page content. They just want the fragment that


00:34:20.160 --> 00:34:24.720
the new version of the fragment, like the new table row that has been edited or something


00:34:24.720 --> 00:34:29.360
like that. Right. So on the server, you got to decide what version do I give them?


00:34:29.360 --> 00:34:33.920
This answers that question. Exactly. And this is so, you know, to take it back to the click to


00:34:33.920 --> 00:34:39.280
edit example that we talked about at the top, you know, the first call to the page, no HTMX,


00:34:39.280 --> 00:34:44.080
it shows the content of the page, including the person's name and email address or whatever it is.


00:34:44.080 --> 00:34:47.520
And then when somebody clicks the link and that needs to be replaced by the form,


00:34:47.520 --> 00:34:52.320
you can use the same view. And that view then just returns the form as a partial rather than


00:34:52.320 --> 00:34:57.200
the whole thing. And so checking this Boolean allows you to tell which mode am I in and how


00:34:57.200 --> 00:35:02.960
do I want to do that? There's other information on as well. So you can check things like the target


00:35:02.960 --> 00:35:06.560
and the triggers. So these are other attributes. Didn't mention the triggers when I sort of


00:35:06.560 --> 00:35:10.880
explained things at the top, the trigger is that event management piece that I was talking about


00:35:10.880 --> 00:35:15.760
with like searches, searches you type. So the trigger says a key press or there's another one


00:35:15.760 --> 00:35:22.160
that allows you to do on scroll down. Right. So when the tag is revealed, then trigger the call.


00:35:22.160 --> 00:35:27.280
So the Django HTMX will give you information about what the event was, what triggered,


00:35:27.280 --> 00:35:32.240
how it worked, etc. So if you need to make decisions, or if you've got multiple HTMX


00:35:32.240 --> 00:35:36.960
things happening inside the same page, you can suss it out that way. Quite frankly,


00:35:36.960 --> 00:35:42.160
the Boolean mechanism is enough for me to want to install this library. The rest of it I don't


00:35:42.160 --> 00:35:47.920
use very often, but just being able to check which mode I'm in and not have to check that header


00:35:47.920 --> 00:35:54.800
myself is worth installing the library. And it feels very, very Django-esque because it essentially


00:35:54.800 --> 00:36:00.240
just replaces that get post pattern that I was talking about earlier, but instead with HTMX.


00:36:00.240 --> 00:36:08.160
There's also some other utilities in here. The way that HTMX works, if a URL is hit, that's a 404,


00:36:08.160 --> 00:36:12.400
it just eats it. There's a chunk of debug JavaScript that comes with this library that


00:36:12.400 --> 00:36:16.480
you can put in so that you actually get the Django 404 page. So it essentially


00:36:16.480 --> 00:36:23.600
overrides the response back from the view and spits out an actual debug page that you're used to.


00:36:23.600 --> 00:36:28.480
So it allows you to debug your HTMX a little better. And then there's some classes and


00:36:28.480 --> 00:36:34.080
functions for things like polling and controlling redirects and a few other things that are also


00:36:34.080 --> 00:36:39.760
useful for typing as well. So if you're doing a type check that you want to replace, that this


00:36:39.760 --> 00:36:45.360
call comes back with HTMX, then you can put it inside of your typing that this is this kind of


00:36:45.360 --> 00:36:50.960
class that comes back. So very, very handy library, very strongly recommended that if you're doing


00:36:50.960 --> 00:36:56.480
Django and HTMX, this is the place to go. Okay. This is the big one. All right. Next up,


00:36:56.480 --> 00:37:02.800
this is from the multilingual awesome list, Django JS lib HTMX.


00:37:02.800 --> 00:37:08.720
So this one's pretty lightweight. It pretty much allows you to use tags to drop the library in. So


00:37:08.720 --> 00:37:14.160
it essentially just means you're scriptifying some of the things that you're using in the library.


00:37:14.160 --> 00:37:19.840
Having used it myself, I think a lot of it depends on how deep your pages have to go. Personally,


00:37:19.840 --> 00:37:23.360
I would just stick this in and hard code it myself. It's there if you want it.


00:37:23.360 --> 00:37:28.480
Yep. Sounds good. HTMX Flask. This one I think is really interesting. And you might be saying like,


00:37:28.480 --> 00:37:32.960
well, why do I Django we're talking about? What do I care about Flask? But we already went through


00:37:32.960 --> 00:37:38.160
two of the examples on the HTMX.org site. And what you see is the client side, but there's no


00:37:38.160 --> 00:37:43.760
visibility to what the server side looks like in that example code. But this, this will help maybe.


00:37:43.760 --> 00:37:49.600
There are three things called HTMX Flask, Flask HTMX and Flask HTMX with a capital. So


00:37:49.600 --> 00:37:57.680
they all start to blur together. Yes, this one is essentially if you at the top,


00:37:57.680 --> 00:38:02.720
if you're not listening, if you were watching, Michael showed the HTMX site and a couple of


00:38:02.720 --> 00:38:09.440
the examples. This is a Flask S they've redone all of those examples from the server in Flask.


00:38:09.440 --> 00:38:14.240
So if you're looking for how to implement these things rather than just in pure HTML,


00:38:14.240 --> 00:38:20.560
and you want to see them in the Flask server, you can go that here. And because it ties back to the


00:38:20.560 --> 00:38:26.800
actual HTMX.org page, it allows you to sort of see how all the pieces fit and look your code up as


00:38:26.800 --> 00:38:31.200
you go. Yeah, I think the examples are really awesome and simple on HTMX.org, but they don't,


00:38:31.200 --> 00:38:35.360
they don't tell the whole story if you're trying to actually implement it. And if you're like,


00:38:35.360 --> 00:38:39.920
I just don't really know how to do that with my web framework. Here's at least a Python set of


00:38:39.920 --> 00:38:44.000
examples that'll get you pretty close. Yeah, there's a few of these as well. Near the tail


00:38:44.000 --> 00:38:48.400
end here, we'll talk about a couple others that there's one which is actually a board game,


00:38:48.400 --> 00:38:54.000
which is a nice top to bottom full example. But this one essentially relates the example content


00:38:54.000 --> 00:38:59.840
off the HTMX site to your Flask server. Nice. All right, server sent events. If you're using


00:38:59.840 --> 00:39:07.840
Starlette, this is a tech demo, essentially by Jan Vlasinski. And essentially, he's using FastAPI,


00:39:07.840 --> 00:39:13.920
HTMX, and Starlette. And pages, the example is actually quite simple. There's almost no


00:39:13.920 --> 00:39:18.640
content on it. It's just a little bit of it almost looks like a debug. So there's a few variables,


00:39:18.640 --> 00:39:23.040
which are randomly generated inside of an asynchronous call on the server, you run it


00:39:23.040 --> 00:39:28.560
using unicorn. And essentially, when you visit the page, the values update on the on the fly.


00:39:28.560 --> 00:39:34.080
So the sleep in the server code is pretty short. It's about a third of a second. So the debug


00:39:34.080 --> 00:39:40.160
messages go flying by rather quickly. But it gives you an idea essentially how to wire these kinds


00:39:40.160 --> 00:39:44.000
of things together. I've never used Starlette myself. Have you played with it at all?


00:39:44.000 --> 00:39:53.040
Only by way of using FastAPI and Litestar. So they're both built on top of it, but not directly.


00:39:53.040 --> 00:39:59.680
But you know, server sent events are interesting, because we've had traditional web interaction,


00:39:59.680 --> 00:40:04.880
which we kind of talked about already. And then you've got web sockets for super dynamic


00:40:04.880 --> 00:40:10.000
bi directional communication. But a lot of times people use web sockets, because they just want to


00:40:10.000 --> 00:40:14.480
receive stuff that happens on the server on the client, like a dashboard, right? The dashboard


00:40:14.480 --> 00:40:19.440
doesn't need to update the server and broadcast it just wants all its pieces update live. And so


00:40:19.440 --> 00:40:23.360
server sent events are like a lightweight web socket type thing. And it's really cool to be


00:40:23.360 --> 00:40:27.440
able to plug that in with HTMX, I think. Yeah, I haven't played with it myself. But


00:40:27.440 --> 00:40:32.640
HTMX also has a polling mechanism. So if you're not using technology on the server side that can


00:40:32.640 --> 00:40:37.840
enable this, you can get around it the other way. Obviously, an event from the server is far less


00:40:37.840 --> 00:40:42.720
noisy than polling. But by using basically gives you a couple different options. So if you happen


00:40:42.720 --> 00:40:47.280
to be using something that isn't asynchronous, you don't want to go all the way down that path.


00:40:47.280 --> 00:40:50.960
You could also look at the polling techniques inside of HTMX to get you


00:40:50.960 --> 00:40:55.200
interested solve similar kinds of problems. Yeah, if you're not building a massively busy


00:40:55.200 --> 00:40:59.440
website, maybe it's totally fine to just pull it, right? Yeah, well, it's some of it also has to do


00:40:59.440 --> 00:41:03.760
with the frequency, right? Like if it's data that only needs to update, you know, once every 30


00:41:03.760 --> 00:41:07.520
seconds or so then well, when somebody is on a page that might be the right way to go. Yep.


00:41:07.520 --> 00:41:14.160
All right. Now, over to this, we'll start pulling some items off the I hat. Sure. I had example on


00:41:14.160 --> 00:41:18.240
here. Yeah, another list here. We started talking a little bit about this. I've been hopping around


00:41:18.240 --> 00:41:23.520
a bit. So that white paper that I talked about is on here. And a bunch of some of the other tools


00:41:23.520 --> 00:41:29.360
that we've got as well. Good overall list has some sort of a nice breakdown that it's got sort of the


00:41:29.360 --> 00:41:35.200
resources as in like, here's some articles you can read. They've got a link to your flask course. So


00:41:35.200 --> 00:41:42.160
I think we need to do a PR here and definitely do PR and I appreciate going in there. We do.


00:41:42.160 --> 00:41:46.400
I appreciate however, this got here. Thank you, people. Yep. But yeah, we got to do a PR.


00:41:46.400 --> 00:41:51.520
So some good links in here to some obviously to some quality content that they've.


00:41:51.520 --> 00:41:56.560
That's right. That's right. Yeah. So there's a bunch of different ones in here. I think


00:41:56.560 --> 00:42:02.240
probably the helper libraries is the section that has like, really what people are imagining when


00:42:02.240 --> 00:42:08.240
they're thinking awesome list, at least awesome list for programming. So make a line. Yeah. In


00:42:08.240 --> 00:42:13.040
fact, so there's three on here that I think I want to sort of cover back to back because they're all


00:42:13.040 --> 00:42:19.360
essentially the same idea. So I mentioned that Django HTML is like, is sort of the go to way of


00:42:19.360 --> 00:42:24.640
doing the Django stuff. And it inspired a bunch of other people. Well, there's ASGI, HTML, Starlet,


00:42:24.640 --> 00:42:31.280
HTML, and HTML flask. And all three of these sorry, I'm flapping around as we go along. Yeah,


00:42:31.280 --> 00:42:36.400
you're trying to keep up. So all three of these are essentially like the Django HTML library,


00:42:36.400 --> 00:42:42.560
but for those appropriate other libraries. So they essentially add that meta information


00:42:42.560 --> 00:42:48.400
to the requests or in the case of ASGI to the scope. And it's the same kind of thing. It gives


00:42:48.400 --> 00:42:53.280
you an idea of what the headers there and what the other information is. So if you're not on Django,


00:42:53.280 --> 00:42:59.840
if you're on flask, then HTML flask or ASGI HTML will work and essentially solve the same kind of


00:42:59.840 --> 00:43:05.840
problems that Django HTML does. And all three of those are listed on that pie hat piece. So that's


00:43:05.840 --> 00:43:15.120
ASGI HTML is by Floremon Monca, Starlette HTML is by Felix Ingram. And HTML flask is by Sergey


00:43:15.120 --> 00:43:20.400
Pons Franks. Not sure how to say his last name there. Yeah, a lot of good work going on in this


00:43:20.400 --> 00:43:26.880
space. All right. How about Django HTML patterns? Ah, yes. Good old spooky looky. So he's got an


00:43:26.880 --> 00:43:33.840
awesome GitHub handle here. This is Luke plant, who is or was I'm not sure the time frame on that,


00:43:33.840 --> 00:43:37.600
but was heavily involved with Django. He was a core developer for a while. And essentially,


00:43:37.600 --> 00:43:44.320
he's written up a article here on good ways of interacting with Django and HTMX. There's some


00:43:44.320 --> 00:43:49.920
code examples to go with it. We're going to talk in a minute about the block render block library.


00:43:49.920 --> 00:43:55.520
He's a fan of that approach. Essentially, this is got good reasons for how you group your snippets


00:43:55.520 --> 00:44:00.720
together. That idea of having your code and all your code in the same view as well as keeping


00:44:00.720 --> 00:44:05.680
your snippets possibly even the same file. He talks about these kinds of things as well as sort


00:44:05.680 --> 00:44:10.400
of hands you off to some of the toolkits that we're talking about as well to help you do this.


00:44:10.400 --> 00:44:16.000
I'm a fan. He's also got a great article called Django views the right way, which is he tends to


00:44:16.000 --> 00:44:21.040
write fairly opinionated pieces. And of course, when you agree with his opinion, that's fantastic.


00:44:21.040 --> 00:44:26.880
It must be brilliant. So he's, he's finally someone standing up for our way of thinking.


00:44:26.880 --> 00:44:31.360
Exactly. So he's very pro function based views. And for folks who aren't Django people,


00:44:31.360 --> 00:44:36.880
that's a Coke versus Pepsi thing versus class based views. But because I tend to my bias heads


00:44:36.880 --> 00:44:40.960
in that direction, he must be right. So everything else he's written is brilliant as well. So,


00:44:40.960 --> 00:44:46.640
but a lot of good information in here to dig around some best practices, as well as I said,


00:44:46.640 --> 00:44:50.160
to some references to the kinds of libraries we're talking about to make your life easier.


00:44:50.160 --> 00:44:55.040
Yeah, I think these kinds of things like these pattern ideas really help you think about,


00:44:55.040 --> 00:45:00.400
how am I going to add that into my application? Right? So just here's some libraries and here's


00:45:00.400 --> 00:45:04.720
HTMX and here's, you know, like, how does it look right? You know, how do you make your


00:45:04.720 --> 00:45:08.240
Django code better and cleaner by putting this stuff together?


00:45:08.240 --> 00:45:13.360
Yeah, well, and honestly, like my tongue planted in my firmly in my cheek with the whole function


00:45:13.360 --> 00:45:18.000
versus class thing, notwithstanding, one of the things I love about these kinds of opinion pieces


00:45:18.000 --> 00:45:23.200
is it allows you to help sort of formulate, oh, does that fit in my version? Or does it not fit


00:45:23.200 --> 00:45:28.240
in my version? And how does this map to what I'm doing? It allows you to sort of think more deeply


00:45:28.240 --> 00:45:32.480
about the patterns that you're using as you're coding. You might leave an article like that and


00:45:32.480 --> 00:45:36.880
go, oh, I now I understand more about why I chose what I did and I'm going to stick with it. It


00:45:36.880 --> 00:45:40.720
might be the opposite of what that article is there, but it opens you up to other ways of


00:45:40.720 --> 00:45:45.600
thinking about these things, right? It's, it comes from that practice of doing it rather than,


00:45:45.600 --> 00:45:48.000
like you said, just a couple quick examples.


00:45:48.000 --> 00:45:52.480
Another thing about patterns that I've always loved, design patterns, programming style,


00:45:52.480 --> 00:45:57.360
is when you think about a problem, if you just think about like kind of the idea of the pattern,


00:45:57.360 --> 00:46:03.040
like what are the steps? It's hard to think about it, you're really down in the details. But if,


00:46:03.040 --> 00:46:08.480
if you can think about as the whole thing that the pattern applies to and what have its benefits and


00:46:08.480 --> 00:46:14.080
trade-offs, you can think at a much higher level and sort of, it lets you not think in detail,


00:46:14.080 --> 00:46:17.840
right? Like you could say, well, I want to have, you know, outside of the web, you can say, I want


00:46:17.840 --> 00:46:22.080
to have a way where we just have one variable, just copy of it. It's just one and everybody


00:46:22.080 --> 00:46:27.200
shares it instead of passing it around like, okay. Or you could say we have a singleton, like boom,


00:46:27.200 --> 00:46:32.160
like that one statement, just what are the benefits? What are the drawbacks? What are the


00:46:32.160 --> 00:46:36.880
use cases? Like it's testing hard. It makes reuse really easy. Cause you just grab it like,


00:46:36.880 --> 00:46:41.920
and this sort of like that for HTMX, right? As you think like, oh, this pattern applies right here,


00:46:41.920 --> 00:46:44.160
let's go. Or it doesn't because of.


00:46:44.160 --> 00:46:48.000
And it becomes a, some of it's a vocabulary thing as well, right? So there's this concept,


00:46:48.000 --> 00:46:51.200
we're going to spend a little bit of time talking about in a minute that is the partials,


00:46:51.200 --> 00:46:55.440
which is those little snippets that I was talking about. And in fact, if I remember correctly,


00:46:55.440 --> 00:47:00.400
part, the term partials has been stolen. It's something rails uses, right? By using that same


00:47:00.400 --> 00:47:05.040
vocabulary, it allows you to sort of talk about these things, like you said, at that higher level


00:47:05.040 --> 00:47:09.040
concept, right? So that the patterns help with the vocabulary, help with you communicate about


00:47:09.040 --> 00:47:12.720
those concepts rather than spending the first 10 minutes of your conversation, trying to establish


00:47:12.720 --> 00:47:17.280
whether or not you're talking about the same thing. Yes, exactly. Exactly. Speaking of we have


00:47:17.280 --> 00:47:22.720
fragments and we have partials, and this is a little bit of an alternate, like this is a Coke


00:47:22.720 --> 00:47:27.760
versus Pepsi as well. Considering you're the maintainer of the sister library to this, maybe


00:47:27.760 --> 00:47:31.920
this one should be you. Maybe you want to talk a little bit about partials.


00:47:31.920 --> 00:47:39.920
Well, so my understanding here with the Jinja partials one is you can express parts of your page


00:47:39.920 --> 00:47:45.760
to contain the template data that you want. So for example, here's a whole thing with a HTML and a


00:47:45.760 --> 00:47:49.840
head and a body. And then it has one thing that says, this is a block. And it says just a paragraph,


00:47:49.840 --> 00:47:54.400
this is a magic number with that value. With this thing, what you can do is you can say,


00:47:54.400 --> 00:47:59.920
just grab that thing we call the content and provide the data over to it. Because I don't


00:47:59.920 --> 00:48:05.040
want to show the whole page. I want to show just this section of it, the benefit of this.


00:48:05.040 --> 00:48:11.280
And there's an essay over on htmx.org, something about the locality of behavior and things like


00:48:11.280 --> 00:48:16.560
that. I believe it's what it, something titled like that. And the idea is I have my entire HTML


00:48:16.560 --> 00:48:23.360
listed all in one as if it was a static page. And I can use the server side to grab pieces out of


00:48:23.360 --> 00:48:29.360
the HTML and make them dynamic sections. Like I described, like grab this block,


00:48:29.360 --> 00:48:36.080
render it using the template engine, the Jinja2 fragments. So that's the, I don't know, Coke,


00:48:36.080 --> 00:48:41.680
Coke, Coke or Pepsi, who gets, which one does it get? Let's call this one the Coke style. And that


00:48:41.680 --> 00:48:46.800
I think is really useful, right? Because what is your alternative? Have that HTML in two places.


00:48:46.800 --> 00:48:50.480
That's not a great option, right? You don't want to have, it's just like you wouldn't duplicate


00:48:50.480 --> 00:48:54.960
code. You don't want to duplicate the design and the HTML and stuff that makes up the part of the


00:48:54.960 --> 00:49:00.160
page and have inline for the main one. And then a second copy just so you can make it dynamic.


00:49:00.160 --> 00:49:05.440
So I'm not against this. I think this is really a neat idea here to be able to grab


00:49:05.440 --> 00:49:11.120
that section and render that Pepsi side, Michael's library called Jinja partials,


00:49:11.120 --> 00:49:16.160
which says, instead of putting it all into one big place, let's treat it more like


00:49:16.160 --> 00:49:24.080
function based programming. So what you can do is you can say, I'm going to define an HTML


00:49:24.080 --> 00:49:29.440
partial or a piece that just has that section that you're interested in. Right? So maybe


00:49:30.720 --> 00:49:35.760
you might have like one part that displays a particular video in our example from the course,


00:49:35.760 --> 00:49:41.280
right? And that thing has to be past certain bits of information, like what the video is,


00:49:41.280 --> 00:49:46.320
you can get the ID and so on. And then when you use it, you kind of, instead of putting the HTML


00:49:46.320 --> 00:49:51.920
inline, you call it like a function in the HTML. So you would say like div, here's the thing that


00:49:51.920 --> 00:49:56.800
contains it, you know, render partial, here's the thing and you call it. So it's kind of two sides


00:49:56.800 --> 00:50:02.080
of the same coin, but like very much Coke, Pepsi is a good analogy here. Like this one says, I would


00:50:02.080 --> 00:50:07.280
like to maybe be able to reuse that across different pages, just like you would a function


00:50:07.280 --> 00:50:12.560
in Python. I might want to use it in more than one place. And so it makes sense to have it in its own


00:50:12.560 --> 00:50:16.480
separate thing, right? Like in this example, you might want to show a video, but you might want to


00:50:16.480 --> 00:50:20.960
do it on a, like a list of videos and you might want to do it on a profile page where you have


00:50:20.960 --> 00:50:26.320
favorites, right? And those wouldn't, the fragment style, you would have to duplicate that HTML.


00:50:26.320 --> 00:50:33.520
So this one allows you to have like a nice, simple way to do that, right? And then on the server


00:50:33.520 --> 00:50:37.280
side, it makes it simpler because I don't know if there's any examples here. I'm sure there is,


00:50:37.280 --> 00:50:43.280
but on the server side, all you do is you just say the template response is the partial and you just


00:50:43.280 --> 00:50:47.680
provide the data and you don't have to do like, if it's the full thing, or if it's a partial thing,


00:50:47.680 --> 00:50:53.680
I'm going to do different stuff on the server. Right? So that's the Jinja partials. I don't


00:50:53.680 --> 00:50:59.520
have a Django partials, but you know, this, this applies for Flask, FastAPI and others.


00:50:59.520 --> 00:51:08.080
So on the Django template library, the include tag is either slightly more powerful than the


00:51:08.080 --> 00:51:13.680
Jinja one, or just better documented. A lot of the reasons you wrote this library, I can do with


00:51:13.680 --> 00:51:18.240
the existing Django include tag. So there's like a tiny little use case where it doesn't overlap,


00:51:18.240 --> 00:51:22.240
but like everything, everything in the course, for example, I was able to do quite simply with


00:51:22.240 --> 00:51:27.360
just using the include tag that there is a library out there. That is the, what did you say it was


00:51:27.360 --> 00:51:34.240
the Coke version? And that is the Django render block. This is by Patrick cloak. And essentially


00:51:34.240 --> 00:51:40.240
he's using something very similar to the Jinja2 fragments. And it essentially allows you to


00:51:40.240 --> 00:51:46.800
pull out a template block from a page. This has actually spooky, Lukie's preferred approach.


00:51:46.800 --> 00:51:51.520
It's in his patterns. I think in this case, I'm a Pepsi guy. I'm with you. I would rather have the


00:51:51.520 --> 00:51:58.560
piece inside its own file. But I think the, the reason behind having it in the blocks is essentially


00:51:58.560 --> 00:52:03.040
you can turn conditionals on, have that one page, the whole thing gets rendered. And then the


00:52:03.040 --> 00:52:08.320
snippets are always using the same library and you can just flag, Hey, I want this partial piece


00:52:08.320 --> 00:52:13.440
coming out of it. Essentially. These are very, very similar concepts, just the Django versus the


00:52:13.440 --> 00:52:19.440
Jinja Django templating. Cause of course, Jinja is in Django as well. So the Django native


00:52:19.440 --> 00:52:24.240
templating versus the Jinja piece, and you can take either approach depending on what works for


00:52:24.240 --> 00:52:28.880
you. Yep. And just to wrap this up before I get a lot of email, a lot of email, there's a whole


00:52:28.880 --> 00:52:33.920
section that says, why not just use include or macro from Jinja? And there's a great long


00:52:33.920 --> 00:52:40.240
discussion here with lots of examples. The short version is with macro. If you want to render the


00:52:40.240 --> 00:52:47.840
template alone, you have to have a third page that just calls the macro that just embeds the macro


00:52:47.840 --> 00:52:54.400
and then calls it in an empty page for the template. Why not use include? Well, with include,


00:52:54.400 --> 00:53:00.960
you have to have the thing, the variable names in the partial match the consumer. So it's as if you


00:53:00.960 --> 00:53:06.560
had to say, I want a function, I want to call a function, but your local variable names have to


00:53:06.560 --> 00:53:12.480
match exactly the parameter names in every use case that you can't say like, user where there


00:53:12.480 --> 00:53:15.120
was a username. Nope. You can't call this function that you're supposed to call your


00:53:15.120 --> 00:53:19.920
variable, local variable user. You know, it's, it's, so there's a look at that discussion and


00:53:19.920 --> 00:53:24.560
then, then email me if you have to. And that's, that's why the Django one doesn't have this


00:53:24.560 --> 00:53:30.160
problem is because the include tag in Django has a with keyword, which allows you to essentially


00:53:30.160 --> 00:53:35.280
say, I want this, this bit of context passed in as that value. So you can essentially the


00:53:35.280 --> 00:53:40.320
equivalent there would be with video equals V email equals user dot email to accomplish the


00:53:40.320 --> 00:53:44.800
same thing, which is why I could get away with not needing the extra library. Nice.


00:53:44.800 --> 00:53:49.840
There is somebody down here who said, I'm not sure what their name is, but I think they found an


00:53:49.840 --> 00:53:58.160
internal, like a, a deeply internal function from within Jinja. I think I'm not sure if it's in


00:53:58.160 --> 00:54:02.480
Jinja or flask, but you're able effectively to do the same thing, but it's like, I don't know,


00:54:02.480 --> 00:54:05.920
I'm not a fan. I like grabbing some random internal thing and going, I think we'll probably


00:54:05.920 --> 00:54:10.960
just use that. You know, I also just, there's a chameleon's partial. If you're a chameleon


00:54:10.960 --> 00:54:14.000
template person that does the same thing, it's a Jinja partial as well.


00:54:14.000 --> 00:54:17.040
Yeah. When you first showed this to me, I looked it up in the Jinja docs,


00:54:17.040 --> 00:54:22.800
cause I don't use Jinja as often and it kind of hints that this is there, but it was really,


00:54:22.800 --> 00:54:27.920
really unclear. It just sort of gave one example and didn't explain it. And so, yeah, it doesn't


00:54:27.920 --> 00:54:34.320
surprise me that there's something that can be done, but maybe it's, maybe it's publicly available.


00:54:34.320 --> 00:54:38.000
And if they got documented a little better, it might solve the problem and you could,


00:54:38.000 --> 00:54:40.960
you know, close up that chunk of code you had to maintain.


00:54:40.960 --> 00:54:44.960
Yeah. I mean, I'm not necessarily in love with it. I just, I created it cause I want to have


00:54:44.960 --> 00:54:49.440
really nice clean code, right? Yeah, exactly. Of the problem. You know, pull up the Django render


00:54:49.440 --> 00:54:53.840
block. You already really talked about that one. That's on the, the similar side is to the


00:54:53.840 --> 00:54:58.080
Jinja fragments partial to a fragment. Sorry. That's what we talked about. That's right.


00:54:58.080 --> 00:55:02.640
Whereas the, all the stuff is together. And I think that's a good idea if you're never,


00:55:02.640 --> 00:55:08.800
ever going to use that block of that bit of HTML and dynamic bit anywhere else. But as soon as you


00:55:08.800 --> 00:55:12.560
are, then it's like, well, it's starting to get, I don't know. That's my philosophy.


00:55:12.560 --> 00:55:17.520
Yeah. One of the reasons I use the include template, even for, I use it even just to shrink


00:55:17.520 --> 00:55:22.000
the size of the HTML file. Like I don't even care if it's not reused. Sometimes I just find it


00:55:22.000 --> 00:55:26.640
easier to read cause HTML is so verbose. I sometimes just find it easier to read something


00:55:26.640 --> 00:55:31.600
that goes, Oh, include row from this row file. I'm like, Oh, okay. I don't have to think about


00:55:31.600 --> 00:55:35.280
how many divs are in the row. I understand what's in that row and it allows me to read it easier.


00:55:35.280 --> 00:55:40.640
So obviously the cost of that is a performance of compiling the template, but I'll take that


00:55:40.640 --> 00:55:44.560
for code readability every day of the week. Just throw more CPU at it. Yeah. I'm a hundred


00:55:44.560 --> 00:55:49.920
percent with you and yeah, you don't have to worry about whether the 17th, the div is matching or not


00:55:49.920 --> 00:55:54.720
or yeah, all that stuff. Yeah. Yeah. Okay. You talked about flask, HTML eight of that.


00:55:54.720 --> 00:56:00.480
ASGI one HX requests. What's this one about? This is a similar, right?


00:56:00.480 --> 00:56:05.360
It solves the same problem, but in a different fashion. So this is by a gentleman named


00:56:05.360 --> 00:56:11.600
Yakov Lonsin and essentially he's using a lot of the class-based view philosophy.


00:56:11.600 --> 00:56:17.920
Not that he's actually using class-based views, but essentially you are building out your requests,


00:56:17.920 --> 00:56:25.840
HX request handling as classes. And he's gone to the level of defining custom tags that you use


00:56:25.840 --> 00:56:30.640
instead of the attribute and it will automatically wire that together. So you don't even have to


00:56:30.640 --> 00:56:36.080
declare your URLs. And this is, and again, back to that Coke versus Pepsi thing. This is that sort of


00:56:36.080 --> 00:56:41.120
that, that the definition between function-based and class-based, the contrast between function


00:56:41.120 --> 00:56:45.280
class-based classes always made me a little uncomfortable because they're a little bit magic.


00:56:45.280 --> 00:56:50.640
It often means writing less code, but if for someone who isn't used to it, they have to go


00:56:50.640 --> 00:56:55.440
digging to understand what's happening. He's definitely taken a bit of a magic approach here.


00:56:55.440 --> 00:57:02.160
There's less code, but you can, you've got this magical wiring of change email as you've got up


00:57:02.160 --> 00:57:07.200
on the screen, getting wired to the actual HX change email underneath and being able to find


00:57:07.200 --> 00:57:12.320
all that code. So if you're a class-based view person, this will probably feel very, very natural


00:57:12.320 --> 00:57:17.360
and a good approach to take. If you're not already intimately familiar with class-based views,


00:57:17.360 --> 00:57:19.760
this wouldn't be somewhere where I would send you.


00:57:19.760 --> 00:57:23.200
You're going to add more overhead to figure out how to put all that together than just


00:57:23.200 --> 00:57:26.800
exactly to use the other libraries. Yeah, that's right. Well, we have a lot of things we've been


00:57:26.800 --> 00:57:31.520
going through, but I think we're getting close to the end of the list here. Django dashboards.


00:57:31.520 --> 00:57:37.360
Yeah, actually, why don't we just skip down to a Wella club and maybe we can cap it out


00:57:37.360 --> 00:57:39.920
right there. Cause I thought that's probably a really good example.


00:57:39.920 --> 00:57:42.080
Multilingual version, the original.


00:57:42.080 --> 00:57:48.240
So this is if you want to go one place to see everything working together, this is the place


00:57:48.240 --> 00:57:55.200
to go. So this is also by Adam Johnson. So he's the same guy who does Django HTMX. Wella is a


00:57:55.200 --> 00:58:01.280
Nambian game that is kind of similar to another game called Huss. I will admit I couldn't fully


00:58:01.280 --> 00:58:06.640
wrap my head around the rules of the game. It's essentially like a little board with holes in it.


00:58:06.640 --> 00:58:11.760
And there's stones in the board. There's a good picture up there. Good. And the rules are you


00:58:12.000 --> 00:58:16.480
on your turn, you have to move some of your stones. And if you move them correctly, you're


00:58:16.480 --> 00:58:20.080
done. Your turn is done. If you don't move them correctly, you can take other people's stones,


00:58:20.080 --> 00:58:25.200
whatever. So it's one of those very simple games with a lot of strategy. And like I said, I didn't


00:58:25.200 --> 00:58:30.720
quite fully wrap my head around the game, but that's not what I was here for. He's written a


00:58:30.720 --> 00:58:38.000
HTMX based version on the web here. You've got a fully automated computer opponent. So you can play


00:58:38.000 --> 00:58:43.600
against the computer. It has the layout of the board with the number of rows and stones. And


00:58:43.600 --> 00:58:48.880
then there's a number for how many stones are in each hole. And if you click one of the links,


00:58:48.880 --> 00:58:54.320
the one of the numbers, it automatically moves the stones according to the rules. And all of this,


00:58:54.320 --> 00:59:01.040
of course, as you can imagine, is updated through HTMX. It even has the base version of this ships


00:59:01.040 --> 00:59:07.520
with the Django debug toolbar on so you can watch what is going on. And then in the background,


00:59:07.520 --> 00:59:12.880
because it will host multiple games at a time. We were talking a bit about that polling concept.


00:59:12.880 --> 00:59:17.920
It's using the HTMX polling mechanism. And in the top right hand corner, there's a little report


00:59:17.920 --> 00:59:22.720
of how many games are in progress at the moment. So I really, really liked this example. So there's


00:59:22.720 --> 00:59:27.120
other examples that are good on the list, but most of them are toys. They either show off something


00:59:27.120 --> 00:59:31.760
like an event coming from the server and no cleanliness. One of the other examples I played


00:59:31.760 --> 00:59:36.640
with was like a little book database and it worked. But if you typed in a number in a place


00:59:36.640 --> 00:59:40.720
that was a name in a place where it was supposed to have number, it would crash. This is actually


00:59:40.720 --> 00:59:46.160
a working application. And so you've got a nice solid example to how everything works, all the


00:59:46.160 --> 00:59:51.040
different attributes and go. So if you're comfortable enough with, if you're new to Django,


00:59:51.040 --> 00:59:54.640
then maybe this isn't where you start. But if you're comfortable with Django, and you really


00:59:54.640 --> 00:59:59.920
just want to see a one place where all the HX parts are working together, and it's a fun way


00:59:59.920 --> 01:00:04.240
to learn something. This would definitely be the example I would use. I thought, yeah, it looks


01:00:04.240 --> 01:00:10.400
like quite a cool way to build things with HTMX. I'm not even sure I would have bought HTMX totally


01:00:10.400 --> 01:00:15.280
applies to this level of kind of interactivity because it says you can do player versus player


01:00:15.280 --> 01:00:20.000
games with the polling trigger and stuff like that. It's a pretty deep example. But of course,


01:00:20.000 --> 01:00:26.000
you kind of expect it out of the HTMX Django, HTMX guy, right? So I, and actually, so as an aside,


01:00:26.000 --> 01:00:31.680
there's also a relatively decent demo inside of that library as well. So if you grab, if you get


01:00:31.680 --> 01:00:37.680
clone Django HTMX, there's an examples directory that also has not quite as comprehensive this,


01:00:37.680 --> 01:00:42.400
but that's another good place to start as well if you're looking for sample code. So plenty of good


01:00:42.400 --> 01:00:49.840
stuff out there with good real world purpose. Cool. Well, quite the look inside of HTMX,


01:00:49.840 --> 01:00:54.400
Christopher. Thank you. Yeah, it's been fun. Yeah. So many things these days to make it work


01:00:54.400 --> 01:00:59.360
with Django. When I started out, like many of these libraries didn't exist. I would have probably just


01:00:59.360 --> 01:01:04.080
grabbed one. I used it at, I had it at the time, you know, it definitely makes a big difference.


01:01:04.080 --> 01:01:10.960
And at the HTMX community is, is I accidentally found out very, very vibrant. Somebody found the


01:01:10.960 --> 01:01:16.880
future table of contents of my book and posted on, as you said, that the artist formerly known


01:01:16.880 --> 01:01:22.560
as Twitter, Hey, there's an HTMX chapter coming in this Django book. And my feed just exploded


01:01:22.560 --> 01:01:28.080
for like the next three days of everybody going, yay, HTMX. So there's a very strong and excited


01:01:28.080 --> 01:01:32.800
community out there that's, that's playing with this tool. And as I said, it makes a real big


01:01:32.800 --> 01:01:37.360
difference in your ability to build stuff quickly and effectively. Sure does. And speaking to the


01:01:37.360 --> 01:01:42.400
long-term sustainability right at the top of the HTMX.org page, it says we're excited to announce


01:01:42.400 --> 01:01:48.880
that HTMX has been accepted into the first class of the GitHub open source accelerator. So more


01:01:48.880 --> 01:01:52.880
momentum for HTMX. Excellent. All right. Final call to action. People want to get started with


01:01:52.880 --> 01:01:57.120
this stuff. They want to dive into it a little bit more. What do you tell them? Start with the page


01:01:57.120 --> 01:02:03.120
you've got up right now for sure. HTMX.org is a good place to go. And, you know, at risk of


01:02:03.120 --> 01:02:07.120
sounding like an infomercial, we have a couple of really high quality courses that you could also


01:02:07.120 --> 01:02:12.800
check out. It would definitely be, definitely be places to go to, to go with things. And of course,


01:02:12.800 --> 01:02:17.040
you know, we'll link in the show notes to all those lists, but there's a lot of content there.


01:02:17.040 --> 01:02:20.640
If you just kind of want to go digging and play around. Yeah. We only just touched on a little


01:02:20.640 --> 01:02:26.800
tiny bit of it. So plenty more to go into lots of interviews, lots of example, lots of blog posts


01:02:26.800 --> 01:02:30.960
and articles that you can go check out and your book, your book will be out in spring. So people


01:02:30.960 --> 01:02:35.040
can check that as well. Appreciate it. Yes. Yeah. Thank you so much for being on the show. Always


01:02:35.040 --> 01:02:40.560
nice to catch up with you. Glad to be here. Yeah. See ya. Bye. This has been another episode of


01:02:40.560 --> 01:02:45.520
Talk Python to Me. Thank you to our sponsors. Be sure to check out what they're offering. It really


01:02:45.520 --> 01:02:52.480
helps support the show. When it comes to artificial intelligence, AI, what's good for trillion dollar


01:02:52.480 --> 01:02:58.320
companies isn't necessarily good for people. That's the theme of season seven of IRL, Mozilla's


01:02:58.320 --> 01:03:03.520
multi award-winning podcast hosted by Bridget Todd. Season seven is all about putting people


01:03:03.520 --> 01:03:08.960
over profit in AI. Check them out and listen to an episode at talkpython.fm/IRL.


01:03:08.960 --> 01:03:15.120
Sentry. They have a special live event, like a mini online conference where you can connect with


01:03:15.120 --> 01:03:20.560
the team and take a deep dive into different products and services every day for a week.


01:03:20.560 --> 01:03:26.000
Join them for launch week, new product releases, exclusive demos, and discussions with experts from


01:03:26.000 --> 01:03:30.640
their community on the latest with Sentry. You'll see how Sentry's latest product updates can make


01:03:30.640 --> 01:03:38.160
your work life easier. Visit talkpython.fm/Sentry dash launch dash week to register for free.


01:03:38.160 --> 01:03:44.080
Want to level up your Python? We have one of the largest catalogs of Python video courses over at


01:03:44.080 --> 01:03:50.000
Talk Python. Our content ranges from true beginners to deeply advanced topics like memory and async.


01:03:50.000 --> 01:03:54.240
And best of all, there's not a subscription in sight. Check it out for yourself at training.talkpython.fm.


01:03:54.240 --> 01:04:00.480
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.


01:04:00.480 --> 01:04:04.720
We should be right at the top. You can also find the iTunes feed at /itunes,


01:04:04.720 --> 01:04:10.880
the Google Play feed at slash Play, and the direct RSS feed at /rss on talkpython.fm.


01:04:10.880 --> 01:04:15.520
We're live streaming most of our recordings these days. If you want to be part of the show and have


01:04:15.520 --> 01:04:20.800
your comments featured on the air, be sure to subscribe to our YouTube channel at talkpython.fm


01:04:20.800 --> 01:04:25.280
slash YouTube. This is your host, Michael Kennedy. Thanks so much for listening. I


01:04:25.280 --> 01:04:32.960
really appreciate it. Now get out there and write some Python code.


01:04:32.960 --> 01:04:48.800
Bye.

