WEBVTT

00:00:00.000 --> 00:00:01.840
Why is Python so popular?

00:00:01.840 --> 00:00:03.460
There's plenty of room for debate on this,

00:00:03.460 --> 00:00:05.940
but one solid reason is it's easy to adopt,

00:00:05.940 --> 00:00:07.560
easy to use, and caters to people

00:00:07.560 --> 00:00:10.220
who are not quite developers, data scientists,

00:00:10.220 --> 00:00:13.100
but need to get some computing done.

00:00:13.100 --> 00:00:15.320
Do you know where the largest untapped set

00:00:15.320 --> 00:00:17.080
of those people hang out?

00:00:17.080 --> 00:00:18.080
Excel.

00:00:18.080 --> 00:00:19.520
That's why it's super exciting

00:00:19.520 --> 00:00:23.300
that Python is now going to be built directly into Excel.

00:00:23.300 --> 00:00:25.900
Just go into a cell and type equals pi,

00:00:25.900 --> 00:00:28.220
and you're off writing full Python 3 code

00:00:28.220 --> 00:00:30.980
that is backed by a lightweight Anaconda distribution

00:00:30.980 --> 00:00:32.440
of Python.

00:00:32.440 --> 00:00:34.300
We have Dr. Sarah Kaiser here

00:00:34.300 --> 00:00:37.320
to give us the rundown on Python in Excel.

00:00:37.320 --> 00:00:38.500
This is "Talk Python to Me,"

00:00:38.500 --> 00:00:42.020
episode 445 recorded live and on location

00:00:42.020 --> 00:00:46.780
at Microsoft Ignite in Seattle, November 16th, 2023.

00:00:46.780 --> 00:00:49.360
(upbeat music)

00:00:51.940 --> 00:01:02.200
Welcome to "Talk Python to Me,"

00:01:02.200 --> 00:01:04.120
a weekly podcast on Python.

00:01:04.120 --> 00:01:05.920
This is your host, Michael Kennedy.

00:01:05.920 --> 00:01:08.280
Follow me on Mastodon, where I'm @mkennedy,

00:01:08.280 --> 00:01:10.980
and follow the podcast using @talkpython,

00:01:10.980 --> 00:01:13.560
both on fosstodon.org.

00:01:13.560 --> 00:01:15.660
Keep up with the show and listen to over seven years

00:01:15.660 --> 00:01:18.800
of past episodes at talkpython.fm.

00:01:18.800 --> 00:01:22.280
We've started streaming most of our episodes live on YouTube.

00:01:22.280 --> 00:01:23.480
Subscribe to our YouTube channel

00:01:23.480 --> 00:01:25.880
over at talkpython.fm/youtube

00:01:25.880 --> 00:01:28.080
to get notified about upcoming shows

00:01:28.080 --> 00:01:30.200
and be part of that episode.

00:01:30.200 --> 00:01:32.840
This episode is sponsored by Posit Connect

00:01:32.840 --> 00:01:34.360
from the makers of Shiny.

00:01:34.360 --> 00:01:36.800
Publish, share, and deploy all of your data projects

00:01:36.800 --> 00:01:38.840
that you're creating using Python.

00:01:38.840 --> 00:01:42.320
Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask,

00:01:42.320 --> 00:01:45.840
Quarto, Reports, Dashboards, and APIs.

00:01:45.840 --> 00:01:47.680
Posit Connect supports all of them.

00:01:47.680 --> 00:01:49.160
Try Posit Connect for free

00:01:49.160 --> 00:01:54.040
by going to talkpython.fm/posit, P-O-S-I-T.

00:01:54.040 --> 00:01:55.080
And it's brought to you by

00:01:55.080 --> 00:01:57.520
the PyBites Developer Mindset Program.

00:01:57.520 --> 00:01:59.480
PyBytes' core mission is to help you break

00:01:59.480 --> 00:02:01.720
the vicious cycle of tutorial paralysis

00:02:01.720 --> 00:02:04.200
through developing real-world applications.

00:02:04.200 --> 00:02:05.920
The PyBites Developer Mindset Program

00:02:05.920 --> 00:02:07.900
will help you build the confidence you need

00:02:07.900 --> 00:02:10.200
to become a highly effective developer.

00:02:10.200 --> 00:02:13.160
The link is in your podcast player show notes.

00:02:13.160 --> 00:02:14.680
Sarah, welcome to Talk Python to Me.

00:02:14.680 --> 00:02:15.520
- Hey, how's it going?

00:02:15.520 --> 00:02:19.080
- Hey, it's going super well, super well,

00:02:19.080 --> 00:02:22.200
here at Ignite for one more time

00:02:22.200 --> 00:02:25.120
to talk about cool stuff with Python and things going on.

00:02:25.120 --> 00:02:28.560
And this time it's gonna be Excel and Python.

00:02:28.560 --> 00:02:30.520
It's like Reese's Pieces,

00:02:30.520 --> 00:02:32.440
you got your chocolate and my peanut butter.

00:02:32.440 --> 00:02:33.960
Like, what's going on here?

00:02:33.960 --> 00:02:36.920
I mean, the cats and dogs, are they living together?

00:02:36.920 --> 00:02:37.760
What's happening?

00:02:37.760 --> 00:02:39.400
- The old school and the new school.

00:02:39.400 --> 00:02:40.920
- That's right.

00:02:40.920 --> 00:02:42.480
The open source and the not.

00:02:42.480 --> 00:02:43.480
- Yeah, yeah.

00:02:43.480 --> 00:02:45.280
My background is I've been a data scientist

00:02:45.280 --> 00:02:46.160
for a long time.

00:02:46.160 --> 00:02:48.760
I did my PhD in quantum computing

00:02:48.760 --> 00:02:50.240
in like experimental physics stuff.

00:02:50.240 --> 00:02:53.200
So trying, actually my first programming language

00:02:53.200 --> 00:02:55.160
was Mathematica and that was actually

00:02:55.160 --> 00:02:56.960
what got me hooked on kind of the notebook

00:02:56.960 --> 00:02:57.960
sort of interface.

00:02:57.960 --> 00:02:58.800
- Yeah, okay.

00:02:58.800 --> 00:03:01.200
Well, normally people say their first programming language

00:03:01.200 --> 00:03:03.800
when that's the background is MATLAB.

00:03:03.800 --> 00:03:04.640
- Yeah, yeah, yeah.

00:03:04.640 --> 00:03:06.240
- But I would say Mathematica is like

00:03:06.240 --> 00:03:10.320
the proper mathematician's programming space

00:03:10.320 --> 00:03:12.840
because it does symbolic math, right?

00:03:12.840 --> 00:03:15.720
- Which is so remarkable when you see it go.

00:03:15.720 --> 00:03:18.640
- Yeah, like that was basically like I could visualize,

00:03:18.640 --> 00:03:21.320
the thing was being able to do easy visualizations.

00:03:21.320 --> 00:03:23.160
So actually after undergrad,

00:03:23.160 --> 00:03:24.920
I worked at Mathematica for a while

00:03:24.920 --> 00:03:26.360
on their visualizations team.

00:03:26.360 --> 00:03:27.200
- Really?

00:03:27.200 --> 00:03:28.040
- Yeah.

00:03:28.040 --> 00:03:28.880
- What technologies was that in?

00:03:28.880 --> 00:03:31.200
- I was actually just writing Mathematica in Mathematica.

00:03:31.200 --> 00:03:32.560
Thankfully I didn't have to touch any

00:03:32.560 --> 00:03:34.720
of the optimization stuff underneath,

00:03:34.720 --> 00:03:38.800
but designing new like gauges and plotting built-ins

00:03:38.800 --> 00:03:39.760
and stuff like that.

00:03:39.760 --> 00:03:41.520
I really enjoy visualizing

00:03:41.520 --> 00:03:43.160
and understanding data that way.

00:03:43.160 --> 00:03:45.680
And so when I got to grad school,

00:03:45.680 --> 00:03:49.400
realized that none of our instruments talk together.

00:03:49.400 --> 00:03:51.880
Like everything was an entirely separate,

00:03:51.880 --> 00:03:54.040
archaic, non-documented protocol.

00:03:54.040 --> 00:03:57.720
And we were having to somehow like either sit by hand

00:03:57.720 --> 00:04:00.240
and match up all of these CSV dumps

00:04:00.240 --> 00:04:02.360
from the different tools and stuff like that.

00:04:02.360 --> 00:04:06.400
So basically I started learning Python to make our lab work.

00:04:06.400 --> 00:04:09.200
So initially it was like using a serial

00:04:09.200 --> 00:04:12.720
and C types libraries to actually interface with these APIs.

00:04:12.720 --> 00:04:15.800
But I realized someone once showed me a Jupyter Notebooks

00:04:15.800 --> 00:04:19.640
and I was like, okay, this is how we're, this is the way.

00:04:19.640 --> 00:04:21.120
- This is Mathematica for Python.

00:04:21.120 --> 00:04:21.960
- Exactly.

00:04:21.960 --> 00:04:24.880
So I have been using Jupyter Notebooks

00:04:24.880 --> 00:04:26.440
almost since they came out.

00:04:26.440 --> 00:04:30.320
And really enjoyed that both as a learning tool,

00:04:30.320 --> 00:04:34.480
a teaching tool and a kind of reproducible science tool.

00:04:34.480 --> 00:04:36.880
- Yeah, it's just taken the world by storm, really.

00:04:36.880 --> 00:04:38.720
They were here at Microsoft Ignite,

00:04:38.720 --> 00:04:40.920
the keynote, they went, they had like basically

00:04:40.920 --> 00:04:44.960
one code oriented demo in the two and a half hour keynote.

00:04:44.960 --> 00:04:48.120
And it was, now we have a Jupyter Notebook

00:04:48.120 --> 00:04:51.120
with some Python code that's gonna do some machine learning

00:04:51.120 --> 00:04:53.800
and you know, back to cats and dogs.

00:04:53.800 --> 00:04:54.960
- Yeah, yeah, yeah.

00:04:54.960 --> 00:04:55.800
- That's incredible.

00:04:55.800 --> 00:04:57.160
So yeah, very cool.

00:04:57.160 --> 00:04:58.080
These days, what are you doing?

00:04:58.080 --> 00:05:01.000
- I am a developer advocate at Microsoft

00:05:01.000 --> 00:05:04.440
on the Python team, focusing on data science

00:05:04.440 --> 00:05:08.240
and machine learning, the sorts of Python tools.

00:05:08.240 --> 00:05:10.880
So I get to do all the fun stuff with Pandas,

00:05:10.880 --> 00:05:13.680
NumPy, SciPy, all of those things.

00:05:13.680 --> 00:05:16.400
And that's kind of why when I heard about

00:05:16.400 --> 00:05:18.800
the Python and Excel preview, I was like,

00:05:18.800 --> 00:05:23.800
"Oh, I have done many Pandas import from Excel

00:05:23.800 --> 00:05:25.320
sort of things."

00:05:25.320 --> 00:05:27.080
And was kind of curious just to see,

00:05:27.080 --> 00:05:29.240
'cause initially I was like,

00:05:29.240 --> 00:05:31.120
"I'm pretty cool with my Python.

00:05:31.120 --> 00:05:33.200
I'm not sure why I wanna go that way."

00:05:33.200 --> 00:05:36.440
But I said to say, I think I'm convinced now.

00:05:36.440 --> 00:05:37.280
- Are you?

00:05:37.280 --> 00:05:38.120
Okay.

00:05:38.120 --> 00:05:41.160
So that's kind of a different way than a Jupyter notebook.

00:05:41.160 --> 00:05:42.760
It's for pluses and minuses.

00:05:42.760 --> 00:05:45.720
We'll talk about some fun ones of those as we go.

00:05:45.720 --> 00:05:49.040
Who are you evangelizing Python on the behalf

00:05:49.040 --> 00:05:50.080
of Microsoft too?

00:05:50.080 --> 00:05:52.680
So are you talking to like companies that do .NET

00:05:52.680 --> 00:05:53.960
and saying, "Hey, you should do Python."

00:05:53.960 --> 00:05:56.400
Or are you talking to companies that love Python

00:05:56.400 --> 00:05:59.160
and saying like, "Hey, you should consider Azure

00:05:59.160 --> 00:06:01.120
or our offering."

00:06:01.120 --> 00:06:02.280
What does your world look like?

00:06:02.280 --> 00:06:03.120
What do you do today?

00:06:03.120 --> 00:06:03.960
- Yeah, yeah.

00:06:03.960 --> 00:06:04.880
A lot of it is doing testing.

00:06:04.880 --> 00:06:06.960
I work a lot with the VS Code team

00:06:06.960 --> 00:06:10.040
and the Jupyter, specifically like the Jupyter features

00:06:10.040 --> 00:06:12.680
in VS Code to make sure all the notebooks work,

00:06:12.680 --> 00:06:16.680
to make sure packages with kind of weird output

00:06:16.680 --> 00:06:19.600
visualizations, are they rendering properly?

00:06:19.600 --> 00:06:23.240
Generally, I think I work with a lot of the actual

00:06:23.240 --> 00:06:25.560
Python open source maintainer communities

00:06:25.560 --> 00:06:27.520
in the kind of scientific Python space.

00:06:27.520 --> 00:06:30.200
So like with the NumFocus supported projects

00:06:30.200 --> 00:06:32.560
and really just try to kind of understand

00:06:32.560 --> 00:06:34.120
what are they running into.

00:06:34.120 --> 00:06:38.160
And as we're definitely seeing both with all of the LLM

00:06:38.160 --> 00:06:41.560
and machine learning stuff, like data is getting so big

00:06:41.560 --> 00:06:44.280
that I definitely can't open it in one Excel sheet.

00:06:44.280 --> 00:06:45.800
(laughs)

00:06:45.800 --> 00:06:50.200
So the data is basically, it's all native on the cloud.

00:06:50.200 --> 00:06:53.720
And so there's, I think a lot of kind of the academic space

00:06:53.720 --> 00:06:56.920
that I come from of like, that isn't really part

00:06:56.920 --> 00:06:58.440
of the curriculum or what's taught,

00:06:58.440 --> 00:07:01.120
or people kind of have to learn it ad hoc.

00:07:01.120 --> 00:07:04.960
And so basically, I kind of like to think of myself

00:07:04.960 --> 00:07:07.840
as someone who gets to go do all that learning

00:07:07.840 --> 00:07:10.960
about kind of how does science and data interact

00:07:10.960 --> 00:07:13.720
with the cloud, and in this case, specifically Azure,

00:07:13.720 --> 00:07:17.000
and just try and help build out scenarios,

00:07:17.000 --> 00:07:19.160
like build sample apps, things like that,

00:07:19.160 --> 00:07:21.520
that can make it so they don't have to waste

00:07:21.520 --> 00:07:26.520
half their PhD time trying to understand cloud DevOps stuff.

00:07:26.520 --> 00:07:28.880
- Yeah, it sounds a little bit like, you know,

00:07:28.880 --> 00:07:31.240
a lot of people who are just brought into a lab

00:07:31.240 --> 00:07:32.680
and said, here, you're gonna learn Python,

00:07:32.680 --> 00:07:35.640
and then you can go do your actual research.

00:07:35.640 --> 00:07:38.600
They often sort of skimp out on like some

00:07:38.600 --> 00:07:41.160
of the very basic software practices,

00:07:41.160 --> 00:07:44.360
like what is Git, what is DevOps, how do I run this?

00:07:44.360 --> 00:07:46.280
Like those kinds of things, right?

00:07:46.280 --> 00:07:47.360
So maybe you--

00:07:47.360 --> 00:07:48.960
- I've run a lot of workshops.

00:07:48.960 --> 00:07:49.800
- Have you?

00:07:49.800 --> 00:07:53.080
- Basically, in my postdocs, I got really tired

00:07:53.080 --> 00:07:57.280
of my teams and groups that I was working with not knowing.

00:07:57.280 --> 00:07:59.760
So I basically made a standard two-day workshop

00:07:59.760 --> 00:08:02.200
that was like all of the computer science skills

00:08:02.200 --> 00:08:04.920
you missed in your physics degree.

00:08:04.920 --> 00:08:08.360
We did have, at one point, data that just existed only

00:08:08.360 --> 00:08:10.440
on a jump drive, and that jump drive walked away,

00:08:10.440 --> 00:08:12.280
and that does not feel super good

00:08:12.280 --> 00:08:13.600
from a research standpoint.

00:08:13.600 --> 00:08:14.440
- I can imagine.

00:08:14.440 --> 00:08:18.760
- So, yeah, let's just say we had a review of that

00:08:18.760 --> 00:08:20.480
and instituted new policies.

00:08:20.480 --> 00:08:23.400
- We've decided backups are good.

00:08:23.400 --> 00:08:24.240
- Yep.

00:08:24.240 --> 00:08:25.520
- Yeah, it's a bit of a diversion,

00:08:25.520 --> 00:08:29.520
but I worked on some math research before I graduated

00:08:29.520 --> 00:08:34.120
and got my bachelor's, and it was just in C++,

00:08:34.120 --> 00:08:37.360
but we had these large Silicon Graphics computers,

00:08:37.360 --> 00:08:40.440
like big mainframe thing, and we had Onyx workstations

00:08:40.440 --> 00:08:41.280
that went into it.

00:08:41.280 --> 00:08:44.560
We came in one morning, and nobody could log in.

00:08:44.560 --> 00:08:46.280
The computers wouldn't respond or turn on.

00:08:46.280 --> 00:08:49.400
It's like a quarter million dollar computer that got used,

00:08:49.400 --> 00:08:50.240
and it won't turn on.

00:08:50.240 --> 00:08:51.280
We're like, oh boy.

00:08:51.280 --> 00:08:52.280
(laughing)

00:08:52.280 --> 00:08:55.080
What had happened is one of the grad students,

00:08:55.080 --> 00:08:58.760
non-developer types just doing their research,

00:08:58.760 --> 00:09:00.480
but had a problem with their program,

00:09:00.480 --> 00:09:03.040
so they started logging to see what was going on,

00:09:03.040 --> 00:09:04.360
and they left it running overnight.

00:09:04.360 --> 00:09:07.400
It filled the disk to the very last byte,

00:09:07.400 --> 00:09:09.520
and apparently once the last byte was gone,

00:09:09.520 --> 00:09:12.280
the whole mainframe couldn't operate

00:09:12.280 --> 00:09:14.560
and just nobody could even figure out

00:09:14.560 --> 00:09:17.480
what was wrong with it forever, and eventually, yeah.

00:09:17.480 --> 00:09:18.960
So, you know, practices.

00:09:18.960 --> 00:09:23.960
- Yeah, we also had a five million dollar microscope

00:09:23.960 --> 00:09:26.960
get bricked because a younger grad student

00:09:26.960 --> 00:09:29.760
didn't understand that Windows XP Service Pack Zero

00:09:29.760 --> 00:09:31.560
should never be plugged into the internet.

00:09:31.560 --> 00:09:33.480
(laughing)

00:09:33.480 --> 00:09:35.360
- So no firewall, none of that.

00:09:35.360 --> 00:09:36.200
- Oh, no, no, no.

00:09:36.200 --> 00:09:37.040
- Why would you have that?

00:09:37.040 --> 00:09:38.760
- They were just like, well, it has an ethernet port,

00:09:38.760 --> 00:09:42.080
and the company said they can do support over TeamViewer

00:09:42.080 --> 00:09:43.280
or something like that, so they were like--

00:09:43.280 --> 00:09:45.280
- TeamViewer, that's never gonna go wrong.

00:09:45.280 --> 00:09:48.120
- So we walked in, and we had to yank it out of the wall,

00:09:48.120 --> 00:09:50.400
and we had the police there the next day

00:09:50.400 --> 00:09:51.640
because it had already been doing

00:09:51.640 --> 00:09:53.280
a legal financial transaction.

00:09:53.280 --> 00:09:54.120
(laughing)

00:09:54.120 --> 00:09:56.000
- It's in about 30 seconds.

00:09:56.000 --> 00:09:57.480
- You mean a microscope.

00:09:57.480 --> 00:09:59.000
You're here to arrest our microscope, okay.

00:09:59.000 --> 00:10:00.320
- Yeah, I was like, it's over there.

00:10:00.320 --> 00:10:01.160
(laughing)

00:10:01.160 --> 00:10:03.080
- They're like, well, that's not a computer.

00:10:03.080 --> 00:10:04.240
It sort of is.

00:10:04.240 --> 00:10:05.360
All right, another interesting thing

00:10:05.360 --> 00:10:07.440
before we dive into our main topic here

00:10:07.440 --> 00:10:10.560
is I'm not sure if this is real or not.

00:10:10.560 --> 00:10:12.040
Did it happen or did it not,

00:10:12.040 --> 00:10:14.600
this quantum work that you're doing?

00:10:14.600 --> 00:10:19.040
- Yeah, so my PhD was on quantum cryptography hardware,

00:10:19.040 --> 00:10:22.800
so both there exist commercial devices,

00:10:22.800 --> 00:10:25.080
so part of it was finding side channels

00:10:25.080 --> 00:10:28.560
in the physical devices that you could buy off the shelf,

00:10:28.560 --> 00:10:31.240
and then the other part was designing satellite optics

00:10:31.240 --> 00:10:35.320
for doing ground-to-satellite-based key exchange.

00:10:35.320 --> 00:10:38.200
So yeah, that was a lot of what I was doing,

00:10:38.200 --> 00:10:39.920
like prototyping things in the lab

00:10:39.920 --> 00:10:41.480
that would look like a satellite,

00:10:41.480 --> 00:10:43.400
and we'd, you know, satellite on one table,

00:10:43.400 --> 00:10:46.560
sender on the other, and we slowly worked out to,

00:10:46.560 --> 00:10:48.120
we did a bunch of tests in an airplane

00:10:48.120 --> 00:10:50.200
'cause turns out putting things on a satellite

00:10:50.200 --> 00:10:52.520
is kind of expensive, and--

00:10:52.520 --> 00:10:55.920
- What if we just flew really high in a 747?

00:10:55.920 --> 00:10:58.120
- Yeah, and weather balloons turn out

00:10:58.120 --> 00:11:00.760
to be not super predictable in the path

00:11:00.760 --> 00:11:01.880
once you launch them,

00:11:01.880 --> 00:11:04.120
and so if you're trying to aim telescopes,

00:11:04.120 --> 00:11:05.760
yeah, it kind of ended up being messy,

00:11:05.760 --> 00:11:06.840
but it was pretty cool.

00:11:06.840 --> 00:11:09.720
We got to go, I got to help with the design process

00:11:09.720 --> 00:11:13.080
for these single-photon kind of collection systems

00:11:13.080 --> 00:11:14.400
that went from literally,

00:11:14.400 --> 00:11:16.440
I'm just putting a couple lenses on the table

00:11:16.440 --> 00:11:19.600
and running Python stepper motor things

00:11:19.600 --> 00:11:21.120
in my Jupyter notebook to something

00:11:21.120 --> 00:11:23.480
that was actually automatically tracking

00:11:23.480 --> 00:11:25.720
and working from the ground to an airplane.

00:11:25.720 --> 00:11:27.280
Hopefully, eventually a satellite,

00:11:27.280 --> 00:11:30.480
but that's kind of out of my hands at this point.

00:11:30.480 --> 00:11:32.280
- Yeah, space takes a long time to get to,

00:11:32.280 --> 00:11:33.480
a lot of planning, a lot of,

00:11:33.480 --> 00:11:34.960
we worked on it for eight years,

00:11:34.960 --> 00:11:37.400
and then we had our launch window missed by a week.

00:11:37.400 --> 00:11:38.240
- Oof, yeah. - You know,

00:11:38.240 --> 00:11:39.480
or something like that, right?

00:11:39.480 --> 00:11:41.240
- Yeah, that's rough, and as a grad student,

00:11:41.240 --> 00:11:42.080
you gotta get out of there at some point.

00:11:42.080 --> 00:11:44.360
- Yeah, you're like, I gotta get a degree,

00:11:44.360 --> 00:11:45.800
I need to eat.

00:11:45.800 --> 00:11:46.640
- Yeah.

00:11:46.640 --> 00:11:48.280
- So let's get going.

00:11:48.280 --> 00:11:49.920
Cool, well, that sounds like a really fun project.

00:11:49.920 --> 00:11:51.720
You must have learned a lot.

00:11:51.720 --> 00:11:52.560
- Yeah.

00:11:52.560 --> 00:11:53.600
- Whenever you're talking to hardware,

00:11:53.600 --> 00:11:55.640
I think that's a special kind of programming.

00:11:55.640 --> 00:11:57.280
It's not just, I run the program,

00:11:57.280 --> 00:11:58.640
and then it just goes a little bit like,

00:11:58.640 --> 00:12:00.280
there's stuff it touches.

00:12:00.280 --> 00:12:02.160
- Yeah, like you don't get to necessarily

00:12:02.160 --> 00:12:04.080
do your own architectural design.

00:12:04.080 --> 00:12:06.880
You have to kind of first observe

00:12:06.880 --> 00:12:08.600
and usually reverse engineer

00:12:08.600 --> 00:12:11.520
what the original device engineers came up with

00:12:11.520 --> 00:12:14.520
and then figure out how is this,

00:12:14.520 --> 00:12:16.720
you know, this device is streaming-based,

00:12:16.720 --> 00:12:18.960
this device, how am I gonna like,

00:12:18.960 --> 00:12:21.640
these are entirely different application models.

00:12:21.640 --> 00:12:23.960
- You really, you chose the serial port, okay.

00:12:23.960 --> 00:12:26.040
All right then, let's go with that.

00:12:26.040 --> 00:12:30.520
Cool, all right, now before we get into Excel in Python,

00:12:30.520 --> 00:12:34.760
let's maybe talk about working with Excel from Python,

00:12:34.760 --> 00:12:35.840
like the reverse, right?

00:12:35.840 --> 00:12:37.880
So you talked a lot about notebooks,

00:12:37.880 --> 00:12:40.240
and many people go from kind of notebook

00:12:40.240 --> 00:12:42.520
into CSV into Excel,

00:12:42.520 --> 00:12:45.720
and there's some common tools for doing that,

00:12:45.720 --> 00:12:48.240
like even built into Pandas, for example.

00:12:48.240 --> 00:12:50.000
It could be Wilson's what they can do there

00:12:50.000 --> 00:12:51.680
before they have to necessarily decide,

00:12:51.680 --> 00:12:53.880
like I need to run it inside of Excel.

00:12:53.880 --> 00:12:55.400
I think there is still a special value

00:12:55.400 --> 00:12:57.240
to having structured code.

00:12:57.240 --> 00:12:58.080
- Oh yeah, for sure.

00:12:58.080 --> 00:12:59.360
- That you could have, I mean,

00:12:59.360 --> 00:13:02.720
notebooks is like kind of a fuzzy structured code.

00:13:02.720 --> 00:13:05.680
It's not like a proper PY file

00:13:05.680 --> 00:13:08.040
because you can run the stuff still out of order,

00:13:08.040 --> 00:13:10.200
but at least within the cell it runs within order.

00:13:10.200 --> 00:13:12.840
You know, it's like one dimensional out of order

00:13:12.840 --> 00:13:13.800
rather than like Excel,

00:13:13.800 --> 00:13:15.480
which is two dimensional potentially,

00:13:15.480 --> 00:13:17.400
or three if you're taking to other workbooks.

00:13:17.400 --> 00:13:19.440
But anyway, what can people do

00:13:19.440 --> 00:13:21.560
if they're not just to talk to Excel now?

00:13:21.560 --> 00:13:23.520
- Right, I think you kind of alluded to it,

00:13:23.520 --> 00:13:25.960
but the main way there are a couple of packages,

00:13:25.960 --> 00:13:28.720
one is actually built into Pandas,

00:13:28.720 --> 00:13:31.240
but I think it's a dependency on OpenPyXL.

00:13:31.240 --> 00:13:34.200
But yeah, that basically,

00:13:34.200 --> 00:13:36.120
I've been playing around with that recently

00:13:36.120 --> 00:13:38.200
to try and see if I can get support

00:13:38.200 --> 00:13:42.040
for the new Python-based cells in that parser.

00:13:42.040 --> 00:13:44.720
Turns out parsing XML is not fun

00:13:44.720 --> 00:13:47.120
and not something I like doing.

00:13:47.120 --> 00:13:51.560
- I've spent the last two days parsing Excel or XML.

00:13:51.560 --> 00:13:53.160
Oh my gosh, it's not fun.

00:13:53.160 --> 00:13:56.480
- In particular, standardized document specs,

00:13:56.480 --> 00:13:57.800
'cause that's basically,

00:13:57.800 --> 00:13:59.760
so there are wonderful packages out there already

00:13:59.760 --> 00:14:01.080
that do this for you.

00:14:01.080 --> 00:14:03.080
And so what you would do is you'd basically

00:14:03.080 --> 00:14:05.640
just hand your Excel files, CSV, whatever,

00:14:05.640 --> 00:14:08.320
to these packages and they would return them

00:14:08.320 --> 00:14:09.920
as basically whatever you like.

00:14:09.920 --> 00:14:12.240
Usually I go to Pandas tables 'cause,

00:14:12.240 --> 00:14:14.240
or data frames 'cause why not?

00:14:14.240 --> 00:14:17.280
But yeah, so there's basically any format

00:14:17.280 --> 00:14:18.840
that you could pretty much want.

00:14:18.840 --> 00:14:21.320
There's probably already really nice tooling

00:14:21.320 --> 00:14:24.280
to import that and you can just go right on your merry way

00:14:24.280 --> 00:14:25.320
using your Python.

00:14:25.320 --> 00:14:29.200
- Yeah, you can use the XLSX writer

00:14:29.200 --> 00:14:32.920
if you wanna create Excel versus read it, right?

00:14:32.920 --> 00:14:33.800
- Yeah, it's really cool.

00:14:33.800 --> 00:14:36.120
You can even make plots.

00:14:36.120 --> 00:14:40.120
You can, from Python, make a plot in the Excel worksheet

00:14:40.120 --> 00:14:41.520
so that when somebody opens it,

00:14:41.520 --> 00:14:44.320
they see the plot made in Excel, kinda crazy.

00:14:44.320 --> 00:14:47.000
- This portion of Talk Python to Me

00:14:47.000 --> 00:14:49.560
is brought to you by Posit, the makers of Shiny,

00:14:49.560 --> 00:14:54.280
formerly RStudio, and especially Shiny for Python.

00:14:54.280 --> 00:14:55.600
Let me ask you a question.

00:14:55.600 --> 00:14:57.320
Are you building awesome things?

00:14:57.320 --> 00:14:58.160
Of course you are.

00:14:58.160 --> 00:14:59.720
You're a developer or a data scientist.

00:14:59.720 --> 00:15:00.800
That's what we do.

00:15:00.800 --> 00:15:03.120
And you should check out Posit Connect.

00:15:03.120 --> 00:15:05.920
Posit Connect is a way for you to publish, share,

00:15:05.920 --> 00:15:07.900
and deploy all the data products

00:15:07.900 --> 00:15:10.440
that you're building using Python.

00:15:10.440 --> 00:15:12.800
People ask me the same question all the time.

00:15:12.800 --> 00:15:14.960
"Michael, I have some cool data science project

00:15:14.960 --> 00:15:16.400
or notebook that I built.

00:15:16.400 --> 00:15:19.640
How do I share it with my users, stakeholders, teammates?

00:15:19.640 --> 00:15:21.800
Do I need to learn FastAPI or Flask

00:15:21.800 --> 00:15:24.640
or maybe Vue or React.js?"

00:15:24.640 --> 00:15:25.480
Hold on now.

00:15:25.480 --> 00:15:26.760
Those are cool technologies,

00:15:26.760 --> 00:15:28.120
and I'm sure you'd benefit from them,

00:15:28.120 --> 00:15:30.480
but maybe stay focused on the data project.

00:15:30.480 --> 00:15:33.000
Let Posit Connect handle that side of things.

00:15:33.000 --> 00:15:35.160
With Posit Connect, you can rapidly and securely

00:15:35.160 --> 00:15:37.560
deploy the things you build in Python.

00:15:37.560 --> 00:15:41.240
Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask,

00:15:41.240 --> 00:15:44.200
Quarto, Ports, Dashboards, and APIs.

00:15:44.200 --> 00:15:46.280
Posit Connect supports all of them.

00:15:46.280 --> 00:15:49.080
And Posit Connect comes with all the bells and whistles

00:15:49.080 --> 00:15:52.400
to satisfy IT and other enterprise requirements.

00:15:52.400 --> 00:15:55.280
Make deployment the easiest step in your workflow

00:15:55.280 --> 00:15:56.460
with Posit Connect.

00:15:56.460 --> 00:15:58.840
For a limited time, you can try Posit Connect for free

00:15:58.840 --> 00:16:02.720
for three months by going to talkpython.fm/posit.

00:16:02.720 --> 00:16:06.120
That's talkpython.fm/POSIT.

00:16:06.120 --> 00:16:08.440
The link is in your podcast player show notes.

00:16:08.440 --> 00:16:11.280
Thank you to the team at Posit for supporting Talk Python.

00:16:11.280 --> 00:16:14.480
That's been around for a long time.

00:16:14.480 --> 00:16:17.040
That's not like an announcement, right?

00:16:17.040 --> 00:16:19.360
People have been, there's been different ways,

00:16:19.360 --> 00:16:21.760
and they've come in and out of support

00:16:21.760 --> 00:16:23.480
for different Python versions and stuff.

00:16:23.480 --> 00:16:26.000
So, but there are ways to kind of do that.

00:16:26.000 --> 00:16:28.280
And I see that a lot of people are like,

00:16:28.280 --> 00:16:29.560
"I'm working in notebooks,

00:16:29.560 --> 00:16:32.360
but the final consumer of this information

00:16:32.360 --> 00:16:34.920
is not a data scientist or a Python person.

00:16:34.920 --> 00:16:37.440
They live in Excel and they live in Outlook.

00:16:37.440 --> 00:16:38.680
The only thing I can give them

00:16:38.680 --> 00:16:41.480
is Excel spreadsheets or a PDF."

00:16:41.480 --> 00:16:43.400
- Yep, that is pretty much always the output

00:16:43.400 --> 00:16:46.040
of my notebooks is I either export it,

00:16:46.040 --> 00:16:47.880
like the whole notebook as a PDF,

00:16:47.880 --> 00:16:50.680
or yeah, basically organizing things

00:16:50.680 --> 00:16:52.640
such that I can use Pandas or something

00:16:52.640 --> 00:16:55.560
to export it to an Excel workbook.

00:16:55.560 --> 00:16:58.960
But it's kind of a pain then because like you have your,

00:16:58.960 --> 00:17:00.300
there's that translation step

00:17:00.300 --> 00:17:02.160
that you kind of have to keep going back and forth.

00:17:02.160 --> 00:17:04.280
If you're dialoguing, you know, somebody says,

00:17:04.280 --> 00:17:06.000
"Oh, but what happens if you do this?"

00:17:06.000 --> 00:17:07.600
And it's like, "Okay, I gotta go rerun

00:17:07.600 --> 00:17:09.200
and remake a new PDF for you."

00:17:09.200 --> 00:17:12.000
Could you just like do it? - I just need a quick change.

00:17:12.000 --> 00:17:14.040
Like, could you just incorporate that like,

00:17:14.040 --> 00:17:16.280
"Yeah, it's not the same change.

00:17:16.280 --> 00:17:17.120
We gotta re..."

00:17:17.120 --> 00:17:19.240
- Ideally, we all have nice DevOps pipelines

00:17:19.240 --> 00:17:21.800
where, you know, you just, you commit a change to source

00:17:21.800 --> 00:17:23.680
and it re-renders all the notebooks.

00:17:23.680 --> 00:17:25.080
That's in a perfect world. - Of course, that's how it works.

00:17:25.080 --> 00:17:27.280
- Yes, obviously, that's how I always work.

00:17:27.280 --> 00:17:28.120
(laughing)

00:17:28.120 --> 00:17:28.960
- It is.

00:17:28.960 --> 00:17:31.120
So I guess, you know, before we get into the details

00:17:31.520 --> 00:17:34.240
of how this works, like, why?

00:17:34.240 --> 00:17:35.240
Right, 'cause we just laid out,

00:17:35.240 --> 00:17:37.440
it is possible to like go to notebooks,

00:17:37.440 --> 00:17:41.840
have Excel kind of as an output and a save as, in a sense.

00:17:41.840 --> 00:17:43.760
- The biggest thing for me is like,

00:17:43.760 --> 00:17:45.840
well, it's not intended, of course,

00:17:45.840 --> 00:17:47.000
as any sort of replacement.

00:17:47.000 --> 00:17:49.200
It really is, as you were kind of mentioning before,

00:17:49.200 --> 00:17:51.440
it's like a different front end sort of thing.

00:17:51.440 --> 00:17:53.640
Like we view, there's Python scripts,

00:17:53.640 --> 00:17:54.720
there's Jupyter notebooks,

00:17:54.720 --> 00:17:57.280
which is kind of like an alternative front end

00:17:57.280 --> 00:17:59.200
for writing that Python code.

00:17:59.200 --> 00:18:02.320
I kind of think of using Excel and Python like this

00:18:02.320 --> 00:18:06.160
as kind of using a different kind of data first.

00:18:06.160 --> 00:18:07.880
Like whenever we're thinking about data,

00:18:07.880 --> 00:18:10.520
it's usually in some form of grid or table

00:18:10.520 --> 00:18:12.000
or something like that.

00:18:12.000 --> 00:18:15.840
So like being able to work with the data kind of visually

00:18:15.840 --> 00:18:19.120
in that sort of UI is really, really interesting.

00:18:19.120 --> 00:18:22.280
And kind of to the point that you just made about,

00:18:22.280 --> 00:18:25.600
like the end consumer might only know how to use Excel

00:18:25.600 --> 00:18:26.920
and doesn't know anything about Python

00:18:26.920 --> 00:18:30.160
or doesn't know anything about running DevOps pipeline.

00:18:30.160 --> 00:18:32.680
- I didn't mean that comment either to be disparaging

00:18:32.680 --> 00:18:36.720
because there are people that do incredible stuff with Excel.

00:18:36.720 --> 00:18:38.800
Maybe they shouldn't, but they can and they do.

00:18:38.800 --> 00:18:40.560
- I have in kind of delving,

00:18:40.560 --> 00:18:42.800
trying to understand what are like the weirdest things

00:18:42.800 --> 00:18:44.680
Excel can do is I've been trying to make demos,

00:18:44.680 --> 00:18:48.120
like people do some weird like competitions with Excel.

00:18:48.120 --> 00:18:50.320
Like there's the painting in Excel.

00:18:50.320 --> 00:18:51.800
- Is there a flight simulator?

00:18:51.800 --> 00:18:54.000
- There's a flight simulator, like you can,

00:18:54.000 --> 00:18:56.640
you know, with macros, it's very scary.

00:18:56.640 --> 00:18:58.320
So I, yeah, absolutely.

00:18:58.320 --> 00:19:00.920
Like I am not an Excel pro.

00:19:00.920 --> 00:19:04.680
I am a Python developer who uses Excel

00:19:04.680 --> 00:19:06.320
when prompted basically.

00:19:06.320 --> 00:19:08.400
- Yeah, well, there's no question,

00:19:08.400 --> 00:19:10.800
absolutely no debate about it,

00:19:10.800 --> 00:19:13.080
that the upper bound of what you can do with Python

00:19:13.080 --> 00:19:14.440
is greater than the upper bound

00:19:14.440 --> 00:19:15.720
of what you can do with Excel.

00:19:15.720 --> 00:19:18.040
But so many people just have, they have tabular data

00:19:18.040 --> 00:19:19.920
and they need reports and understanding

00:19:19.920 --> 00:19:22.840
and change this, what happens there and yeah.

00:19:22.840 --> 00:19:24.720
- And I think the biggest value,

00:19:24.720 --> 00:19:26.800
like kind of having played with this now

00:19:26.800 --> 00:19:31.000
for a little over half a year is collaboration.

00:19:31.000 --> 00:19:32.400
You don't have that kind of,

00:19:32.400 --> 00:19:34.560
you don't have to have that iteration loop between,

00:19:34.560 --> 00:19:36.360
okay, here we talked about it or, you know,

00:19:36.360 --> 00:19:38.840
you came and sat at my computer while I showed you,

00:19:38.840 --> 00:19:39.920
you know, my Jupyter Notebook

00:19:39.920 --> 00:19:41.440
so we can make changes like that.

00:19:41.440 --> 00:19:44.040
All of the things like having multiple people

00:19:44.040 --> 00:19:45.840
in the Excel doc at once, you know,

00:19:45.840 --> 00:19:48.080
you can just send the share link and they can join

00:19:48.080 --> 00:19:49.960
and they can run things in the notebook.

00:19:49.960 --> 00:19:52.440
They don't have to install or set up Python.

00:19:52.440 --> 00:19:54.360
And you can just, you can leave comments

00:19:54.360 --> 00:19:55.480
like you would in Word docs.

00:19:55.480 --> 00:19:58.360
So like basically that whole kind of review

00:19:58.360 --> 00:20:02.000
and collaboration workflow just turns into something

00:20:02.000 --> 00:20:03.920
that people are already pretty familiar with,

00:20:03.920 --> 00:20:05.880
with like Word docs and stuff like that,

00:20:05.880 --> 00:20:07.640
which is a thing that Jupyter Notebooks

00:20:07.640 --> 00:20:08.840
generally don't have.

00:20:08.840 --> 00:20:10.600
So I think that's kind of the,

00:20:10.600 --> 00:20:13.400
one of the most interesting differentiators between them.

00:20:13.400 --> 00:20:16.400
- Yeah, I just, like an hour and a half ago,

00:20:16.400 --> 00:20:21.400
released the episode on Notebook 7 and JupyterLab 4,

00:20:21.400 --> 00:20:24.000
which comes with the real-time collaboration and stuff.

00:20:24.000 --> 00:20:25.280
- Which is really exciting.

00:20:25.280 --> 00:20:26.120
- Yeah, it's quite exciting.

00:20:26.120 --> 00:20:27.760
So it's on the horizon.

00:20:27.760 --> 00:20:28.600
- Yeah, for sure.

00:20:28.600 --> 00:20:30.200
- If it hasn't been like a common thing,

00:20:30.200 --> 00:20:32.720
but even so, again, a lot of these people

00:20:32.720 --> 00:20:35.160
are not gonna be in the notebook to collaborate with you.

00:20:35.160 --> 00:20:36.240
- Right, right.

00:20:36.240 --> 00:20:37.080
- It's fine.

00:20:37.080 --> 00:20:38.080
And you played with this for a while.

00:20:38.080 --> 00:20:41.880
How much of this is going to be a gateway experience

00:20:41.880 --> 00:20:43.200
to doing more like,

00:20:43.200 --> 00:20:45.600
ah, I couldn't remember that Excel formula,

00:20:45.600 --> 00:20:48.440
but I asked Copilot and it told me to do this Python thing

00:20:48.440 --> 00:20:51.280
and it totally made more sense to me.

00:20:51.280 --> 00:20:53.320
Maybe I should just learn a little more Python

00:20:53.320 --> 00:20:55.280
and kind of grow beyond Excel.

00:20:55.280 --> 00:20:57.680
Like, what do you think of this as a first step

00:20:57.680 --> 00:20:59.640
for many people who go, I'm not a programmer.

00:20:59.640 --> 00:21:00.960
No way, I'm not a geek.

00:21:00.960 --> 00:21:02.720
No, but then they are.

00:21:02.720 --> 00:21:03.880
- Yeah, they totally are.

00:21:03.880 --> 00:21:05.720
Like, if you're playing around with a bunch of numbers

00:21:05.720 --> 00:21:07.920
and making fancy spreadsheets and stuff, I'm sorry.

00:21:07.920 --> 00:21:10.040
You're nerdy about data.

00:21:10.040 --> 00:21:12.200
And so, yeah, I think it's a really,

00:21:12.200 --> 00:21:14.120
'cause there are lots of really cool things

00:21:14.120 --> 00:21:15.480
you can do with Excel, but as you say,

00:21:15.480 --> 00:21:18.120
like some of the plotting features and stuff,

00:21:18.120 --> 00:21:21.120
you can't do, like, you can maybe do,

00:21:21.120 --> 00:21:22.080
but it'd be really hard.

00:21:22.080 --> 00:21:24.440
And some, it might just be straight up impossible

00:21:24.440 --> 00:21:26.200
to make, you know, like some of the matplotlib,

00:21:26.200 --> 00:21:29.240
multi-paneled aligned plots

00:21:29.240 --> 00:21:31.960
with like interesting statistical plotting things

00:21:31.960 --> 00:21:34.440
that aren't just your standard bar and chart sorts of stuff.

00:21:34.440 --> 00:21:36.600
So like, if you're trying to do

00:21:36.600 --> 00:21:38.520
some of those statistical modeling things,

00:21:38.520 --> 00:21:41.480
or the other big thing is like the Python and Excel,

00:21:41.480 --> 00:21:44.040
one of the, it has PyTorch and stuff like that.

00:21:44.040 --> 00:21:45.880
So if you wanna do just kind of like

00:21:45.880 --> 00:21:48.120
entry-level machine learning sorts of stuff,

00:21:48.120 --> 00:21:50.200
and you don't wanna have to like set up

00:21:50.200 --> 00:21:52.880
your big data source and SQL servers,

00:21:52.880 --> 00:21:55.440
you know, whatever, what have you to work with it.

00:21:55.440 --> 00:21:57.080
If you just got your spreadsheet of like

00:21:57.080 --> 00:21:59.880
your home sensor data or something like that,

00:21:59.880 --> 00:22:02.400
you can actually just have it make a regression model

00:22:02.400 --> 00:22:05.560
and you don't have to like spin up a whole thing,

00:22:05.560 --> 00:22:07.520
you know, in environments and stuff like that.

00:22:07.520 --> 00:22:09.160
- When you predict the battery in your gate

00:22:09.160 --> 00:22:10.720
will be dead next week,

00:22:10.720 --> 00:22:12.400
you're gonna need to take an action on this.

00:22:12.400 --> 00:22:14.720
- Which will be great when then I dismiss the notification

00:22:14.720 --> 00:22:16.560
and still don't remember to do it.

00:22:16.560 --> 00:22:17.840
- Why can't we leave the house?

00:22:17.840 --> 00:22:19.560
Well, remember that notification said

00:22:19.560 --> 00:22:21.320
you're not gonna be able to open the gate in a week.

00:22:21.320 --> 00:22:23.040
That was a week ago.

00:22:23.040 --> 00:22:23.880
Sounds familiar.

00:22:23.880 --> 00:22:25.080
I know we were talking earlier that you have

00:22:25.080 --> 00:22:27.160
some cool home assistant automation and stuff.

00:22:27.160 --> 00:22:28.320
- Yeah, yeah, yeah.

00:22:28.320 --> 00:22:30.560
- Awesome, and I have a gate that has a dead battery.

00:22:30.560 --> 00:22:32.840
So let's just jump into it.

00:22:32.840 --> 00:22:35.600
I mean, let's talk about what is Python and Excel.

00:22:35.600 --> 00:22:36.760
Like how do people use it?

00:22:36.760 --> 00:22:37.600
What can it do?

00:22:37.600 --> 00:22:38.440
What can't it do?

00:22:38.440 --> 00:22:41.760
- In short, basically having the Python and Excel feature

00:22:41.760 --> 00:22:44.160
means that you can, when you're in a cell,

00:22:44.160 --> 00:22:45.720
if you type the equal sign,

00:22:45.720 --> 00:22:48.160
which is usually how you start a function in Excel.

00:22:48.160 --> 00:22:50.080
- I type equal some parenthesis

00:22:50.080 --> 00:22:50.920
and then off you go, something like that.

00:22:50.920 --> 00:22:52.320
- Exactly. - Drag it around.

00:22:52.320 --> 00:22:56.680
- So you type equals and then you type py, open parentheses,

00:22:56.680 --> 00:23:00.680
and that basically turns the cell now into a Python cell.

00:23:00.680 --> 00:23:03.040
So it'll have a little visual change.

00:23:03.040 --> 00:23:04.480
It'll turn green on the left,

00:23:04.480 --> 00:23:07.160
and there's also a keyboard shortcut to do this.

00:23:07.160 --> 00:23:08.240
- It should put the Python logo.

00:23:08.240 --> 00:23:10.520
It should be like a blue, yellow.

00:23:10.520 --> 00:23:13.760
- Yeah, green is kind of the Excel color.

00:23:13.760 --> 00:23:14.600
I don't know.

00:23:14.600 --> 00:23:18.080
Anyway, we can file feedback on this.

00:23:18.080 --> 00:23:20.840
- That's community feedback from the Python people.

00:23:20.840 --> 00:23:22.640
We need the Python logo in there.

00:23:22.640 --> 00:23:23.520
Let's make it happen.

00:23:23.520 --> 00:23:26.800
- The idea is that basically you can change a cell

00:23:26.800 --> 00:23:28.600
in the Excel notebook into one

00:23:28.600 --> 00:23:30.960
that basically is kind of like a Jupyter cell.

00:23:30.960 --> 00:23:33.640
You can type Python code, you can import modules,

00:23:33.640 --> 00:23:36.680
you can write functions, you can print things.

00:23:36.680 --> 00:23:40.000
Like basically anything that would be valid

00:23:40.000 --> 00:23:41.400
in a Jupyter notebook cell,

00:23:41.400 --> 00:23:44.720
maybe not necessarily the magic commands, but like-

00:23:44.720 --> 00:23:45.560
- Sure.

00:23:45.560 --> 00:23:48.120
You can get to the shell as a hacker, I just do.

00:23:48.120 --> 00:23:49.080
(both laughing)

00:23:49.080 --> 00:23:50.440
- Did actually try a lot of that.

00:23:50.440 --> 00:23:53.400
So I should say, so once you've typed in your code there

00:23:53.400 --> 00:23:55.960
and you run the cell with Control + Enter,

00:23:55.960 --> 00:23:57.040
it's not Shift + Enter

00:23:57.040 --> 00:24:01.600
because that's a very established keyboard shortcut in Excel,

00:24:01.600 --> 00:24:03.400
which moves you around in the grid.

00:24:03.400 --> 00:24:06.080
So pro tip, remember it's Control + Enter.

00:24:06.080 --> 00:24:09.440
But what happens then is basically Excel connects

00:24:09.440 --> 00:24:12.240
to a container instance in Azure,

00:24:12.240 --> 00:24:16.880
which has a standardized Anaconda provided environment.

00:24:16.880 --> 00:24:18.520
So it's an Anaconda environment

00:24:18.520 --> 00:24:23.000
that has a fixed declarative set of packages,

00:24:23.000 --> 00:24:27.440
which is basically kind of what 80 to 90% of projects use.

00:24:27.440 --> 00:24:29.920
We can talk about like which ones that are,

00:24:29.920 --> 00:24:32.480
which ones are in that environment in a second.

00:24:32.480 --> 00:24:35.400
But your code then runs in this,

00:24:35.400 --> 00:24:37.560
it referred to as like an iron box

00:24:37.560 --> 00:24:39.040
in this container instance.

00:24:39.040 --> 00:24:40.560
So it does not-

00:24:40.560 --> 00:24:42.000
- Doesn't know who you are.

00:24:42.000 --> 00:24:44.240
- It doesn't know, well, I mean,

00:24:44.240 --> 00:24:47.160
you are, and it's basically running a Jupyter kernel

00:24:47.160 --> 00:24:48.000
in that box.

00:24:48.000 --> 00:24:50.960
So like the kind of communication,

00:24:50.960 --> 00:24:52.800
if you have multiple cells in your sheet

00:24:52.800 --> 00:24:54.240
that have Python code in it,

00:24:54.240 --> 00:24:56.240
every time you make a change,

00:24:56.240 --> 00:24:57.960
just like an Excel would normally kind of like

00:24:57.960 --> 00:24:59.680
recalculate everything in the sheet,

00:24:59.680 --> 00:25:02.080
it will basically ping that iron box

00:25:02.080 --> 00:25:04.760
and as if it was kind of like a Jupyter notebook.

00:25:04.760 --> 00:25:06.600
- That's the thing that surprised me most

00:25:06.600 --> 00:25:08.880
is that it doesn't just run locally

00:25:08.880 --> 00:25:11.960
because you could embed the Python runtime into Excel,

00:25:11.960 --> 00:25:13.560
without any trouble.

00:25:13.560 --> 00:25:14.400
- Yes.

00:25:14.400 --> 00:25:17.320
- And in terms of making the good path work.

00:25:17.320 --> 00:25:18.880
- Yes.

00:25:18.880 --> 00:25:20.840
But I think part of the,

00:25:20.840 --> 00:25:23.440
part of the design philosophy with this as a feature

00:25:23.440 --> 00:25:27.080
to Excel is this is an enterprise product

00:25:27.080 --> 00:25:28.960
that enterprises want to use

00:25:28.960 --> 00:25:32.160
and IT admins want to feel good about,

00:25:32.160 --> 00:25:34.240
what security permissions, things,

00:25:34.240 --> 00:25:35.880
where data can come from,

00:25:35.880 --> 00:25:39.840
like all the permission compliance good stuff.

00:25:39.840 --> 00:25:40.800
- To go, it does what?

00:25:40.800 --> 00:25:41.800
Yeah, no.

00:25:41.800 --> 00:25:42.640
No, we're not doing that.

00:25:42.640 --> 00:25:44.840
And we just recovered from the ransomware thing.

00:25:44.840 --> 00:25:46.720
So we're definitely not, we're done.

00:25:46.720 --> 00:25:47.800
So what are the restrictions?

00:25:47.800 --> 00:25:49.800
It has no network access.

00:25:49.800 --> 00:25:51.960
- Yeah, so that iron box does not talk to,

00:25:51.960 --> 00:25:54.080
the only thing it can talk to is your,

00:25:54.080 --> 00:25:55.640
you know, instance of Excel.

00:25:55.640 --> 00:25:57.120
- It can receive commands, but it doesn't.

00:25:57.120 --> 00:25:58.920
- It does not touch the internet otherwise.

00:25:58.920 --> 00:25:59.760
- Interesting.

00:25:59.760 --> 00:26:02.040
So that automatically changes

00:26:02.040 --> 00:26:04.280
maybe what some people think like,

00:26:04.280 --> 00:26:06.680
for example, pandas read CSV,

00:26:06.680 --> 00:26:09.160
give it a URL and say, I want this, the third table,

00:26:09.160 --> 00:26:11.000
like it's not gonna do those types of things

00:26:11.000 --> 00:26:14.840
or you can't do request.get against some external data.

00:26:14.840 --> 00:26:18.080
- Which initially I was like really sad about.

00:26:18.080 --> 00:26:20.720
I understand the security things, but was a bit sad.

00:26:20.720 --> 00:26:23.280
But then some of my Excel friends showed me,

00:26:23.280 --> 00:26:26.640
'cause this is also kind of a challenge in Excel too.

00:26:26.640 --> 00:26:28.840
Like, you know, how do you get data?

00:26:28.840 --> 00:26:30.760
People have things in SQL servers,

00:26:30.760 --> 00:26:33.200
people, or databases more generally.

00:26:33.200 --> 00:26:34.960
- Every minute I want to have it refreshed.

00:26:34.960 --> 00:26:37.680
- Yeah, like that kind of, it's not concurrency,

00:26:37.680 --> 00:26:39.920
but like keeping everything up to date

00:26:39.920 --> 00:26:41.720
is a really big headache.

00:26:41.720 --> 00:26:43.400
And the thing is Excel is already

00:26:43.400 --> 00:26:44.800
very good at addressing this.

00:26:44.800 --> 00:26:46.760
So there's something called Power Query,

00:26:46.760 --> 00:26:48.800
which is another feature of Excel.

00:26:48.800 --> 00:26:51.600
And that's basically, so the scenarios like you described,

00:26:51.600 --> 00:26:54.160
like if there's a CSV somewhere in a GitHub repo

00:26:54.160 --> 00:26:55.600
that I want to pull in,

00:26:55.600 --> 00:26:58.240
you can use the Power Query feature,

00:26:58.240 --> 00:27:00.920
can go fetch that and bring that into your Excel file

00:27:00.920 --> 00:27:02.600
that then you can use with Python and Excel.

00:27:02.600 --> 00:27:05.600
So it kind of separates that task

00:27:05.600 --> 00:27:08.520
of getting the data to work with,

00:27:08.520 --> 00:27:10.760
kind of pries that out of the Python piece,

00:27:10.760 --> 00:27:13.040
but puts it in much safer hands.

00:27:13.040 --> 00:27:13.880
(laughing)

00:27:13.880 --> 00:27:14.720
- Sure.

00:27:14.720 --> 00:27:16.560
- So secure hands, I guess, if that makes sense.

00:27:16.560 --> 00:27:17.880
- Yeah, restricted hands.

00:27:17.880 --> 00:27:20.240
Okay, it doesn't have access to your account,

00:27:20.240 --> 00:27:21.960
it doesn't have a token to your account,

00:27:21.960 --> 00:27:23.840
like your Office 365 or whatever.

00:27:23.840 --> 00:27:25.080
Yeah, it's pretty locked down.

00:27:25.080 --> 00:27:29.120
You can't pip install things, it comes pre-can.

00:27:29.120 --> 00:27:30.760
It does what it says on the tin and like,

00:27:30.760 --> 00:27:32.040
okay, these are the things I can do.

00:27:32.040 --> 00:27:35.840
- Yeah, and that again, sounds kind of sad,

00:27:35.840 --> 00:27:37.960
but honestly, like I've been trying

00:27:37.960 --> 00:27:39.560
to make a bunch of samples and stuff

00:27:39.560 --> 00:27:42.600
and I haven't run into too many,

00:27:42.600 --> 00:27:47.600
like it's got NumPy, Pandas, SciPy, Seaborn, AstroPy.

00:27:47.600 --> 00:27:50.120
- Yeah, AstroPy is pretty awesome.

00:27:50.120 --> 00:27:53.280
It's got Matplotlib, PyTorch, as you said,

00:27:53.280 --> 00:27:55.240
PyWavelets, how's that for a throwback

00:27:55.240 --> 00:27:57.160
to my mathematical days?

00:27:57.160 --> 00:27:58.760
That's some like fast 4-8 transforms

00:27:58.760 --> 00:28:00.480
but way more complicated.

00:28:00.480 --> 00:28:03.440
Scikit-learn, SciPy, SymPy.

00:28:03.440 --> 00:28:04.280
- Yep, yep, yep.

00:28:04.280 --> 00:28:05.120
- There's your Matlab right there,

00:28:05.120 --> 00:28:06.760
or your Mathematica right there.

00:28:06.760 --> 00:28:08.400
- And yeah, and others, right?

00:28:08.400 --> 00:28:09.880
I'll link to like the options.

00:28:09.880 --> 00:28:13.440
This portion of Talk Python to Me

00:28:13.440 --> 00:28:15.840
is brought to you by the PyBytes,

00:28:15.840 --> 00:28:18.920
Python Developer Mindset Program.

00:28:18.920 --> 00:28:21.520
It's run by my two friends and frequent guests,

00:28:21.520 --> 00:28:23.680
Bob Delderbos and Julian Sequeira.

00:28:23.680 --> 00:28:25.360
And instead of me telling you about it,

00:28:25.360 --> 00:28:28.000
let's hear them describe their program.

00:28:28.000 --> 00:28:30.680
- 2024 is unfolding and with it comes

00:28:30.680 --> 00:28:33.920
a world of opportunities in the Python landscape.

00:28:33.920 --> 00:28:36.040
Opportunities for your Python career and journey

00:28:36.040 --> 00:28:39.520
can come from anywhere and at any time.

00:28:39.520 --> 00:28:41.760
Are you ready to seize them when they do?

00:28:41.760 --> 00:28:45.520
Don't let this be the year when opportunities pass you by.

00:28:45.520 --> 00:28:47.920
- Our Python coaching is designed to prepare you

00:28:47.920 --> 00:28:51.120
for the unexpected, to equip you with the skills

00:28:51.120 --> 00:28:55.200
and confidence needed to tackle any Python challenge.

00:28:55.200 --> 00:28:58.360
Whether it's a dream job, a complex project,

00:28:58.360 --> 00:29:01.680
or a new venture, you need to be ready for it.

00:29:01.680 --> 00:29:06.360
With PyBytes coaching, 2024 won't just be another year.

00:29:06.360 --> 00:29:09.160
Check out our PDM program and take the first step

00:29:09.160 --> 00:29:11.920
towards a year filled with Python success.

00:29:11.920 --> 00:29:14.000
Don't just dream about being a developer,

00:29:14.000 --> 00:29:16.440
achieve it with PyBytes.

00:29:16.440 --> 00:29:19.360
- Apply for the Python Developer Mindset today.

00:29:19.360 --> 00:29:21.840
It's quick and free to apply.

00:29:21.840 --> 00:29:24.200
The link is in your podcast player show notes.

00:29:24.200 --> 00:29:26.280
Thanks to PyBytes for sponsoring the show.

00:29:26.280 --> 00:29:31.160
- So yeah, like it really does cover most of like,

00:29:31.160 --> 00:29:33.480
obviously there are still plenty of cases

00:29:33.480 --> 00:29:35.880
where you will just want to use Python and that's okay.

00:29:35.880 --> 00:29:38.680
Like that's, this is in no way, shape or form

00:29:38.680 --> 00:29:40.360
is this supposed to like take over

00:29:40.360 --> 00:29:41.880
your entire Python workflow.

00:29:41.880 --> 00:29:43.640
It's really, you know, the,

00:29:43.640 --> 00:29:46.120
I still am doing my Python development,

00:29:46.120 --> 00:29:49.840
but basically if there are people who I know I want to like,

00:29:49.840 --> 00:29:52.040
especially communicate what I'm doing to,

00:29:52.040 --> 00:29:54.120
like who that is their language,

00:29:54.120 --> 00:29:57.040
I now have a tool that I can kind of put the things

00:29:57.040 --> 00:30:00.200
that I would normally have in my development environment

00:30:00.200 --> 00:30:03.080
in a tool that they can access and interact with too.

00:30:03.080 --> 00:30:05.880
That, you know, also doesn't feel super bad to me.

00:30:05.880 --> 00:30:07.400
(laughing)

00:30:07.400 --> 00:30:08.280
- What's the alternative?

00:30:08.280 --> 00:30:12.000
It's a right like Excel functions and VBA macro.

00:30:12.000 --> 00:30:12.840
- Yeah, no I'm not doing that.

00:30:12.840 --> 00:30:14.520
- Yeah, it's a pretty massive upgrade.

00:30:14.520 --> 00:30:17.960
And I do think it's gonna be a bit of a gateway like,

00:30:17.960 --> 00:30:20.560
you know what, this Python stuff's not that complicated.

00:30:20.560 --> 00:30:21.400
It's kind of cool.

00:30:21.400 --> 00:30:23.680
Maybe, what do you do with those notebooks again?

00:30:23.680 --> 00:30:24.600
I think that'd be cool.

00:30:24.600 --> 00:30:25.680
I think that'll happen.

00:30:25.680 --> 00:30:27.720
When I think about writing Python,

00:30:27.720 --> 00:30:29.240
I'll use something like PyCharm,

00:30:29.240 --> 00:30:32.080
like really cool code, like analysis.

00:30:32.080 --> 00:30:34.240
And then I'll think about it like with rough,

00:30:34.240 --> 00:30:37.680
maybe running as like an integration and auto-complete.

00:30:37.680 --> 00:30:39.560
And there might even be like an AI magic,

00:30:39.560 --> 00:30:42.280
or maybe this is happening in VS Code in a real similar way.

00:30:42.280 --> 00:30:44.200
Then when I think about writing Excel formulas,

00:30:44.200 --> 00:30:45.760
it's like one line across.

00:30:45.760 --> 00:30:47.080
These are not the same.

00:30:47.080 --> 00:30:50.240
So what is it like to write Python in Excel?

00:30:50.240 --> 00:30:54.120
- Yeah, it definitely, I do generally try to keep,

00:30:54.120 --> 00:30:57.000
like when I write note, like in Jupyter notebooks,

00:30:57.000 --> 00:31:00.720
I try to keep myself small, not just have giant things.

00:31:00.720 --> 00:31:02.120
But yeah, you're totally right.

00:31:02.120 --> 00:31:03.880
Like even just from the view,

00:31:03.880 --> 00:31:07.040
you can't really drag it much bigger than a couple lines.

00:31:07.040 --> 00:31:08.880
- You can expand it so it's at least multi-line.

00:31:08.880 --> 00:31:11.320
- Yeah, you can see multi-line and that's fine.

00:31:11.320 --> 00:31:12.640
And it has syntax highlighting

00:31:12.640 --> 00:31:14.640
and it does have like tab completes.

00:31:14.640 --> 00:31:16.200
It's got like the--

00:31:16.200 --> 00:31:17.360
- Does it do like the language server?

00:31:17.360 --> 00:31:18.200
- Language server, yep, yep, yep.

00:31:18.200 --> 00:31:19.960
- So yeah, that's actually pretty good.

00:31:19.960 --> 00:31:22.520
- As I think was in the keynote stuff today,

00:31:22.520 --> 00:31:24.320
there's copilot in Excel.

00:31:24.320 --> 00:31:28.320
And so like we'll see, I think some of these AI features

00:31:28.320 --> 00:31:31.400
also kind of help speed up some of those things.

00:31:31.400 --> 00:31:34.320
So like if you're like, I just, I want a pandas table here

00:31:34.320 --> 00:31:39.200
and to convert this part, the column that's all dictionaries

00:31:39.200 --> 00:31:41.800
to like their own columns and stuff like that,

00:31:41.800 --> 00:31:43.240
it'll just write it for you.

00:31:43.240 --> 00:31:45.640
And then you don't have to, that editor,

00:31:45.640 --> 00:31:48.160
editing experience is definitely not the same

00:31:48.160 --> 00:31:51.720
as working in my beloved VS Code.

00:31:51.720 --> 00:31:54.200
- Well, if the keynote here at this conference

00:31:54.200 --> 00:31:56.880
was a drinking game and AI was a word,

00:31:56.880 --> 00:31:58.520
you wouldn't have lasted 15 minutes

00:31:58.520 --> 00:31:59.880
and it was two and a half hour.

00:31:59.880 --> 00:32:02.280
I mean, there was so much AI this and AI that

00:32:02.280 --> 00:32:04.760
and the AI is talking to the AI and here's the,

00:32:04.760 --> 00:32:06.000
and it's quite something.

00:32:06.000 --> 00:32:08.120
But they did show a really cool thing of,

00:32:08.120 --> 00:32:10.400
like I've got some Python code in here

00:32:10.400 --> 00:32:14.560
and I've got some related data and just asking like,

00:32:14.560 --> 00:32:16.440
all right, help me graph this in Python.

00:32:16.440 --> 00:32:18.080
And it would show you like a Seaborn graph

00:32:18.080 --> 00:32:19.560
or a matplotlib or something like that,

00:32:19.560 --> 00:32:21.040
which is pretty excellent, honestly.

00:32:21.040 --> 00:32:22.720
- Yeah, and then in this case here,

00:32:22.720 --> 00:32:24.880
then it would be in a format that you could share

00:32:24.880 --> 00:32:26.560
with somebody that they could then,

00:32:26.560 --> 00:32:29.000
Excel has what if scenario features

00:32:29.000 --> 00:32:30.480
where it makes it really easy to be like,

00:32:30.480 --> 00:32:33.240
well, here's the forecast or whatever,

00:32:33.240 --> 00:32:34.400
but what if this changed?

00:32:34.400 --> 00:32:36.160
- What if interest rates go up?

00:32:36.160 --> 00:32:38.920
- Yeah, and you have like these little dropdowns,

00:32:38.920 --> 00:32:40.920
like all of those actually work.

00:32:40.920 --> 00:32:44.040
And so like I can use cells that are like dropdown,

00:32:44.040 --> 00:32:46.080
data validated dropdown cells,

00:32:46.080 --> 00:32:49.400
and that just feeds as, feeds into my Python code

00:32:49.400 --> 00:32:52.680
and changes, like the theme I'm using for my matplotlib.

00:32:53.480 --> 00:32:54.640
- Matplotlib plots or something like that.

00:32:54.640 --> 00:32:56.080
- Go a little meta for a moment.

00:32:56.080 --> 00:33:01.080
Could I use pandas or XLS, XSLX,

00:33:01.080 --> 00:33:04.200
writer, whatever the extension is,

00:33:04.200 --> 00:33:06.920
to write an Excel workbook spreadsheet

00:33:06.920 --> 00:33:08.920
that itself does, has Python in it?

00:33:08.920 --> 00:33:10.240
- In principle, yes.

00:33:10.240 --> 00:33:11.080
- Are there just formulas?

00:33:11.080 --> 00:33:12.880
Are there just strings that go into formulas?

00:33:12.880 --> 00:33:15.520
- Yes, and that's precisely what I've been working on

00:33:15.520 --> 00:33:17.760
recently is to try and figure out

00:33:17.760 --> 00:33:19.360
how to integrate into some of those,

00:33:19.360 --> 00:33:21.200
the existing Python packages.

00:33:21.200 --> 00:33:22.680
'Cause basically what you need to do

00:33:22.680 --> 00:33:25.640
is make sure all of that data is inserted

00:33:25.640 --> 00:33:29.320
into the XML document model in the right way and stuff.

00:33:29.320 --> 00:33:31.280
Like it's pretty cool.

00:33:31.280 --> 00:33:33.960
Like you can take an Excel, you know,

00:33:33.960 --> 00:33:36.160
an Excel notebook if you just change the extension to zip,

00:33:36.160 --> 00:33:38.440
then you get to see all the XML that's inside of it.

00:33:38.440 --> 00:33:40.480
And you can just see, - A red pill.

00:33:40.480 --> 00:33:42.080
- You can just see the sheets that are like,

00:33:42.080 --> 00:33:44.040
here's the Python functions,

00:33:44.040 --> 00:33:45.960
and you can just see the strings and stuff like that.

00:33:45.960 --> 00:33:47.960
So I don't think there's anything blocking that.

00:33:47.960 --> 00:33:49.800
And that's something that I wanna be able to

00:33:49.800 --> 00:33:51.800
help contribute if I can to the community

00:33:51.800 --> 00:33:54.520
so that you could actually programmatically

00:33:54.520 --> 00:33:57.640
write your Excel sheet with Python from Python.

00:33:57.640 --> 00:33:58.960
- And so things that are not allowed,

00:33:58.960 --> 00:34:02.160
like screen scraping or talking to a database,

00:34:02.160 --> 00:34:04.760
you could kind of burn that into Excel as like fixed data,

00:34:04.760 --> 00:34:07.600
but then keep rebuilding that workbook or something like that.

00:34:07.600 --> 00:34:09.200
- Yeah, you could do that.

00:34:09.200 --> 00:34:11.880
- All right, integration between Excel and Python.

00:34:11.880 --> 00:34:13.800
In Excel, I can say I wanna take the sum

00:34:13.800 --> 00:34:14.920
and I select the big section.

00:34:14.920 --> 00:34:19.160
And it's like A1 colon A20, and that sums those up.

00:34:19.160 --> 00:34:22.040
But in Python data science land,

00:34:22.040 --> 00:34:24.120
I don't even know what that is.

00:34:24.120 --> 00:34:26.720
So how do I make, obviously the point having Python there

00:34:26.720 --> 00:34:29.400
is to access chunks of data, process it,

00:34:29.400 --> 00:34:31.560
do other things to it, turn it into graphs.

00:34:31.560 --> 00:34:32.800
What's the interop story?

00:34:32.800 --> 00:34:35.440
- Part of the Python and Excel feature

00:34:35.440 --> 00:34:36.960
is that in that con environment,

00:34:36.960 --> 00:34:39.040
there is a module called Excel.

00:34:39.040 --> 00:34:41.840
The abbreviation as it's loaded is X,

00:34:41.840 --> 00:34:43.640
the letter X and then the letter L.

00:34:43.640 --> 00:34:47.600
And basically that allows you to access

00:34:47.600 --> 00:34:51.040
all kinds of data and properties of the worksheet in Python.

00:34:51.040 --> 00:34:53.440
So that's basically, whether anything

00:34:53.440 --> 00:34:55.520
from like the cell styling to,

00:34:55.520 --> 00:34:58.280
you can literally just put XL parentheses,

00:34:58.280 --> 00:35:01.320
and then in a string, the Excel selection,

00:35:01.320 --> 00:35:04.560
A1 colon whatever selections,

00:35:04.560 --> 00:35:07.600
and it will just then is already available in Python.

00:35:07.600 --> 00:35:09.480
So there's kind of this interop package

00:35:09.480 --> 00:35:12.240
that allows you to transition data models

00:35:12.240 --> 00:35:14.480
between what Excel thinks of as data

00:35:14.480 --> 00:35:17.040
and what Python thinks of as data.

00:35:17.040 --> 00:35:18.920
- Yeah, and basically that comes out

00:35:18.920 --> 00:35:20.360
as a pandas data frame, right?

00:35:20.360 --> 00:35:23.680
- Yeah, in general, once you run a Python,

00:35:23.680 --> 00:35:27.480
or a Python and Excel cell that has Python code in it,

00:35:27.480 --> 00:35:28.320
you run it.

00:35:28.320 --> 00:35:31.440
There's a lot of cells, sheets, code.

00:35:31.440 --> 00:35:33.280
After you run it, you have the option

00:35:33.280 --> 00:35:35.040
of two different output formats actually.

00:35:35.040 --> 00:35:37.960
So you can, by default, I think it outputs

00:35:37.960 --> 00:35:40.280
as a Python object.

00:35:40.280 --> 00:35:43.480
If it recognizes that it's a string or a list,

00:35:43.480 --> 00:35:45.280
it might just display that,

00:35:45.280 --> 00:35:48.000
or you can kind of intentionally cast it

00:35:48.000 --> 00:35:49.880
to an Excel data type.

00:35:49.880 --> 00:35:52.840
And again, if it can automagically understand

00:35:52.840 --> 00:35:55.760
that, oh, this dictionary should just be in a list

00:35:55.760 --> 00:35:56.600
or something like that.

00:35:56.600 --> 00:36:00.000
And a lot of that functionality is kind of provided

00:36:00.000 --> 00:36:01.720
by the collaboration with Anaconda.

00:36:01.720 --> 00:36:03.440
So you'll see like, if you hover over,

00:36:03.440 --> 00:36:06.560
if you have it return, like a Python object,

00:36:06.560 --> 00:36:08.560
if you hover over it, it'll show you like,

00:36:08.560 --> 00:36:10.120
you know, if it's a class, it might have some,

00:36:10.120 --> 00:36:11.960
show you the properties, and then you could drill in

00:36:11.960 --> 00:36:15.440
and say, turn the output into displaying this property,

00:36:15.440 --> 00:36:16.680
but it shows you a little pop-up

00:36:16.680 --> 00:36:19.640
with the Anaconda logo corner and stuff.

00:36:19.640 --> 00:36:22.040
- Yeah, that's some interesting branding there.

00:36:22.040 --> 00:36:23.280
I did notice that as well.

00:36:23.280 --> 00:36:26.000
In Jupyter, I can have a cell,

00:36:26.000 --> 00:36:28.160
I can say like, X equals something,

00:36:28.160 --> 00:36:30.280
and then some other point in time,

00:36:30.280 --> 00:36:32.960
I can say X squared, whatever.

00:36:32.960 --> 00:36:35.840
That assumes I'm running them top to bottom,

00:36:35.840 --> 00:36:37.240
or at least those two cells,

00:36:37.240 --> 00:36:39.240
the one that defines the X is run

00:36:39.240 --> 00:36:40.960
before the one that uses the X,

00:36:40.960 --> 00:36:44.840
which makes notebooks a little bit non-deterministic,

00:36:44.840 --> 00:36:47.000
and if you don't just go run all cells.

00:36:47.000 --> 00:36:49.400
But Excel takes it to a whole nother level, right?

00:36:49.400 --> 00:36:50.880
This refers to that, which points over there,

00:36:50.880 --> 00:36:52.680
and then that goes up, and then it goes back down,

00:36:52.680 --> 00:36:53.800
and it's all over.

00:36:53.800 --> 00:36:55.840
How do we make sense of like, the connections?

00:36:55.840 --> 00:36:57.440
- Yeah, it is something that I've like,

00:36:57.440 --> 00:36:59.680
always is very impressive about Excel,

00:36:59.680 --> 00:37:01.960
'cause I'll like, copy and paste chunks of things,

00:37:01.960 --> 00:37:03.960
and somehow all the references stay correct, you know?

00:37:03.960 --> 00:37:05.560
Like, that's not what would happen

00:37:05.560 --> 00:37:07.280
if I refactored my Python code.

00:37:07.280 --> 00:37:10.600
By default, the execution order goes left to right,

00:37:10.600 --> 00:37:13.800
and then down, so that's something I gotta,

00:37:13.800 --> 00:37:17.840
I generally just kind of by convention, use single columns.

00:37:17.840 --> 00:37:18.680
- We're just going down.

00:37:18.680 --> 00:37:20.520
- And left to right on the number of worksheets,

00:37:20.520 --> 00:37:22.360
so it evaluates everything in the first,

00:37:22.360 --> 00:37:24.720
like if you have tabs at the bottom for separate sheets.

00:37:24.720 --> 00:37:26.480
- Yeah, you can go cross sheet as well.

00:37:26.480 --> 00:37:28.240
- Oh yeah, yeah, and so like, honestly,

00:37:28.240 --> 00:37:30.200
one of the things, kind of habits I've developed

00:37:30.200 --> 00:37:32.760
working with this is, the first sheet

00:37:32.760 --> 00:37:34.400
in like, the top left corner,

00:37:34.400 --> 00:37:37.520
I put any sort of like, inits or things that like,

00:37:37.520 --> 00:37:39.440
things I want to have defined everywhere,

00:37:39.440 --> 00:37:41.040
I just put in literally the first cell

00:37:41.040 --> 00:37:43.200
that it could ever possibly evaluate,

00:37:43.200 --> 00:37:45.200
and then everything else from there,

00:37:45.200 --> 00:37:46.920
will be what it's going to be.

00:37:46.920 --> 00:37:49.520
But, that's how I make sure those things,

00:37:49.520 --> 00:37:50.960
and actually when it spins up,

00:37:50.960 --> 00:37:54.600
there is a predefined kind of startup definition block,

00:37:54.600 --> 00:37:58.120
so it will automatically import pandas as PD,

00:37:58.120 --> 00:38:00.600
numpy as NP, like, so you don't have to,

00:38:00.600 --> 00:38:02.760
like, a lot of that kind of standard boilerplate,

00:38:02.760 --> 00:38:04.880
you don't have to, but if I'm doing a notebook

00:38:04.880 --> 00:38:05.920
where I'm doing a lot of--

00:38:05.920 --> 00:38:06.760
- Like scikit-learn or something.

00:38:06.760 --> 00:38:08.800
- Yeah, yeah, I just always want to have that there,

00:38:08.800 --> 00:38:10.480
I just got to copy pasta for that.

00:38:10.480 --> 00:38:14.840
- Yeah, make an incredibly thin column,

00:38:14.840 --> 00:38:16.640
that if you were to expand it,

00:38:16.640 --> 00:38:17.480
that's where you're right there.

00:38:17.480 --> 00:38:18.840
- That's actually, I've done that.

00:38:18.840 --> 00:38:19.920
- Yeah, awesome.

00:38:19.920 --> 00:38:21.560
- But, just like in a Jupyter notebook though,

00:38:21.560 --> 00:38:24.400
that kernel, like, if you can define variables like that X,

00:38:24.400 --> 00:38:25.760
and you can use that anywhere else,

00:38:25.760 --> 00:38:28.040
and then you can also just put it in a cell,

00:38:28.040 --> 00:38:30.120
and you can have Excel refer to it,

00:38:30.120 --> 00:38:32.520
and it will also know what data is there.

00:38:32.520 --> 00:38:35.400
- Right, you might have to do the pi or the XL

00:38:35.400 --> 00:38:37.640
to like, transform it, otherwise then you just use it,

00:38:37.640 --> 00:38:39.000
yeah, yeah, awesome.

00:38:39.000 --> 00:38:41.360
So, you said this runs in Azure,

00:38:41.360 --> 00:38:44.320
and it's some locked down container,

00:38:44.320 --> 00:38:46.440
but what version of Python,

00:38:46.440 --> 00:38:49.080
like, what OS is the container running,

00:38:49.080 --> 00:38:51.000
what's the story, what do you know about

00:38:51.000 --> 00:38:52.080
where this actually runs,

00:38:52.080 --> 00:38:54.440
like, to the extent that people will care?

00:38:54.440 --> 00:38:58.860
- Yeah, yeah, so, I don't know the specific version,

00:38:58.860 --> 00:39:00.820
I'm guessing it's probably 3.11,

00:39:00.820 --> 00:39:03.960
but the idea is that it is a well-known

00:39:03.960 --> 00:39:08.600
and highly descriptive and fixed container descriptor,

00:39:08.600 --> 00:39:11.000
it's running, I believe it's just kind of running

00:39:11.000 --> 00:39:14.200
on a standard Ubuntu, like, Docker,

00:39:14.200 --> 00:39:15.600
it's an Azure container service, so.

00:39:15.600 --> 00:39:17.840
- Somebody could do a sys.platform,

00:39:17.840 --> 00:39:19.480
and get that and get it out, right?

00:39:19.480 --> 00:39:22.680
- Interestingly, yeah, you can try some of that,

00:39:22.680 --> 00:39:26.000
but how they've kind of helped lock down some of that

00:39:26.000 --> 00:39:27.800
is there's actually hooks,

00:39:27.800 --> 00:39:29.100
'cause I was actually trying to do this,

00:39:29.100 --> 00:39:32.400
I was trying to exfiltrate and/or escape the box,

00:39:32.400 --> 00:39:33.240
but they actually--

00:39:33.240 --> 00:39:34.080
- You can't contain me.

00:39:34.080 --> 00:39:34.900
(laughing)

00:39:34.900 --> 00:39:37.160
- They have hooks in the Python interpreter

00:39:37.160 --> 00:39:39.680
that basically can catch anything

00:39:39.680 --> 00:39:42.260
before it touches anything outside of Python,

00:39:42.260 --> 00:39:45.040
and so it's, I mean, I am not a security expert,

00:39:45.040 --> 00:39:46.240
I am not a security expert,

00:39:46.240 --> 00:39:48.200
but any naive sort of like,

00:39:48.200 --> 00:39:51.840
ha ha ha, I'm gonna import sys and manipulate permissions.

00:39:51.840 --> 00:39:55.480
- OS.run, open pip install.

00:39:55.480 --> 00:39:58.580
- Exactly, so all of that is pretty safe.

00:39:58.580 --> 00:40:01.160
It's gonna be a modern version of Python,

00:40:01.160 --> 00:40:02.840
it's gonna have everything up to date,

00:40:02.840 --> 00:40:04.920
and from a supply chain standpoint,

00:40:04.920 --> 00:40:06.520
it's all provided by Anaconda,

00:40:06.520 --> 00:40:09.320
which they have assertions about code origin

00:40:09.320 --> 00:40:10.160
and stuff like that.

00:40:10.160 --> 00:40:12.480
So really it should be a,

00:40:12.480 --> 00:40:17.640
the most best definition of a reproducible environment

00:40:17.640 --> 00:40:20.560
that will literally, so like even in perpetuity,

00:40:20.560 --> 00:40:22.440
like if you hand the worksheet to somebody else

00:40:22.440 --> 00:40:25.080
and you 10 years later come back to it,

00:40:25.080 --> 00:40:27.240
assuming the earth hasn't blown up,

00:40:27.240 --> 00:40:29.000
presumably it'll run in a container

00:40:29.000 --> 00:40:30.320
of exactly the same description

00:40:30.320 --> 00:40:31.440
so you don't have to worry about,

00:40:31.440 --> 00:40:34.240
oh shoot, I wrote this in a version of Python

00:40:34.240 --> 00:40:36.640
that now the package was built with Python 2.7.

00:40:36.640 --> 00:40:38.600
- Can you believe I wrote it in Python 3

00:40:38.600 --> 00:40:41.160
and it's just like, we're on Python 14, it doesn't work.

00:40:41.160 --> 00:40:43.280
- So many things are still in 2.7.

00:40:43.280 --> 00:40:45.000
- Yeah, I know, it's wrong.

00:40:45.000 --> 00:40:47.400
Yeah, like so the statement that I saw

00:40:47.400 --> 00:40:48.600
on sort of the stability says,

00:40:48.600 --> 00:40:50.960
"Existing workbooks will still calculate

00:40:50.960 --> 00:40:52.480
"against the version of the environment

00:40:52.480 --> 00:40:54.080
"the workbook was created on,

00:40:54.080 --> 00:40:56.560
"and users can be prompted to upgrade

00:40:56.560 --> 00:40:58.560
"if they want like new run times,

00:40:58.560 --> 00:41:00.120
"new Python versions or whatever."

00:41:00.120 --> 00:41:02.800
So basically, there's no requirements.txt

00:41:02.800 --> 00:41:04.920
or pyproject.toml pinning your versions,

00:41:04.920 --> 00:41:06.840
but at the time of creation,

00:41:06.840 --> 00:41:10.720
it kind of snapshots effectively a pin virtual environment.

00:41:10.720 --> 00:41:12.440
- Yeah, and as I mentioned,

00:41:12.440 --> 00:41:16.520
there is kind of like a fixed startup script for it

00:41:16.520 --> 00:41:18.920
that does those kind of suggested imports

00:41:18.920 --> 00:41:21.000
and settings for things,

00:41:21.000 --> 00:41:22.480
which you can actually view in Excel,

00:41:22.480 --> 00:41:24.560
it shows you and it's read only right now,

00:41:24.560 --> 00:41:26.560
but that might be a thing

00:41:26.560 --> 00:41:28.240
that you might be able to edit at the beginning.

00:41:28.240 --> 00:41:30.800
So if there are the things in that one cell

00:41:30.800 --> 00:41:31.960
that I always put at the beginning,

00:41:31.960 --> 00:41:34.960
maybe I can change that for my notebooks, sorts of things.

00:41:34.960 --> 00:41:37.280
- Yeah, so it's still in preview.

00:41:37.280 --> 00:41:39.640
It's not like if I go to my Excel

00:41:39.640 --> 00:41:41.680
that I've got installed on my Mac

00:41:41.680 --> 00:41:44.160
and just try to type this, it's not gonna like it.

00:41:44.160 --> 00:41:45.640
- It's not gonna work because it's a Mac.

00:41:45.640 --> 00:41:46.760
- How do you get it?

00:41:46.760 --> 00:41:50.800
- Yes, so right now, it's in the Windows Insider program.

00:41:50.800 --> 00:41:55.800
So you have to have a M365 sort of subscription for Excel.

00:41:55.960 --> 00:41:59.720
You have to enroll in the Insiders program,

00:41:59.720 --> 00:42:02.120
which you can do if you go to your account settings

00:42:02.120 --> 00:42:05.760
in the app right now, like, because it is a gradual rollout.

00:42:05.760 --> 00:42:08.600
I think the initial public preview was only in September.

00:42:08.600 --> 00:42:09.440
- Yeah, it's pretty new.

00:42:09.440 --> 00:42:10.720
- Yeah, it's quite new.

00:42:10.720 --> 00:42:12.880
Like pretty much every week when I start working on this,

00:42:12.880 --> 00:42:15.000
I'm like, all right, what, you know,

00:42:15.000 --> 00:42:18.000
does this look the same as it did last week?

00:42:18.000 --> 00:42:20.880
So, but right now it's only available for Windows machines.

00:42:20.880 --> 00:42:24.280
It is fully intended to be available on all platforms,

00:42:24.280 --> 00:42:27.280
including the web-based version, which will be super cool.

00:42:27.280 --> 00:42:30.120
But yeah, right now, Windows initially

00:42:30.120 --> 00:42:33.240
and the feature itself is,

00:42:33.240 --> 00:42:37.520
will have some sort of cost, what that is and how much

00:42:37.520 --> 00:42:40.880
and when is TBD, just because this is a very--

00:42:40.880 --> 00:42:41.880
- Is it extra, who knows?

00:42:41.880 --> 00:42:43.200
- Yeah, exactly.

00:42:43.200 --> 00:42:44.120
- Yeah, awesome.

00:42:44.120 --> 00:42:45.960
Well, really cool to get a look at this.

00:42:45.960 --> 00:42:48.520
I think for me personally, I think the coolest thing about it

00:42:48.520 --> 00:42:51.200
is that it's gonna expose more people to Python,

00:42:51.200 --> 00:42:52.520
give them a little bit of confidence

00:42:52.520 --> 00:42:55.040
and then they can go, only 20 libraries?

00:42:55.040 --> 00:43:00.040
I heard, oh, over on pypi.org, we're just under 500,000.

00:43:00.040 --> 00:43:02.680
Maybe I could expand my world a bit, right?

00:43:02.680 --> 00:43:03.520
That's awesome.

00:43:03.520 --> 00:43:04.640
- Yeah, and you don't have to like,

00:43:04.640 --> 00:43:07.040
all right, download a version of Python

00:43:07.040 --> 00:43:08.760
or download a version of Anaconda.

00:43:08.760 --> 00:43:11.360
Now make sure you have all the things installed.

00:43:11.360 --> 00:43:13.040
Make sure you have permissions, things on path.

00:43:13.040 --> 00:43:14.520
Like all of that just goes away.

00:43:14.520 --> 00:43:16.640
- Create a virtual environment, activate it.

00:43:16.640 --> 00:43:17.840
Yeah, all this stuff, yeah.

00:43:17.840 --> 00:43:19.600
- It's just already handled for you

00:43:19.600 --> 00:43:20.720
and you can get right to the fun stuff.

00:43:20.720 --> 00:43:21.880
- Yeah, that's super cool.

00:43:21.880 --> 00:43:24.680
All right, well, I always ask at the end of the show

00:43:24.680 --> 00:43:27.480
for some PyPI package that you think is cool,

00:43:27.480 --> 00:43:29.280
you've come across, like anything that you're like,

00:43:29.280 --> 00:43:31.280
oh, that's interesting people should know about.

00:43:31.280 --> 00:43:33.120
It doesn't have to be popular.

00:43:33.120 --> 00:43:33.960
- Oh no, no, no.

00:43:33.960 --> 00:43:36.920
There's one I can't think of the name,

00:43:36.920 --> 00:43:39.280
generates a bunch of fake data for you to use.

00:43:39.280 --> 00:43:41.600
- Okay, there's, is it Mockaroo?

00:43:41.600 --> 00:43:42.720
And Mockaroo is the website.

00:43:42.720 --> 00:43:43.560
- Yeah.

00:43:43.560 --> 00:43:44.400
- There's Faker.

00:43:44.400 --> 00:43:47.120
- Faker is good, but it's like hypothesis.

00:43:47.120 --> 00:43:47.960
- Okay.

00:43:47.960 --> 00:43:49.840
- Come up with a different one though.

00:43:49.840 --> 00:43:52.720
- Well, one that is near and dear to my heart

00:43:52.720 --> 00:43:55.040
is actually called PyQIR.

00:43:55.040 --> 00:43:57.680
So one of the, I mentioned the quantum computing stuff

00:43:57.680 --> 00:43:59.920
before, one of the open source communities

00:43:59.920 --> 00:44:02.240
I'm still really engaged with is actually

00:44:02.240 --> 00:44:05.760
an open source consortium to basically create

00:44:05.760 --> 00:44:10.440
a LLVM style machine agnostic, language agnostic

00:44:10.440 --> 00:44:12.040
representation for quantum programs.

00:44:12.040 --> 00:44:12.880
- Wow, okay.

00:44:12.880 --> 00:44:15.280
- Which is really cool and like coming,

00:44:15.280 --> 00:44:17.360
most of programming right now has kind of,

00:44:17.360 --> 00:44:18.800
was born in Python.

00:44:18.800 --> 00:44:21.560
Like Python was the host for all of this,

00:44:21.560 --> 00:44:24.680
but as it's growing up and kind of leaving the nest

00:44:24.680 --> 00:44:27.400
as it were from Python, basically we need ways

00:44:27.400 --> 00:44:30.280
to interop like this huge existing tool ecosystem

00:44:30.280 --> 00:44:33.440
with actual hardware and hardware that supports things

00:44:33.440 --> 00:44:36.480
that basically the Python like mental model

00:44:36.480 --> 00:44:37.920
doesn't really match up.

00:44:37.920 --> 00:44:38.760
- Right.

00:44:38.760 --> 00:44:40.080
- And that's why you kind of need domain specific

00:44:40.080 --> 00:44:41.760
languages for quantum computing.

00:44:41.760 --> 00:44:45.080
But this PyQIR package gives you kind of an easy way

00:44:45.080 --> 00:44:50.040
to connect and like bootstrap that interop

00:44:50.040 --> 00:44:52.280
from your quantum programs that you've written

00:44:52.280 --> 00:44:55.520
in Python to this intermediate representation,

00:44:55.520 --> 00:44:58.000
QIR, quantum intermediate representation,

00:44:58.000 --> 00:45:00.440
which is actually LLVM.

00:45:00.440 --> 00:45:03.560
So you can, you don't have to figure out how to write

00:45:03.560 --> 00:45:05.560
and export LLVM files.

00:45:05.560 --> 00:45:06.400
- Yeah, awesome.

00:45:06.400 --> 00:45:09.240
- Which is both very fun and informative

00:45:09.240 --> 00:45:12.040
and you can do it through Python and Rust.

00:45:12.040 --> 00:45:14.440
The Py03 Rust crate is my favorite.

00:45:14.440 --> 00:45:15.280
- Yeah.

00:45:15.280 --> 00:45:17.320
- Yeah, so that's, if you're at all interested

00:45:17.320 --> 00:45:21.160
in quantum computing stuff and you have a Python

00:45:21.160 --> 00:45:23.760
skill set or interest, that would definitely be a package

00:45:23.760 --> 00:45:24.600
I'd say go check out.

00:45:24.600 --> 00:45:26.920
- Excellent, all right, well, final call to action,

00:45:26.920 --> 00:45:28.040
people wanna get started with this stuff,

00:45:28.040 --> 00:45:28.880
what do they do?

00:45:28.880 --> 00:45:29.720
- Yeah, definitely.

00:45:29.720 --> 00:45:33.040
There is a great blog post with the original announcement

00:45:33.040 --> 00:45:36.200
that's got all of the detailed steps for how you find

00:45:36.200 --> 00:45:39.040
and enroll in the insiders programs.

00:45:39.040 --> 00:45:41.280
But other than that, there is a GitHub repo.

00:45:41.280 --> 00:45:43.120
If you do get a chance to play with this

00:45:43.120 --> 00:45:45.560
and find all the things that you hate about it

00:45:45.560 --> 00:45:48.320
and wanna come yell at people about,

00:45:48.320 --> 00:45:51.080
I field a lot of those questions and enjoy it.

00:45:51.080 --> 00:45:54.840
So yeah, you can just come file issues on the GitHub repo

00:45:54.840 --> 00:45:57.760
and like if something isn't working the way you thought

00:45:57.760 --> 00:46:00.320
or you find a bug, that's kind of the best way

00:46:00.320 --> 00:46:01.840
that the team is very active.

00:46:01.840 --> 00:46:06.200
And so that's a great way to kind of get some good

00:46:06.200 --> 00:46:08.080
interaction with the folks who are building this

00:46:08.080 --> 00:46:09.360
in real time.

00:46:09.360 --> 00:46:10.200
- Very cool.

00:46:10.200 --> 00:46:11.520
All right, well, Sarah, thanks for being here.

00:46:11.520 --> 00:46:13.080
- Yeah, absolutely, thanks so much for having me.

00:46:13.080 --> 00:46:13.920
- Yeah, you bet.

00:46:13.920 --> 00:46:14.840
Cheers. - Cheers.

00:46:14.840 --> 00:46:18.120
- This has been another episode of Talk Python to Me.

00:46:18.120 --> 00:46:19.560
Thank you to our sponsors.

00:46:19.560 --> 00:46:20.920
Be sure to check out what they're offering.

00:46:20.920 --> 00:46:23.360
It really helps support the show.

00:46:23.360 --> 00:46:25.960
This episode is sponsored by Posit Connect

00:46:25.960 --> 00:46:27.480
from the makers of Shiny.

00:46:27.480 --> 00:46:29.920
Publish, share and deploy all of your data projects

00:46:29.920 --> 00:46:31.960
that you're creating using Python.

00:46:31.960 --> 00:46:36.040
Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quarto,

00:46:36.040 --> 00:46:38.840
Reports, Dashboards and APIs.

00:46:38.840 --> 00:46:40.720
Posit Connect supports all of them.

00:46:40.720 --> 00:46:45.240
Try Posit Connect for free by going to talkpython.fm/posit,

00:46:45.240 --> 00:46:47.320
P-O-S-I-T.

00:46:47.320 --> 00:46:50.200
Are you ready to level up your Python career?

00:46:50.200 --> 00:46:52.600
And could you use a little bit of personal

00:46:52.600 --> 00:46:55.200
and individualized guidance to do so?

00:46:55.200 --> 00:46:59.080
Check out the PyBites Python Developer Mindset Program.

00:46:59.080 --> 00:47:00.400
Want to level up your Python?

00:47:00.400 --> 00:47:03.320
We have one of the largest catalogs of Python video courses

00:47:03.320 --> 00:47:04.520
over at Talk Python.

00:47:04.520 --> 00:47:06.600
Our content ranges from true beginners

00:47:06.600 --> 00:47:09.560
to deeply advanced topics like memory and async.

00:47:09.560 --> 00:47:12.240
And best of all, there's not a subscription in sight.

00:47:12.240 --> 00:47:15.480
Check it out for yourself at training.talkpython.fm.

00:47:15.480 --> 00:47:17.080
Be sure to subscribe to the show,

00:47:17.080 --> 00:47:20.080
open your favorite podcast app and search for Python.

00:47:20.080 --> 00:47:21.460
We should be right at the top.

00:47:21.460 --> 00:47:24.340
You can also find the iTunes feed at /itunes,

00:47:24.340 --> 00:47:26.520
the Google Play feed at /play

00:47:26.520 --> 00:47:30.980
and the direct RSS feed at /rss on talkpython.fm.

00:47:30.980 --> 00:47:33.600
We're live streaming most of our recordings these days.

00:47:33.600 --> 00:47:34.720
If you want to be part of the show

00:47:34.720 --> 00:47:37.000
and have your comments featured on the air,

00:47:37.000 --> 00:47:38.880
be sure to subscribe to our YouTube channel

00:47:38.880 --> 00:47:42.080
at talkpython.fm/youtube.

00:47:42.080 --> 00:47:43.500
This is your host, Michael Kennedy.

00:47:43.500 --> 00:47:44.640
Thanks so much for listening.

00:47:44.640 --> 00:47:45.900
I really appreciate it.

00:47:45.900 --> 00:47:48.440
Now get out there and write some Python code.

00:47:48.440 --> 00:47:51.020
(upbeat music)

00:48:06.500 --> 00:48:08.560
you

