WEBVTT

00:00:00.000 --> 00:00:04.800
Think about the different APIs and databases your applications work with.


00:00:04.800 --> 00:00:11.400
Each one of them requires either an API key or a database connection string that itself contains a password.


00:00:11.400 --> 00:00:17.400
How do you let your application access this sensitive information without storing it in source code or


00:00:17.400 --> 00:00:20.000
putting it in other compromising locations?


00:00:20.000 --> 00:00:24.000
On this episode, we have Glyph on the show to share his security fable


00:00:24.000 --> 00:00:27.600
as well as just good advice for keeping secrets out of Python code.


00:00:27.600 --> 00:00:33.600
This is Talk Python to Me, episode 418, recorded May 24th, 2023.


00:00:33.600 --> 00:00:46.600
[music]


00:00:46.600 --> 00:00:49.600
Welcome to Talk Python to Me, a weekly podcast on Python.


00:00:49.600 --> 00:00:51.600
This is your host, Michael Kennedy.


00:00:51.600 --> 00:00:56.600
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython.


00:00:56.600 --> 00:00:59.440
Python, both on fosstodon.org.


00:00:59.440 --> 00:01:03.320
Be careful with impersonating accounts on other instances, there are many.


00:01:03.320 --> 00:01:08.800
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.


00:01:08.800 --> 00:01:12.560
We've started streaming most of our episodes live on YouTube.


00:01:12.560 --> 00:01:18.400
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be


00:01:18.400 --> 00:01:20.540
part of that episode.


00:01:20.540 --> 00:01:26.560
This episode is brought to you by JetBrains, who encourage you to get work done with PyCharm.


00:01:26.560 --> 00:01:29.000
download your free trial of PyCharm Professional


00:01:29.000 --> 00:01:33.520
at talkpython.fm/done-with-pycharm.


00:01:33.520 --> 00:01:37.240
And it's brought to you by the Compiler Podcast from Red Hat.


00:01:37.240 --> 00:01:39.520
Listen to an episode of their podcast


00:01:39.520 --> 00:01:41.320
to demystify the tech industry


00:01:41.320 --> 00:01:44.280
over at talkpython.fm/compiler.


00:01:44.280 --> 00:01:46.620
Cliff, welcome to Talk Python to Me.


00:01:46.620 --> 00:01:47.460
- It's good to be here.


00:01:47.460 --> 00:01:48.560
Thank you very much for having me.


00:01:48.560 --> 00:01:50.240
- It is good to have you here


00:01:50.240 --> 00:01:52.360
and it's good to have you back.


00:01:52.360 --> 00:01:54.680
You've been on the show a couple times,


00:01:54.680 --> 00:01:58.200
way back when you talked about shipping software to users.


00:01:58.200 --> 00:02:01.960
And then also not so long ago, a little while ago,


00:02:01.960 --> 00:02:04.040
we talked about running Python in production.


00:02:04.040 --> 00:02:05.840
And those were a bunch of fun shows


00:02:05.840 --> 00:02:09.600
and really excited to now talk about secrets.


00:02:09.600 --> 00:02:12.360
Although it does pose a bit of a problem.


00:02:12.360 --> 00:02:14.880
If we talk about secrets, are they still secret?


00:02:14.880 --> 00:02:18.280
- That is an interesting epistemological question.


00:02:18.280 --> 00:02:20.080
But luckily that's not the question


00:02:20.080 --> 00:02:21.520
that we need to answer today.


00:02:21.520 --> 00:02:23.840
'Cause the kinds of secrets we're gonna talk about,


00:02:23.840 --> 00:02:25.680
other ones that are meaningless.


00:02:25.680 --> 00:02:28.560
They are by definition, not very interesting to humans,


00:02:28.560 --> 00:02:29.560
but to computers.


00:02:29.560 --> 00:02:30.400
- Yes, they are.


00:02:30.400 --> 00:02:33.800
They're both for you to access your database


00:02:33.800 --> 00:02:37.560
and cryptocurrency people to get cheaper crypto mining.


00:02:37.560 --> 00:02:38.380
- Yep.


00:02:38.380 --> 00:02:39.220
- Depending on which way it goes,


00:02:39.220 --> 00:02:40.040
if you do it right or wrong.


00:02:40.040 --> 00:02:41.280
- So before we get into that though,


00:02:41.280 --> 00:02:42.760
let's just do a quick catch up.


00:02:42.760 --> 00:02:45.320
It's been, gosh, at least a year


00:02:45.320 --> 00:02:47.080
since you've been on the show, a little bit more.


00:02:47.080 --> 00:02:48.640
So what have you been up to?


00:02:48.640 --> 00:02:49.520
What are you doing these days?


00:02:49.520 --> 00:02:52.200
- I am nominally independent now.


00:02:52.200 --> 00:02:56.780
I am trying to make a career out of having good ideas


00:02:56.780 --> 00:02:58.280
and putting them on the internet.


00:02:58.280 --> 00:02:59.440
Worked for a lot of different companies,


00:02:59.440 --> 00:03:00.520
doing a lot of different things.


00:03:00.520 --> 00:03:01.920
Now I am making my own app.


00:03:01.920 --> 00:03:03.720
I'm making an app called Pomodorobros,


00:03:03.720 --> 00:03:05.840
which is a terrible name that I'm sure you can't spell,


00:03:05.840 --> 00:03:08.600
but I'm sure we'll have some links in the show notes


00:03:08.600 --> 00:03:12.520
to get to that, which is a ADHD time blindness


00:03:12.520 --> 00:03:13.640
assistance app.


00:03:13.640 --> 00:03:14.640
- Interesting.


00:03:14.640 --> 00:03:15.800
- So on the one hand,


00:03:15.800 --> 00:03:18.300
I'm kind of leaning into the neurodiversity thing.


00:03:18.300 --> 00:03:20.840
I have ADHD and I'm kind of trying to help other people


00:03:20.840 --> 00:03:21.920
with it as well.


00:03:21.920 --> 00:03:24.880
But also it is written entirely in Python.


00:03:24.880 --> 00:03:26.360
I'm working on the Mac version first,


00:03:26.360 --> 00:03:27.600
but there'll be other versions later


00:03:27.600 --> 00:03:28.720
and it's all open source.


00:03:28.720 --> 00:03:32.840
And so I have a Patreon at patreon.com/creatorglyph,


00:03:32.840 --> 00:03:34.880
which has just terrible reward tiers.


00:03:34.880 --> 00:03:36.600
Hopefully I'll improve those soon.


00:03:36.600 --> 00:03:38.320
But the idea is if you want to support


00:03:38.320 --> 00:03:39.760
like various open source libraries


00:03:39.760 --> 00:03:41.840
that I'm working on maintaining,


00:03:41.840 --> 00:03:43.360
we'll talk about a couple of new ones


00:03:43.360 --> 00:03:46.680
that I've released recently in this podcast.


00:03:46.680 --> 00:03:50.040
If you want to support the random stuff that I do,


00:03:50.040 --> 00:03:50.900
now you can.


00:03:50.900 --> 00:03:51.740
And so we'll see.


00:03:51.740 --> 00:03:52.900
People have been telling me for years


00:03:52.900 --> 00:03:54.380
that they love the stuff that I do.


00:03:54.380 --> 00:03:57.040
So I guess we'll find out if they in fact do.


00:03:57.040 --> 00:03:59.260
- Well, congratulations.


00:03:59.260 --> 00:04:00.100
That's really awesome.


00:04:00.100 --> 00:04:03.420
As somebody doing independent stuff myself,


00:04:03.420 --> 00:04:05.260
I know how rewarding it is,


00:04:05.260 --> 00:04:08.480
but also how stressful it is, especially early days.


00:04:08.480 --> 00:04:11.900
- Yep, it is equal parts harrowing and amazing.


00:04:11.900 --> 00:04:14.500
- Yes, that's well said, well said.


00:04:14.500 --> 00:04:17.660
So yeah, certainly we will link to those in the show notes.


00:04:17.660 --> 00:04:19.560
You give me the links, I'll throw them in there for people.


00:04:19.560 --> 00:04:25.060
You said something interesting that I don't hear a lot of people say that I actually wish I heard more often was,


00:04:25.060 --> 00:04:28.860
"I'm working on a macOS version," and the word's Python.


00:04:28.860 --> 00:04:34.560
So this is actually, it kind of dovetails with what we're going to be talking about today in an interesting way,


00:04:34.560 --> 00:04:38.660
which is that one of the things that I want to be doing with my independent work


00:04:38.660 --> 00:04:42.760
is kind of letting people program their own computers.


00:04:42.760 --> 00:04:45.660
And part of that is like a lot of people use Macs,


00:04:45.660 --> 00:04:49.660
So I'm working on Mac desktop stuff. I hope to do some mobile stuff later.


00:04:49.660 --> 00:04:53.660
I also want to do Linux and Windows desktop versions of this app and then others.


00:04:53.660 --> 00:04:57.660
Because I think that it's, we've lost touch with that a little bit.


00:04:57.660 --> 00:05:01.660
We all do stuff in the cloud these days, particularly in Python.


00:05:01.660 --> 00:05:04.660
But Python's so versatile and you can use it in so many places.


00:05:04.660 --> 00:05:07.660
And the way that that dovetails with what we're going to be talking about today


00:05:07.660 --> 00:05:11.660
is that it's also a neglected part of the security story.


00:05:11.660 --> 00:05:16.660
story. Because no matter how great all of your cloud security is, you're using AWS


00:05:16.660 --> 00:05:21.300
Secrets Manager and HashiCorp Vault and all kinds of cloud security stuff,


00:05:21.300 --> 00:05:26.820
it all terminates at your computer. If your computer is not secure, if the secrets


00:05:26.820 --> 00:05:32.700
that you have locally in your possession are not properly managed, then all of the


00:05:32.700 --> 00:05:37.660
cloud stuff, you're doing it from your computer. So that computer had better be


00:05:36.620 --> 00:05:39.660
And if it's not, that kind of flows outward


00:05:39.660 --> 00:05:41.500
towards everything else if you're a developer


00:05:41.500 --> 00:05:43.140
or a sysadmin.


00:05:43.140 --> 00:05:45.660
So, yeah, so the two libraries


00:05:45.660 --> 00:05:48.220
that we're gonna be talking about today are also both,


00:05:48.220 --> 00:05:49.220
they're a little bit more traditional


00:05:49.220 --> 00:05:51.180
kind of console text things,


00:05:51.180 --> 00:05:53.920
but they are designed to be run on your computer


00:05:53.920 --> 00:05:55.300
and not on the cloud.


00:05:55.300 --> 00:05:56.220
- Yeah, absolutely.


00:05:56.220 --> 00:05:58.740
That's a lot of interesting things for like,


00:05:58.740 --> 00:06:01.220
how do you secure secrets,


00:06:01.220 --> 00:06:03.740
connection strings and whatnot on your machine, right?


00:06:03.740 --> 00:06:05.300
- Yeah, so, and as far as the other


00:06:05.300 --> 00:06:06.700
to their desktop programming stuff.


00:06:06.700 --> 00:06:08.640
We do not have time to get into that today,


00:06:08.640 --> 00:06:10.340
but you can definitely follow my blog


00:06:10.340 --> 00:06:13.420
for more interesting details about how PyObjective-C works.


00:06:13.420 --> 00:06:16.020
- Right, are you willing to share a quick


00:06:16.020 --> 00:06:18.660
what GUI framework you're using sort of thing


00:06:18.660 --> 00:06:20.740
and how are you packaging it up or not yet?


00:06:20.740 --> 00:06:22.580
- I wrote a little tool called Encrust


00:06:22.580 --> 00:06:24.180
that does some of the code signing stuff.


00:06:24.180 --> 00:06:26.700
I'm packaging it with Py to app right now.


00:06:26.700 --> 00:06:28.020
And it's for GUI framework.


00:06:28.020 --> 00:06:30.020
I'm just using PyObjective-C


00:06:30.020 --> 00:06:32.020
and writing all of the GUI by hand


00:06:32.020 --> 00:06:33.660
as like a traditional Mac.


00:06:33.660 --> 00:06:35.700
I plan to redo the GUI for each platform


00:06:35.700 --> 00:06:37.540
'cause Commodore Obrus is a thing


00:06:37.540 --> 00:06:39.700
that needs to be a local Mac app,


00:06:39.700 --> 00:06:41.940
like it can, or a local desktop app rather.


00:06:41.940 --> 00:06:44.700
And so I really want to get the UI


00:06:44.700 --> 00:06:47.580
very kind of finely tuned per platform.


00:06:47.580 --> 00:06:49.240
And so cross-platform GUI toolkits


00:06:49.240 --> 00:06:51.540
don't really do some of the stuff that I need to do.


00:06:51.540 --> 00:06:53.180
So, and that's kind of part of the point


00:06:53.180 --> 00:06:54.620
I want to make with it is,


00:06:54.620 --> 00:06:55.780
it's actually not that hard


00:06:55.780 --> 00:06:57.780
to just like write things multiple times.


00:06:57.780 --> 00:06:59.500
The Python lets you keep all the logic


00:06:59.500 --> 00:07:00.740
in a nice kind of core.


00:07:00.740 --> 00:07:03.540
And then if you need to call some native APIs,


00:07:03.540 --> 00:07:05.020
Python can do that pretty much everywhere.


00:07:05.020 --> 00:07:06.980
>> Okay. Well, very interesting approach.


00:07:06.980 --> 00:07:09.740
I think one of the things that's held me back from going,


00:07:09.740 --> 00:07:13.100
"Oh, I'm going to use Tkinter or GDK or whatever."


00:07:13.100 --> 00:07:14.660
It's just like, "Oh, but it just doesn't


00:07:14.660 --> 00:07:16.660
really look like it belongs here that much."


00:07:16.660 --> 00:07:18.580
It looks like it belongs here,


00:07:18.580 --> 00:07:20.100
but not really.


00:07:20.100 --> 00:07:21.660
Some people don't mind that.


00:07:21.660 --> 00:07:23.900
To me, I'm not a big fan.


00:07:23.900 --> 00:07:26.140
I'm looking forward to this. It sounds great.


00:07:26.140 --> 00:07:27.500
>> Cool. Maybe you can have me on again to


00:07:27.500 --> 00:07:29.060
talk about it when it's closer to done.


00:07:29.060 --> 00:07:32.020
>> Yeah, absolutely. It'd be fun to talk about going through


00:07:32.020 --> 00:07:34.500
and building how you built it


00:07:34.500 --> 00:07:36.920
and some lessons that you've learned, right?


00:07:36.920 --> 00:07:39.620
Also, I'm working on some desktop apps now


00:07:39.620 --> 00:07:41.540
and it's not as easy as it used to be.


00:07:41.540 --> 00:07:43.080
It's like, oh, this one's not signed.


00:07:43.080 --> 00:07:46.060
And so it won't open because the macOS gatekeeper


00:07:46.060 --> 00:07:48.060
says it's probably dangerous.


00:07:48.060 --> 00:07:49.720
And you're just like, God,


00:07:49.720 --> 00:07:51.460
I used to be able to just hand out an app, right?


00:07:51.460 --> 00:07:53.420
We can't have nice things because of people.


00:07:53.420 --> 00:07:55.220
And I guess that's pretty much a great lead


00:07:55.220 --> 00:07:56.380
into this entire talk,


00:07:56.380 --> 00:07:58.880
because if we could have nice things,


00:07:58.880 --> 00:08:00.340
we wouldn't even need this talk, would we?


00:08:00.340 --> 00:08:01.580
- Exactly.


00:08:01.580 --> 00:08:04.080
I guess it's worth mentioning that I reached out to you


00:08:04.080 --> 00:08:05.880
and had you on the show here


00:08:05.880 --> 00:08:08.820
because you gave a talk at PyCon,


00:08:08.820 --> 00:08:10.260
how to keep a secret.


00:08:10.260 --> 00:08:11.740
And what is it today?


00:08:11.740 --> 00:08:15.180
It's May 24th, so a month and two days.


00:08:15.180 --> 00:08:17.580
And I was kind of looking forward


00:08:17.580 --> 00:08:19.780
to watching all these on YouTube and they're not out yet.


00:08:19.780 --> 00:08:23.060
So how about we have a podcast episode about it


00:08:23.060 --> 00:08:24.980
and share that with everyone.


00:08:24.980 --> 00:08:27.300
So I'm looking forward to kind of doing


00:08:27.300 --> 00:08:30.060
the audio conversational version of your talk.


00:08:30.060 --> 00:08:31.060
How did your talk go there?


00:08:31.060 --> 00:08:36.060
I thought it went great.


00:08:36.060 --> 00:08:36.900
There was a pretty good response in the audience.


00:08:36.900 --> 00:08:38.860
One of the things I did, which I would recommend


00:08:38.860 --> 00:08:40.540
for other conference attendees and speakers in the future


00:08:40.540 --> 00:08:43.780
is whenever anybody came up to me and said, "Great talk,"


00:08:43.780 --> 00:08:47.620
which is very nice, I appreciate it when people do that.


00:08:47.620 --> 00:08:50.220
I didn't just say, "Thanks," I said, "Thank you,


00:08:50.220 --> 00:08:52.780
and how is this going to affect your behavior going forward?


00:08:52.780 --> 00:08:56.020
What did you learn from the talk


00:08:56.020 --> 00:08:57.260
that's going to change what you do?"


00:08:57.260 --> 00:08:58.660
And a lot of people had specific things


00:08:58.660 --> 00:09:00.660
that they were going to change about their workflows


00:08:57.220 --> 00:08:59.140
their kind of personal security.


00:08:59.140 --> 00:09:00.180
And so that was telling me like,


00:09:00.180 --> 00:09:02.300
I think this is an important message to get out there.


00:09:02.300 --> 00:09:03.260
And I think that it's something


00:09:03.260 --> 00:09:05.740
that every developer should know about.


00:09:05.740 --> 00:09:08.340
So the fact that people were like really learning from it,


00:09:08.340 --> 00:09:10.780
I thought was the best metric for success.


00:09:10.780 --> 00:09:13.620
- It's got a lot of small lessons for many people.


00:09:13.620 --> 00:09:17.780
And I suspect most people are not doing all of these things.


00:09:17.780 --> 00:09:20.660
So even if you're like, yes, of course I keep,


00:09:20.660 --> 00:09:23.260
you know, I don't put secrets into my source code,


00:09:23.260 --> 00:09:24.100
or do you?


00:09:24.100 --> 00:09:24.940
But there's something else,


00:09:24.940 --> 00:09:26.220
I'm sure there's something for everyone here.


00:09:26.220 --> 00:09:31.220
So let's kick things off by talking about what you mean by secrets.


00:09:31.220 --> 00:09:31.720
All right.


00:09:31.720 --> 00:09:33.520
What are we talking about here specifically?


00:09:33.520 --> 00:09:39.120
So the main kind of secret that I'm talking about is a token type of secret.


00:09:39.120 --> 00:09:44.420
Whenever you use an API on the web, they'll give you like a little hex key,


00:09:44.420 --> 00:09:47.620
usually a short string that lets you access it.


00:09:47.620 --> 00:09:53.720
Cryptographic secrets, like if you have some encrypted blob that's stored in block storage,


00:09:53.720 --> 00:09:58.720
You might have CryptoKey that's a similar kind of thing.


00:09:58.720 --> 00:10:01.820
For your HTTPS certificates, you've got like, you know,


00:10:01.820 --> 00:10:05.180
private RSA key or something or ECTSA key that's a little bit longer,


00:10:05.180 --> 00:10:09.020
but still kind of text file that's no more than 20 lines.


00:10:09.020 --> 00:10:12.860
And so all of those secrets are kind of interesting.


00:10:12.860 --> 00:10:16.020
And I wanted to talk about them in particular because the way that security works


00:10:16.020 --> 00:10:21.020
just on computers generally is that all of your other security, all of the other bigger secrets


00:10:21.820 --> 00:10:26.820
you want to keep the confidential documents,


00:10:26.820 --> 00:10:28.820
media files or whatever it is that you're securing,


00:10:28.820 --> 00:10:32.120
your database, your user accounts,


00:10:32.120 --> 00:10:34.200
all of that stuff is secured by a smaller secret.


00:10:34.200 --> 00:10:38.400
And so these secrets generally represent


00:10:38.400 --> 00:10:40.840
some kind of authority, like a thing that you can do


00:10:40.840 --> 00:10:44.200
in the cloud.


00:10:44.200 --> 00:10:45.540
Even the cryptographic ones are kind of like the authority


00:10:45.540 --> 00:10:47.840
to decrypt another secret.


00:10:47.840 --> 00:10:49.600
And so that's in particular the reason


00:10:47.200 --> 00:10:52.200
that restriction of the scope of this discussion to those smaller secrets is interesting,


00:10:52.200 --> 00:10:57.200
is because those smaller secrets don't have a lot of interesting storage requirements.


00:10:57.200 --> 00:11:04.200
They're very small, and it's really about how you secure them, not so much about how you manage a huge scale of them.


00:11:04.200 --> 00:11:09.200
Yeah, also, if you're going to, say, encrypt huge blobs of data,


00:11:09.200 --> 00:11:14.200
usually what you actually need to get back to it is just the encryption key,


00:11:14.200 --> 00:11:18.000
pretty small, right? So even if the actual data is large, usually the thing


00:11:18.000 --> 00:11:21.300
that is the access to it is also small.


00:11:21.300 --> 00:11:21.600
Right.


00:11:21.600 --> 00:11:25.600
What you said you were not covering, encryption and that kind of stuff, right?


00:11:25.600 --> 00:11:29.400
There's a lot of other security stuff that you need to do. Like I touched


00:11:29.400 --> 00:11:33.000
briefly in the talk on disk encryption. We can talk about that in a little


00:11:33.000 --> 00:11:37.100
bit, but it's mostly not about that. In particular, like there's been a lot of


00:11:37.100 --> 00:11:41.200
discussion lately about end-to-end encrypted messaging between people, and


00:11:41.200 --> 00:11:43.400
I'm not really talking about that either.


00:11:43.400 --> 00:11:45.480
This is really about securing your applications.


00:11:45.480 --> 00:11:48.040
It's a lot of these techniques have to do


00:11:48.040 --> 00:11:51.680
with how you get your secrets, not just secured for you,


00:11:51.680 --> 00:11:54.400
but like into your Python code in a way


00:11:54.400 --> 00:11:57.480
which keeps them secure kind of on the whole journey


00:11:57.480 --> 00:12:00.060
from typing them in to using them


00:12:00.060 --> 00:12:01.220
in a production application.


00:12:01.220 --> 00:12:03.720
- For sure, as you're talking, I'm thinking,


00:12:03.720 --> 00:12:05.720
this problem is only getting worse, right?


00:12:05.720 --> 00:12:09.080
We're only consuming more APIs in our code


00:12:09.080 --> 00:12:13.380
And we're only stitching together more backends of cloud systems.


00:12:13.380 --> 00:12:13.980
Right.


00:12:13.980 --> 00:12:14.420
Yeah.


00:12:14.420 --> 00:12:15.580
We've been writing code for a while.


00:12:15.580 --> 00:12:18.140
I have to like, it used to be, well, what's your database connection


00:12:18.140 --> 00:12:18.340
street?


00:12:18.340 --> 00:12:18.880
All right, we're good.


00:12:18.880 --> 00:12:19.660
We're done.


00:12:19.660 --> 00:12:20.700
That's what you store, right?


00:12:20.700 --> 00:12:21.460
How do you store that?


00:12:21.460 --> 00:12:24.100
Well, and if you were doing something really esoteric, you would have like


00:12:24.100 --> 00:12:28.620
Twilio API key, so you could send like SMS messages and now you've got like


00:12:28.620 --> 00:12:34.820
your billing provider and your database provider and your cloud and your user,


00:12:34.820 --> 00:12:38.440
you know, your customer relationship management API and your email service.


00:12:38.440 --> 00:12:40.720
There's an API key for everything.


00:12:40.720 --> 00:12:43.320
And the scale of this stuff is like,


00:12:43.320 --> 00:12:45.480
really, if you do this sort of simple thing


00:12:45.480 --> 00:12:47.960
that all the tutorials show you to do for each of these services,


00:12:47.960 --> 00:12:49.720
you end up in a complete mess


00:12:49.720 --> 00:12:52.120
with basically no security on anything.


00:12:52.120 --> 00:12:55.480
So yeah, and that's why I wanted to talk about this at this point,


00:12:55.480 --> 00:12:57.560
because we need that security.


00:12:57.560 --> 00:12:59.000
Yeah, we definitely do.


00:12:59.000 --> 00:13:02.600
So I want to start out a little bit like you did with your talk,


00:13:02.600 --> 00:13:04.840
although not the same.


00:13:04.840 --> 00:13:07.040
I want to start out with sort of something that,


00:13:07.040 --> 00:13:10.440
you know, maybe it gets people's attention that might make them worry a little.


00:13:10.440 --> 00:13:16.640
And that's this project that has been gone unmaintained and has been shut down,


00:13:16.640 --> 00:13:21.640
I think because it was a little too much on the edge of what really you should be doing.


00:13:21.640 --> 00:13:23.640
And it's called Shgit.


00:13:23.640 --> 00:13:26.840
Shgit is a CLI thing, I'm not exactly sure.


00:13:26.840 --> 00:13:30.640
Basically, a little app you can run, a little CI that you can run,


00:13:30.640 --> 00:13:32.640
that will show you secrets in Git code,


00:13:32.640 --> 00:13:34.240
in code in Git repository.


00:13:34.240 --> 00:13:35.240
So you can look at your own,


00:13:35.240 --> 00:13:38.360
But for a while they were running this website


00:13:38.360 --> 00:13:41.160
called like shigit.com or something,


00:13:41.160 --> 00:13:43.160
like shhh, secret.


00:13:43.160 --> 00:13:45.960
And it was just a live stream of just


00:13:45.960 --> 00:13:49.500
all the secrets that were being committed to public repositories


00:13:49.500 --> 00:13:51.500
just screaming by and it's


00:13:51.500 --> 00:13:54.300
going by so fast that you really can't read it.


00:13:54.300 --> 00:13:56.800
And this is just the public.


00:13:56.800 --> 00:13:59.340
Here's all the things being uploaded.


00:13:59.340 --> 00:14:02.560
These are all these API keys, database connection strings,


00:14:02.560 --> 00:14:04.560
etc. that we've been talking about that are just


00:14:04.560 --> 00:14:07.560
you shouldn't be doing an, "Oh my gosh, look at this," right?


00:14:07.560 --> 00:14:09.560
This has got to grab people's attention.


00:14:09.560 --> 00:14:13.560
Right, and it's worth noting that this feed is not people


00:14:13.560 --> 00:14:16.560
accidentally committing their secrets to the improper,


00:14:16.560 --> 00:14:22.560
secure place in their organization where they accidentally push to a private Git repo.


00:14:22.560 --> 00:14:29.560
This is only showing you public repos with valid API keys being committed to them.


00:14:29.560 --> 00:14:35.880
If you know, you can imagine within organizations, there's probably 10 times as much traffic where stuff is being shared too broadly.


00:14:35.880 --> 00:14:42.360
Oh, yeah, people at least know they shouldn't do this and they still are like, they might think it's okay in their private repos, right?


00:14:42.360 --> 00:14:43.160
Right, exactly.


00:14:43.160 --> 00:14:44.760
It's just easier. Yeah, yeah, yeah.


00:14:44.760 --> 00:14:53.160
This portion of talk Python to me is brought to you by JetBrains, who encourage you to get work done with PyCharm.


00:14:53.160 --> 00:14:59.080
PyCharm Professional is the complete IDE that supports all major Python workflows, including


00:14:59.080 --> 00:15:01.000
full stack development.


00:15:01.000 --> 00:15:05.600
That's front-end JavaScript, Python back-end, and data support, as well as data science


00:15:05.600 --> 00:15:07.960
workflows with Jupyter.


00:15:07.960 --> 00:15:09.840
PyCharm just works out of the box.


00:15:09.840 --> 00:15:15.000
Some editors provide their functionality through piecemeal add-ins that you put together from


00:15:15.000 --> 00:15:17.120
a variety of sources.


00:15:17.120 --> 00:15:19.840
PyCharm is ready to go from minute one.


00:15:19.840 --> 00:15:22.280
And PyCharm thrives on complexity.


00:15:22.280 --> 00:15:26.700
The biggest selling point for me personally is that PyCharm understands the code structure


00:15:26.700 --> 00:15:33.220
of my entire project, even across languages such as Python and SQL and HTML.


00:15:33.220 --> 00:15:37.400
If you see your editor completing statements just because the word appears elsewhere in


00:15:37.400 --> 00:15:41.960
the file, but it's not actually relevant to that code block, that should make you really


00:15:41.960 --> 00:15:42.960
nervous.


00:15:42.960 --> 00:15:46.680
I've been a happy paying customer of PyCharm for years.


00:15:46.680 --> 00:15:51.560
Hardly a workday passes that I'm not deep inside PyCharm working on projects here at


00:15:51.560 --> 00:15:53.060
at Talk Python.


00:15:53.060 --> 00:15:55.440
What tool is more important to your productivity


00:15:55.440 --> 00:15:56.960
than your code editor?


00:15:56.960 --> 00:15:59.360
You deserve one that works the best.


00:15:59.360 --> 00:16:02.280
So download your free trial of PyCharm Professional today


00:16:02.280 --> 00:16:07.280
at talkpython.fm/donewithpycharm and get work done.


00:16:07.280 --> 00:16:10.120
That link is in your podcast player show notes.


00:16:10.120 --> 00:16:11.960
Thank you to PyCharm from JetBrains


00:16:11.960 --> 00:16:15.740
for sponsoring the show and keeping Talk Python going strong.


00:16:18.740 --> 00:16:21.740
You also pointed out right before we hit record


00:16:21.740 --> 00:16:26.640
that GitHub has a more constructive, official way of doing this as well.


00:16:26.640 --> 00:16:29.740
You want to tell people about the GitHub secret alerts?


00:16:29.740 --> 00:16:32.240
Yeah, I don't know a whole lot about this,


00:16:32.240 --> 00:16:36.840
except that it is a feed that also produces a lot of data.


00:16:36.840 --> 00:16:39.240
But there are secret scanning alerts.


00:16:39.240 --> 00:16:42.440
And I believe it's also only for public repositories.


00:16:42.440 --> 00:16:45.840
There might be some enterprise stuff that I have not used.


00:16:45.840 --> 00:16:48.040
Like you can, yeah, so as it says on the page,


00:16:48.040 --> 00:16:49.920
I guess organizations using GitHub Enterprise Cloud


00:16:49.920 --> 00:16:51.920
with a license for GitHub Advanced Security


00:16:51.920 --> 00:16:54.760
can also enable secret scanning for users


00:16:54.760 --> 00:16:57.360
on their private and internal repositories.


00:16:57.360 --> 00:16:59.680
But yeah, this is something that if you're running


00:16:59.680 --> 00:17:02.080
an open source project or you have a corporate


00:17:02.080 --> 00:17:03.920
GitHub account, you should probably look into


00:17:03.920 --> 00:17:07.480
just to understand how to manage these alerts,


00:17:07.480 --> 00:17:10.280
how to get them and what to do if people


00:17:10.280 --> 00:17:12.760
are accidentally checking in secrets to your repository.


00:17:12.760 --> 00:17:16.240
'Cause you may have to worry about open source PRs


00:17:16.240 --> 00:17:20.320
including other people's API keys, if they were like testing something out with your tool.


00:17:20.320 --> 00:17:24.720
Right. That's more likely even as you might have a placeholder, enter API key here,


00:17:24.720 --> 00:17:28.560
don't commit it and someone commits it in a PR, right? Something like that.


00:17:28.560 --> 00:17:32.640
Yeah. Yeah. So don't do that. Don't, don't put a place to paste something in a file that's


00:17:32.640 --> 00:17:37.520
actually checked into Git. But I think that it's also important not to shame people too much for


00:17:37.520 --> 00:17:42.720
doing this. Like one of the points of, of showcasing these tools is to say like, hey,


00:17:42.720 --> 00:17:45.720
People are leaking secrets constantly.


00:17:45.720 --> 00:17:47.720
You should be aware of it. It's a serious problem.


00:17:47.720 --> 00:17:49.720
The other is, people are doing this constantly.


00:17:49.720 --> 00:17:52.720
It's a really easy kind of mistake to make.


00:17:52.720 --> 00:17:54.720
If you do it, or if some junior engineer on your team


00:17:54.720 --> 00:17:57.720
pushes some secrets to GitHub, don't shame them.


00:17:57.720 --> 00:17:59.720
It's not a dumb thing to do.


00:17:59.720 --> 00:18:01.720
It's incredibly easy to screw up in this way,


00:18:01.720 --> 00:18:04.720
and we should help each other build better processes.


00:18:04.720 --> 00:18:09.720
So don't feel like it's a thing to mock or laugh at.


00:18:09.720 --> 00:18:16.280
So you're not suggesting that GitHub adopts a new kind of badge, like a secret teller badge or something if you're caught doing this?


00:18:16.280 --> 00:18:19.080
I think let's not gamify that in either direction.


00:18:19.080 --> 00:18:21.080
[laughter]


00:18:21.080 --> 00:18:23.080
It's a hard-enough conversation already.


00:18:23.080 --> 00:18:25.800
It is. Well, and it can happen even if you know you shouldn't.


00:18:25.800 --> 00:18:32.840
Maybe you understand the security, but you don't, you're not good with Git, and you accidentally overcommit stuff.


00:18:32.840 --> 00:18:34.200
And you're like, "Oh, whoops."


00:18:34.200 --> 00:18:36.840
Yep, that's a very common way that it can happen.


00:18:36.840 --> 00:18:39.760
And even if you are very familiar with Git


00:18:39.760 --> 00:18:43.160
and you know not to do this and all of the projects that you've set up


00:18:43.160 --> 00:18:44.440
are set up properly,


00:18:44.440 --> 00:18:46.680
you might find yourself in an unfamiliar repository


00:18:46.680 --> 00:18:49.120
assuming that something is Git-ignored and it's not.


00:18:49.120 --> 00:18:50.880
You know, there's lots of different ways that it can happen.


00:18:50.880 --> 00:18:52.200
Yeah, yeah.


00:18:52.200 --> 00:18:54.480
So I guess if you're running an open source project,


00:18:54.480 --> 00:18:58.080
it's probably worth turning on or at least looking into


00:18:58.080 --> 00:19:00.800
the secret scanning that GitHub has, if it's on GitHub, right?


00:19:00.800 --> 00:19:01.480
Yeah.


00:19:01.480 --> 00:19:04.480
And if you want to startle yourself, just check out the link,


00:19:04.480 --> 00:19:06.980
the animated GIF in the Shiget repository.


00:19:06.980 --> 00:19:10.240
All right, so as we start our conversation


00:19:10.240 --> 00:19:11.980
about the different secrets,


00:19:11.980 --> 00:19:14.480
the pitfalls and how we might keep them,


00:19:14.480 --> 00:19:19.980
you told, this was a really creative presentation at PyCon


00:19:19.980 --> 00:19:22.240
and you presented it through by way of,


00:19:22.240 --> 00:19:23.980
mostly by way of storytelling.


00:19:23.980 --> 00:19:25.240
>> Well, thank you for saying so.


00:19:25.240 --> 00:19:27.240
>> Yes, of course. Was it Gerald who was your...


00:19:27.240 --> 00:19:28.240
>> Jethro.


00:19:28.240 --> 00:19:30.480
>> Jethro was the protagonist.


00:19:30.480 --> 00:19:31.240
Yes, got it.


00:19:31.240 --> 00:19:33.640
>> So there's this practice in security engineering,


00:19:33.640 --> 00:19:36.640
which I'm sure a lot of your listeners would have heard of,


00:19:36.640 --> 00:19:38.720
which is called threat modeling.


00:19:38.720 --> 00:19:40.480
And threat modeling can be a bit dry


00:19:40.480 --> 00:19:42.080
'cause it's really just repeating


00:19:42.080 --> 00:19:45.040
kind of these same scenarios over and over and over again


00:19:45.040 --> 00:19:46.400
with slight things changed.


00:19:46.400 --> 00:19:48.560
And so I thought a good way to frame that


00:19:48.560 --> 00:19:50.560
would be like a time loop story


00:19:50.560 --> 00:19:53.040
where our protagonist is kind of running this service


00:19:53.040 --> 00:19:55.400
and every time through the time loop,


00:19:55.400 --> 00:19:58.280
his service gets pwned and taken down


00:19:58.280 --> 00:20:00.580
via some kind of compromise of secrets


00:20:00.580 --> 00:20:03.040
and he wakes up and has to do it all again


00:20:03.040 --> 00:20:05.040
and try to secure things properly.


00:20:05.040 --> 00:20:06.380
>> Yes, indeed.


00:20:06.380 --> 00:20:08.260
>> Yeah, that's where we get started.


00:20:08.260 --> 00:20:09.420
>> Yeah, for sure.


00:20:09.420 --> 00:20:11.660
>> Yeah, and one of the things I also called out is,


00:20:11.660 --> 00:20:13.260
I should mention this here too,


00:20:13.260 --> 00:20:14.920
it can be a little bit stressful


00:20:14.920 --> 00:20:16.540
listening to all these different things.


00:20:16.540 --> 00:20:18.660
This isn't exactly like a content warning,


00:20:18.660 --> 00:20:20.780
like a really serious, heavy stuff,


00:20:20.780 --> 00:20:22.600
but be aware that even if it


00:20:22.600 --> 00:20:24.260
sounds light and fun and informative,


00:20:24.260 --> 00:20:26.320
if you find yourself ideating on


00:20:26.320 --> 00:20:28.020
these same ideas of, "Oh no,


00:20:28.020 --> 00:20:29.780
all of this could go wrong,


00:20:29.780 --> 00:20:31.260
this could go wrong, or this could go wrong."


00:20:31.260 --> 00:20:33.760
That is kind of just what security engineering is like.


00:20:33.760 --> 00:20:35.960
But also it can kind of drive you crazy.


00:20:35.960 --> 00:20:39.260
So don't let yourself get trapped in cycles of anxiety.


00:20:39.260 --> 00:20:42.560
Just be aware that you kind of have to do your best


00:20:42.560 --> 00:20:44.760
and make a reasonable effort,


00:20:44.760 --> 00:20:46.360
but you're never going to get everything perfect.


00:20:46.360 --> 00:20:49.260
And in fact, I'll spoil the story a little bit


00:20:49.260 --> 00:20:51.260
since we're not quite going through it in order here.


00:20:51.260 --> 00:20:53.660
That's really the twist at the end of the talk


00:20:53.660 --> 00:20:56.860
is that Jethro needs to just put forward


00:20:56.860 --> 00:21:00.260
a good effort across the board for managing his secrets


00:21:00.260 --> 00:21:04.060
and not absolutely perfectly defend against every attack,


00:21:04.060 --> 00:21:06.700
but also not to defend against each attack piecemeal,


00:21:06.700 --> 00:21:09.000
kind of onesie-twosie, just like, "Oh, I'll address this thing,


00:21:09.000 --> 00:21:11.060
and then I'll address that thing, and then I'll address that thing."


00:21:11.060 --> 00:21:14.060
It's like, think about your whole process.


00:21:14.060 --> 00:21:19.660
So, yeah, so I guess we should dive into what those actual specific attacks are.


00:21:19.660 --> 00:21:24.300
Before we do that, one thing that I thought was really nice that you pointed out is,


00:21:24.300 --> 00:21:27.700
at least for me, when I feel like I'm putting a website up there,


00:21:27.700 --> 00:21:31.800
I feel like, oh my goodness, have I, what have I forgotten?


00:21:31.800 --> 00:21:32.800
Right?


00:21:32.800 --> 00:21:36.800
But there's, you point out that there's a lot of people on your side, right?


00:21:36.800 --> 00:21:41.100
There's operating system vendors, the open source maintainers,


00:21:41.100 --> 00:21:42.900
you know, what I riff on that a bit.


00:21:42.900 --> 00:21:45.300
This is also important to remember because,


00:21:45.300 --> 00:21:47.000
so for example, just to like,


00:21:47.000 --> 00:21:51.500
one attack that's been in the news a lot lately is


00:21:51.500 --> 00:21:54.200
typo squatting and software supply chain attacks, right?


00:21:54.200 --> 00:21:57.100
Like somebody uploading something malicious to PyPI,


00:21:57.100 --> 00:22:01.940
somebody uploading, you know, pad NAS instead of pandas and you tie, you know,


00:22:01.940 --> 00:22:06.460
fat finger the name in pip and then, oh no, you're like running code from some


00:22:06.460 --> 00:22:06.900
attacker.


00:22:06.900 --> 00:22:09.980
And that is a threat and you, you know, you should be concerned about it.


00:22:09.980 --> 00:22:11.820
You should mitigate it in your code.


00:22:11.820 --> 00:22:14.740
All of the different ways to do that are like a little bit out of scope for this


00:22:14.740 --> 00:22:15.280
discussion.


00:22:15.280 --> 00:22:19.340
But also it's important to remember that a lot of these attacks are things that


00:22:19.340 --> 00:22:26.220
it's hard to demonstrate in like a quick, like circa 2007 type sniffing your


00:22:26.460 --> 00:22:28.900
Facebook password off the wire, like, Hey, look at this, like


00:22:28.900 --> 00:22:32.620
immediate attack where I've got all of your stuff. And they're


00:22:32.620 --> 00:22:37.140
difficult to demonstrate, because Pi PI is actively


00:22:37.140 --> 00:22:39.900
scanning for these types of packages, they're actively


00:22:39.900 --> 00:22:42.460
responding to reports, there are lots of people, there are lots


00:22:42.460 --> 00:22:45.460
of security researchers developing tools, some of them,


00:22:45.460 --> 00:22:48.380
kind of over aggressively running them against the index


00:22:48.380 --> 00:22:51.540
to take them up a little too much too many resources. But


00:22:51.540 --> 00:22:55.460
there are lots of people doing things to defend you against


00:22:55.500 --> 00:22:56.580
each one of these attacks.


00:22:56.580 --> 00:22:58.300
And so the simplistic version of them


00:22:58.300 --> 00:23:00.900
will rarely work out of the box.


00:23:00.900 --> 00:23:04.140
The threat from typo squatting is a race condition.


00:23:04.140 --> 00:23:06.380
It's that somebody uploads a malicious package


00:23:06.380 --> 00:23:08.540
that doesn't look malicious enough


00:23:08.540 --> 00:23:11.360
to get automatically caught in these various ways,


00:23:11.360 --> 00:23:13.260
that doesn't get immediately flagged,


00:23:13.260 --> 00:23:15.940
it's not popular enough to like be installed


00:23:15.940 --> 00:23:17.460
on a lot of people's machines,


00:23:17.460 --> 00:23:21.300
and that you happen to do the typo in the window


00:23:21.300 --> 00:23:24.500
where it's still up before the admins have taken it down.


00:23:24.500 --> 00:23:29.500
That is a real threat, but it is not as serious as,


00:23:29.500 --> 00:23:33.300
"Oh, it's just a free-for-all.


00:23:33.300 --> 00:23:34.540
Anybody can upload anything anywhere."


00:23:34.540 --> 00:23:36.100
There's a lot of security.


00:23:36.100 --> 00:23:37.380
Not just the PyPI admins, but the distributors


00:23:37.380 --> 00:23:40.540
of all of the libraries on PyPI that you use


00:23:40.540 --> 00:23:43.340
are developing better processes on the teams


00:23:43.340 --> 00:23:46.140
that do uploading.


00:23:46.140 --> 00:23:47.140
PyPI now has orgs, and so projects


00:23:47.140 --> 00:23:50.500
are starting to gather into organizations


00:23:50.500 --> 00:23:52.420
to apply more consistent security rules


00:23:52.420 --> 00:23:54.460
for uploading across the board.


00:23:51.460 --> 00:23:56.460
So there's lots of work that's going on.


00:23:56.460 --> 00:23:58.180
I happen to know a lot about PyPI,


00:23:58.180 --> 00:23:59.620
but your operating system vendor also is like,


00:23:59.620 --> 00:24:02.220
yeah, you could run some malware


00:24:02.220 --> 00:24:04.080
and that would really ruin your day.


00:24:04.080 --> 00:24:06.460
But Apple, Microsoft, Google, Red Hat,


00:24:06.460 --> 00:24:10.220
none of them want their operating system


00:24:10.220 --> 00:24:12.100
to be implicated in the attacks


00:24:12.100 --> 00:24:13.300
so they're constantly hardening their applications,


00:24:13.300 --> 00:24:16.500
hardening their APIs, developing secure APIs


00:24:16.500 --> 00:24:19.960
that developers can use to prevent certain attacks.


00:24:18.020 --> 00:24:23.220
different platforms are kind of at different stages of maturity there and have kind of different security features, but they're all


00:24:23.220 --> 00:24:28.900
trying their best to prevent the worst case from happening. And so you're not like alone in this fight, you need to


00:24:28.900 --> 00:24:33.140
model your own threats and use the tools that you've been provided in ways that are


00:24:33.140 --> 00:24:40.860
kind of helpful, but you don't have to do everything yourself, you don't have to worry that you're kind of besieged with and you're the only defender.


00:24:40.860 --> 00:24:47.220
You're actually in a pretty big crowd of defenders, and we all got to share knowledge with each other to try to help each other out.


00:24:47.260 --> 00:24:48.100
- That's interesting.


00:24:48.100 --> 00:24:48.980
You know, we are, you know,


00:24:48.980 --> 00:24:52.220
there's a big concern about supply chain attacks


00:24:52.220 --> 00:24:55.240
and, you know, open source building blocks.


00:24:55.240 --> 00:24:59.540
But it is a bit of a herd immunity type of thing, right?


00:24:59.540 --> 00:25:00.380
- Yeah.


00:25:00.380 --> 00:25:01.780
- If something comes in pretty soon,


00:25:01.780 --> 00:25:04.060
if it at all starts to gain any popularity,


00:25:04.060 --> 00:25:07.140
people are gonna notice and it'll get beat down.


00:25:07.140 --> 00:25:12.140
So it's scary, but it's maybe not as likely


00:25:12.140 --> 00:25:14.100
to broadly affect the ecosystem.


00:25:14.100 --> 00:25:14.940
- Right.


00:25:14.940 --> 00:25:19.940
that doesn't mean that you can give up on this work


00:25:19.940 --> 00:25:23.180
or put it off as some kind of gold plating


00:25:23.180 --> 00:25:25.740
that you're going to do later.


00:25:25.740 --> 00:25:27.060
But it does mean that you can kind of moderate


00:25:27.060 --> 00:25:29.460
the amount of energy that you put in.


00:25:29.460 --> 00:25:30.900
And the way that you should think about it


00:25:30.900 --> 00:25:32.140
as an individual, as an app developer,


00:25:32.140 --> 00:25:34.260
is you should be trying to figure out


00:25:34.260 --> 00:25:36.740
what your responsibility is


00:25:36.740 --> 00:25:38.580
and handle your part of the responsibility.


00:25:38.580 --> 00:25:40.900
Don't try to think about every threat


00:25:40.900 --> 00:25:44.220
and become a vulnerability researcher


00:25:41.620 --> 00:25:43.720
in order to secure your application.


00:25:43.720 --> 00:25:44.560
Like let those people,


00:25:44.560 --> 00:25:45.840
there's a lot of people doing that stuff,


00:25:45.840 --> 00:25:47.660
let them do their job and just kind of figure out,


00:25:47.660 --> 00:25:49.260
okay, what do you need to do?


00:25:49.260 --> 00:25:51.740
'Cause obviously, no matter how great the defenses are,


00:25:51.740 --> 00:25:52.940
if you don't use them,


00:25:52.940 --> 00:25:56.420
if you're not properly secure in your own processes,


00:25:56.420 --> 00:25:57.960
then it doesn't matter.


00:25:57.960 --> 00:25:59.140
Like you can easily,


00:25:59.140 --> 00:26:02.180
if you're pushing your root cloud keys to GitHub


00:26:02.180 --> 00:26:03.700
in a public repo,


00:26:03.700 --> 00:26:06.180
all of the security of the world's not gonna help you.


00:26:06.180 --> 00:26:07.860
- Yeah, it's not gonna be great.


00:26:07.860 --> 00:26:10.420
You said there's even a PEP to help solve this,


00:26:10.420 --> 00:26:12.740
 PEP 541? What is PEP 541?


00:26:12.740 --> 00:26:15.780
541 is actually a little bit broader than just like typo


00:26:15.780 --> 00:26:20.580
squatting. It's about how PyPI like retains names, how they


00:26:20.580 --> 00:26:24.340
deal with trademark dispute resolution, you know, it


00:26:24.340 --> 00:26:26.980
outlines some of the responsibilities of package


00:26:26.980 --> 00:26:30.420
maintainers. So for example, like one of the typo squatting


00:26:30.420 --> 00:26:33.300
or one of the attacks against supply chains is if you use a


00:26:33.300 --> 00:26:37.740
vanity domain name for your PyPI account, and then you let the


00:26:37.740 --> 00:26:41.040
domain name lapse and then somebody like registers the domain name.


00:26:41.040 --> 00:26:43.540
Now they have access to your account cause they can do a password reset.


00:26:43.540 --> 00:26:47.360
And so there are various responsibilities that you have,


00:26:47.360 --> 00:26:51.040
like you have to be reachable. If your project has been abandoned,


00:26:51.040 --> 00:26:54.080
the index might take it away, right? Like they might shut it down,


00:26:54.080 --> 00:26:55.080
they might freeze it.


00:26:55.080 --> 00:27:00.320
And there are this PEP kind of lays out a bunch of processes for various things.


00:27:00.320 --> 00:27:04.160
And one of them is, you know, how things get taken down,


00:27:04.160 --> 00:27:08.400
how projects become invalid, what a typosquat is.


00:27:08.400 --> 00:27:10.600
And so it's an even broader project


00:27:10.600 --> 00:27:13.400
than just the security of typosquatting,


00:27:13.400 --> 00:27:15.760
or even broader than supply chain security.


00:27:15.760 --> 00:27:18.760
It's like the whole supply chain shebang.


00:27:18.760 --> 00:27:20.360
And there will probably be more peps


00:27:20.360 --> 00:27:22.120
in this area in the future, I think.


00:27:22.120 --> 00:27:23.800
- Yeah, I would imagine.


00:27:23.800 --> 00:27:27.520
Yeah, so for example, if I had Michael.com


00:27:27.520 --> 00:27:30.760
and I registered, my account was Michael,


00:27:30.760 --> 00:27:33.600
or me@Michael.com, and then I didn't,


00:27:33.600 --> 00:27:36.160
that went away, someone else could buy michael.com


00:27:36.160 --> 00:27:39.280
for who knows how much and then do a password reset


00:27:39.280 --> 00:27:42.120
and they control all of my super important


00:27:42.120 --> 00:27:43.440
open source projects on there.


00:27:43.440 --> 00:27:45.320
- Yeah, and then they can immediately do uploads,


00:27:45.320 --> 00:27:46.360
which is kind of a problem.


00:27:46.360 --> 00:27:49.000
- Right, that might not be awesome.


00:27:49.000 --> 00:27:52.040
Okay, so that's pep541, got it.


00:27:52.040 --> 00:27:53.600
So it was all about threat modeling, right?


00:27:53.600 --> 00:27:54.960
And you basically come through and you say,


00:27:54.960 --> 00:27:56.680
okay, well, first we're gonna write some code


00:27:56.680 --> 00:27:59.160
and then let's just push it to the cloud


00:27:59.160 --> 00:28:02.640
and to the cloud it says.


00:28:02.640 --> 00:28:04.640
Yeah. Uh-oh.


00:28:04.640 --> 00:28:06.640
You can't run your website, right?


00:28:06.640 --> 00:28:10.640
So the first thing you got to talk about when you talk about secrets is


00:28:10.640 --> 00:28:14.640
human-generated secrets. The ones, like your passwords, that you actually have to remember


00:28:14.640 --> 00:28:18.640
and type in with your fingers. Don't ever share


00:28:18.640 --> 00:28:22.640
those. If you're sharing passwords between accounts, if you've got like a LinkedIn account


00:28:22.640 --> 00:28:26.640
that has been around for a decade, that's


00:28:26.640 --> 00:28:30.640
probably been in a breach. Even if it hasn't been in a breach, oh,


00:28:30.640 --> 00:28:35.040
For those who are not on the live stream, Michael is now typing, "Have I been pwned?"


00:28:35.040 --> 00:28:41.540
Which is a great tool that you can use to see if your passwords have been in a previous breach.


00:28:41.540 --> 00:28:43.380
And spoiler alert, yes, they have.


00:28:43.380 --> 00:28:47.880
So the first lesson is like, you should be using a password manager,


00:28:47.880 --> 00:28:51.540
because that's the kind of absolute root of your security.


00:28:51.540 --> 00:28:56.180
You have your kind of vault password for your password manager.


00:28:56.180 --> 00:29:00.480
You need to be able to remember that you need to generate that securely.


00:29:00.480 --> 00:29:03.840
And then you should let your password manager actually generate all of the


00:29:03.840 --> 00:29:07.760
passwords for all of the different sites and apps that you use, because you


00:29:07.760 --> 00:29:09.520
don't want to be sharing those between them.


00:29:09.520 --> 00:29:14.760
Because inevitably, if you share a password between 10 sites, one of them


00:29:14.760 --> 00:29:17.200
will get breached, like for sure.


00:29:17.200 --> 00:29:22.440
And then all of the others can be breached later by anybody who can, you


00:29:22.440 --> 00:29:26.560
know, buy that data dump on the dark web or now access that information.


00:29:26.560 --> 00:29:55.600
So I actually wrote like one of the tools that I released during this talk at PyCon is called the pin pal, which is kind of to help people adopt a password manager. One of the challenging things about adopting a password manager, especially if you haven't got one already, is you really need to generate a like a long secure password. And you have to memorize it. And you really can't forget that because this then and this is something that happened to Jethro, you have to think about not just


00:29:55.600 --> 00:29:58.960
confidentiality, but there's this thing called the CIA triad where you've got


00:29:58.960 --> 00:30:04.040
confidentiality, integrity and availability of your service. And if you


00:30:04.040 --> 00:30:07.840
get hacked and people steal your secrets, then they can access your cloud


00:30:07.840 --> 00:30:12.160
and it's game over. But if you forget all of your passwords, and you can't


00:30:12.160 --> 00:30:16.520
access your cloud, it's just as equally game over. So you have to like, do that


00:30:16.520 --> 00:30:20.600
memorization, you should ideally also change your your root password once


00:30:20.600 --> 00:30:23.760
every couple of years, you shouldn't change it too frequently, like policies


00:30:23.760 --> 00:30:28.760
policies that make you rotate every 90 days


00:30:28.760 --> 00:30:30.600
or whatever are just a relic of a bygone time


00:30:30.600 --> 00:30:33.600
and not a very good idea.


00:30:33.600 --> 00:30:34.840
But you shouldn't keep it forever.


00:30:34.840 --> 00:30:37.600
And that process can be difficult


00:30:37.600 --> 00:30:39.200
because you need to memorize it.


00:30:39.200 --> 00:30:41.080
And because password managers try to be convenient,


00:30:41.080 --> 00:30:43.720
they're not prompting you for it all the time.


00:30:43.720 --> 00:30:45.760
So Pinpal is this thing that sets up


00:30:45.760 --> 00:30:48.080
a spaced repetition process


00:30:48.080 --> 00:30:49.940
where it's gradually generating the password over time.


00:30:48.920 --> 00:30:53.920
It just kind of prompts you over and over for like,


00:30:53.920 --> 00:30:57.540
here's the first word, it generates it,


00:30:57.540 --> 00:30:59.240
it asks you to kind of read it back to it.


00:30:59.240 --> 00:31:00.920
It's a little console tool that you put in your prompt


00:31:00.920 --> 00:31:03.400
to see if it's time to do a memorization pass.


00:31:03.400 --> 00:31:06.660
But you can use Pinpal, memorize the password


00:31:06.660 --> 00:31:08.860
before you get the password manager.


00:31:08.860 --> 00:31:11.040
Make sure you've got it thoroughly memorized,


00:31:11.040 --> 00:31:13.200
and then you don't have to worry so much about like,


00:31:13.200 --> 00:31:15.560
oh, where was that little piece of paper


00:31:15.560 --> 00:31:16.920
that I put in my wallet that has the password in it


00:31:16.920 --> 00:31:18.680
because it's been a week


00:31:15.060 --> 00:31:17.420
and now I have to enter my master password again.


00:31:17.420 --> 00:31:20.540
Pinpal can kind of get that part of the inconvenience


00:31:20.540 --> 00:31:21.980
of adopting a password manager


00:31:21.980 --> 00:31:23.980
in the first place out of the way.


00:31:23.980 --> 00:31:26.300
And so I've made it as easy as I possibly can for you.


00:31:26.300 --> 00:31:28.840
I know that that's the one thing that like gets people stuck


00:31:28.840 --> 00:31:30.500
and so now you have no excuse.


00:31:30.500 --> 00:31:31.700
You gotta get a password manager right now.


00:31:31.700 --> 00:31:35.500
- I absolutely, totally recommend a password manager.


00:31:35.500 --> 00:31:37.540
And I personally use one password,


00:31:37.540 --> 00:31:39.500
but I'm also a big fan of Bitwarden.


00:31:39.500 --> 00:31:41.620
You know, props to the open source side of Bitwarden,


00:31:41.620 --> 00:31:42.440
that's pretty cool.


00:31:42.440 --> 00:31:44.380
And the pricing for the pro version is like,


00:31:44.380 --> 00:31:47.780
you know, a couple dollars a year or something ridiculously small.


00:31:47.780 --> 00:31:50.080
So it's, they're good alternate, or good options.


00:31:50.080 --> 00:31:52.080
Yeah, Dashlane is also pretty good.


00:31:52.080 --> 00:31:56.280
Full disclosure, that was actually started by my cousin in France, oddly enough.


00:31:56.280 --> 00:31:56.780
Okay.


00:31:56.780 --> 00:31:59.780
Yeah, it's a little weird aside there.


00:31:59.780 --> 00:32:01.480
I don't believe he works there anymore.


00:32:01.480 --> 00:32:02.880
So those options are all good.


00:32:02.880 --> 00:32:05.080
I would avoid LastPass.


00:32:05.080 --> 00:32:07.880
If you've been using LastPass, that's fine.


00:32:07.880 --> 00:32:13.380
It's still way better that like, again, it can be easy to catastrophize security.


00:32:13.380 --> 00:32:17.940
Like LastPass had a bunch of breaches and the breaches were like worse than they said.


00:32:17.940 --> 00:32:23.580
And their security, like they used a lower iterations on their key derivation function than they should have.


00:32:23.580 --> 00:32:25.580
And so there's all these issues with LastPass.


00:32:25.580 --> 00:32:34.620
But like, if you had been using LastPass, when they got breached, you're still in way better shape than if you had been trying to like memorize.


00:32:34.620 --> 00:32:36.940
Just reusing your passwords. Yeah.


00:32:37.340 --> 00:32:40.460
Yeah, one of the big, I think, big no-nos of LastPass,


00:32:40.460 --> 00:32:43.260
other than also the low iteration,


00:32:43.260 --> 00:32:46.060
the folding account,


00:32:46.060 --> 00:32:49.500
was that a lot of stuff is stored in plain text.


00:32:49.500 --> 00:32:53.200
So like the URL of the place for which the password goes to


00:32:53.200 --> 00:32:54.900
is stored in plain text so that


00:32:54.900 --> 00:32:57.260
the hackers could go through the dump and go,


00:32:57.260 --> 00:33:00.400
"Okay, well, just show me all the Bank of America ones.


00:33:00.400 --> 00:33:02.300
Let's just work on that for a while." Right?


00:33:02.300 --> 00:33:03.900
Yeah, it was...


00:33:03.900 --> 00:33:06.200
They definitely had an architecture that was like


00:33:06.200 --> 00:33:09.560
bad for no reason. Like there's no reason that they should those that stuff.


00:33:09.560 --> 00:33:13.400
Oh, I totally agree. So yeah, I people would choose the last pass if they want,


00:33:13.400 --> 00:33:17.400
but there's a bit word and one password. Those that's where my, my heart lives.


00:33:17.400 --> 00:33:19.960
in.


00:33:19.960 --> 00:33:23.840
This portion of Talk Python to Me is sponsored by the Compiler podcast from Red Hat.


00:33:23.840 --> 00:33:27.840
Just like you, I'm a big fan of podcasts, and I'm happy to share a new one from a highly


00:33:27.840 --> 00:33:32.600
respected open source company, Compiler, an original podcast from Red Hat.


00:33:32.600 --> 00:33:36.560
Do you want to stay on top of tech without dedicating tons of time to it?


00:33:36.560 --> 00:33:40.640
Compiler presents perspectives, topics, and insights from the tech industry free from


00:33:40.640 --> 00:33:42.240
jargon and judgment.


00:33:42.240 --> 00:33:45.520
They want to discover where technology is headed beyond the headlines and create a place


00:33:45.520 --> 00:33:49.240
for new IT professionals to learn, grow, and thrive.


00:33:49.240 --> 00:33:52.960
Compiler helps people break through the barriers and challenges turning code into community


00:33:52.960 --> 00:33:55.780
at all levels of the enterprise.


00:33:55.780 --> 00:33:59.000
One recent and interesting episode is there, the Great Stack Debate.


00:33:59.000 --> 00:34:03.360
I love love love talking to people about how they architect their code, the tradeoffs and


00:34:03.360 --> 00:34:08.560
conventions they chose, and the costs, challenges, and smiles that result.


00:34:08.560 --> 00:34:11.000
This Great Stack Debate episode is like that.


00:34:11.000 --> 00:34:15.560
Check it out and see if software is more like an onion, or more like lasagna, or maybe even


00:34:15.560 --> 00:34:17.200
more complicated than that.


00:34:17.200 --> 00:34:21.120
It's the first episode in Compiler's series on software stacks.


00:34:21.120 --> 00:34:25.060
Learn more about Compiler at talkpython.fm/compiler.


00:34:25.060 --> 00:34:27.200
The link is in your podcast player show notes.


00:34:27.200 --> 00:34:32.220
And yes, you could just go search for Compiler and subscribe to it, but follow that link


00:34:32.220 --> 00:34:37.040
and click on your player's icon to add it, that way they know you came from us.


00:34:37.040 --> 00:34:43.240
Our thanks to the compiler podcast for keeping this podcast going strong.


00:34:43.240 --> 00:34:45.840
I did have one of have I been pwned up?


00:34:45.840 --> 00:34:49.240
And I would just like to point out the question is, have I possibly right?


00:34:49.240 --> 00:34:53.240
I can tell you the very has a list of most recent breaches.


00:34:53.240 --> 00:34:57.040
This Luxottica one here was 77 million.


00:34:57.040 --> 00:34:58.920
I just got a notification that I was in that one.


00:34:58.920 --> 00:35:01.820
That's like literally the most recent one.


00:35:01.820 --> 00:35:04.480
And here's what drives me nuts about these things.


00:35:04.480 --> 00:35:05.560
This bit of a sidebar.


00:35:05.560 --> 00:35:07.040
So nothing you can do about it,


00:35:07.040 --> 00:35:09.720
but it's maybe about the, you give it your best shot


00:35:09.720 --> 00:35:11.840
and you can just only do so much, Cliff.


00:35:11.840 --> 00:35:16.560
And I am in this breach because I went to my eye doctor


00:35:16.560 --> 00:35:21.120
and my health provider, they subcontracted to Luxottica


00:35:21.120 --> 00:35:24.200
to get my glasses created.


00:35:24.200 --> 00:35:27.800
Luxottica was hacked and therefore my information,


00:35:27.800 --> 00:35:30.700
I'd never even heard of this company or interacted with them


00:35:30.700 --> 00:35:32.360
and yet here we are, right?


00:35:32.360 --> 00:35:35.340
And so, you know, do your best, but don't go crazy.


00:35:35.340 --> 00:35:36.300
- Yep.


00:35:36.300 --> 00:35:37.140
- Okay.


00:35:37.140 --> 00:35:37.980
- So, okay.


00:35:37.980 --> 00:35:39.620
- I guess you have more control over, right?


00:35:39.620 --> 00:35:41.560
But I guess one of your very first recommendations


00:35:41.560 --> 00:35:44.780
was use a pass manager or use something like PenPal


00:35:44.780 --> 00:35:48.340
to help not forget your password to your password.


00:35:48.340 --> 00:35:50.400
And sort of the lesson is the CIA triad.


00:35:50.400 --> 00:35:52.660
Like availability is also important,


00:35:52.660 --> 00:35:54.360
not just the other two security bits,


00:35:54.360 --> 00:35:57.020
but if you can't get to it anymore, that's still a problem.


00:35:57.020 --> 00:35:57.860
- Yep.


00:35:57.860 --> 00:35:59.260
Don't be your own worst attacker.


00:35:59.260 --> 00:36:01.380
- Exactly.


00:36:01.380 --> 00:36:03.680
- So yeah, and I guess that one of the other major things


00:36:03.680 --> 00:36:05.780
I wanted to talk about here.


00:36:05.780 --> 00:36:08.320
Part of this story is that the documentation,


00:36:08.320 --> 00:36:11.960
so Jethro follows the docs on a lot of different things


00:36:11.960 --> 00:36:13.660
that he's looking at.


00:36:13.660 --> 00:36:15.040
And a lot of those docs,


00:36:15.040 --> 00:36:16.280
and this was kind of the inspiration


00:36:16.280 --> 00:36:17.200
for the talk in the first place,


00:36:17.200 --> 00:36:21.120
was that many, many APIs are documented


00:36:21.120 --> 00:36:23.280
by saying, here's some code,


00:36:23.280 --> 00:36:27.100
and here's where you paste the string of your API key.


00:36:27.100 --> 00:36:28.720
And big companies do this.


00:36:28.720 --> 00:36:31.200
Stripe does this, DigitalOcean does this.


00:36:31.200 --> 00:36:37.200
it's not a unusual thing. It's not a thing that only kind of low security,


00:36:37.200 --> 00:36:41.120
uninteresting APIs do. The idea is they're writing the docs, assuming that


00:36:41.120 --> 00:36:45.000
you kind of have some secret management strategy to begin with, that you know,


00:36:45.000 --> 00:36:48.760
your API token is really sensitive. And so obviously, you won't follow their


00:36:48.760 --> 00:36:54.160
example directly. But like, as seen from the GitHub stream of, you know,


00:36:54.160 --> 00:36:59.320
constant secrets being pushed to public repos, a lot of people don't know that.


00:36:59.440 --> 00:37:04.440
And there shouldn't be any shame in not knowing that.


00:37:04.440 --> 00:37:06.280
If the docs say, "Put this string here,"


00:37:06.280 --> 00:37:08.880
and you're like, "Okay, I'm going to put that string there,"


00:37:08.880 --> 00:37:10.880
there's no way that you could have somehow known in advance


00:37:10.880 --> 00:37:14.040
if you're a novice coder,


00:37:14.040 --> 00:37:15.780
that if you put that string there like they said,


00:37:15.780 --> 00:37:18.640
then all of your money will be stolen


00:37:18.640 --> 00:37:21.200
and your attackers will boot thousands of servers


00:37:21.200 --> 00:37:24.480
to mine cryptocurrency.


00:37:24.480 --> 00:37:25.880
So one of the things that calls to action here is,


00:37:25.880 --> 00:37:28.480
if you're maintaining those docs,


00:37:25.240 --> 00:37:55.040
if you're leading people down that path, please at least mention that this token is extremely sensitive, at least explain that people should be looking somewhere else for documentation of what to do. And like, in Python, it's actually quite easy to know what to do. It's use keyring, like exactly how you configure keyring and what you do with it, we can talk about in a minute or two. But from a perspective of like an application loading something from the example from the perspective of like a


00:37:55.040 --> 00:37:58.800
code example that you want to put on a website, just never tell users to put a


00:37:58.800 --> 00:38:03.080
string directly in the code. The string in your code is obviously never the


00:38:03.080 --> 00:38:08.080
user's like actual API key. They're going to have to edit it anyway. So in the


00:38:08.080 --> 00:38:12.120
example code, just import keyring into a keyring.getpassword. And they can


00:38:12.120 --> 00:38:15.680
replace that with their key as easily as they can replace a string. But at least


00:38:15.680 --> 00:38:19.840
you're calling out there, oh, hey, this is like a piece of data that has to be


00:38:19.840 --> 00:38:24.800
managed in a particular way. Here's how you manage it in Python, is you call the


00:38:24.920 --> 00:38:29.440
keyring get password API. So the keyring module is like very


00:38:29.440 --> 00:38:32.440
simple. It's basically just a wrapper around a function that


00:38:32.440 --> 00:38:37.720
returns a string. But by centralizing that function, all


00:38:37.720 --> 00:38:41.880
of the myriad nuances of what exactly like how exactly to get


00:38:41.880 --> 00:38:44.720
that string, how's it encrypted? Where's it stored? Whatever can


00:38:44.720 --> 00:38:46.400
be kind of pushed out of the application.


00:38:46.400 --> 00:38:49.400
Yeah, so let's talk about keyring a little bit. It's a


00:38:49.400 --> 00:38:54.320
Python library that you can use. And you can say, basically, save


00:38:54.320 --> 00:38:56.240
a secret or get a secret?


00:38:56.240 --> 00:38:57.200
It calls it a password.


00:38:57.200 --> 00:38:59.800
I kind of would like it to not be password


00:38:59.800 --> 00:39:02.160
'cause what if it's a API token for that?


00:39:02.160 --> 00:39:03.480
You know, I don't know, it seems a little,


00:39:03.480 --> 00:39:04.840
what if it's a connection string?


00:39:04.840 --> 00:39:05.680
I don't know.


00:39:05.680 --> 00:39:07.480
- Yeah, it's a little bit like,


00:39:07.480 --> 00:39:08.920
it was definitely written quickly


00:39:08.920 --> 00:39:11.800
and saw just a crazy amount of adoption


00:39:11.800 --> 00:39:13.780
and, you know, we're kind of just stuck with that naming now.


00:39:13.780 --> 00:39:17.760
I agree that it's not the best, but it's, you know, it's fine.


00:39:17.760 --> 00:39:20.600
Any secret token that you treat this way


00:39:20.600 --> 00:39:22.560
is kind of functionally a password.


00:39:22.560 --> 00:39:25.600
So the terminology is a little confusing, but it's fine.


00:39:25.600 --> 00:39:27.780
- Yeah, so regardless of whether it's an API key


00:39:27.780 --> 00:39:29.880
or a password or a connection string,


00:39:29.880 --> 00:39:34.400
you can say keyring.setpassword or keyring.getpassword.


00:39:34.400 --> 00:39:36.600
And that's pretty much the API, right?


00:39:36.600 --> 00:39:38.620
- Yeah, and the nice thing about it is that


00:39:38.620 --> 00:39:40.700
there can be a lot of complexity in how it's configured,


00:39:40.700 --> 00:39:43.760
but the default, if you just like pip install keyring


00:39:43.760 --> 00:39:46.340
and you start using it on a desktop machine,


00:39:46.340 --> 00:39:49.080
Windows, Linux, macOS, doesn't matter,


00:39:49.080 --> 00:39:53.580
it by default will use your platform's default secret store,


00:39:53.580 --> 00:39:58.580
which is kind of the best that you can do without any additional configuration.


00:39:58.580 --> 00:40:01.260
And ironically enough for the talk,


00:40:01.260 --> 00:40:05.180
I really wanted to talk about like how this works on every platform.


00:40:05.180 --> 00:40:08.640
I kind of figured that every platform was like equivalently secure.


00:40:08.640 --> 00:40:13.260
I kind of hate being a shill for a trillion dollar corporation,


00:40:13.260 --> 00:40:18.260
but like Apple does this so much better than either of the other major desktop


00:40:18.520 --> 00:40:23.520
platforms because on the Mac you've got like intra user security boundaries.


00:40:23.520 --> 00:40:25.680
So like your,


00:40:25.680 --> 00:40:28.920
there's apps are generally sandboxed on the Mac if they come from the app store,


00:40:28.920 --> 00:40:31.600
if they've opted in, even if they're not sandboxed,


00:40:31.600 --> 00:40:34.320
there's a lot of things that they can't do. Like if you,


00:40:34.320 --> 00:40:36.040
you may have noticed if you use a Mac,


00:40:36.040 --> 00:40:40.800
if you try to like run a Python program on like a file on your desktop or in


00:40:40.800 --> 00:40:43.840
your documents folder, it'll like pop up a dialogue and say like, Hey,


00:40:43.840 --> 00:40:45.400
this program is trying to access this thing.


00:40:45.680 --> 00:41:15.640
secrets or something like that, where when an app tries to access a secret, you have to not just say yes, but you have to like enter your account, your login password again. And you can choose to either allow it temporarily or permanently. And you can then go in and configure it to say like, Oh, this, like, I know I said that I this app could access its own secrets, but like, actually, I want to be prompted every time. So like, for example, my Pi PI keys, if I use twine, or flit to upload a package to Pi PI, I always get a secret.


00:41:15.640 --> 00:41:20.640
get a password prompt because my Pi PI token is not stored anywhere on my file


00:41:20.640 --> 00:41:24.240
system. The key that's stored in my Mac key ring is like locked.


00:41:24.240 --> 00:41:28.600
It's not allowed to be automatically accessed by anything.


00:41:28.600 --> 00:41:31.200
And that adds a little bit of friction versus something like Pi PI package uploads.


00:41:31.200 --> 00:41:34.600
You want to have that friction there.


00:41:34.600 --> 00:41:36.240
It's not very frequently used.


00:41:36.240 --> 00:41:39.000
Now on Windows and Linux, you still get some protection against offline attacks.


00:41:39.000 --> 00:41:44.040
You get protection against other users.


00:41:40.920 --> 00:41:45.400
Like if you share a computer or you're on a Windows, like, you know, a corporate


00:41:45.400 --> 00:41:50.300
laptop where things are executed under like administrative tasks or are executed


00:41:50.300 --> 00:41:54.080
by your company under different users, it'll be protected from that.


00:41:54.080 --> 00:41:55.800
It'll be protected when you're not logged in.


00:41:55.800 --> 00:41:59.100
And on Linux, oddly enough, you can lock your credential locker, but


00:41:59.100 --> 00:42:00.360
like only the whole thing.


00:42:00.360 --> 00:42:04.560
And then anytime any app needs to do anything, it's like, Hey, do you want to


00:42:04.560 --> 00:42:05.300
unlock this again?


00:42:05.300 --> 00:42:08.440
And so like your mail client will be checking your mail and it'll constantly


00:42:08.440 --> 00:42:10.200
be saying like, Hey, do you want to unlock this?


00:42:10.260 --> 00:42:36.420
But nevertheless, it is still locked in a way that like, if you step away from your computer, if the screensaver is on, I think it will generally kind of lock it for you. So it provides as much protection as it can, given the way the platform works without any additional inconvenience. Like if you use key ring, and you just kind of use it in the default mode, you get a bunch of extra security. And it's all for free, like you don't have to think about it. It'll just work.


00:42:36.440 --> 00:42:39.200
- I'm pretty comfortable just putting true secrets


00:42:39.200 --> 00:42:42.600
into macOS key chain, for example.


00:42:42.600 --> 00:42:44.520
I feel like that's a pretty safe,


00:42:44.520 --> 00:42:47.240
it's probably better than a source file, a text file.


00:42:47.240 --> 00:42:49.120
- Yes, it's definitely better than a text file.


00:42:49.120 --> 00:42:50.160
And it's better than a text,


00:42:50.160 --> 00:42:53.480
I mean it's way better than a text file in your Git repo.


00:42:53.480 --> 00:42:56.360
It's still much better than a text file


00:42:56.360 --> 00:42:57.880
like in your home directory.


00:42:57.880 --> 00:43:02.600
Like a lot of, the less irresponsible code documentation


00:43:02.600 --> 00:43:09.400
tends to tell you to like put your keys into like dot this app dot CFG in your home directory or something.


00:43:09.400 --> 00:43:20.600
And that's like kind of okay, like any software that can steal stuff out of your home directory is probably already, you know, got a lot of control of your computer.


00:43:20.600 --> 00:43:25.320
But it's still better to put it in key ring if you can.


00:43:25.320 --> 00:43:32.320
Right. Well, my assumption about most malware type of things is it's going to be 100% automated.


00:43:32.320 --> 00:43:37.880
I imagine there's very few, I'm just going to remotely log into each computer and go hunting for secrets.


00:43:37.880 --> 00:43:40.560
More like it's going to look for well-known things.


00:43:40.560 --> 00:43:47.440
Much like if you tail the log of your website, you're going to see some things trying to access /wpadman.php.


00:43:47.440 --> 00:43:51.320
Even if it's not a PHP site, like that's, they just got the things they look for,


00:43:51.320 --> 00:43:54.560
and they're going to go through their processes to gather secrets and access.


00:43:54.560 --> 00:44:00.060
And I guess the less standard, the less obvious it is to get a hold of it, probably the better.


00:44:00.060 --> 00:44:02.260
It's easy to kind of trick yourself into thinking like,


00:44:02.260 --> 00:44:07.360
"Oh, I should just put everything in like really weird locations and like the automation won't find it."


00:44:07.360 --> 00:44:11.960
Quite often the automation like does kind of scrape through every file it can get access to


00:44:11.960 --> 00:44:13.460
because it doesn't cost them anything.


00:44:13.460 --> 00:44:14.660
They can just like read every file.


00:44:14.660 --> 00:44:16.360
It's your processor, it's your processing.


00:44:16.360 --> 00:44:20.160
Maybe just runs Shaget on every Git repo it can find on your computer.


00:44:20.160 --> 00:44:21.660
Right.


00:44:21.660 --> 00:44:51.620
So it's better to kind of like, put all your eggs in one basket and really watch that basket. And that's what the keyring approach is. But it also like, beyond just the protection against malware, there's also a kind of level of management that you can do it puts by using your platforms default keyring, or cryptic, you know, encrypted store, there are platform specific API's for like enumerating secrets. And so if you're trying to do an inventory of like, what secrets are on my computer, having them in there is nice, because you don't have to go hunt for them.


00:44:51.620 --> 00:44:54.780
hunting around for them. It gives you as a defender a little bit of an advantage


00:44:54.780 --> 00:44:58.140
because you know what you're defending against, you know, Oh, hey, this secret


00:44:58.140 --> 00:45:01.280
shouldn't be on this computer. This should really be like only you know, on


00:45:01.280 --> 00:45:05.820
this one server over here. So using keyring also gets you that it also gets


00:45:05.820 --> 00:45:09.340
you this configurability because like once you actually put your code into


00:45:09.340 --> 00:45:14.100
production in the cloud, it's not going to have access to your local keyring on


00:45:14.100 --> 00:45:14.580
your Mac,


00:45:14.580 --> 00:45:19.380
it's going to be a certain deadlock of your app if it pops up, can this website


00:45:19.380 --> 00:45:23.540
access the keychain, you know, use touch ID allow, it's probably not going to work


00:45:23.540 --> 00:45:23.980
in production.


00:45:23.980 --> 00:45:29.100
Right. So you have to use an alternate key keyring back end to on your server.


00:45:29.100 --> 00:45:32.220
And that is a little bit awkward. And that sometimes turns people off. And


00:45:32.220 --> 00:45:36.380
they're just like, I'll just use a config file. But there are ways to configure


00:45:36.380 --> 00:45:39.940
like, and they're actually documented, like right on the keyring web page, like,


00:45:39.940 --> 00:45:44.740
you can it talks about keyrings.crypt file, which is this like extra back end


00:45:44.740 --> 00:45:47.380
that you can get that store stuff in an encrypted file.


00:45:47.380 --> 00:45:51.340
Keyrings.alt includes like just a plain text file.


00:45:51.340 --> 00:45:53.540
If you know that on your server,


00:45:53.540 --> 00:45:56.340
you have like a secure place to put a text file,


00:45:56.340 --> 00:45:57.840
'cause the server's gonna need to be accessing


00:45:57.840 --> 00:45:59.420
the secret over and over again,


00:45:59.420 --> 00:46:01.640
you can just say, okay, I'm gonna configure the backend


00:46:01.640 --> 00:46:03.100
as part of this Docker container.


00:46:03.100 --> 00:46:06.720
Like it's just gonna read this file from this volume


00:46:06.720 --> 00:46:08.900
and that's the keyring backend I'm using.


00:46:08.900 --> 00:46:10.560
But again, that's all configuration.


00:46:10.560 --> 00:46:13.680
You write your app to just use keyring


00:46:13.680 --> 00:46:20.160
And then after the fact, when you're setting up your deployments, you can select what the most appropriate back end is.


00:46:20.160 --> 00:46:42.440
And in fact, one of the things I talked about during the talk was as I was trying to find like the super secure way to like disable access to secrets on Windows and Linux, and I didn't find it, I actually wrote my own keyring back end to demonstrate how you would do this that does the encryption with the keyring protocol or the sorry, the client to authenticator protocol on a UB key or a web auth key.


00:46:42.480 --> 00:46:45.080
It's called Token Ring. You can pip install Token Ring.


00:46:45.080 --> 00:46:49.080
And it works on Linux, it works on macOS, it works on Windows,


00:46:49.080 --> 00:46:53.780
and it requires you to be seated at your computer


00:46:53.780 --> 00:46:58.780
with your YubiKey plugged in in order to use this keyring backend.


00:46:58.780 --> 00:47:00.280
So by configuring...


00:47:00.280 --> 00:47:03.680
- So when your Python code hits keyring.getpassword,


00:47:03.680 --> 00:47:05.880
the next thing that has to happen before that returns,


00:47:05.880 --> 00:47:07.180
you have to touch the YubiKey.


00:47:07.180 --> 00:47:10.780
- And this is also a good example of how this was a cool project,


00:47:10.780 --> 00:47:13.120
It was fun to play around with that API.


00:47:13.120 --> 00:47:15.920
I had some smarter security people than me look at it


00:47:15.920 --> 00:47:18.320
to make sure I wasn't releasing something super unsafe


00:47:18.320 --> 00:47:19.680
just for a laugh.


00:47:19.680 --> 00:47:22.320
So I think it is definitely usable.


00:47:22.320 --> 00:47:24.320
But it's also an example of a key ring backend


00:47:24.320 --> 00:47:26.040
that you would not always want to use, right?


00:47:26.040 --> 00:47:29.880
Like this is for your super high security secrets.


00:47:29.880 --> 00:47:32.360
It doesn't even have support for multiple YubiKeys.


00:47:32.360 --> 00:47:34.480
So again, you gotta think about availability,


00:47:34.480 --> 00:47:35.920
like anything you put into this,


00:47:35.920 --> 00:47:37.800
you probably wanna back up somewhere else,


00:47:37.800 --> 00:47:40.560
but it is a relatively convenient thing.


00:47:40.560 --> 00:47:43.560
you just have to kind of touch it with your finger to unlock it.


00:47:43.560 --> 00:47:45.800
But it's also really, really secure.


00:47:45.800 --> 00:47:49.840
So like some of your secrets you might want to put into this backend to make sure


00:47:49.840 --> 00:47:52.840
that there's no way for software to access them automatically.


00:47:52.840 --> 00:47:55.800
There's no way that malware running on your computer is going to be able to just


00:47:55.800 --> 00:47:57.120
like, hoover them up.


00:47:57.120 --> 00:48:02.360
Anytime you see a prompt for a, you know, authenticator touch that you weren't


00:48:02.360 --> 00:48:05.280
expecting, that's like a real eyebrow raise moment.


00:48:06.040 --> 00:48:11.360
And so the but but you know, token ring is just kind of my example of one of


00:48:11.360 --> 00:48:14.880
these things. There are dozens of other keyring backends that you can use for


00:48:14.880 --> 00:48:18.880
either different levels of security on your own machine, although honestly, the


00:48:18.880 --> 00:48:23.440
platform encrypted stores are generally pretty good, like for a default. But you


00:48:23.440 --> 00:48:28.200
can also use alternate backends for different cloud secret providers, like I


00:48:28.200 --> 00:48:33.640
believe HVAC, which is a hashi Corp vault, back end, I haven't actually used


00:48:33.640 --> 00:48:46.640
So I'm not totally sure how it works, but I believe it actually has a keyring back end, which is only one like tiny part of what it does, but it can turn a vault into a keyring for you, I think.


00:48:46.640 --> 00:48:56.640
If it can't, then the adapter to do so would be very trivial to write. But that's the idea is that you write your code to use keyring and then wherever you deploy it, you can figure it to use the keyring that's appropriate to that context.


00:48:56.640 --> 00:49:01.640
All right. Right. One of the interesting ones is the Bitwarden back end, which is kind of nice.


00:49:01.640 --> 00:49:03.440
- Right, I was actually a little disappointed


00:49:03.440 --> 00:49:04.840
because I'm a big 1Password fan.


00:49:04.840 --> 00:49:06.200
I don't use Bitwarden personally,


00:49:06.200 --> 00:49:07.880
and I was like, "Oh, but there's a CLI,


00:49:07.880 --> 00:49:09.480
"like they could have made one."


00:49:09.480 --> 00:49:11.160
And I'm sure somebody eventually will.


00:49:11.160 --> 00:49:13.960
- Yeah, I think it's also worth just a quick pointing out


00:49:13.960 --> 00:49:18.960
that both 1Password and Bitwarden come with CLIs.


00:49:18.960 --> 00:49:21.440
So that is an option, right?


00:49:21.440 --> 00:49:25.400
And 1Password even can be an SSH daemon


00:49:25.400 --> 00:49:26.680
for some of that as well.


00:49:26.680 --> 00:49:29.960
So those are both options for ways


00:49:29.960 --> 00:49:32.960
that your app can directly interact with your password manager.


00:49:32.960 --> 00:49:35.620
And it doesn't have to necessarily be the one that you use, right?


00:49:35.620 --> 00:49:37.920
For example, you and I are one password people,


00:49:37.920 --> 00:49:39.920
but maybe our app is a Bitwarden person.


00:49:39.920 --> 00:49:40.800
Right?


00:49:40.800 --> 00:49:44.920
It's all about separating that software authorship thing


00:49:44.920 --> 00:49:47.300
from the user experience, right?


00:49:47.300 --> 00:49:49.500
The user should be able to select their own keyring.


00:49:49.500 --> 00:49:52.260
And it almost sounds a little bit trivial to say,


00:49:52.260 --> 00:49:54.140
"Just use keyring and it'll all work."


00:49:54.140 --> 00:49:57.180
But it's that separation that you're trying to achieve,


00:49:57.180 --> 00:50:01.480
is that you want code that can be configured to be as secure as it needs to be


00:50:01.480 --> 00:50:03.480
and has good defaults for most people.


00:50:03.480 --> 00:50:06.480
Okay. All right. So there's a couple more lessons in here.


00:50:06.480 --> 00:50:13.480
If you're a doc writer, don't encourage people to put their API token straight in the source code.


00:50:13.480 --> 00:50:16.680
And you shame a few well-known companies saying it's not just that.


00:50:16.680 --> 00:50:17.880
But...


00:50:17.880 --> 00:50:20.180
Yeah, so that was like the biggest lesson.


00:50:20.180 --> 00:50:22.080
But some other things here is that...


00:50:22.080 --> 00:50:24.380
Or sorry, another call to action here is that


00:50:24.380 --> 00:50:54.140
you really want to think about, you know, think think about that time loop that you're in, what are all of the different attacks could impact you? Write them down, think about how what you want to be secure against the talk when it's out on YouTube, kind of goes through them in, in order and can, maybe when it comes out, you can have a listen. But once you've written that down, stick to it, and make sure that your processes are such that it's really easy to do all of the defenses that you have selected


00:50:54.140 --> 00:50:57.140
that are relevant to you and to your application.


00:50:57.140 --> 00:51:02.140
Doing threat modeling is a great way to draw a line around that anxiety


00:51:02.140 --> 00:51:04.140
about how secure are my secrets?


00:51:04.140 --> 00:51:09.140
If it's all just vibes and you think about this one news story one day


00:51:09.140 --> 00:51:13.140
and then you write some security that defends against that one particular thing,


00:51:13.140 --> 00:51:17.140
or you do something on your laptop one day that's in a more secure way,


00:51:17.140 --> 00:51:22.140
but you don't encode that as a process or something that you do repeatedly


00:51:22.140 --> 00:51:27.140
repeatedly for each new secret, like as you said, close to the top of the show


00:51:27.140 --> 00:51:33.140
here, like we're all using a zillion API's now. So if you think of a good way to


00:51:33.140 --> 00:51:38.140
access your Stripe API key, and then next week you have to add Braintree support.


00:51:38.140 --> 00:51:43.140
And then the week after that, you have to add, you know, open AI, right? Like as you add


00:51:43.140 --> 00:51:48.140
each one, you need to be doing things the same way, both so that you can correctly


00:51:48.140 --> 00:52:15.140
directly implement your security controls for each new thing, but also so that once you've implemented them, when you want to enhance them, when you grow to a certain size, you start getting more attacks, you start getting, you know, facing new, more difficult threats as you're a bigger target, you have to be able to upgrade and you want to be able to upgrade all of your secrets management at once as easily as you can. And there are other things outside the scope of what we're talking about today.


00:52:15.140 --> 00:52:19.220
You also need to be able to like rotate those secrets, which is a whole other mess.


00:52:19.220 --> 00:52:24.060
I mean, that's what tools like HashiCorp's vault can like help manage that part of the


00:52:24.060 --> 00:52:25.060
process.


00:52:25.060 --> 00:52:30.420
But yeah, so the call to action for like doc writers and framework authors is like, don't


00:52:30.420 --> 00:52:31.780
document things the wrong way.


00:52:31.780 --> 00:52:33.060
Don't provide bad defaults.


00:52:33.060 --> 00:52:37.660
You use keyring if you're doing Python stuff, but the call to action for like app maintainers


00:52:37.660 --> 00:52:43.180
and people operating services is do some threat modeling, write it down and do everything


00:52:43.180 --> 00:52:44.580
the same way.


00:52:44.580 --> 00:52:49.580
the more that it's all funneled through that choke point of keyring and of your


00:52:49.580 --> 00:52:53.380
documented security processes, the more that when you have to make it better,


00:52:53.380 --> 00:52:58.680
it will not be a giant pain of like trawling through all of your code and all of your libraries


00:52:58.680 --> 00:53:01.080
and trying to figure out where things even are.


00:53:01.080 --> 00:53:04.480
You'll just be able to look at your, you know, the code that's accessing the secret and say like,


00:53:04.480 --> 00:53:11.180
"Oh, well, we're going to switch from like, you know, our sort of homegrown thing to some vault


00:53:11.180 --> 00:53:15.340
or to Amazon's secret store or Google Cloud equivalent


00:53:15.340 --> 00:53:17.180
or, you know, DigitalOcean has a thing.


00:53:17.180 --> 00:53:19.180
Everybody's got their own secret storage thing.


00:53:19.180 --> 00:53:20.380
There's a bunch of products in this area.


00:53:20.380 --> 00:53:22.140
And when you adopt one,


00:53:22.140 --> 00:53:24.220
you want that process to be as smooth as possible.


00:53:24.220 --> 00:53:27.180
- It's also probably a bit of a friction.


00:53:27.180 --> 00:53:28.540
I always think about, you know,


00:53:28.540 --> 00:53:31.020
how do you encourage people to do the right thing?


00:53:31.020 --> 00:53:33.660
In a way you discourage them as you add friction


00:53:33.660 --> 00:53:36.460
and you make it harder to do the right thing.


00:53:36.460 --> 00:53:36.780
- Right.


00:53:36.780 --> 00:53:38.300
- So if the right thing is to,


00:53:38.300 --> 00:53:40.140
you figure out a way to manage one of your secrets,


00:53:40.140 --> 00:53:42.740
well, make it easy to bring on another API,


00:53:42.740 --> 00:53:44.740
make it easy to, you know,


00:53:44.740 --> 00:53:47.540
basically get in there and change that and work with that system.


00:53:47.540 --> 00:53:47.940
Yeah.


00:53:47.940 --> 00:53:50.940
All right, let's see. We're getting short on time, but what other lessons do we have?


00:53:50.940 --> 00:53:53.340
You know, talked a bit about where do we put some of these things.


00:53:53.340 --> 00:53:55.940
You did also point out that there's,


00:53:55.940 --> 00:53:59.140
beyond the keyring stuff,


00:53:59.140 --> 00:54:03.740
is you do have stuff for like AWS secrets in particular.


00:54:03.740 --> 00:54:06.940
And I suppose there's probably other ones as well, right?


00:54:06.940 --> 00:54:09.740
Like what we talked about so far mostly is


00:54:09.740 --> 00:54:14.660
security on your computer or security on the one server that you go and run your


00:54:14.660 --> 00:54:16.180
app or the cluster of servers.


00:54:16.180 --> 00:54:18.860
But you know, what about GitHub automation?


00:54:18.860 --> 00:54:20.960
No, things like that, right?


00:54:20.960 --> 00:54:22.180
There's various tools.


00:54:22.180 --> 00:54:26.540
The two that I've talked about in my talk are there's a tool called AWS vault.


00:54:26.540 --> 00:54:31.720
There's another one called gimme AWS creds, which make it more secure to store


00:54:31.720 --> 00:54:33.940
your AWS credentials in particular.


00:54:33.940 --> 00:54:37.320
Cause those are pretty in the same way that like your computer is the root of


00:54:37.320 --> 00:54:42.320
of security for everything, and that's where all your secrets are ultimately stored.


00:54:42.320 --> 00:54:46.320
Your AWS account is the root of your security for AWS,


00:54:46.320 --> 00:54:50.280
for all of your cloud resources if you're using them.


00:54:50.280 --> 00:54:52.520
So it's good to focus more on the specific things


00:54:52.520 --> 00:54:56.480
that have a lot of power.


00:54:56.480 --> 00:54:58.600
Those also can reduce the power,


00:54:58.600 --> 00:55:00.960
have roles that have less permission


00:55:00.960 --> 00:55:03.740
that isn't just your cloud root API key for everything.


00:55:03.740 --> 00:55:07.080
There's also GitHub that has a secrets system


00:55:05.400 --> 00:55:07.900
which is effectively just injecting environment variables,


00:55:07.900 --> 00:55:12.040
but it stores them in a way that like keeps them out of your repo.


00:55:12.040 --> 00:55:15.340
It puts them in a place that again, you can enumerate,


00:55:15.340 --> 00:55:19.480
you can see all of the secrets that are provisioned against your particular


00:55:19.480 --> 00:55:24.480
repository. It manages access control for like, you know, public open source,


00:55:24.480 --> 00:55:27.760
PRS can't like immediately access all those secrets cause they're running.


00:55:27.760 --> 00:55:31.160
Like they have to be run in a way that indicates that like an admin has kind of


00:55:31.680 --> 00:55:36.680
seen that something is going to happen.


00:55:36.680 --> 00:55:39.480
So they only run on your main branch or things like that.


00:55:39.480 --> 00:55:43.080
It's a little difficult to talk about these, and this is one of the reasons that I focus so heavily on your local computer.


00:55:43.080 --> 00:55:47.320
Both because it's the base of this pyramid, but also because you really have to do that research on your own.


00:55:47.320 --> 00:55:54.000
Because you have to know what services you're using and what tools are available to manage certain secrets within them.


00:55:56.920 --> 00:55:59.720
And keyring is so important because it's the thing


00:55:59.720 --> 00:56:01.920
that gives you the joint of flexibility to say like,


00:56:01.920 --> 00:56:03.680
oh, well, when it's running in GitHub,


00:56:03.680 --> 00:56:04.840
it's gonna be in an end var,


00:56:04.840 --> 00:56:06.120
and it's gonna be in this end var,


00:56:06.120 --> 00:56:08.080
and I'm gonna write a keyring back and it knows that.


00:56:08.080 --> 00:56:10.280
- Interesting, yeah, keyring sounds like


00:56:10.280 --> 00:56:11.920
a really important piece of this story.


00:56:11.920 --> 00:56:14.120
- Yeah, I mean, it is, in the Python world,


00:56:14.120 --> 00:56:16.800
it really is like the beginning of every story


00:56:16.800 --> 00:56:18.360
about improving your security is,


00:56:18.360 --> 00:56:20.360
okay, now that you're using keyring, you can,


00:56:20.360 --> 00:56:21.800
and then there's like the next thing,


00:56:21.800 --> 00:56:23.160
and there's a bunch of directions you can go in,


00:56:23.160 --> 00:56:25.120
depending on if it's your local computer,


00:56:25.120 --> 00:56:28.360
if it's the cloud, if it's a dedicated server,


00:56:28.360 --> 00:56:29.760
if it's an embedded device,


00:56:29.760 --> 00:56:32.040
there's all different ways that you could go,


00:56:32.040 --> 00:56:34.440
but it all starts with acknowledging


00:56:34.440 --> 00:56:36.440
that you're going to need that flexibility.


00:56:36.440 --> 00:56:39.800
And honestly, you could write your own version of Keyring.


00:56:39.800 --> 00:56:42.520
All it is a function that looks at a config file


00:56:42.520 --> 00:56:44.000
and figures out what other function to call,


00:56:44.000 --> 00:56:45.800
but because it's the standard one,


00:56:45.800 --> 00:56:47.960
like it is a social convention,


00:56:47.960 --> 00:56:50.840
that is very powerful because you really don't want


00:56:50.840 --> 00:56:52.800
to write all of your own backends for everything.


00:56:52.800 --> 00:56:54.800
>>Right, it's about the integration with the other systems,


00:56:54.800 --> 00:56:57.300
about integrating with the Bitwarden CLI


00:56:57.300 --> 00:57:00.640
and with macOS Keychain and doing all those things right.


00:57:00.640 --> 00:57:01.480
- Yeah. - Right.


00:57:01.480 --> 00:57:03.200
Yeah, and those good defaults are really important


00:57:03.200 --> 00:57:06.400
'cause integrating with the macOS Keychain is not easy


00:57:06.400 --> 00:57:08.060
and Keyring just does it all for you.


00:57:08.060 --> 00:57:10.020
So, one thing I also wanted to,


00:57:10.020 --> 00:57:11.240
this is kind of a minor point,


00:57:11.240 --> 00:57:12.580
but I really want to toss it in there


00:57:12.580 --> 00:57:15.080
because I feel like it's rarely covered,


00:57:15.080 --> 00:57:18.000
which is environment variables have kind of taken over


00:57:18.000 --> 00:57:20.160
in the cloud, like they're the standard way


00:57:20.160 --> 00:57:22.360
that a lot of services expect you to inject stuff.


00:57:22.360 --> 00:57:25.480
So I can't say like, don't use envvars,


00:57:25.480 --> 00:57:26.760
like it's just, that's not feasible,


00:57:26.760 --> 00:57:28.160
but when you can avoid them,


00:57:28.160 --> 00:57:31.120
like if you can get your credentials stored some other way,


00:57:31.120 --> 00:57:32.800
like in a text file or whatever,


00:57:32.800 --> 00:57:36.600
try to stick to that because envvars are really easy


00:57:36.600 --> 00:57:39.240
to accidentally dump in a debugging session.


00:57:39.240 --> 00:57:41.600
Like you could just type env and it'll dump out everything


00:57:41.600 --> 00:57:46.600
and a lot of like CI builds or debug log uploaders,


00:57:46.600 --> 00:57:48.240
will just like kind of dump out the environment


00:57:48.240 --> 00:57:49.600
'cause it's useful to know


00:57:49.600 --> 00:57:53.600
And filtering secrets out of that is a whole like discipline


00:57:53.600 --> 00:57:54.720
that you have to develop.


00:57:54.720 --> 00:57:57.320
And like a lot of tools that do debug like Sentry


00:57:57.320 --> 00:58:00.160
will have like a lot of code to do that filtering.


00:58:00.160 --> 00:58:02.280
But it's best if you could just put the secrets


00:58:02.280 --> 00:58:03.120
where the secrets go.


00:58:03.120 --> 00:58:04.940
So like one idiom that you could use is like,


00:58:04.940 --> 00:58:08.760
you can put a crypto key in your environment variable,


00:58:08.760 --> 00:58:11.800
which can't do anything but like decrypt the text file.


00:58:11.800 --> 00:58:13.160
And so that key is kind of useless


00:58:13.160 --> 00:58:15.240
outside the CI context or whatever.


00:58:15.240 --> 00:58:18.840
And so you just like indirect it so that the actual secret


00:58:18.840 --> 00:58:21.480
stored in a place that is not just going to be dumped in every


00:58:21.480 --> 00:58:21.960
debug log.


00:58:21.960 --> 00:58:25.080
The danger may be given away too much. That's what I do. I have


00:58:25.080 --> 00:58:28.440
a one encryption key that's pretty long and a really high


00:58:28.440 --> 00:58:32.120
level of encryption of the actual secret somewhere else. And


00:58:32.120 --> 00:58:34.960
for me to add another secret, another API endpoint as well to


00:58:34.960 --> 00:58:38.040
add it to this file, and then re encrypt it, you know, it


00:58:38.040 --> 00:58:41.320
doesn't, it's sort of the same process. So it's not like, well,


00:58:41.320 --> 00:58:44.560
these API's are encrypted that way. And the database connection


00:58:44.560 --> 00:58:46.920
is encrypted that way. It's like, here's the file that's got


00:58:46.920 --> 00:58:50.880
all the info in it, and then it's highly encrypted.


00:58:50.880 --> 00:58:52.680
- Yeah, and that's exactly what I want to encourage people


00:58:52.680 --> 00:58:54.520
to do, put all your eggs in one basket,


00:58:54.520 --> 00:58:55.720
and then watch the basket.


00:58:55.720 --> 00:58:57.240
(laughing)


00:58:57.240 --> 00:58:59.080
- Passwords go in the password manager,


00:58:59.080 --> 00:59:01.000
cryptos stuff goes in the file.


00:59:01.000 --> 00:59:02.960
Please, please, please don't let it get exposed.


00:59:02.960 --> 00:59:06.440
Okay, let's wrap up this conversation


00:59:06.440 --> 00:59:09.320
with a bit of a summary from what you take away


00:59:09.320 --> 00:59:10.160
from your talk here.


00:59:10.160 --> 00:59:12.320
- Yeah, so I think we've hammered home,


00:59:12.320 --> 00:59:14.120
you know, you should use a password manager.


00:59:14.120 --> 00:59:16.840
You should make sure that your master passwords


00:59:16.840 --> 00:59:19.760
for that password manager are backed up.


00:59:19.760 --> 00:59:21.040
One thing we didn't cover today,


00:59:21.040 --> 00:59:22.320
but it's pretty big in the talk,


00:59:22.320 --> 00:59:25.120
is you should trust the autofill on your password manager


00:59:25.120 --> 00:59:27.360
'cause a lot of phishing attacks


00:59:27.360 --> 00:59:29.640
will make a very convincing website


00:59:29.640 --> 00:59:32.200
that will trick even the most seasoned security people.


00:59:32.200 --> 00:59:34.800
So just, if it doesn't autofill,


00:59:34.800 --> 00:59:37.380
close the window, type the URL by hand,


00:59:37.380 --> 00:59:38.560
make sure it autofills.


00:59:38.560 --> 00:59:40.840
- Yeah, I think people often see that,


00:59:40.840 --> 00:59:43.720
well, this is just the password manager's incomplete,


00:59:43.720 --> 00:59:45.600
so it's not helping me with this website.


00:59:45.600 --> 00:59:50.200
That should be a super big red flag if the password manager is not suggesting to autofill.


00:59:50.200 --> 00:59:55.200
Yeah, and one of my favorite things about 1Password is that they have been getting progressively more aggressive


00:59:55.200 --> 00:59:59.440
about making it super annoying to disable that.


00:59:59.440 --> 01:00:04.600
Like now, if you try to autofill with 1Password in the wrong app or the wrong website,


01:00:04.600 --> 01:00:06.600
it now pops up a dialog that's like,


01:00:06.600 --> 01:00:11.000
"Do you want to add this URL? Do you want to fill this once? Or was this a mistake?"


01:00:11.000 --> 01:00:15.400
It will ask you every time if you try to force it to.


01:00:15.400 --> 01:00:18.800
But obviously, like copy paste kind of circumvents all those protections.


01:00:18.800 --> 01:00:22.400
So like never ever use copy paste, always try to get it to autofill.


01:00:22.400 --> 01:00:26.880
You should use full disk encryption, just turn on file vault or what's the


01:00:26.880 --> 01:00:31.080
Microsoft BitLocker or DM Crypt, I think is the Linux one.


01:00:31.080 --> 01:00:34.680
Like you should, the technology now is like pretty much free.


01:00:34.680 --> 01:00:36.560
It doesn't really cost much in the way of performance.


01:00:36.560 --> 01:00:41.260
Like, and it gives you peace of mind if your laptop gets stolen, which is sadly a


01:00:41.260 --> 01:00:44.440
thing that speaking of like, you know, GitHub credentials leaking constantly,


01:00:44.520 --> 01:00:52.060
laptops are stolen every day. So you should make encrypted backups, you should make sure you have like a restore plan because availability is really important.


01:00:52.060 --> 01:01:00.080
Obviously, use keyring, use keyring, use keyring and pick an appropriate back end for the level of security that you need in each place where your code is deployed.


01:01:00.080 --> 01:01:13.040
Yeah, absolutely. All right. Well, Cliff, thanks for thinking about all this for everyone and giving us a list. And I think people will really enjoy your storytelling when the PyCon video eventually comes out.


01:01:13.040 --> 01:01:15.760
Yeah, I can't wait to start sending people over to the YouTube video.


01:01:15.760 --> 01:01:17.840
I was pretty proud of how it went.


01:01:17.840 --> 01:01:19.680
It's my first talk in quite a while,


01:01:19.680 --> 01:01:21.120
because I don't know if you know this,


01:01:21.120 --> 01:01:24.960
but the last few years have been a little stressful for everybody.


01:01:24.960 --> 01:01:27.680
A lot of stuff going on.


01:01:27.680 --> 01:01:30.560
It's going to scramble up the whole conference track,


01:01:30.560 --> 01:01:32.600
conference circuit a little bit, yes.


01:01:32.600 --> 01:01:34.080
All right, before we get out of here,


01:01:34.080 --> 01:01:36.760
let's give you a chance to give a shout out to a PyPI package.


01:01:36.760 --> 01:01:39.520
I mean, feel free to pick Keyring if you want one more time


01:01:39.520 --> 01:01:41.920
or something else that you think is kind of awesome people should check out.


01:01:41.920 --> 01:01:46.320
That's always tough. I remember, I know that this question is coming every time I'm on this podcast.


01:01:46.320 --> 01:01:53.560
I'm like, I'll see you like, or the choices are getting harder because we're up to 456,000 packages on PyPI. How nuts is that?


01:01:53.560 --> 01:02:08.720
There's a lot out there. I guess I should take this as an opportunity to like, Oh, you know what, actually, I do have a self promotion thing that I should put in here that is not, we did not talk about it all today, which is date type. Date type is another little package that I wrote.


01:02:09.520 --> 01:02:14.020
And it's a workaround for like one specific bug in the standard library,


01:02:14.020 --> 01:02:22.360
which is that dates are assignable to like dates and date times are considered equivalent


01:02:22.360 --> 01:02:25.460
because they are one subclass is the other.


01:02:25.460 --> 01:02:29.760
And this will make it so that you can't assign a date time to a date


01:02:29.760 --> 01:02:31.660
because they don't actually like they're not compatible.


01:02:31.660 --> 01:02:33.920
They're not Lispcoff substitutable.


01:02:33.920 --> 01:02:37.520
And it will also give you separate types for naive and aware date times.


01:02:37.520 --> 01:02:38.620
So you can't mix those up.


01:02:38.620 --> 01:02:39.520
Oh, nice.


01:02:39.520 --> 01:02:42.160
It is not actually a library.


01:02:42.160 --> 01:02:44.760
It looks like a library, and I guess it does have one function in it.


01:02:44.760 --> 01:02:50.560
But what it actually is, is a bunch of abstract protocol-like type stubs.


01:02:50.560 --> 01:02:53.020
And so at runtime, they're still datetimes.


01:02:53.020 --> 01:02:55.900
Everything works exactly the same. It doesn't change how your code behaves at all.


01:02:55.900 --> 01:02:58.020
But by importing from datetype instead of datetime,


01:02:58.020 --> 01:03:00.520
you get this extra mypy type safety.


01:03:00.520 --> 01:03:02.120
Excellent. All right, very cool.


01:03:02.120 --> 01:03:06.360
That and also Rich, because that text UI stuff is amazing,


01:03:06.360 --> 01:03:08.600
but I feel like everybody talks about that one.


01:03:08.600 --> 01:03:09.720
which is awesome.


01:03:09.720 --> 01:03:12.640
We're doing a good job over there with that for sure.


01:03:12.640 --> 01:03:13.920
All right, final question.


01:03:13.920 --> 01:03:15.680
If you're gonna work on DateType


01:03:15.680 --> 01:03:17.200
or any of these other projects,


01:03:17.200 --> 01:03:18.760
what editor are you using these days?


01:03:18.760 --> 01:03:22.920
- I use Emacs as I have for nigh on 30 years now.


01:03:22.920 --> 01:03:25.560
- You prefer to have an operating system for your editor?


01:03:25.560 --> 01:03:27.080
- I don't treat it as an OS.


01:03:27.080 --> 01:03:28.600
I feel like a lot of people, you know,


01:03:28.600 --> 01:03:30.240
kind of live inside Emacs all the time


01:03:30.240 --> 01:03:31.400
and I use Emacs for a lot.


01:03:31.400 --> 01:03:34.080
I think I love the text editing facilities.


01:03:34.080 --> 01:03:37.460
Every time I kind of try to drop into like VS Code


01:03:37.460 --> 01:03:39.740
one of the new cool text editors.


01:03:39.740 --> 01:03:44.940
I always like the IDE stuff is often nicer than Emacs, but the text editing


01:03:44.940 --> 01:03:48.700
itself, like the number of motions, the kinds of things you can do to like


01:03:48.700 --> 01:03:53.940
select a word, select a function, select a lines, you know, select a sentence,


01:03:53.940 --> 01:03:55.180
rewrap a paragraph, right?


01:03:55.180 --> 01:04:00.620
There's all these things that you do as you're just working with text in Emacs


01:04:00.620 --> 01:04:05.940
that, so it's like a, it's a text editor in a way that few other IDEs are really


01:04:05.940 --> 01:04:06.520
text.


01:04:06.900 --> 01:04:09.500
Yeah, I feel like Vim is a little more interchangeable.


01:04:09.500 --> 01:04:09.840
Yeah.


01:04:09.840 --> 01:04:11.840
A lot of the editors have Vim bindings, right?


01:04:11.840 --> 01:04:17.740
I've used Vim. I actually kind of took a break from Emacs for about two years at one point and switched entirely to Vim.


01:04:17.740 --> 01:04:21.240
But my Vim config has been slowly breaking over the years.


01:04:21.240 --> 01:04:26.540
So I actually deleted the whole thing last year and I've been trying to get into NeoVim.


01:04:26.540 --> 01:04:28.940
But there's a little bit of like, it's a different world.


01:04:28.940 --> 01:04:31.140
So I haven't managed to get into it.


01:04:31.140 --> 01:04:32.140
Very cool.


01:04:32.140 --> 01:04:38.940
All right, well, final call to action for people who are now maybe a little bit nervous and thinking about how they should treat their secrets differently.


01:04:38.940 --> 01:04:45.940
Yeah, I mean, I think that that's a good point. They might be a little nervous. Relax. It's going to be okay. That's my call to action.


01:04:45.940 --> 01:04:54.260
And use keyring and don't write docs that tell people to paste stuff into their source code. But mostly just relax and take this methodically.


01:04:54.260 --> 01:04:58.020
nobody's attacking you right now. And it's very easy to get worked up about


01:04:58.020 --> 01:05:01.740
security and think like, Oh, no, you know, this all of these attacks, like all


01:05:01.740 --> 01:05:04.700
this horrible stuff could happen. But really, like, today's the same as


01:05:04.700 --> 01:05:08.460
yesterday, you just need to start adding those defenses a little bit at a time.


01:05:08.460 --> 01:05:11.140
Absolutely. Well, thanks again for being on the show. It's great to catch up


01:05:11.140 --> 01:05:13.660
with you. Thanks so much for having me. This was great. Yeah, you bet. Bye.


01:05:13.660 --> 01:05:13.940
Bye.


01:05:13.940 --> 01:05:19.340
This has been another episode of talk Python to me. Thank you to our sponsors.


01:05:19.340 --> 01:05:21.940
Be sure to check out what they're offering. It really helps support the


01:05:21.940 --> 01:05:27.780
show. The folks over at JetBrains encourage you to get work done with PyCharm. PyCharm


01:05:27.780 --> 01:05:32.980
Professional understands complex projects across multiple languages and technologies,


01:05:32.980 --> 01:05:38.580
so you can stay productive while you're writing Python code and other code like HTML or SQL.


01:05:38.580 --> 01:05:43.380
Download your free trial at talkpython.fm/donewithpycharm.


01:05:43.380 --> 01:05:50.180
Listen to an episode of Compiler, an original podcast from Red Hat. Compiler unravels industry


01:05:50.180 --> 01:05:54.340
topics, trends, and things you've always wanted to know about tech through interviews with the


01:05:54.340 --> 01:06:00.740
people who know it best. Subscribe today by following talkpython.fm/compiler. Want to level


01:06:00.740 --> 01:06:05.700
up your Python? We have one of the largest catalogs of Python video courses over at Talk Python.


01:06:05.700 --> 01:06:11.220
Our content ranges from true beginners to deeply advanced topics like memory and async. And best


01:06:11.220 --> 01:06:16.500
of all, there's not a subscription in sight. Check it out for yourself at training.talkpython.fm.


01:06:16.500 --> 01:06:21.060
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.


01:06:21.060 --> 01:06:25.300
We should be right at the top. You can also find the iTunes feed at /itunes,


01:06:25.300 --> 01:06:31.460
the Google Play feed at /play, and the Direct RSS feed at /rss on talkpython.fm.


01:06:31.460 --> 01:06:36.580
We're live streaming most of our recordings these days. If you want to be part of the show and have


01:06:36.580 --> 01:06:41.700
your comments featured on the air, be sure to subscribe to our YouTube channel at talkpython.fm/youtube.


01:06:43.300 --> 01:06:44.800
This is your host Michael Kennedy.


01:06:44.800 --> 01:06:46.000
Thanks so much for listening.


01:06:46.000 --> 01:06:47.160
I really appreciate it.


01:06:47.160 --> 01:06:49.040
Now, get out there and write some Python code.


01:06:49.040 --> 01:07:11.040
[MUSIC]

