WEBVTT

00:00:00.000 --> 00:00:06.080
At PyCon 2023, there was a section of the Expo floor dedicated to new Python-based companies


00:00:06.080 --> 00:00:11.280
called Startup Row. I wanted to bring their stories and the experience of talking with


00:00:11.280 --> 00:00:16.400
these new startups to you. So in this episode, we talk with the founders of these companies for


00:00:16.400 --> 00:00:23.840
about five to 10 minutes each. This is Talk Python to Me, episode 414 recorded on location at PyCon


00:00:23.840 --> 00:00:27.440
in Salt Lake City on April 22nd, 2023.


00:00:27.440 --> 00:00:40.000
[Music]


00:00:40.000 --> 00:00:45.200
Welcome to Talk Python To Me, a weekly podcast on Python. This is your host, Michael Kennedy.


00:00:45.200 --> 00:00:50.320
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython,


00:00:50.320 --> 00:00:55.200
both on fosstodon.org. Be careful with impersonating accounts on other instances,


00:00:55.200 --> 00:01:01.040
there are many. Keep up with the show and listen to over seven years of past episodes at talkpython.fm.


00:01:01.040 --> 00:01:06.880
We've started streaming most of our episodes live on YouTube. Subscribe to our YouTube channel over


00:01:06.880 --> 00:01:12.640
at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.


00:01:12.640 --> 00:01:19.280
This episode is brought to you by Sentry and us over at Talk Python Training. Please check out


00:01:19.280 --> 00:01:24.880
what we're both offering during our segments. It really helps support the show. We kick off


00:01:24.880 --> 00:01:29.680
the interviews with Devin Peterson from Ponder. Ponder is taking Modin, a distributed compute


00:01:29.680 --> 00:01:34.960
library for Python, and pushing data science compute directly into the database. Welcome to


00:01:34.960 --> 00:01:39.760
Talk Python here on Startup Row. Thank you. Thank you. Yeah, it's fantastic to have you here. You


00:01:39.760 --> 00:01:46.000
know, we met yesterday here at PyCon US, and you were telling me about your project, Ponder,


00:01:46.000 --> 00:01:51.360
and how it's built upon Modin, the open source project. And as I looked around, I'm like,


00:01:51.360 --> 00:01:53.000
Like everyone here has a story.


00:01:53.000 --> 00:01:55.560
And I just thought it'd be so great to have you on the show


00:01:55.560 --> 00:01:58.040
along with all the others and just kind of tell your story.


00:01:58.040 --> 00:01:59.120
You know, how did you,


00:01:59.120 --> 00:02:01.440
how did you get here to start up Rho at PyCon?


00:02:01.440 --> 00:02:02.600
- Yeah, it's interesting.


00:02:02.600 --> 00:02:05.280
So Modin started as my PhD project


00:02:05.280 --> 00:02:07.560
and I was doing my PhD at Berkeley


00:02:07.560 --> 00:02:10.740
and I started in the genomics world,


00:02:10.740 --> 00:02:13.160
trying to build large-scale data science tools


00:02:13.160 --> 00:02:16.400
for, you know, the people who actually do the science.


00:02:16.400 --> 00:02:17.740
I'm not a biologist myself.


00:02:17.740 --> 00:02:20.200
I don't know the first thing about biology, honestly.


00:02:20.200 --> 00:02:21.700
- But you got some good programming skills


00:02:21.700 --> 00:02:23.420
and they can always use that applied to their data, right?


00:02:23.420 --> 00:02:24.260
- Right, right.


00:02:24.260 --> 00:02:25.920
The problem was we were building tools in Spark


00:02:25.920 --> 00:02:28.100
and it was really hard for these Spark-like APIs


00:02:28.100 --> 00:02:29.960
to translate natively to the way


00:02:29.960 --> 00:02:31.660
that they were reasoning about data.


00:02:31.660 --> 00:02:33.100
And like, they're using Python.


00:02:33.100 --> 00:02:35.660
And so, there's a very kind of natural way


00:02:35.660 --> 00:02:38.980
that scientists think about interacting with data


00:02:38.980 --> 00:02:40.600
that's not Spark, right?


00:02:40.600 --> 00:02:42.660
It's not as intuitive as Intuitive and Spark,


00:02:42.660 --> 00:02:43.660
even PySpark, right?


00:02:43.660 --> 00:02:45.980
- So a lot of Python people avoid databases


00:02:45.980 --> 00:02:47.540
as much as they can, at least SQL


00:02:47.540 --> 00:02:49.020
and directly talking to them like that.


00:02:49.020 --> 00:02:51.540
- Yeah, totally, because often the way,


00:02:51.540 --> 00:02:54.100
when you're exploring data, you have a mental model


00:02:54.100 --> 00:02:57.100
of how you want to interact with the data.


00:02:57.100 --> 00:02:59.300
And that is not SQL often.


00:02:59.300 --> 00:03:02.180
It's just the way that it is.


00:03:02.180 --> 00:03:05.780
So yeah, I had a moment there where a data scientist


00:03:05.780 --> 00:03:08.100
was like, "I don't want your tool.


00:03:08.100 --> 00:03:11.020
"Can you just make my tool run faster?"


00:03:11.020 --> 00:03:13.740
And so I was like, "Ah, yes, wait a second.


00:03:13.740 --> 00:03:15.300
"This is actually a real project."


00:03:15.300 --> 00:03:17.680
And so I started looking into pandas


00:03:17.680 --> 00:03:21.840
and looking into the world of databases


00:03:21.840 --> 00:03:23.680
and the kind of academic space,


00:03:23.680 --> 00:03:26.440
nobody had really dug that deep into pandas


00:03:26.440 --> 00:03:28.480
because in the academic sense,


00:03:28.480 --> 00:03:31.400
everybody was like, okay, pandas is just a bad database.


00:03:31.400 --> 00:03:34.400
That's what database people thought at the time.


00:03:34.400 --> 00:03:37.000
So we did a bunch of work and it kind of turned out


00:03:37.000 --> 00:03:39.440
that's not the case, they're totally new things.


00:03:39.440 --> 00:03:42.720
And so from there we built Modin and now with Ponder,


00:03:42.720 --> 00:03:43.840
we're kind of extending that


00:03:43.840 --> 00:03:47.180
to basically bridge these two worlds


00:03:47.180 --> 00:03:50.140
where you can use Python, but we're generating SQL


00:03:50.140 --> 00:03:52.600
on the back end and able to run pandas directly


00:03:52.600 --> 00:03:54.460
in your database or your data warehouse.


00:03:54.460 --> 00:03:55.640
- Yeah, fantastic.


00:03:55.640 --> 00:03:59.380
So when I first heard about what you're doing at Ponder,


00:03:59.380 --> 00:04:01.060
I immediately thought of Dask.


00:04:01.060 --> 00:04:04.680
And Dask is another popular startup success,


00:04:04.680 --> 00:04:08.220
open source startup success story with Matthew Rocklin


00:04:08.220 --> 00:04:09.780
and Forman Coil and stuff.


00:04:09.780 --> 00:04:12.100
And I mean, I think they may have outgrown Startup Row,


00:04:12.100 --> 00:04:13.860
but you know, good for them.


00:04:13.860 --> 00:04:14.780
- Yeah, totally.


00:04:14.780 --> 00:04:16.100
- My first thought was, okay, well,


00:04:16.100 --> 00:04:17.480
how is this different than Dask?


00:04:17.480 --> 00:04:20.080
But the big difference is Dask is grid computing


00:04:20.080 --> 00:04:22.160
and yours runs in the database.


00:04:22.160 --> 00:04:24.000
- Yeah, for Ponder definitely.


00:04:24.000 --> 00:04:25.560
Open source modem also integrates


00:04:25.560 --> 00:04:27.240
with Dask clusters as well.


00:04:27.240 --> 00:04:31.420
So Dask has Dask DataFrame and that runs on Dask clusters.


00:04:31.420 --> 00:04:34.040
We can also run a modem open source on Dask clusters.


00:04:34.040 --> 00:04:36.520
It's very important to us that whatever infrastructure


00:04:36.520 --> 00:04:39.400
that you have, you can run pandas on top of that.


00:04:39.400 --> 00:04:41.340
So Ponder is the next level of that


00:04:41.340 --> 00:04:43.480
where if your data is in the database,


00:04:43.480 --> 00:04:44.760
it doesn't leave, right?


00:04:44.760 --> 00:04:46.720
We can just execute it directly there.


00:04:46.720 --> 00:04:50.040
And all of your assumptions from Python and Pandas


00:04:50.040 --> 00:04:52.800
hold true in the database, even though the database actually


00:04:52.800 --> 00:04:54.000
doesn't like the assumptions that you


00:04:54.000 --> 00:04:55.080
might have in Pandas, right?


00:04:55.080 --> 00:04:55.360
Yeah.


00:04:55.360 --> 00:04:56.440
We emulate those behaviors.


00:04:56.440 --> 00:04:58.320
And we've done a lot of work to actually make


00:04:58.320 --> 00:04:59.240
that feel very native.


00:04:59.240 --> 00:05:02.920
So that is a key difference with Ponder and Dask,


00:05:02.920 --> 00:05:05.600
though, is that your data never leaves the database.


00:05:05.600 --> 00:05:07.920
So you don't have to have a separate Dask cluster


00:05:07.920 --> 00:05:10.880
to kind of pull the data into and execute on it there.


00:05:10.880 --> 00:05:12.960
You can just run things natively in the database


00:05:12.960 --> 00:05:13.560
with the data warehouse.


00:05:13.560 --> 00:05:17.080
If you have a large database, you already have a probably powerful database server,


00:05:17.080 --> 00:05:21.440
why transfer all the data off of that, load it into something else, analyze it, and throw


00:05:21.440 --> 00:05:22.440
it away, right?


00:05:22.440 --> 00:05:24.080
Just like make it run there.


00:05:24.080 --> 00:05:25.080
Exactly.


00:05:25.080 --> 00:05:26.080
Exactly.


00:05:26.080 --> 00:05:27.080
Yeah.


00:05:27.080 --> 00:05:31.680
So maybe a quick elevator pitch type of thing might be like, you all take pandas and turn


00:05:31.680 --> 00:05:35.760
it into SQL statements that run on the database, but people get a program in pandas.


00:05:35.760 --> 00:05:36.760
Yes.


00:05:36.760 --> 00:05:37.760
Exactly.


00:05:37.760 --> 00:05:38.760
That's exactly it.


00:05:38.760 --> 00:05:39.760
Yes.


00:05:39.760 --> 00:05:43.620
native and pandas, like describe for example,


00:05:43.620 --> 00:05:45.840
df.describe, super, super common.


00:05:45.840 --> 00:05:48.460
- It seems easy, like it just gives me some summary stats.


00:05:48.460 --> 00:05:49.820
- Yes, exactly.


00:05:49.820 --> 00:05:51.540
That's 300 lines of SQL.


00:05:51.540 --> 00:05:52.380
- No.


00:05:52.380 --> 00:05:53.620
(laughing)


00:05:53.620 --> 00:05:55.160
- Like you wouldn't believe it looking at it though,


00:05:55.160 --> 00:05:57.380
because it seems so simple,


00:05:57.380 --> 00:05:59.580
and it is a simple output, right?


00:05:59.580 --> 00:06:01.980
I wanna get some summary statistics for my data.


00:06:01.980 --> 00:06:03.820
But SQL is so declarative,


00:06:03.820 --> 00:06:05.980
and the language itself doesn't lend itself well


00:06:05.980 --> 00:06:09.020
to this type of iterative, interactive kind of workflow.


00:06:09.020 --> 00:06:12.200
- Right, and the notebooks, remember, step by step,


00:06:12.200 --> 00:06:14.620
they have like a history, sort of a memory,


00:06:14.620 --> 00:06:17.300
whereas SQL's, every statement is standalone.


00:06:17.300 --> 00:06:19.820
- Exactly, so all or nothing, basically.


00:06:19.820 --> 00:06:21.940
And you have to do the whole thing up front.


00:06:21.940 --> 00:06:23.820
And that's the thing people love about Pandas,


00:06:23.820 --> 00:06:26.060
is that you can incrementally build these things up.


00:06:26.060 --> 00:06:29.140
So we're giving that interface to SQL, basically.


00:06:29.140 --> 00:06:31.240
- Awesome, all right, well, let's wrap this up


00:06:31.240 --> 00:06:34.340
with a bit of a talk, how you got to Startup Row,


00:06:34.340 --> 00:06:36.780
how'd you start this company, where are you?


00:06:36.780 --> 00:06:39.000
So many people are excited to take their open source


00:06:39.000 --> 00:06:41.000
and instead of making it their side job


00:06:41.000 --> 00:06:43.000
or something they do part-time at their company,


00:06:43.000 --> 00:06:45.000
make it their full-time energy.


00:06:45.000 --> 00:06:47.000
And you're there. How'd you do it?


00:06:47.000 --> 00:06:50.000
Yeah, so the way that we started was


00:06:50.000 --> 00:06:52.000
we talked to a lot of companies


00:06:52.000 --> 00:06:54.000
where they basically asked us,


00:06:54.000 --> 00:06:57.000
"Can you make this work on top of our infrastructure?"


00:06:57.000 --> 00:07:00.000
We only supported in the open source, Ray and Dask.


00:07:00.000 --> 00:07:03.000
And we saw a motion there to have kind of an open core model.


00:07:03.000 --> 00:07:05.000
So we follow the open core model where


00:07:05.000 --> 00:07:07.000
these more enterprise-y features like


00:07:07.000 --> 00:07:10.000
security features and being able to push into data warehouses.


00:07:10.000 --> 00:07:15.000
An individual consultant may not have a data warehouse.


00:07:15.000 --> 00:07:17.000
They probably don't, but enterprises do.


00:07:17.000 --> 00:07:19.000
And these are the types of features that enterprises really care about.


00:07:19.000 --> 00:07:23.000
So this open core model, I think, lended itself really well to our business,


00:07:23.000 --> 00:07:28.000
particularly because enterprises will pay for these features.


00:07:28.000 --> 00:07:32.000
And then we went out and we raised a seed round


00:07:32.000 --> 00:07:36.000
and saw the opportunity to come here and be in PyCon Startup Row


00:07:36.000 --> 00:07:37.880
PyCon Startup Row, unfortunately,


00:07:37.880 --> 00:07:40.280
it's a competitive process, really it is.


00:07:40.280 --> 00:07:43.880
We feel very fortunate to be chosen


00:07:43.880 --> 00:07:45.380
among the few that are chosen here.


00:07:45.380 --> 00:07:46.960
But yeah, that's kind of our journey,


00:07:46.960 --> 00:07:49.960
is basically starting talking.


00:07:49.960 --> 00:07:52.240
So for folks out there who are interested in this,


00:07:52.240 --> 00:07:53.880
talk to people who are using this,


00:07:53.880 --> 00:07:55.360
people who are interested in the problem


00:07:55.360 --> 00:07:57.920
that you're solving, and figure out where the gaps are,


00:07:57.920 --> 00:07:59.480
and kind of ask questions.


00:07:59.480 --> 00:08:01.280
Don't be afraid to ask, would you pay for this?


00:08:01.280 --> 00:08:02.920
Or how much would you pay for this?


00:08:02.920 --> 00:08:05.040
Those questions, they're uncomfortable to ask.


00:08:05.040 --> 00:08:10.000
Especially the developer who's not used to presenting salesy type marketing


00:08:10.000 --> 00:08:13.240
things, you always, salespeople as kind of, yuck, I got it.


00:08:13.240 --> 00:08:14.160
It's a necessary evil.


00:08:14.160 --> 00:08:14.920
Totally.


00:08:14.920 --> 00:08:15.800
It totally is.


00:08:15.800 --> 00:08:16.160
Yeah.


00:08:16.160 --> 00:08:20.080
So, but you have to ask, because how do you know if you can kind of take that


00:08:20.080 --> 00:08:23.520
next step, unless you ask, Hey, would you pay $50 a month for this?


00:08:23.520 --> 00:08:25.100
Would you pay $10 a month for this?


00:08:25.100 --> 00:08:25.280
Right.


00:08:25.280 --> 00:08:28.440
You can't know unless you, unless you really go out there and ask.


00:08:28.440 --> 00:08:31.360
So that's what I would encourage folks to do if they're interested in this is,


00:08:31.600 --> 00:08:35.840
you know, find those gaps and really ask the hard questions that are kind of hard.


00:08:35.840 --> 00:08:36.680
But yeah.


00:08:36.680 --> 00:08:38.100
Awesome. Well, congratulations.


00:08:38.100 --> 00:08:39.340
Thanks for taking the time to talk to us.


00:08:39.340 --> 00:08:40.480
Thank you. Thank you.


00:08:40.480 --> 00:08:41.380
Yeah, you bet. Bye.


00:08:41.380 --> 00:08:43.880
Next up is Generally Intelligent and Josh Albrecht.


00:08:43.880 --> 00:08:46.480
Generally Intelligent is an independent research company


00:08:46.480 --> 00:08:49.320
developing AI agents with general intelligence


00:08:49.320 --> 00:08:51.620
that can be safely deployed in the real world.


00:08:51.620 --> 00:08:53.560
Josh, welcome to Talk Python to me.


00:08:53.560 --> 00:08:54.460
Hey, thanks.


00:08:54.460 --> 00:08:55.300
Hey, it's great to have you here.


00:08:55.300 --> 00:08:56.920
Tell people quickly who you are.


00:08:56.920 --> 00:08:58.560
Yeah, so I'm Josh.


00:08:58.560 --> 00:09:00.900
Josh Albrecht, I'm the CTO of Generally Intelligent.


00:09:00.960 --> 00:09:03.640
We're an AI research company based in San Francisco.


00:09:03.640 --> 00:09:04.480
- Awesome.


00:09:04.480 --> 00:09:06.400
I love the humbleness.


00:09:06.400 --> 00:09:08.520
Generally, generally intelligent, right?


00:09:08.520 --> 00:09:11.240
You're not a super genius, but no, it's a clever name.


00:09:11.240 --> 00:09:12.080
I like it.


00:09:12.080 --> 00:09:12.900
- Thank you.


00:09:12.900 --> 00:09:13.740
- Yeah, yeah.


00:09:13.740 --> 00:09:15.800
And what's the problem you're solving here?


00:09:15.800 --> 00:09:18.160
- Yeah, we, kind of as it says on the tin,


00:09:18.160 --> 00:09:20.140
we're working on artificial general intelligence.


00:09:20.140 --> 00:09:21.480
We don't usually like to use that term


00:09:21.480 --> 00:09:22.560
'cause it can mean lots of different things


00:09:22.560 --> 00:09:23.400
to lots of different people,


00:09:23.400 --> 00:09:25.800
but in general, what we're working on


00:09:25.800 --> 00:09:29.640
is making more capable, safer, more robust AI systems.


00:09:29.640 --> 00:09:31.880
And in particular, we're focused on agents,


00:09:31.880 --> 00:09:33.720
so systems that can act on their own.


00:09:33.720 --> 00:09:36.300
And right now, mostly what we're focused on


00:09:36.300 --> 00:09:38.480
is agents that can work in your browser,


00:09:38.480 --> 00:09:40.280
on your desktop, in your code editor,


00:09:40.280 --> 00:09:41.720
those kind of virtual environments


00:09:41.720 --> 00:09:42.880
and digital environments.


00:09:42.880 --> 00:09:45.840
- How much of this are you envisioning running locally


00:09:45.840 --> 00:09:48.320
versus running on a big cluster in the cloud?


00:09:48.320 --> 00:09:50.420
- Yeah, I think it'd be nice someday in the future


00:09:50.420 --> 00:09:51.840
to have things run totally locally,


00:09:51.840 --> 00:09:54.000
but right now, a lot of these technologies


00:09:54.000 --> 00:09:56.480
do require a large cluster of GPUs,


00:09:56.480 --> 00:09:57.720
which are very expensive,


00:09:57.720 --> 00:10:00.000
And most people don't even have a GPU


00:10:00.000 --> 00:10:01.260
or have a bunch of GPUs at home,


00:10:01.260 --> 00:10:03.440
so it's kind of hard to actually get it running locally.


00:10:03.440 --> 00:10:05.000
Hopefully, someday in the future, we'll be able to do that,


00:10:05.000 --> 00:10:07.200
but for now, you'll probably need internet access


00:10:07.200 --> 00:10:08.040
to use a lot of these things.


00:10:08.040 --> 00:10:09.640
- Right, okay, so you're envisioning


00:10:09.640 --> 00:10:13.640
a bunch of these agents that have access to an API


00:10:13.640 --> 00:10:16.440
that can quickly respond over there.


00:10:16.440 --> 00:10:17.280
- Yeah.


00:10:17.280 --> 00:10:19.160
- Okay, so give us some ideas.


00:10:19.160 --> 00:10:22.120
- Yeah, so what this looks like concretely,


00:10:22.120 --> 00:10:24.200
you can imagine like a coding agent.


00:10:24.200 --> 00:10:26.520
So one thing you can do with GitHub Copilot right now


00:10:26.520 --> 00:10:29.060
is you can write a function declaration in a doc string


00:10:29.060 --> 00:10:30.480
and have it generate the function.


00:10:30.480 --> 00:10:32.120
But you can imagine for a coding agent,


00:10:32.120 --> 00:10:33.780
you can not only generate the function,


00:10:33.780 --> 00:10:35.800
but also generate some tests, run those tests,


00:10:35.800 --> 00:10:37.920
see errors in those tests, try and fix the errors,


00:10:37.920 --> 00:10:40.280
kind of do that whole lifecycle to ideally give you


00:10:40.280 --> 00:10:42.400
a output that's actually a lot better.


00:10:42.400 --> 00:10:43.800
And then also, if you're thinking


00:10:43.800 --> 00:10:46.280
about this as an agent, maybe it's more of a back and forth.


00:10:46.280 --> 00:10:48.200
It's not just an autocomplete in your editor,


00:10:48.200 --> 00:10:49.840
but it can come back to you and say,


00:10:49.840 --> 00:10:51.240
I'm sort of uncertain about this part here.


00:10:51.240 --> 00:10:52.000
What did you mean?


00:10:52.000 --> 00:10:53.840
Or, hmm, I wrote these tests, but I'm


00:10:53.840 --> 00:10:55.480
not sure if it's quite what you wanted.


00:10:55.480 --> 00:10:57.480
or maybe it's kind of running in the background


00:10:57.480 --> 00:10:59.480
and flagging different things that it sees in your code base.


00:10:59.480 --> 00:11:01.480
Maybe you made some change and it can detect


00:11:01.480 --> 00:11:03.480
that your doc string is out of date and flag that for you.


00:11:03.480 --> 00:11:06.480
So thinking about it more as an actual pair programmer.


00:11:06.480 --> 00:11:08.480
- Okay, and is it primarily focused on--


00:11:08.480 --> 00:11:09.480
- For example.


00:11:09.480 --> 00:11:11.480
- Yeah, are you thinking to focus mostly on programming


00:11:11.480 --> 00:11:14.480
or is it more broad like, "I'm looking for a great deal


00:11:14.480 --> 00:11:16.480
"on this classic car. Go scour the internet


00:11:16.480 --> 00:11:19.480
"and negotiate it for me."


00:11:19.480 --> 00:11:21.480
- Yeah, so the company is generally intelligent,


00:11:21.480 --> 00:11:23.480
so we certainly do want to be able to address


00:11:23.480 --> 00:11:25.800
address all these different use cases over time.


00:11:25.800 --> 00:11:27.960
I think for us right now, one of the domains


00:11:27.960 --> 00:11:29.520
that we are interested in is code,


00:11:29.520 --> 00:11:31.440
especially because it's so objective.


00:11:31.440 --> 00:11:32.440
You can know if it's right or wrong.


00:11:32.440 --> 00:11:33.480
You have tests, that sort of stuff.


00:11:33.480 --> 00:11:35.600
So it's a nice playground for ourselves.


00:11:35.600 --> 00:11:36.920
And it's something that we can build for ourselves


00:11:36.920 --> 00:11:38.520
to iterate on internally.


00:11:38.520 --> 00:11:41.360
But we're not exactly sure what the final product will be.


00:11:41.360 --> 00:11:43.440
We're also training our own large language models.


00:11:43.440 --> 00:11:44.840
We might productize some stuff around those.


00:11:44.840 --> 00:11:46.680
So there's lots of possibilities.


00:11:46.680 --> 00:11:47.720
We're not wedded to anything yet.


00:11:47.720 --> 00:11:50.000
Thankfully, we have the luxury to take a little bit of time


00:11:50.000 --> 00:11:51.960
to figure that out as a research company.


00:11:51.960 --> 00:11:52.880
- Yeah, that's excellent.


00:11:52.880 --> 00:11:54.160
- What about science?


00:11:54.160 --> 00:11:55.400
- Yeah, science is definitely a thing


00:11:55.400 --> 00:11:56.440
that we're interested in.


00:11:56.440 --> 00:11:59.080
It's pretty hard, and so, you know,


00:11:59.080 --> 00:12:00.840
do we necessarily want these things like,


00:12:00.840 --> 00:12:02.520
you know, running around, making things in test tubes


00:12:02.520 --> 00:12:03.560
or whatever, I think that's probably


00:12:03.560 --> 00:12:04.540
a little bit harder than coding,


00:12:04.540 --> 00:12:05.680
and coding's already pretty hard,


00:12:05.680 --> 00:12:06.800
so I think we'll get there.


00:12:06.800 --> 00:12:08.040
That's some of the stuff that we,


00:12:08.040 --> 00:12:10.080
like, personally on the team are really excited about,


00:12:10.080 --> 00:12:11.520
to see, you know, how can we use these


00:12:11.520 --> 00:12:14.040
to uncover new cures for diseases or whatever.


00:12:14.040 --> 00:12:15.200
I'm really excited for that kind of stuff


00:12:15.200 --> 00:12:16.080
a little further in the future.


00:12:16.080 --> 00:12:16.920
- Yeah, that'd be amazing.


00:12:16.920 --> 00:12:20.000
I was just talking to someone on the expo floor hall here


00:12:20.000 --> 00:12:21.120
about protein folding.


00:12:21.120 --> 00:12:21.960
- Yeah.


00:12:21.960 --> 00:12:22.780
- Right, that kind of stuff.


00:12:22.780 --> 00:12:24.780
kind of been elusive for people.


00:12:24.780 --> 00:12:26.780
We more or less have just tried to brute force it.


00:12:26.780 --> 00:12:27.780
- Yeah. - Right?


00:12:27.780 --> 00:12:29.780
With the folding at home thing.


00:12:29.780 --> 00:12:31.780
Let's just run every computer and just try every possibility.


00:12:31.780 --> 00:12:33.780
But there's a lot of possibilities. - Yeah, yeah, exactly.


00:12:33.780 --> 00:12:35.780
- Alright, so where's Python fitting here?


00:12:35.780 --> 00:12:37.780
What are some of the tools that you're using?


00:12:37.780 --> 00:12:39.780
- Yeah, so Python is-- we love Python.


00:12:39.780 --> 00:12:41.780
We basically write everything in Python, or Bash,


00:12:41.780 --> 00:12:43.780
but, you know, mostly Python.


00:12:43.780 --> 00:12:45.780
Or Python generates a little bit of Bash, you know,


00:12:45.780 --> 00:12:47.780
but it's mostly Python, so yeah.


00:12:47.780 --> 00:12:49.780
We use a lot of PyTorch for our models.


00:12:49.780 --> 00:12:51.780
And then other than that, you know, let's see,


00:12:51.780 --> 00:12:52.620
libraries to use.


00:12:52.620 --> 00:12:54.060
I mean, we use tons of Python libraries,


00:12:54.060 --> 00:12:56.740
like Numpy and Scikit and, you know, Adders.


00:12:56.740 --> 00:12:59.500
And just, there's so many, like, wonderful, you know,


00:12:59.500 --> 00:13:01.300
things that people have built that we just,


00:13:01.300 --> 00:13:02.700
yeah, that are just so nice to work with.


00:13:02.700 --> 00:13:04.460
So we love that Python, you can kind of take it,


00:13:04.460 --> 00:13:05.700
open it up, look at all the source,


00:13:05.700 --> 00:13:08.220
and like, really understand everything in that full stack.


00:13:08.220 --> 00:13:09.860
For us doing research, that's really valuable


00:13:09.860 --> 00:13:11.600
to be able to know everything that's going on.


00:13:11.600 --> 00:13:14.360
- Yeah, you have these Lego block types of things.


00:13:14.360 --> 00:13:16.260
Like, what if we arranged it like this?


00:13:16.260 --> 00:13:18.680
You don't have to write the whole machine learning bit.


00:13:18.680 --> 00:13:21.620
You can click a few pieces together and off it goes.


00:13:21.620 --> 00:13:23.860
- Yeah, yeah, we build on top of Mosaic, for example,


00:13:23.860 --> 00:13:25.300
or other open source libraries


00:13:25.300 --> 00:13:27.300
that people put together for training stuff


00:13:27.300 --> 00:13:28.700
and kind of adapt it for yourself.


00:13:28.700 --> 00:13:29.900
It's so nice that you can just pull things in


00:13:29.900 --> 00:13:31.100
and so easily change everything.


00:13:31.100 --> 00:13:32.000
- Yeah, awesome.


00:13:32.000 --> 00:13:34.260
I must have somehow blinked along the way


00:13:34.260 --> 00:13:36.100
and these large language models


00:13:36.100 --> 00:13:37.420
just seem to have come out of nowhere


00:13:37.420 --> 00:13:39.260
and all of a sudden, you know,


00:13:39.260 --> 00:13:40.500
AI is one of these things,


00:13:40.500 --> 00:13:42.520
it's kind of worked, kind of recommended stuff,


00:13:42.520 --> 00:13:45.380
and now all of a sudden it's mind-bogglingly good.


00:13:45.380 --> 00:13:46.220
- Yeah.


00:13:46.220 --> 00:13:47.860
- Do things like TensorFlow and stuff


00:13:47.860 --> 00:13:49.420
work with these large language models?


00:13:49.420 --> 00:13:50.740
Or do you need other libraries?


00:13:50.740 --> 00:13:52.900
- Yeah, so TensorFlow and PyTorch


00:13:52.900 --> 00:13:56.100
are probably the two main machine learning libraries


00:13:56.100 --> 00:13:58.420
that people do deep learning systems on top of.


00:13:58.420 --> 00:14:00.620
Pretty sure that GPT-3 and GPT-4


00:14:00.620 --> 00:14:02.860
were probably trained on top of PyTorch.


00:14:02.860 --> 00:14:04.500
I think a lot of the stuff at Google,


00:14:04.500 --> 00:14:06.300
like Palm and Bard and those types of things


00:14:06.300 --> 00:14:07.620
are trained on TensorFlow,


00:14:07.620 --> 00:14:09.480
but at the end of the day, they're actually very similar,


00:14:09.480 --> 00:14:10.320
and they're sort of converging


00:14:10.320 --> 00:14:11.920
to kind of similar ideas too as well,


00:14:11.920 --> 00:14:14.820
so it's interesting to see them evolve.


00:14:14.820 --> 00:14:16.020
- Yeah, fantastic.


00:14:16.020 --> 00:14:18.860
All right, last question, close out our conversation here,


00:14:18.860 --> 00:14:20.500
is we're sitting here on Startup Row.


00:14:20.500 --> 00:14:23.100
- Well, just outside of startup row, I suppose.


00:14:23.100 --> 00:14:26.180
But it's, you know, there's a bunch of people out here


00:14:26.180 --> 00:14:28.020
who are working on open source projects


00:14:28.020 --> 00:14:29.100
who would like to make it,


00:14:29.100 --> 00:14:32.100
somehow find a way to make it their passion, their job.


00:14:32.100 --> 00:14:34.580
Spend more time on it, maybe make it a company.


00:14:34.580 --> 00:14:35.420
How'd you get here?


00:14:35.420 --> 00:14:36.660
Tell people your journey.


00:14:36.660 --> 00:14:40.580
- Yeah, so we got here in a little bit of a different route.


00:14:40.580 --> 00:14:43.700
So we, a lot of us were working at a previous company


00:14:43.700 --> 00:14:45.980
called Sorceress that did applied,


00:14:45.980 --> 00:14:47.420
more of an applied machine learning thing


00:14:47.420 --> 00:14:48.940
where we were taking machine learning


00:14:48.940 --> 00:14:53.940
and applying it to the job of recruiting


00:14:53.940 --> 00:14:55.500
and trying to figure out, can we find good people online


00:14:55.500 --> 00:14:58.080
that might be a good fit for a particular position


00:14:58.080 --> 00:14:59.740
and reach out to them and get them interested in the job


00:14:59.740 --> 00:15:02.860
and that sort of stuff.


00:15:02.860 --> 00:15:03.760
We went through YC with this in 2017


00:15:03.760 --> 00:15:05.820
and we raised our Series A.


00:15:05.820 --> 00:15:07.100
Eventually, it was growing.


00:15:07.100 --> 00:15:08.580
We had a few million in revenue and customers


00:15:08.580 --> 00:15:10.140
and everything.


00:15:10.140 --> 00:15:11.380
In 2019, we were looking and it felt like


00:15:11.380 --> 00:15:13.700
there's so much really interesting stuff happening


00:15:13.700 --> 00:15:15.460
in self-supervised learning and in deep learning


00:15:15.460 --> 00:15:17.100
and in machine learning.


00:15:17.100 --> 00:15:18.060
It feels like recruiting is very important,


00:15:15.580 --> 00:15:20.580
but is this going to be the most important thing


00:15:20.580 --> 00:15:22.120
in the world?


00:15:22.120 --> 00:15:22.540
Is this going to really be the thing that changes the world?


00:15:22.540 --> 00:15:24.420
Or will there be something a little bit larger


00:15:24.420 --> 00:15:25.980
in this more general purpose AI?


00:15:25.980 --> 00:15:27.620
And the more we thought about it,


00:15:27.620 --> 00:15:28.620
the more we felt like,


00:15:28.620 --> 00:15:28.620
the AI stuff is probably going to have a huge impact.


00:15:28.620 --> 00:15:31.380
We should really be working on that.


00:15:31.380 --> 00:15:32.860
We kind of wound down the previous company.


00:15:32.860 --> 00:15:34.740
A bunch of us moved over


00:15:34.740 --> 00:15:35.580
and started up Generally Intelligent.


00:15:35.580 --> 00:15:37.220
And then we've been working on stuff ever since then.


00:15:37.220 --> 00:15:39.140
- Fantastic.


00:15:39.140 --> 00:15:39.700
Well, I know you've got some really cool stuff


00:15:39.700 --> 00:15:41.740
where the agents can sort of look at the code they're writing,


00:15:41.740 --> 00:15:45.180
think about it, evolve,


00:15:41.460 --> 00:15:43.640
and it looks like a really interesting take.


00:15:43.640 --> 00:15:46.240
So congratulations and I'll put a link


00:15:46.240 --> 00:15:48.800
to all your work in the show notes


00:15:48.800 --> 00:15:49.640
people can check it out.


00:15:49.640 --> 00:15:50.560
- Yeah, sounds good.


00:15:50.560 --> 00:15:51.400
- Yeah.


00:15:51.400 --> 00:15:52.220
- Thank you very much.


00:15:52.220 --> 00:15:53.060
- Yeah, thanks for being here.


00:15:53.060 --> 00:15:53.900
- It was great to chat.


00:15:53.900 --> 00:15:54.720
- Yeah, you bet.


00:15:54.720 --> 00:15:57.720
This portion of Talk Python to Me


00:15:57.720 --> 00:15:59.780
is brought to you by Sentry.


00:15:59.780 --> 00:16:02.200
Is your Python application fast


00:16:02.200 --> 00:16:04.480
or does it sometimes suffer from slowdowns


00:16:04.480 --> 00:16:06.600
and unexpected latency?


00:16:06.600 --> 00:16:08.760
Does this usually only happen in production?


00:16:08.760 --> 00:16:10.600
It's really tough to track down the problems


00:16:10.600 --> 00:16:12.280
at that point, isn't it?


00:16:12.280 --> 00:16:13.640
If you've looked at APM,


00:16:13.640 --> 00:16:16.160
application performance monitoring products before,


00:16:16.160 --> 00:16:18.600
they may have felt out of place for software teams.


00:16:18.600 --> 00:16:21.360
Many of them are more focused on legacy problems


00:16:21.360 --> 00:16:23.320
made for ops and infrastructure teams


00:16:23.320 --> 00:16:26.800
to keep their infrastructure and services up and running.


00:16:26.800 --> 00:16:30.980
Sentry has just launched their new APM service.


00:16:30.980 --> 00:16:33.240
And Sentry's approach to application monitoring


00:16:33.240 --> 00:16:35.800
is focused on being actionable, affordable,


00:16:35.800 --> 00:16:38.080
and actually built for developers.


00:16:38.080 --> 00:16:39.480
Whether it's a slow running query


00:16:39.480 --> 00:16:41.520
or latent payment endpoint that's at risk


00:16:41.520 --> 00:16:43.780
of timing out and causing sales to tank,


00:16:43.780 --> 00:16:45.680
Sentry removes the complexity


00:16:45.680 --> 00:16:47.660
and does the analysis for you,


00:16:47.660 --> 00:16:49.920
surfacing the most critical performance issues


00:16:49.920 --> 00:16:51.720
so you can address them immediately.


00:16:51.720 --> 00:16:53.760
Most legacy APM tools focus on


00:16:53.760 --> 00:16:55.920
an ingest everything approach,


00:16:55.920 --> 00:16:58.760
resulting in high storage costs, noisy environments,


00:16:58.760 --> 00:17:01.160
and an enormous amount of telemetry data


00:17:01.160 --> 00:17:04.260
most developers will never need to analyze.


00:17:04.260 --> 00:17:06.160
Sentry has taken a different approach,


00:17:06.160 --> 00:17:09.480
building the most affordable APM solution in the market.


00:17:09.480 --> 00:17:12.220
They remove the noise and extract the maximum value


00:17:12.220 --> 00:17:13.400
out of your performance data


00:17:13.400 --> 00:17:16.120
while passing the savings directly onto you,


00:17:16.120 --> 00:17:18.080
especially for Talk Python listeners


00:17:18.080 --> 00:17:20.340
who use the code Talk Python.


00:17:20.340 --> 00:17:23.560
So get started at talkpython.fm/sentry


00:17:23.560 --> 00:17:27.280
and be sure to use their code, Talk Python, all lowercase,


00:17:27.280 --> 00:17:30.440
so you let them know that you heard about them from us.


00:17:30.440 --> 00:17:34.200
My thanks to Sentry for keeping this podcast going strong.


00:17:34.200 --> 00:17:36.960
[AUDIO OUT]


00:17:36.960 --> 00:17:39.560
Now we talk with Mo Sarat from Werabots.


00:17:39.560 --> 00:17:41.280
They're building the database platform


00:17:41.280 --> 00:17:43.520
for geospatial analytics and AI.


00:17:43.520 --> 00:17:44.020
Hey, Mo.


00:17:44.020 --> 00:17:45.320
Welcome to Talk Python.


00:17:45.320 --> 00:17:46.280
Thank you so much.


00:17:46.280 --> 00:17:47.640
Yeah, it's good to have you here.


00:17:47.640 --> 00:17:49.040
Let's start off with a quick introduction.


00:17:49.040 --> 00:17:49.720
How are you?


00:17:49.720 --> 00:17:50.400
Absolutely.


00:17:50.400 --> 00:17:53.720
So my name is Mo, and I'm the co-founder and CEO


00:17:53.720 --> 00:17:55.240
of a company called Werabots.


00:17:55.240 --> 00:17:58.240
Werabots' grand vision is enable every organization


00:17:58.240 --> 00:18:00.880
to drive value from data via space and time.


00:18:00.880 --> 00:18:01.540
Awesome.


00:18:01.540 --> 00:18:02.040
I love it.


00:18:02.040 --> 00:18:02.720
I love it.


00:18:02.720 --> 00:18:04.520
So yeah, thanks for being here on the show.


00:18:04.520 --> 00:18:07.520
Let's dive into whereabouts of what


00:18:07.520 --> 00:18:08.800
is the problem you're solving?


00:18:08.800 --> 00:18:09.920
What are you guys building?


00:18:09.920 --> 00:18:12.200
Think about, again, every single data record


00:18:12.200 --> 00:18:14.240
that is collecting on a daily basis.


00:18:14.240 --> 00:18:16.580
Even we're here right now, we're talking


00:18:16.580 --> 00:18:20.320
on this podcast at this specific location at this specific time.


00:18:20.320 --> 00:18:22.360
So if you think about the space and time aspect,


00:18:22.360 --> 00:18:23.800
it's actually a very important aspect


00:18:23.800 --> 00:18:26.120
of every single piece of data that is being collected.


00:18:26.120 --> 00:18:26.360
Right.


00:18:26.360 --> 00:18:28.520
If we're here next week, who knows why we're here?


00:18:28.520 --> 00:18:29.640
We could be here for a different reason.


00:18:29.640 --> 00:18:30.840
That might mean something different, right?


00:18:30.840 --> 00:18:31.340
Absolutely.


00:18:31.340 --> 00:18:31.840
Yeah.


00:18:31.840 --> 00:18:34.440
So that's exactly-- so that space and time lens


00:18:34.440 --> 00:18:37.640
that you can apply to your data can actually also tell you


00:18:37.640 --> 00:18:38.940
a better story about your data.


00:18:38.940 --> 00:18:41.680
You can drive more value, more insights from your data


00:18:41.680 --> 00:18:43.680
if you apply that space and time lens.


00:18:43.680 --> 00:18:45.480
And this is basically what we are.


00:18:45.480 --> 00:18:47.600
Not necessarily-- this is exactly what


00:18:47.600 --> 00:18:49.240
we focus on in our company.


00:18:49.240 --> 00:18:51.280
But more specifically, I mean, we


00:18:51.280 --> 00:18:55.280
are trying to build a database infrastructure


00:18:55.280 --> 00:18:57.680
to enable people to use that space and time lens


00:18:57.680 --> 00:18:59.280
to drive value from their data.


00:18:59.280 --> 00:19:00.240
OK, fantastic.


00:19:00.240 --> 00:19:03.000
Now, when you talk about space and time and data,


00:19:03.000 --> 00:19:06.080
are we talking records in a time series database?


00:19:06.080 --> 00:19:08.720
Are we talking regular database or NoSQL?


00:19:08.720 --> 00:19:11.080
Or could it be even things like the log


00:19:11.080 --> 00:19:14.640
file from Engine X about the visitors to my website?


00:19:14.640 --> 00:19:15.960
What's the scope?


00:19:15.960 --> 00:19:17.400
The scope is actually very wide.


00:19:17.400 --> 00:19:20.440
So think about any data could be structured, semi-structured,


00:19:20.440 --> 00:19:22.600
unstructured data that you have.


00:19:22.600 --> 00:19:25.280
And as long as it have a geospatial aspect to it,


00:19:25.280 --> 00:19:26.840
a geospatial aspect to here means


00:19:26.840 --> 00:19:31.160
like the record or the document has, was, let's say,


00:19:31.160 --> 00:19:35.400
created in a specific location or represent an event that


00:19:35.400 --> 00:19:37.920
happened in a certain location at a certain time,


00:19:37.920 --> 00:19:41.680
or represent, again, an object or an asset


00:19:41.680 --> 00:19:44.640
that you monitor at different locations at different times.


00:19:44.640 --> 00:19:48.000
Whatever it is, it can be stored in any of these kind of formats.


00:19:48.000 --> 00:19:51.160
As long as it have this kind of geospatial aspect to it,


00:19:51.160 --> 00:19:54.480
you can definitely apply that kind of geospatial or space


00:19:54.480 --> 00:19:55.640
time lens to it.


00:19:55.640 --> 00:19:57.720
- Right, okay, so what are some of the questions


00:19:57.720 --> 00:19:58.760
you might answer with--


00:19:58.760 --> 00:19:59.680
- Questions, it varies.


00:19:59.680 --> 00:20:02.400
I mean, so there are, it depends on the type of the data,


00:20:02.400 --> 00:20:03.800
depends on the use case.


00:20:03.800 --> 00:20:05.720
You have a horizontal technology that enable you


00:20:05.720 --> 00:20:07.360
to enable so many industry verticals,


00:20:07.360 --> 00:20:08.960
but I'll give a couple of examples.


00:20:08.960 --> 00:20:10.720
- Yeah, yeah, make it concrete for us.


00:20:10.720 --> 00:20:13.040
- Absolutely, think about like a logistics company


00:20:13.040 --> 00:20:15.760
or a delivery company, like the most,


00:20:15.760 --> 00:20:18.120
I mean, well-known delivery companies, Amazon, right?


00:20:18.120 --> 00:20:22.480
I mean, you go to the app, you purchase an item or a product


00:20:22.480 --> 00:20:25.100
and then the whole journey of that product


00:20:25.100 --> 00:20:28.860
from the supplier to the warehouse, to the driver,


00:20:28.860 --> 00:20:31.300
Amazon driver, all the way that makes it to your door.


00:20:31.300 --> 00:20:32.860
There is a whole kind of,


00:20:32.860 --> 00:20:36.580
everything has a geospatial location to it, attached to it.


00:20:36.580 --> 00:20:37.940
The package is moving around,


00:20:37.940 --> 00:20:40.540
you're located somewhere, their house is a certain location.


00:20:40.540 --> 00:20:42.620
Handling the logistics behind all of that,


00:20:42.620 --> 00:20:45.460
understanding how things are,


00:20:45.460 --> 00:20:48.660
you're monitoring all these assets in space and time.


00:20:48.660 --> 00:20:51.940
As it reaches the door, this whole journey,


00:20:51.940 --> 00:20:54.660
there's a lot of kind of data processing,


00:20:54.660 --> 00:20:57.380
data analytics happening that you have to do through, again,


00:20:57.380 --> 00:21:00.340
the geospatial kind of aspect, the geospatial contextual


00:21:00.340 --> 00:21:01.540
aspect of things.


00:21:01.540 --> 00:21:02.820
So this is one example.


00:21:02.820 --> 00:21:05.600
Another example could be if you're like an insurance


00:21:05.600 --> 00:21:08.540
company and you're insuring homes, for example,


00:21:08.540 --> 00:21:12.660
and you want to understand what are the nearby kind of climate


00:21:12.660 --> 00:21:14.340
conditions, natural disaster conditions


00:21:14.340 --> 00:21:15.340
compared to your home.


00:21:15.340 --> 00:21:17.060
This also-- the home has a location.


00:21:17.060 --> 00:21:19.740
These kind of natural disaster, weather changes


00:21:19.740 --> 00:21:22.020
at different locations all the time.


00:21:22.020 --> 00:21:24.720
that will impact how you take decisions


00:21:24.720 --> 00:21:26.300
about insuring these homes.


00:21:26.300 --> 00:21:27.300
- Do I buy it?


00:21:27.300 --> 00:21:28.700
Do insurers want to insure it?


00:21:28.700 --> 00:21:29.540
Or do I have to pay for that?


00:21:29.540 --> 00:21:30.360
- Exactly.


00:21:30.360 --> 00:21:31.420
So that's another example again,


00:21:31.420 --> 00:21:33.420
that the space and time lens,


00:21:33.420 --> 00:21:36.180
or the geospatial aspect impacts your decision


00:21:36.180 --> 00:21:37.700
when it comes to taking,


00:21:37.700 --> 00:21:39.580
it's an important decision that you take in here.


00:21:39.580 --> 00:21:40.540
So that's another example.


00:21:40.540 --> 00:21:42.420
So these are just a couple of use cases,


00:21:42.420 --> 00:21:44.300
but there are tons of other use cases


00:21:44.300 --> 00:21:47.460
and use cases that may not exist even yet.


00:21:47.460 --> 00:21:50.780
So there's a lot of movement now into climate tech


00:21:50.780 --> 00:21:54.620
and AgTech, and we are, like, what we're trying to do


00:21:54.620 --> 00:21:57.420
at WeraBots is we're building the database infrastructure


00:21:57.420 --> 00:22:00.060
that enable the next generation climate tech


00:22:00.060 --> 00:22:01.500
and agriculture technology.


00:22:01.500 --> 00:22:03.760
- So they can ask the questions that they might have,


00:22:03.760 --> 00:22:06.140
but you already have the machinery to answer them.


00:22:06.140 --> 00:22:08.600
- We have machinery to answer them,


00:22:08.600 --> 00:22:10.140
and they build their own secret sauce


00:22:10.140 --> 00:22:11.980
on top of our infrastructure, yeah.


00:22:11.980 --> 00:22:13.540
- Kind of a framework platform?


00:22:13.540 --> 00:22:14.460
- Absolutely, yeah.


00:22:14.460 --> 00:22:15.300
- Got it. - Yeah.


00:22:15.300 --> 00:22:17.160
- So Python, where's Python fit in this story?


00:22:17.160 --> 00:22:18.380
- That's a great question.


00:22:18.380 --> 00:22:23.380
So geospatial data or the geospatial aspect of data


00:22:23.380 --> 00:22:24.460
has existed for so long.


00:22:24.460 --> 00:22:26.500
As you said, we live in the space-time continuum.


00:22:26.500 --> 00:22:29.420
Everything has a space-time aspect, geospatial aspect.


00:22:29.420 --> 00:22:31.740
And that's why developers already


00:22:31.740 --> 00:22:34.140
have APIs to interact with geospatial data.


00:22:34.140 --> 00:22:36.340
And these APIs, the language varies.


00:22:36.340 --> 00:22:39.460
So there are some people that use SQL to interact


00:22:39.460 --> 00:22:42.940
with the data, process the data in either SQL databases


00:22:42.940 --> 00:22:45.460
or any other kind of SQL processing engine.


00:22:45.460 --> 00:22:49.260
But a lot of the geospatial developers


00:22:49.260 --> 00:22:52.340
or people developing with geospatial data, they use Python.


00:22:52.340 --> 00:22:55.620
There are so many libraries that use Python to actually,


00:22:55.620 --> 00:22:57.780
example of these libraries is a library called Geopandas.


00:22:57.780 --> 00:22:59.220
It's a fantastic library.


00:22:59.220 --> 00:23:02.280
It's an extension to Pandas to kind of frangle


00:23:02.280 --> 00:23:03.820
and crunch geospatial data.


00:23:03.820 --> 00:23:06.400
- Ask questions about what things are contained in here,


00:23:06.400 --> 00:23:08.300
what things are outside of here, how far away is it?


00:23:08.300 --> 00:23:10.260
- Absolutely, so this is what Geopandas does.


00:23:10.260 --> 00:23:13.460
The only problem is that Geopandas is a library,


00:23:13.460 --> 00:23:14.540
has a great functionality,


00:23:14.540 --> 00:23:17.620
but again, it's not enterprise ready for the most part.


00:23:17.620 --> 00:23:19.620
It doesn't scale, all that kind of stuff.


00:23:19.620 --> 00:23:22.940
So what we do at WorldBots is that we provide


00:23:22.940 --> 00:23:26.700
SQL API to the user to run spatial queries on the data,


00:23:26.700 --> 00:23:29.180
but we also provide a spatial Python API.


00:23:29.180 --> 00:23:32.620
Like if you're using Geopandas, you can use the same API,


00:23:32.620 --> 00:23:35.500
do the heavy lifting enterprise scale,


00:23:35.500 --> 00:23:39.780
kind of processing of the data using our platform,


00:23:39.780 --> 00:23:43.260
and then do the major Geopandas kind of functionality


00:23:43.260 --> 00:23:46.380
you're familiar with to, again, do the geospatial processing


00:23:46.380 --> 00:23:46.880
with it.


00:23:46.880 --> 00:23:48.660
So this is how it fits within Python.


00:23:48.660 --> 00:23:51.260
And actually, looking at our-- we


00:23:51.260 --> 00:23:53.700
have an open source software called Apache Sedona.


00:23:53.700 --> 00:23:57.020
It's an Apache under the Apache license.


00:23:57.020 --> 00:24:00.600
And it has all these APIs, SQL and Python.


00:24:00.600 --> 00:24:02.340
And Python is the most popular.


00:24:02.340 --> 00:24:07.100
So it's been-- the Python package alone on PyPI


00:24:07.100 --> 00:24:10.780
is being downloaded a million times over on a monthly basis


00:24:10.780 --> 00:24:11.980
as we're speaking today.


00:24:11.980 --> 00:24:15.140
So definitely Python fits very well within our--


00:24:15.140 --> 00:24:16.340
- Yeah, that's awesome.


00:24:16.340 --> 00:24:17.180
- Absolutely, yeah.


00:24:17.180 --> 00:24:19.620
- So it sounds like your business, Wearbots,


00:24:19.620 --> 00:24:23.940
is a little bit following the open core model, you say?


00:24:23.940 --> 00:24:24.780
- Yes.


00:24:24.780 --> 00:24:25.600
- Let's round out our conversation here


00:24:25.600 --> 00:24:27.560
with talking about the business itself.


00:24:27.560 --> 00:24:29.060
How'd you get to startup, Ro?


00:24:29.060 --> 00:24:30.300
- We follow the open core model.


00:24:30.300 --> 00:24:31.380
You're totally right about that.


00:24:31.380 --> 00:24:33.700
So we have our open source software, Apache Sedona.


00:24:33.700 --> 00:24:35.620
It's available for free open source,


00:24:35.620 --> 00:24:38.040
very permissive license, the Apache license 2.0.


00:24:38.040 --> 00:24:39.340
And it's open source.


00:24:39.340 --> 00:24:41.120
It's also used in operational production


00:24:41.120 --> 00:24:42.360
in so many use cases.


00:24:42.360 --> 00:24:43.640
There are so many contributors outside.


00:24:43.640 --> 00:24:46.480
I'm the original creator of it, as well as my partner, Jia.


00:24:46.480 --> 00:24:47.480
We're both the original creators,


00:24:47.480 --> 00:24:49.520
but it's grew beyond us now.


00:24:49.520 --> 00:24:52.560
So there are like dozens, like 100 contributors now,


00:24:52.560 --> 00:24:53.600
something like this.


00:24:53.600 --> 00:24:56.320
And we use Sedona as an open core,


00:24:56.320 --> 00:24:58.360
but we build a whole platform around it.


00:24:58.360 --> 00:25:00.160
So if we want to think about like what we do


00:25:00.160 --> 00:25:03.240
compared to the other data platforms in the market,


00:25:03.240 --> 00:25:06.680
there are generic data platforms like Snowflake, Databricks.


00:25:06.680 --> 00:25:09.760
There are more specific, specialized data platforms


00:25:09.760 --> 00:25:13.100
like MongoDB for NoSQL, there's Neo4j for Graph.


00:25:13.100 --> 00:25:16.980
We are, Orobots is like the data platform for geospatial.


00:25:16.980 --> 00:25:19.580
So this is basically, and we use Apache Sedona


00:25:19.580 --> 00:25:22.140
as an open core to enable us to do all of this, yeah.


00:25:22.140 --> 00:25:25.420
- Fantastic, all right, well, congratulations on being here.


00:25:25.420 --> 00:25:26.260
- Yeah.


00:25:26.260 --> 00:25:27.800
- I wish you success with the whole project


00:25:27.800 --> 00:25:29.260
and thanks for coming on the show.


00:25:29.260 --> 00:25:30.520
- Thank you so much, I appreciate it.


00:25:30.520 --> 00:25:31.360
Looking forward to it.


00:25:31.360 --> 00:25:32.180
- Yeah, you bet.


00:25:32.180 --> 00:25:33.020
- Thank you so much.


00:25:33.020 --> 00:25:33.840
- Yep, bye.


00:25:33.840 --> 00:25:34.980
- Time to talk to Neptime,


00:25:34.980 --> 00:25:37.940
who have created Python programmable spreadsheets


00:25:37.940 --> 00:25:40.980
that are super powered with Python and AI.


00:25:40.980 --> 00:25:43.660
I gotta tell you, this product looks super awesome.


00:25:43.660 --> 00:25:46.100
It looks so much better than things like Google Sheets


00:25:46.100 --> 00:25:49.020
or Excel, and I can't wait to get a chance to play with it.


00:25:49.020 --> 00:25:49.820
Hey, guys.


00:25:49.820 --> 00:25:50.660
- Hello.


00:25:50.660 --> 00:25:51.940
- Welcome to Talk Python.


00:25:51.940 --> 00:25:52.780
- Yeah.


00:25:52.780 --> 00:25:53.620
- It's great to have you here.


00:25:53.620 --> 00:25:55.020
First, introduce yourselves.


00:25:55.020 --> 00:25:56.300
- Thanks for having us.


00:25:56.300 --> 00:25:57.140
I'm Dawa.


00:25:57.140 --> 00:25:59.900
I've been doing Python professionally for,


00:25:59.900 --> 00:26:01.780
I don't know, 20 years or so.


00:26:01.780 --> 00:26:02.620
- I'm Jack.


00:26:02.620 --> 00:26:04.460
I'm Dawa's co-founder.


00:26:04.460 --> 00:26:06.020
Been doing Python a little less than that,


00:26:06.020 --> 00:26:08.100
but met Dow about five years ago,


00:26:08.100 --> 00:26:10.780
and we founded Neptine about a year ago.


00:26:10.780 --> 00:26:14.220
- Yeah, so let's dive into Neptine.


00:26:14.220 --> 00:26:16.820
What's the product, what's the problem you're solving?


00:26:16.820 --> 00:26:18.620
- Yeah, the proposition that we have


00:26:18.620 --> 00:26:20.280
is pretty straightforward.


00:26:20.280 --> 00:26:25.220
We build a spreadsheet on top of a Jupyter notebook engine,


00:26:25.220 --> 00:26:30.120
which basically gives you all the data science superpowers


00:26:30.120 --> 00:26:31.560
that the notebook gives you


00:26:31.560 --> 00:26:33.700
in a familiar spreadsheet environment,


00:26:33.700 --> 00:26:35.360
which means that you can share your work


00:26:35.360 --> 00:26:38.000
as a Python programmer, much easier with people


00:26:38.000 --> 00:26:39.800
that are not familiar with notebooks


00:26:39.800 --> 00:26:42.240
because they have the universal data canvas


00:26:42.240 --> 00:26:43.080
of a spreadsheet.


00:26:43.080 --> 00:26:45.760
>> How interesting, because one of the big challenges


00:26:45.760 --> 00:26:48.240
data scientists often have is they work in Jupyter,


00:26:48.240 --> 00:26:50.600
they work in Jupyter, and then some executive


00:26:50.600 --> 00:26:52.560
wants to share it at a presentation,


00:26:52.560 --> 00:26:54.000
or they want to continue working on it,


00:26:54.000 --> 00:26:55.360
but they're not developers.


00:26:55.360 --> 00:26:56.280
So what do you do?


00:26:56.280 --> 00:26:58.700
You write an Excel file, and you hand that off,


00:26:58.700 --> 00:27:01.400
and then you re-import it somewhere, maybe?


00:27:01.400 --> 00:27:02.240
I don't know.


00:27:02.240 --> 00:27:04.400
>> Yeah, yeah, the typical flow is it needs very much


00:27:04.400 --> 00:27:08.160
like you write out a CSV, you email that to the person


00:27:08.160 --> 00:27:10.640
that is gonna put it into Excel,


00:27:10.640 --> 00:27:13.160
that person then creates a graph in Excel,


00:27:13.160 --> 00:27:15.060
screenshot that graph in Excel,


00:27:15.060 --> 00:27:18.280
and sends it to the person that puts it in the presentation


00:27:18.280 --> 00:27:19.880
and then the CEO can do something with it.


00:27:19.880 --> 00:27:22.040
- It goes either in PowerPoint or it goes in Word.


00:27:22.040 --> 00:27:23.120
Yeah, one of those two, right?


00:27:23.120 --> 00:27:24.160
Probably the picture.


00:27:24.160 --> 00:27:28.400
But that's a bunch of steps that are disassociated from data.


00:27:28.400 --> 00:27:29.880
So that's one problem, right?


00:27:29.880 --> 00:27:30.720
That's the one problem.


00:27:30.720 --> 00:27:34.000
But since no one really sees your product in action


00:27:34.000 --> 00:27:35.080
how we're talking here.


00:27:35.080 --> 00:27:36.720
Maybe just a bit of an explanation.


00:27:36.720 --> 00:27:39.360
Like it looks very much like Google Docs


00:27:39.360 --> 00:27:43.200
or one of the online Excel, I say Docs, I mean Sheets,


00:27:43.200 --> 00:27:44.960
like one of the online spreadsheet things.


00:27:44.960 --> 00:27:46.120
It doesn't look like something


00:27:46.120 --> 00:27:48.480
embedded into notebooks, right?


00:27:48.480 --> 00:27:49.320
- Yeah, that's right.


00:27:49.320 --> 00:27:51.840
It is a spreadsheet first and foremost.


00:27:51.840 --> 00:27:53.420
It looks a lot like Google Sheets,


00:27:53.420 --> 00:27:55.160
but you can run Python in it.


00:27:55.160 --> 00:27:56.000
- Yes.


00:27:56.000 --> 00:27:58.160
- You can run Python both directly in the spreadsheet cells.


00:27:58.160 --> 00:28:01.600
You can also define other functionality in Python


00:28:01.600 --> 00:28:02.760
and then run that with your spreadsheet.


00:28:02.760 --> 00:28:05.240
I mean, to me, that's where the magic is, right?


00:28:05.240 --> 00:28:10.600
Like Excel or sheets, the spreadsheets more broadly are super useful.


00:28:10.600 --> 00:28:14.440
But it's always like, "How do I do an if statement in this dreaded thing again?


00:28:14.440 --> 00:28:17.480
And how do I do a max with a condition?"


00:28:17.480 --> 00:28:21.960
You know, just all the programming aspect of going beyond just having raw data is just like,


00:28:21.960 --> 00:28:23.240
"Oh boy, this is..."


00:28:23.240 --> 00:28:24.760
And you just showed me an example where like,


00:28:24.760 --> 00:28:27.720
here you just write range of a thing and boom, it just writes that out.


00:28:27.720 --> 00:28:32.520
Or you write up Python tertiary statement and it just runs.


00:28:32.520 --> 00:28:36.160
- Right, yeah, but also common things in Spreadsheet


00:28:36.160 --> 00:28:38.200
are hard, are data cleaning, right?


00:28:38.200 --> 00:28:39.920
You get some data from somewhere,


00:28:39.920 --> 00:28:42.600
and it's not quite right, and most of the time,


00:28:42.600 --> 00:28:44.280
people end up doing this by hand.


00:28:44.280 --> 00:28:46.860
And that's fine the first time you do it,


00:28:46.860 --> 00:28:49.600
the second time and the third time, it gets very annoying.


00:28:49.600 --> 00:28:51.540
While if you just write a little bit of Python,


00:28:51.540 --> 00:28:53.900
you can clean data like that,


00:28:53.900 --> 00:28:55.440
and then the next time you have the data,


00:28:55.440 --> 00:28:58.200
you just rerun the script, and it's clean again.


00:28:58.200 --> 00:29:00.920
So that's a very powerful way of doing this thing,


00:29:00.920 --> 00:29:03.480
and we have a full Python environment.


00:29:03.480 --> 00:29:06.360
It's not just a lightweight, you know, runs in the browser.


00:29:06.360 --> 00:29:08.840
You can do pip install anything you want.


00:29:08.840 --> 00:29:11.080
So you can connect to any API out there,


00:29:11.080 --> 00:29:13.720
use any data, export any data.


00:29:13.720 --> 00:29:14.800
It's a complete environment.


00:29:14.800 --> 00:29:16.400
- Yeah, how interesting.


00:29:16.400 --> 00:29:19.440
There's a little window where you can write straight Python,


00:29:19.440 --> 00:29:22.440
you know, some function that does arbitrary Python,


00:29:22.440 --> 00:29:24.520
and then you can invoke it like a function


00:29:24.520 --> 00:29:25.680
in the spreadsheet, right?


00:29:25.680 --> 00:29:27.120
- Exactly, exactly.


00:29:27.120 --> 00:29:29.160
- And you can talk to things on the internet?


00:29:29.160 --> 00:29:30.880
For example, I could do web scraping there?


00:29:30.880 --> 00:29:33.920
- We'll call an API, like a currency API?


00:29:33.920 --> 00:29:35.240
- Yeah, exactly.


00:29:35.240 --> 00:29:36.080
- Okay.


00:29:36.080 --> 00:29:38.280
- That's, yeah, any REST call you want to make,


00:29:38.280 --> 00:29:41.160
you just import requests and go for it.


00:29:41.160 --> 00:29:42.840
- Wow, so where's it run?


00:29:42.840 --> 00:29:45.960
Is this a PyScript, Pyodide, is this scoped,


00:29:45.960 --> 00:29:47.880
is this Docker on a server?


00:29:47.880 --> 00:29:51.040
- It's all running in a Docker container, server side.


00:29:51.040 --> 00:29:51.920
That's how it works.


00:29:51.920 --> 00:29:54.980
And that's kind of, we do that for maximum flexibility,


00:29:54.980 --> 00:29:55.880
maximum capability.


00:29:55.880 --> 00:29:58.240
So it means that anything you can install,


00:29:58.240 --> 00:29:59.960
anything you can run on a Jupyter notebook


00:29:59.960 --> 00:30:02.600
running on Linux, you can run in Neptune.


00:30:02.600 --> 00:30:05.080
- I see, so we get full Python 3.11 or 3.10


00:30:05.080 --> 00:30:05.920
or whatever it is.


00:30:05.920 --> 00:30:09.860
- Yep, yep, and we ship with a bunch of useful packages


00:30:09.860 --> 00:30:12.480
pre-installed, but if you want to install something else,


00:30:12.480 --> 00:30:15.160
you just open up our dependency management window,


00:30:15.160 --> 00:30:17.160
install anything else you want to use.


00:30:17.160 --> 00:30:19.520
It's all very manageable, very configurable.


00:30:19.520 --> 00:30:21.800
- Well, it looks super good to me.


00:30:21.800 --> 00:30:23.520
What's the user model?


00:30:23.520 --> 00:30:25.680
Do I go and create an account on your site


00:30:25.680 --> 00:30:27.880
and it's kind of like Google Docs, or what's the story?


00:30:27.880 --> 00:30:28.920
- Yep, exactly.


00:30:28.920 --> 00:30:29.760
You can try it out.


00:30:29.760 --> 00:30:31.880
You can go to neptine.com in the upper right.


00:30:31.880 --> 00:30:32.800
Just click log in.


00:30:32.800 --> 00:30:33.640
You can create an account.


00:30:33.640 --> 00:30:36.760
It's totally free to use, the free tier.


00:30:36.760 --> 00:30:38.060
Yeah, give it a shot.


00:30:38.060 --> 00:30:38.900
- Awesome. - Yep.


00:30:38.900 --> 00:30:40.240
- All right, final question.


00:30:40.240 --> 00:30:42.120
How'd you guys get here to start up Rho?


00:30:42.120 --> 00:30:45.200
Everyone wants to build something amazing with open source,


00:30:45.200 --> 00:30:47.360
but how did you turn that into a business


00:30:47.360 --> 00:30:49.320
and something you can put your full time into?


00:30:49.320 --> 00:30:52.320
- I mean, I guess we're kind of lucky


00:30:52.320 --> 00:30:54.380
in that when we started,


00:30:54.380 --> 00:30:58.800
I pitched it to a bunch of people


00:30:58.800 --> 00:31:03.260
that due to no fault of their own got into some money.


00:31:03.260 --> 00:31:05.740
And they were willing to back us.


00:31:05.740 --> 00:31:09.620
And then later we joined YC for the winter batch.


00:31:09.620 --> 00:31:14.660
And in that process, we got a little bit of publicity


00:31:14.660 --> 00:31:16.420
and were picked up for the startup role.


00:31:16.420 --> 00:31:17.700
- Just to add to that too,


00:31:17.700 --> 00:31:19.820
based on our experience in Y Combinator,


00:31:19.820 --> 00:31:21.900
there are lots of open source tools out there


00:31:21.900 --> 00:31:25.340
that are able to get started on some commercial path


00:31:25.340 --> 00:31:27.820
just based on the community that they're building,


00:31:27.820 --> 00:31:28.940
based on the users.


00:31:28.940 --> 00:31:30.220
- Right, right.


00:31:30.220 --> 00:31:31.140
- It's a very good path.


00:31:31.140 --> 00:31:33.620
- I feel like this whole open core business model


00:31:33.620 --> 00:31:35.800
has really taken off in the last couple years


00:31:35.800 --> 00:31:38.460
where it used to be a PayPal donate button


00:31:38.460 --> 00:31:41.660
and now it's a legitimate offering that businesses will buy


00:31:41.660 --> 00:31:43.020
and it's good.


00:31:43.020 --> 00:31:44.160
I think it's very positive.


00:31:44.160 --> 00:31:46.820
So I'm really impressed with what you guys built.


00:31:46.820 --> 00:31:47.780
I think it's awesome.


00:31:47.780 --> 00:31:49.260
I think people really like it.


00:31:49.260 --> 00:31:50.760
Yeah, so good luck.


00:31:50.760 --> 00:31:51.620
Thanks for being here.


00:31:51.620 --> 00:31:52.700
- Thank you so much.


00:31:52.700 --> 00:31:53.580
- Now up is Nixle.


00:31:53.580 --> 00:31:55.960
We have Federico Garza and Christian Chula


00:31:55.960 --> 00:31:58.280
here to tell us about their time series startup,


00:31:58.280 --> 00:31:59.620
ready to make predictions


00:31:59.620 --> 00:32:02.400
based on an open source time series ecosystem.


00:32:02.400 --> 00:32:03.560
- Hey there. - Hello.


00:32:03.560 --> 00:32:04.680
- Welcome to Talk Python.


00:32:04.680 --> 00:32:05.520
- Hello, hello.


00:32:05.520 --> 00:32:07.360
- Hello, let's start with introductions.


00:32:07.360 --> 00:32:08.200
Who are y'all?


00:32:08.200 --> 00:32:11.600
- So I am Christian Chalhoun, I'm a co-founder of Nixla.


00:32:11.600 --> 00:32:12.420
- Yep.


00:32:12.420 --> 00:32:15.080
- Hello, I'm Fede, I'm CTO and co-founder of Nixla.


00:32:15.080 --> 00:32:16.200
- Nice to meet you both.


00:32:16.200 --> 00:32:18.000
Welcome, welcome to the show.


00:32:18.000 --> 00:32:20.020
Really great to have you here at PyCon.


00:32:20.020 --> 00:32:23.080
And yeah, let's start with the problem


00:32:23.080 --> 00:32:24.240
y'all are trying to solve.


00:32:24.240 --> 00:32:28.100
OK, yeah, so at NixLab, what we do is time series forecasting.


00:32:28.100 --> 00:32:31.040
So as you know, time series forecasting


00:32:31.040 --> 00:32:34.280
is a very relevant task that a lot of companies


00:32:34.280 --> 00:32:36.880
and practitioners need to solve.


00:32:36.880 --> 00:32:40.080
Essentially, predicting future values of something, right?


00:32:40.080 --> 00:32:42.960
It could be demand of a product or the weather.


00:32:42.960 --> 00:32:45.240
So there are many use cases for forecasting.


00:32:45.240 --> 00:32:47.560
It's a very common problem in industry.


00:32:47.560 --> 00:32:49.720
And essentially, we want to provide tools


00:32:49.720 --> 00:32:51.880
to developers, engineers, researchers


00:32:51.880 --> 00:32:53.840
to be able to do this more efficiently


00:32:53.840 --> 00:32:56.320
and with good practices.


00:32:56.320 --> 00:32:58.280
And yeah, that's mostly it.


00:32:58.280 --> 00:32:58.800
Right, OK.


00:32:58.800 --> 00:33:01.440
So is this like a Python API?


00:33:01.440 --> 00:33:03.240
Is this a database?


00:33:03.240 --> 00:33:04.920
What is the actual--


00:33:04.920 --> 00:33:06.000
That's how it looks like.


00:33:06.000 --> 00:33:07.040
Yeah, the product, I guess.


00:33:07.040 --> 00:33:07.540
The product.


00:33:07.540 --> 00:33:11.400
So we have an ecosystem of Python libraries.


00:33:11.400 --> 00:33:14.600
And we have different libraries for different use cases.


00:33:14.600 --> 00:33:17.880
For example, we have the stats forecast library,


00:33:17.880 --> 00:33:22.320
which specializes in statistical econometric models.


00:33:22.320 --> 00:33:27.840
And also, we have more complex models and libraries


00:33:27.840 --> 00:33:30.960
for deep learning and machine learning applications.


00:33:30.960 --> 00:33:31.600
Yeah.


00:33:31.600 --> 00:33:32.100
Nice.


00:33:32.100 --> 00:33:34.320
And have you trained some of these models yourself


00:33:34.320 --> 00:33:36.560
on certain data, things like that?


00:33:36.560 --> 00:33:38.320
Or where do you get the models from?


00:33:38.320 --> 00:33:40.400
The idea behind the libraries is that you


00:33:40.400 --> 00:33:44.040
can use whatever your data is.


00:33:44.040 --> 00:33:48.360
The only restriction is that it must be time series data,


00:33:48.360 --> 00:33:50.440
but you can use whatever data you have.


00:33:50.440 --> 00:33:50.940
Yeah.


00:33:50.940 --> 00:33:51.560
OK.


00:33:51.560 --> 00:33:52.160
Fantastic.


00:33:52.160 --> 00:33:54.200
And where's its data?


00:33:54.200 --> 00:33:57.400
Python's at the heart of so much data processing these days.


00:33:57.400 --> 00:34:01.040
And I guess, give a shout out to all the different Python


00:34:01.040 --> 00:34:02.880
packages that are already out there, maybe.


00:34:02.880 --> 00:34:05.480
You want to just give a rundown on those and what they're for,


00:34:05.480 --> 00:34:06.520
and then talk about them?


00:34:06.520 --> 00:34:07.020
Yeah.


00:34:07.020 --> 00:34:10.360
So we have like six packages right now.


00:34:10.360 --> 00:34:13.480
They're all libraries on GitHub that you can pip install


00:34:13.480 --> 00:34:14.880
or install it with Conda.


00:34:14.880 --> 00:34:17.320
And essentially, they focus on different ways


00:34:17.320 --> 00:34:18.520
of approaching forecasting.


00:34:18.520 --> 00:34:20.000
And they're essentially libraries


00:34:20.000 --> 00:34:21.640
build on Python.


00:34:21.640 --> 00:34:23.960
Depending on someone build on Numba,


00:34:23.960 --> 00:34:25.160
other methods are in Python.


00:34:25.160 --> 00:34:26.400
Oh, you guys are using Numba?


00:34:26.400 --> 00:34:27.280
Oh, OK.


00:34:27.280 --> 00:34:28.560
And it makes a huge difference?


00:34:28.560 --> 00:34:29.560
Yeah, it makes a difference.


00:34:29.560 --> 00:34:30.080
All right.


00:34:30.080 --> 00:34:32.840
Tell people really, really quickly, what is Numba?


00:34:32.840 --> 00:34:36.160
So Numba is this library which allows


00:34:36.160 --> 00:34:39.240
you to compile just in time your code.


00:34:39.240 --> 00:34:43.040
So it's a lot faster than using just plain Python.


00:34:43.040 --> 00:34:45.000
And how easy is it to use?


00:34:45.000 --> 00:34:45.960
It's really easy.


00:34:45.960 --> 00:34:46.680
OK.


00:34:46.680 --> 00:34:53.860
In fact, we wanted to make our library more efficient and more


00:34:53.860 --> 00:34:58.760
faster, and we did it in like two weeks only using Numba.


00:34:58.760 --> 00:35:00.760
So it was really easy to use.


00:35:00.760 --> 00:35:01.520
Yeah, awesome.


00:35:01.520 --> 00:35:02.120
Awesome.


00:35:02.120 --> 00:35:05.400
And some other packages uses PyTorch.


00:35:05.400 --> 00:35:07.520
So like our deep learning methods,


00:35:07.520 --> 00:35:10.800
neural forecasting approaches are built on PyTorch,


00:35:10.800 --> 00:35:12.120
or PyTorch Lightning.


00:35:12.120 --> 00:35:13.480
Yeah, fantastic.


00:35:13.480 --> 00:35:16.020
So would you say that your business model is something


00:35:16.020 --> 00:35:18.780
of an open core model where it's kind of built


00:35:18.780 --> 00:35:20.660
on top of these libraries and--


00:35:20.660 --> 00:35:21.500
- Absolutely, yeah.


00:35:21.500 --> 00:35:22.860
Yeah, so for now we have been focusing


00:35:22.860 --> 00:35:25.760
on building these libraries, the community.


00:35:25.760 --> 00:35:27.660
We have a very active community on Slack


00:35:27.660 --> 00:35:30.460
and people that use us and contribute with our code.


00:35:30.460 --> 00:35:34.500
And we are building services on top of these libraries,


00:35:34.500 --> 00:35:37.980
like enterprise solutions or hosting computation


00:35:37.980 --> 00:35:40.220
or even simplifying the usage further.


00:35:40.220 --> 00:35:42.420
So for example, APIs where you can just simply


00:35:42.420 --> 00:35:43.580
pass your data.


00:35:43.580 --> 00:35:45.260
I want to know what is gonna happen next


00:35:45.260 --> 00:35:46.620
on this data.


00:35:46.620 --> 00:35:48.100
- Do you pass it some historical data


00:35:48.100 --> 00:35:49.500
and ask it to make predictions?


00:35:49.500 --> 00:35:51.860
- Make predictions and then we produce the predictions.


00:35:51.860 --> 00:35:52.700
- Okay.


00:35:52.700 --> 00:35:54.460
- Yeah, this is one of types.


00:35:54.460 --> 00:35:56.820
So we are working on these different applications


00:35:56.820 --> 00:35:57.660
and services.


00:35:57.660 --> 00:35:59.060
- Awesome, it sounds really cool.


00:35:59.060 --> 00:35:59.880
- Thanks.


00:35:59.880 --> 00:36:02.340
- So final question, how'd you make your way over here


00:36:02.340 --> 00:36:03.740
to startup row at PyCon?


00:36:03.740 --> 00:36:06.680
Like how'd you start your company and how'd you get here?


00:36:06.680 --> 00:36:09.420
- Yeah, it has been a long journey.


00:36:09.420 --> 00:36:12.300
Like sorry, I mean, we have been like for a year


00:36:12.300 --> 00:36:16.900
working on these libraries and services.


00:36:16.900 --> 00:36:20.220
And right now, we are focusing on building the startup.


00:36:20.220 --> 00:36:23.140
We want to be able to do this full time for a long time


00:36:23.140 --> 00:36:27.380
and really build something that can help people.


00:36:27.380 --> 00:36:30.060
Yeah, are you looking to offer an API,


00:36:30.060 --> 00:36:33.180
like an open AI sort of model, or running


00:36:33.180 --> 00:36:34.460
people's code as a service?


00:36:34.460 --> 00:36:36.340
Or where are you thinking you're going?


00:36:36.340 --> 00:36:39.300
Yeah, yeah, that's definitely one of the options.


00:36:39.300 --> 00:36:42.340
But yeah, we are finishing our funding runs.


00:36:42.340 --> 00:36:44.700
And once we finish that--


00:36:44.700 --> 00:36:46.980
- Funding helps a lot on software development, right?


00:36:46.980 --> 00:36:48.060
- Funding helps a lot on development.


00:36:48.060 --> 00:36:50.660
And yeah, so we're exploring different venues.


00:36:50.660 --> 00:36:53.180
And there's very exciting things to come.


00:36:53.180 --> 00:36:54.620
- All right, well, we all wish you


00:36:54.620 --> 00:36:56.260
the best of luck on your project.


00:36:56.260 --> 00:36:58.100
And thanks for taking the time to talk to us.


00:36:58.100 --> 00:36:59.340
- No, thank you for inviting me.


00:36:59.340 --> 00:37:00.180
- Yeah, you bet.


00:37:00.180 --> 00:37:01.140
- Thanks. - Bye.


00:37:01.140 --> 00:37:03.020
- We'll speak with Piero Molina from Predebase.


00:37:03.020 --> 00:37:05.020
They empower you to rapidly build, iterate,


00:37:05.020 --> 00:37:06.860
and deploy ML models


00:37:06.860 --> 00:37:09.220
with their declarative machine learning platform.


00:37:09.220 --> 00:37:14.220
- Piero, welcome to Talk Python to Me.


00:37:14.220 --> 00:37:16.080
- Thank you very much for having me.


00:37:16.080 --> 00:37:17.500
- Yeah, it's fantastic to have you here.


00:37:17.500 --> 00:37:19.060
Quick introduction for everyone.


00:37:19.060 --> 00:37:20.460
- Sure, so I'm Piero and I'm the CEO of PrediBase.


00:37:20.460 --> 00:37:23.700
Can tell you about PrediBase in a second.


00:37:23.700 --> 00:37:25.300
I'm also the author of Ludwig,


00:37:25.300 --> 00:37:26.660
which is an open source Python package


00:37:26.660 --> 00:37:29.180
for training machine learning models.


00:37:29.180 --> 00:37:32.780
- Awesome, well, great to meet you.


00:37:32.780 --> 00:37:34.340
Tell us about your company.


00:37:34.340 --> 00:37:35.660
- Yeah, so PrediBase tries to solve the problem


00:37:34.940 --> 00:37:39.940
of the inefficiency in the development process


00:37:39.940 --> 00:37:43.420
of machine learning projects.


00:37:43.420 --> 00:37:44.860
Usually they take anywhere from six months


00:37:44.860 --> 00:37:47.700
to a year or even more, depending on the organizations,


00:37:47.700 --> 00:37:50.460
their degree of expertise


00:37:50.460 --> 00:37:53.260
in developing machine learning projects.


00:37:53.260 --> 00:37:55.060
And so with using our platform,


00:37:55.060 --> 00:37:57.460
companies can get down to,


00:37:57.460 --> 00:37:59.420
like from months to days of development,


00:37:59.420 --> 00:38:02.220
and that makes them substantially faster.


00:38:02.220 --> 00:38:04.220
Each machine learning project becomes cheaper


00:38:02.020 --> 00:38:05.180
and organizations and teams can do many more


00:38:05.180 --> 00:38:06.300
machine learning projects.


00:38:06.300 --> 00:38:08.760
- Yeah, I mean training is where the time


00:38:08.760 --> 00:38:10.140
and the money is spent.


00:38:10.140 --> 00:38:11.340
Yeah, at least the computation,


00:38:11.340 --> 00:38:12.820
I mean paying developers is expensive.


00:38:12.820 --> 00:38:13.660
- Right, right, right.


00:38:13.660 --> 00:38:16.880
- But in terms of, people say machine learning or AI,


00:38:16.880 --> 00:38:18.100
it takes all this energy,


00:38:18.100 --> 00:38:20.060
and it does take energy to answer questions,


00:38:20.060 --> 00:38:22.660
but it really takes energy to train the models, right?


00:38:22.660 --> 00:38:24.260
- Yeah, yeah, definitely.


00:38:24.260 --> 00:38:25.940
Training the models is a huge part.


00:38:25.940 --> 00:38:28.740
Managing the data and putting it in a shape and form


00:38:28.740 --> 00:38:30.540
that is useful for training the models


00:38:30.540 --> 00:38:35.180
is also another big piece of the reason why these teams


00:38:35.180 --> 00:38:37.480
take so long to develop models.


00:38:37.480 --> 00:38:41.880
And also, usually there's several people


00:38:41.880 --> 00:38:43.340
involved in the process.


00:38:43.340 --> 00:38:44.580
There are different stakeholders.


00:38:44.580 --> 00:38:46.820
Some of them are more machine learning oriented,


00:38:46.820 --> 00:38:48.060
some of them are more engineers,


00:38:48.060 --> 00:38:51.100
and some of them may be analysts or product developers


00:38:51.100 --> 00:38:53.220
that need to use the models downstream.


00:38:53.220 --> 00:38:57.000
And so the handoff of the artifacts


00:38:57.000 --> 00:39:02.000
and of the whole process between these different people


00:39:02.000 --> 00:39:06.240
is also a source of a lot of friction.


00:39:06.240 --> 00:39:08.660
And with the platform that we are building,


00:39:08.660 --> 00:39:10.160
we are trying also to reduce the friction


00:39:10.160 --> 00:39:11.720
as much as possible.


00:39:11.720 --> 00:39:12.680
- Yeah, sounds great.


00:39:12.680 --> 00:39:13.800
Is it about managing that workflow


00:39:13.800 --> 00:39:16.640
or is it about things like transfer learning


00:39:16.640 --> 00:39:19.520
and other more theoretical ideas?


00:39:19.520 --> 00:39:22.960
Like where exactly are you doing this?


00:39:22.960 --> 00:39:24.600
- Yeah, so to give you a little bit more of a picture,


00:39:22.480 --> 00:39:27.480
I would say where we are starting from is from Ludwig,


00:39:27.480 --> 00:39:31.020
which is his open source project.


00:39:31.020 --> 00:39:32.480
And what Ludwig allows people to do,


00:39:32.480 --> 00:39:34.400
it allows to define machine learning models


00:39:34.400 --> 00:39:37.180
and pipelines in terms of a configuration file.


00:39:37.180 --> 00:39:40.720
So you don't need to write a little level,


00:39:40.720 --> 00:39:42.760
PyTorch or TensorFlow code.


00:39:42.760 --> 00:39:44.600
You can just write a configuration


00:39:44.600 --> 00:39:46.000
that maps with the schema of your data.


00:39:46.000 --> 00:39:49.360
And that's literally all you need to get started.


00:39:49.360 --> 00:39:51.640
So it makes it substantially easier and faster


00:39:48.520 --> 00:39:53.520
to get started training models.


00:39:53.520 --> 00:39:55.360
Then if you are more experienced,


00:39:55.360 --> 00:39:56.920
you can go down and change more than 700 parameters


00:39:56.920 --> 00:40:00.340
that are there and change all the details of training,


00:40:00.340 --> 00:40:04.260
of the models themselves, the pre-processing,


00:40:04.260 --> 00:40:06.320
so you have full flexibility and control.


00:40:06.320 --> 00:40:08.280
And you can also go all the way down to the Python code,


00:40:08.280 --> 00:40:12.140
add your own classes, register them from the decorator,


00:40:12.140 --> 00:40:15.180
and they become available in the configuration.


00:40:15.180 --> 00:40:17.440
This is what we have in the open source.


00:40:14.840 --> 00:40:19.840
And what we're building on top of it is all the,


00:40:19.840 --> 00:40:23.060
again, you can think about this,


00:40:23.060 --> 00:40:25.100
for people who may be familiar with Terraform,


00:40:25.100 --> 00:40:26.980
for instance, what Terraform does for infrastructure,


00:40:26.980 --> 00:40:29.640
so defining your infrastructure through a configuration file,


00:40:29.640 --> 00:40:32.740
Ludwig does it for machine learning.


00:40:32.740 --> 00:40:34.740
That's a good analogy.


00:40:34.740 --> 00:40:35.980
And so, Pride Debase, what does it do?


00:40:35.980 --> 00:40:37.220
It uses this basic concept of models


00:40:37.220 --> 00:40:40.700
as configuration, really, and builds on top of it


00:40:40.700 --> 00:40:44.020
all sorts of infrastructure that is needed


00:40:40.700 --> 00:40:43.300
for organizations that are big enterprises


00:40:43.300 --> 00:40:44.520
to use it in the cloud.


00:40:44.520 --> 00:40:48.660
So we have, like, we can deploy on cloud environments.


00:40:48.660 --> 00:40:51.360
We abstract away the infrastructure aspect of it.


00:40:51.360 --> 00:40:53.460
So you can run the training of your models


00:40:53.460 --> 00:40:56.200
and inference on either one small CPU machines


00:40:56.200 --> 00:40:59.000
or a thousand large GPU machines,


00:40:59.000 --> 00:41:00.460
and you don't need to think about it, basically.


00:41:00.460 --> 00:41:01.300
- Oh, cool.


00:41:01.300 --> 00:41:02.580
So I just say train it,


00:41:02.580 --> 00:41:04.820
and if you happen to have GPUs available,


00:41:04.820 --> 00:41:05.700
you might use them?


00:41:05.700 --> 00:41:06.540
- Right, absolutely, yeah.


00:41:06.540 --> 00:41:07.860
- Okay, excellent.


00:41:07.860 --> 00:41:11.500
So where does Predibase fit into this?


00:41:11.500 --> 00:41:14.420
Like where's the business side of this product?


00:41:14.420 --> 00:41:15.340
- Right, right.


00:41:15.340 --> 00:41:18.980
I would say Predibase makes it easy for teams, really,


00:41:18.980 --> 00:41:21.120
to develop machine learning products, right?


00:41:21.120 --> 00:41:23.500
As if, Ludwig, you can define your own configurations,


00:41:23.500 --> 00:41:26.260
but it's like, you know, a single user experience,


00:41:26.260 --> 00:41:27.340
if you want, right?


00:41:27.340 --> 00:41:29.740
Predibase becomes like a multi-user experience,


00:41:29.740 --> 00:41:31.760
where again, you deploy on the cloud,


00:41:31.760 --> 00:41:33.780
and you can connect with data sources.


00:41:33.780 --> 00:41:35.620
In Ludwig, you provide like a CSV file,


00:41:35.620 --> 00:41:37.400
or a data frame, a Pandas data frame,


00:41:37.400 --> 00:41:42.400
With PrediBase, you can connect to Snowflake,


00:41:42.400 --> 00:41:45.840
to Databricks, to MySQL databases,


00:41:45.840 --> 00:41:48.620
to S3 buckets, and do all of those things.


00:41:48.620 --> 00:41:50.760
And also there's a notion of model repositories,


00:41:50.760 --> 00:41:53.660
because when you start to train a model,


00:41:53.660 --> 00:41:55.480
the first one is never the last one that you train.


00:41:55.480 --> 00:41:57.640
And so, in an analogy to Git, really,


00:41:57.640 --> 00:42:00.520
in Git you have commits and you have teams


00:42:00.520 --> 00:42:02.440
doing different commits and collaborating together.


00:42:02.440 --> 00:42:04.520
In our platform you have multiple models


00:42:04.520 --> 00:42:07.020
that are configurations,


00:42:03.360 --> 00:42:05.200
multiple people training new different models,


00:42:05.200 --> 00:42:06.240
spawning from the previous ones,


00:42:06.240 --> 00:42:08.240
so there's a lineage of models


00:42:08.240 --> 00:42:10.240
that can be compared among each other.


00:42:10.240 --> 00:42:11.680
And then the very last piece is that


00:42:11.680 --> 00:42:13.480
we make it easy to deploy these models


00:42:13.480 --> 00:42:14.560
with one click of a button.


00:42:14.560 --> 00:42:17.320
So you go from the data to the deployed model


00:42:17.320 --> 00:42:18.600
very, very quickly.


00:42:18.600 --> 00:42:19.760
- Fantastic, it sounds great.


00:42:19.760 --> 00:42:22.200
So final question, a lot of people out there


00:42:22.200 --> 00:42:24.360
working in open source, they'd love to


00:42:24.360 --> 00:42:26.320
be here on Startup Row talking about their startup


00:42:26.320 --> 00:42:28.120
based on their project.


00:42:28.120 --> 00:42:30.280
It sounds like what you built is based on


00:42:30.280 --> 00:42:31.960
the open core model, which seems to be


00:42:31.960 --> 00:42:36.960
really, really successful these days.


00:42:36.960 --> 00:42:39.120
Tell us a bit about how you got here.


00:42:39.120 --> 00:42:41.360
Right, so basically I think it started


00:42:41.360 --> 00:42:43.720
from the open source, really.


00:42:43.720 --> 00:42:45.720
I started developing Ludwig when I was working at Uber.


00:42:45.720 --> 00:42:49.840
And initially my own project was a way for myself


00:42:49.840 --> 00:42:54.000
for being more efficient and working


00:42:54.000 --> 00:42:55.760
on the next machine learning project


00:42:55.760 --> 00:42:57.440
without reinventing the wheel every single time.


00:42:57.440 --> 00:42:59.520
And I built that because I'm lazy


00:42:59.520 --> 00:43:01.520
and I don't want, when I do one thing more than twice,


00:42:59.880 --> 00:43:04.880
then I automate it for myself, really.


00:43:04.880 --> 00:43:06.280
- Productive laziness or something like this.


00:43:06.280 --> 00:43:09.640
- And so then other people in the company started using it,


00:43:09.640 --> 00:43:12.920
and that convinced me that making it open source,


00:43:12.920 --> 00:43:15.240
also because it was built on top of other


00:43:15.240 --> 00:43:17.000
open source projects, would have been a great way


00:43:17.000 --> 00:43:19.120
to both have people contribute to it and improve it,


00:43:19.120 --> 00:43:21.520
and also give back to the community,


00:43:21.520 --> 00:43:22.960
because again, I was using myself


00:43:22.960 --> 00:43:24.840
a lot of open source projects to build it.


00:43:24.840 --> 00:43:27.360
And then from there, I made it so that we donated


00:43:26.480 --> 00:43:31.480
the project to Linux Foundation.


00:43:31.480 --> 00:43:32.920
So now it's backed by the Linux Foundation


00:43:32.920 --> 00:43:34.760
and also the governance is open


00:43:34.760 --> 00:43:36.920
as opposed to what it was before when I was at Uber.


00:43:36.920 --> 00:43:39.200
And from there, actually, I met a bunch of people,


00:43:39.200 --> 00:43:42.560
some of my co-founders at the company,


00:43:42.560 --> 00:43:44.440
thanks to the project.


00:43:44.440 --> 00:43:45.760
And we decided that,


00:43:45.760 --> 00:43:47.680
so for instance, one of them is Professor Chris Sack


00:43:47.680 --> 00:43:49.520
from Stanford.


00:43:49.520 --> 00:43:50.120
He was developing a similar system that was closed


00:43:50.120 --> 00:43:52.960
internally at Apple.


00:43:52.960 --> 00:43:54.160
And so we said, "This thing worked at Uber,


00:43:54.160 --> 00:43:55.960
worked at Apple, works in the open source.


00:43:53.280 --> 00:43:54.920
let's make a company out of this, right?


00:43:54.920 --> 00:43:55.880
- Fantastic, yeah.


00:43:55.880 --> 00:43:58.640
Solving some problems for these big teams, right?


00:43:58.640 --> 00:44:01.320
Excellent, well, best of luck on your company.


00:44:01.320 --> 00:44:02.160
- Thank you very much, man.


00:44:02.160 --> 00:44:03.000
- Yeah, thanks for being here.


00:44:03.000 --> 00:44:04.200
- Yeah, absolutely, a pleasure.


00:44:04.200 --> 00:44:05.120
- Yeah, bye. - Thank you so much.


00:44:05.120 --> 00:44:07.040
- We'll finish up our stroll down startup lane


00:44:07.040 --> 00:44:08.800
by talking with the folks at Pinecone.


00:44:08.800 --> 00:44:10.920
We have Nikhil Rao to talk about


00:44:10.920 --> 00:44:13.960
the PurePython Fullstack web app platform


00:44:13.960 --> 00:44:14.800
that they've built.


00:44:14.800 --> 00:44:16.400
Nikhil, welcome to Talk Python.


00:44:16.400 --> 00:44:17.320
- Yeah, great to be here.


00:44:17.320 --> 00:44:18.160
Thanks for having me.


00:44:18.160 --> 00:44:19.200
- It's great to have you here.


00:44:19.200 --> 00:44:22.220
I'm loving going through all the different projects


00:44:22.220 --> 00:44:24.380
on startup row and talking about him


00:44:24.380 --> 00:44:25.680
and shedding a little light on him.


00:44:25.680 --> 00:44:26.980
So happy to have you here.


00:44:26.980 --> 00:44:29.160
Yeah, yeah, give a quick introduction on yourself.


00:44:29.160 --> 00:44:32.540
- Yeah, so I'm Nikhil, I'm the CEO co-founder of Pinecone


00:44:32.540 --> 00:44:35.460
and we're building a way to make web apps in pure Python.


00:44:35.460 --> 00:44:37.180
So we have an open source framework


00:44:37.180 --> 00:44:38.740
and anyone can install this


00:44:38.740 --> 00:44:40.780
and basically start creating their apps


00:44:40.780 --> 00:44:42.700
front end and back end using Python.


00:44:42.700 --> 00:44:45.500
Our company went through the recent Y Combinator batch


00:44:45.500 --> 00:44:47.700
that just ended the winter 23 batch.


00:44:47.700 --> 00:44:49.380
And recently we raised our seed round


00:44:49.380 --> 00:44:51.180
and starting to hire out and pretty much grow out


00:44:51.180 --> 00:44:52.740
your project and company from here.


00:44:52.740 --> 00:44:54.500
- Okay, well, awesome, congratulations.


00:44:54.500 --> 00:44:55.900
That sounds really cool.


00:44:55.900 --> 00:44:59.500
Give us an idea of, I guess, why do you build this, right?


00:44:59.500 --> 00:45:01.180
We've got Flask, we've got Django.


00:45:01.180 --> 00:45:02.020
- Yeah.


00:45:02.020 --> 00:45:03.460
- Heck, we even have Ruby if you really want it.


00:45:03.460 --> 00:45:04.300
- Yeah.


00:45:04.300 --> 00:45:06.500
- There's a lot, so previous to this,


00:45:06.500 --> 00:45:08.940
like you mentioned, there's frameworks like Flask and Django


00:45:08.940 --> 00:45:10.740
and whenever you wanted to, a Python developer


00:45:10.740 --> 00:45:12.580
wanted to make a web app, they used something like this


00:45:12.580 --> 00:45:13.560
but you always have to pair it


00:45:13.560 --> 00:45:15.060
with another front-end library.


00:45:15.060 --> 00:45:17.080
So you can't just make your front-end using Python.


00:45:17.080 --> 00:45:19.660
You still have to end up using JavaScript, HTML, React,


00:45:19.660 --> 00:45:21.060
stuff like that for your front-end.


00:45:21.060 --> 00:45:22.480
And so a lot of people, if you're


00:45:22.480 --> 00:45:24.280
coming from a Python background, it's


00:45:24.280 --> 00:45:26.100
a lot of work to get started with these.


00:45:26.100 --> 00:45:27.840
It's a different language, different tool set.


00:45:27.840 --> 00:45:30.000
So we really wanted something where Python developers can


00:45:30.000 --> 00:45:31.700
just use these tools they already know


00:45:31.700 --> 00:45:33.700
and be able to make these web apps without having


00:45:33.700 --> 00:45:35.500
to go learn something completely different.


00:45:35.500 --> 00:45:37.620
So as opposed to these tools like Flask and Django,


00:45:37.620 --> 00:45:39.940
we're very focused on unifying the front end and back end


00:45:39.940 --> 00:45:41.060
into one framework.


00:45:41.060 --> 00:45:43.220
So you don't need a separate front end and back end.


00:45:43.220 --> 00:45:44.620
And that allows us to--


00:45:44.620 --> 00:45:46.700
the user can just focus on the logic of their app


00:45:46.700 --> 00:45:48.940
and not these technical details on the networking


00:45:48.940 --> 00:45:49.820
and all this other stuff.


00:45:49.820 --> 00:45:51.180
- Yeah, it sounds interesting.


00:45:51.180 --> 00:45:53.600
I mean, I know many Python people


00:45:53.600 --> 00:45:55.500
who don't want to do JavaScript.


00:45:55.500 --> 00:45:57.500
They don't want to do multiple languages.


00:45:57.500 --> 00:45:58.340
- Exactly.


00:45:58.340 --> 00:46:00.240
- But, you know, it's traditionally,


00:46:00.240 --> 00:46:01.860
at least in the web framework world,


00:46:01.860 --> 00:46:03.900
you're speaking many, many languages.


00:46:03.900 --> 00:46:08.900
You're speaking HTML, CSS, JavaScript is a big one.


00:46:08.900 --> 00:46:11.300
And honestly, I think that there was a period


00:46:11.300 --> 00:46:13.820
where people were super invested in JavaScript


00:46:13.820 --> 00:46:16.100
and thought that was kind of the right way


00:46:16.100 --> 00:46:17.540
or the necessary way.


00:46:17.540 --> 00:46:19.640
And that would take away a lot of,


00:46:19.640 --> 00:46:21.480
what's important about the web framework, right?


00:46:21.480 --> 00:46:24.240
Like, well, it doesn't matter if it's Flask or Django.


00:46:24.240 --> 00:46:26.080
We're just going to return JSON anyway,


00:46:26.080 --> 00:46:28.240
because it's all Angular, so who cares, right?


00:46:28.240 --> 00:46:30.480
But I don't think that's where people really--


00:46:30.480 --> 00:46:33.120
many people, at least the people choosing Python, want to be.


00:46:33.120 --> 00:46:35.520
And so how is your stuff different?


00:46:35.520 --> 00:46:37.960
So I think exactly what you said before this.


00:46:37.960 --> 00:46:39.460
To make a serious web app, you always


00:46:39.460 --> 00:46:40.720
have to go to JavaScript.


00:46:40.720 --> 00:46:42.160
And what we're really trying to do


00:46:42.160 --> 00:46:44.640
is make everything in Python, including your front end.


00:46:44.640 --> 00:46:47.960
And so basically, we're trying to integrate the two together.


00:46:47.960 --> 00:46:50.720
So basically, you don't have to go learn


00:46:50.720 --> 00:46:52.760
these technical details you didn't want before.


00:46:52.760 --> 00:46:54.680
We realized for all the logic of your app,


00:46:54.680 --> 00:46:56.020
you're using Python anyway.


00:46:56.020 --> 00:46:57.960
Like, Python's used in so many industries,


00:46:57.960 --> 00:47:00.520
databases, ML, AI, infrastructure.


00:47:00.520 --> 00:47:02.300
And when these people want to make a front end,


00:47:02.300 --> 00:47:03.920
it is possible to make JavaScript,


00:47:03.920 --> 00:47:05.400
or these JavaScript front ends,


00:47:05.400 --> 00:47:07.040
but it's a lot of overhead.


00:47:07.040 --> 00:47:09.080
And before our framework,


00:47:09.080 --> 00:47:10.440
there are different low-code tools


00:47:10.440 --> 00:47:12.160
to make front ends without JavaScript,


00:47:12.160 --> 00:47:13.600
but they all kind of have a limit,


00:47:13.600 --> 00:47:16.360
and they all have a graduation risk, is what we found.


00:47:16.360 --> 00:47:17.840
So you can start making your UI


00:47:17.840 --> 00:47:18.760
- Yeah, so like-- - Can you make


00:47:18.760 --> 00:47:19.880
any website with them?


00:47:19.880 --> 00:47:23.360
- Right, like Streamlit and Anvil are both notable ones


00:47:23.360 --> 00:47:24.760
that kind of come to mind.


00:47:24.760 --> 00:47:27.220
But neither of 'em, I like them both a lot,


00:47:27.220 --> 00:47:28.320
but neither of 'em are necessarily like,


00:47:28.320 --> 00:47:31.880
I'm just gonna build a general purpose web app.


00:47:31.880 --> 00:47:33.960
They're focused in their particular area.


00:47:33.960 --> 00:47:34.780
- Yes, exactly.


00:47:34.780 --> 00:47:37.080
So I've used tools like Streamlit, Gradio in the past,


00:47:37.080 --> 00:47:39.320
and a lot of that was inspiration for Pinecone.


00:47:39.320 --> 00:47:41.580
It's really great 'cause it's super easy to get started with,


00:47:41.580 --> 00:47:42.920
you don't have to go learn these things,


00:47:42.920 --> 00:47:44.680
but they all have this kind of ceiling you hit.


00:47:44.680 --> 00:47:47.400
So they're mostly good for data science apps,


00:47:47.400 --> 00:47:49.680
dashboard apps, but as you try to expand your app


00:47:49.680 --> 00:47:52.440
into a full stack web app, start adding these new features,


00:47:52.440 --> 00:47:53.880
a lot of times you find these frameworks


00:47:53.880 --> 00:47:55.480
don't really scale with your ideas,


00:47:55.480 --> 00:47:57.880
and your two options are either you have to constrain


00:47:57.880 --> 00:48:00.740
your idea into what these vendors offer you,


00:48:00.740 --> 00:48:02.320
or you use that for prototyping,


00:48:02.320 --> 00:48:04.800
and when you're making a customer-facing production app,


00:48:04.800 --> 00:48:07.880
you scrap it and go to a JavaScript React world.


00:48:07.880 --> 00:48:09.660
So what we're really trying to do is make something


00:48:09.660 --> 00:48:11.840
like these Anvil or Streamlit easy to get started


00:48:11.840 --> 00:48:14.320
with for Python developers, but as you want to expand


00:48:14.320 --> 00:48:15.980
to these complex cases, you should be able to stay


00:48:15.980 --> 00:48:18.220
in our framework, and we should be able to handle that also.


00:48:18.220 --> 00:48:19.060
- Interesting.


00:48:19.060 --> 00:48:21.900
So how does the front end interactivity work if it's Python?


00:48:21.900 --> 00:48:23.780
- Yeah, and this is also where I think we're a bit different.


00:48:23.780 --> 00:48:25.740
We're trying to really leverage a lot of the web dev


00:48:25.740 --> 00:48:28.220
ecosystem and not recreate everything from scratch.


00:48:28.220 --> 00:48:30.660
So for the front end, we leverage React and Next.js.


00:48:30.660 --> 00:48:33.140
So our front end compiles down to a Next.js app.


00:48:33.140 --> 00:48:33.980
And from this--


00:48:33.980 --> 00:48:35.260
- Oh, you're transpiling the Python?


00:48:35.260 --> 00:48:37.060
- We transpile the Python to Next.js.


00:48:37.060 --> 00:48:38.620
And this gives you a lot of great features.


00:48:38.620 --> 00:48:40.940
You get single page app features from Next.js,


00:48:40.940 --> 00:48:42.140
a lot of these performance features.


00:48:42.140 --> 00:48:43.820
And that means from our perspective,


00:48:43.820 --> 00:48:45.580
we don't have to recreate all this stuff.


00:48:45.580 --> 00:48:48.300
And also, we don't have to create components one by one.


00:48:48.300 --> 00:48:49.420
We just leverage React.


00:48:49.420 --> 00:48:51.340
And what we do in Pinecone for the front end


00:48:51.340 --> 00:48:54.500
is we just wrap React components and make them accessible.


00:48:54.500 --> 00:48:56.540
So even if we don't offer something,


00:48:56.540 --> 00:48:58.160
and other low-code tools, sometimes


00:48:58.160 --> 00:48:59.540
if they don't offer a component you need,


00:48:59.540 --> 00:49:02.180
you may be kind of constrained in what you can build.


00:49:02.180 --> 00:49:04.460
We easily have a way for anyone to wrap


00:49:04.460 --> 00:49:06.140
their own third-party React libraries.


00:49:06.140 --> 00:49:08.060
So we're really trying to make the existing stuff


00:49:08.060 --> 00:49:10.260
out there accessible rather than recreating it.


00:49:10.260 --> 00:49:12.140
- Yeah, so you can sort of extend it with React


00:49:12.140 --> 00:49:14.100
if you get boxed in, that's your escape hatch?


00:49:14.100 --> 00:49:14.940
- Exactly.


00:49:14.940 --> 00:49:15.780
- Okay.


00:49:15.780 --> 00:49:17.180
- So that's kind of how our front end works,


00:49:17.180 --> 00:49:19.240
and for the back end, we use FastAPI


00:49:19.240 --> 00:49:20.160
to handle all the states.


00:49:20.160 --> 00:49:23.040
So the user state is all on the back end, on the server,


00:49:23.040 --> 00:49:24.920
and this is what allows us to pretty much


00:49:24.920 --> 00:49:25.960
keep everything in Python.


00:49:25.960 --> 00:49:28.020
So none of the logic is transpiled to JavaScript,


00:49:28.020 --> 00:49:30.560
only the React, and all the logic stays in Python.


00:49:30.560 --> 00:49:32.700
So you can use any of your existing Python libraries,


00:49:32.700 --> 00:49:33.960
any existing tools.


00:49:33.960 --> 00:49:34.840
You don't have to wait for us


00:49:34.840 --> 00:49:36.360
to kind of make these integrations.


00:49:36.360 --> 00:49:38.380
So it's kind of leveraging React,


00:49:38.380 --> 00:49:39.440
but also leveraging Python,


00:49:39.440 --> 00:49:40.760
and kind of bringing them together.


00:49:40.760 --> 00:49:42.140
- What's the deployment look like?


00:49:42.140 --> 00:49:43.960
- So we're working on a easy deployment,


00:49:43.960 --> 00:49:45.500
So you can just type PC deploy, we'll


00:49:45.500 --> 00:49:47.320
set up all your infrastructure, and you'll


00:49:47.320 --> 00:49:49.100
get a URL back with your app live.


00:49:49.100 --> 00:49:50.840
But also, we're an open source framework,


00:49:50.840 --> 00:49:53.400
so it's also very easy to self-host and self-deploy.


00:49:53.400 --> 00:49:54.980
And so what we're really trying to do


00:49:54.980 --> 00:49:57.640
is make it accessible and easy, but never kind of lock you


00:49:57.640 --> 00:49:58.520
into our framework.


00:49:58.520 --> 00:49:59.020
I see.


00:49:59.020 --> 00:50:01.120
So I could put like Nginx in front of it or something.


00:50:01.120 --> 00:50:01.760
Exactly.


00:50:01.760 --> 00:50:03.240
So right now, we're still working


00:50:03.240 --> 00:50:04.020
on our hosting deployment.


00:50:04.020 --> 00:50:05.600
So everyone right now who's deployed


00:50:05.600 --> 00:50:08.800
is hosting on AWS DigitalOcean or a tool like this with Nginx.


00:50:08.800 --> 00:50:11.000
And so it integrates just like you would deploy a Flask


00:50:11.000 --> 00:50:11.600
or React app.


00:50:11.600 --> 00:50:11.960
Got it.


00:50:11.960 --> 00:50:13.840
But we're really trying to make an optimized


00:50:13.840 --> 00:50:15.160
a service around this later.


00:50:15.160 --> 00:50:16.280
- Yeah, sure, it makes sense.


00:50:16.280 --> 00:50:18.280
All right, sounds like a great product.


00:50:18.280 --> 00:50:19.120
- Thanks, Seth.


00:50:19.120 --> 00:50:21.320
- Final question here, how'd you get here?


00:50:21.320 --> 00:50:22.440
How'd you start the company?


00:50:22.440 --> 00:50:24.440
How'd you land on Startup Pro?


00:50:24.440 --> 00:50:26.000
I mean, you talked about Y Combinator a little.


00:50:26.000 --> 00:50:27.420
- Yeah, so I talked a little bit.


00:50:27.420 --> 00:50:28.860
We did the Y Combinator batch,


00:50:28.860 --> 00:50:31.340
and really the idea is not only having


00:50:31.340 --> 00:50:32.320
an open source framework,


00:50:32.320 --> 00:50:33.960
but having a business model around it


00:50:33.960 --> 00:50:36.440
and being able to create these features around it.


00:50:36.440 --> 00:50:38.600
So we're really focused on being similar


00:50:38.600 --> 00:50:40.720
to have an open source framework,


00:50:40.720 --> 00:50:42.840
similar to how Vercel has Next.js


00:50:42.840 --> 00:50:43.680
and their hosted version,


00:50:43.680 --> 00:50:45.640
and we're trying to bring that to the Python community.


00:50:45.640 --> 00:50:48.000
So Python is like one of the fastest growing languages,


00:50:48.000 --> 00:50:50.040
obviously, like that's why PyCon is so big.


00:50:50.040 --> 00:50:51.640
And for the web dev part,


00:50:51.640 --> 00:50:53.680
there's not really a good ecosystem for that.


00:50:53.680 --> 00:50:55.160
So when people want to share their ideas,


00:50:55.160 --> 00:50:57.080
we're really trying to become that de facto way


00:50:57.080 --> 00:50:59.600
for Python developers to create their apps and share.


00:50:59.600 --> 00:51:02.200
And so, yeah, basically working on our hosting service,


00:51:02.200 --> 00:51:03.200
growing out our team now,


00:51:03.200 --> 00:51:05.840
and trying to build up all this ecosystem around it


00:51:05.840 --> 00:51:08.080
so people can easily get their ideas out to the world.


00:51:08.080 --> 00:51:11.480
- Awesome, well, congratulations and thanks for being here.


00:51:11.480 --> 00:51:14.720
This has been another episode of Talk Python to Me.


00:51:14.720 --> 00:51:16.160
Thank you to our sponsors.


00:51:16.160 --> 00:51:17.520
Be sure to check out what they're offering.


00:51:17.520 --> 00:51:19.160
It really helps support the show.


00:51:19.160 --> 00:51:21.680
Take some stress out of your life.


00:51:21.680 --> 00:51:23.880
Get notified immediately about errors


00:51:23.880 --> 00:51:25.840
and performance issues in your web


00:51:25.840 --> 00:51:27.760
or mobile applications with Sentry.


00:51:27.760 --> 00:51:32.640
Just visit talkpython.fm/sentry and get started for free.


00:51:32.640 --> 00:51:34.280
And be sure to use the promo code,


00:51:34.280 --> 00:51:36.720
talkpython, all one word.


00:51:36.720 --> 00:51:38.040
Want to level up your Python?


00:51:38.040 --> 00:51:39.800
We have one of the largest catalogs


00:51:39.800 --> 00:51:42.160
of Python video courses over at Talk Python.


00:51:42.160 --> 00:51:44.220
Our content ranges from true beginners


00:51:44.220 --> 00:51:47.200
to deeply advanced topics like memory and async.


00:51:47.200 --> 00:51:49.860
And best of all, there's not a subscription in sight.


00:51:49.860 --> 00:51:52.880
Check it out for yourself at training.talkpython.fm.


00:51:52.880 --> 00:51:54.520
Be sure to subscribe to the show,


00:51:54.520 --> 00:51:57.520
open your favorite podcast app, and search for Python.


00:51:57.520 --> 00:51:58.880
We should be right at the top.


00:51:58.880 --> 00:52:01.760
You can also find the iTunes feed at /itunes,


00:52:01.760 --> 00:52:03.960
the Google Play feed at /play,


00:52:03.960 --> 00:52:07.980
and the Direct RSS feed at /rss on talkpython.fm.


00:52:08.880 --> 00:52:11.500
We're live streaming most of our recordings these days.


00:52:11.500 --> 00:52:12.640
If you want to be part of the show


00:52:12.640 --> 00:52:14.920
and have your comments featured on the air,


00:52:14.920 --> 00:52:16.780
be sure to subscribe to our YouTube channel


00:52:16.780 --> 00:52:19.780
at talkpython.fm/youtube.


00:52:19.780 --> 00:52:21.180
This is your host, Michael Kennedy.


00:52:21.180 --> 00:52:22.340
Thanks so much for listening.


00:52:22.340 --> 00:52:23.580
I really appreciate it.


00:52:23.580 --> 00:52:25.820
Now get out there and write some Python code.


00:52:25.820 --> 00:52:28.400
(upbeat music)


00:52:28.400 --> 00:52:43.400
[Music]


00:52:43.400 --> 00:52:45.980
(upbeat music)

