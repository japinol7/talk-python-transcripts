WEBVTT

00:00:00.000 --> 00:00:03.760
Have you heard of Django? It's this little web framework that, well,


00:00:03.760 --> 00:00:10.080
kicked off much of Python's significance in the web space back in 2005. And that makes Django


00:00:10.080 --> 00:00:15.360
officially an adult. That's right, Django is now 18. And Django continues to lead the way on how


00:00:15.360 --> 00:00:20.880
community should be done for individual projects, such as web frameworks. We have Carlton Gibson


00:00:20.880 --> 00:00:25.920
and Will Vinson back on the show this episode to discuss a bit of Django history, Django trends in


00:00:25.920 --> 00:00:32.240
2023, a little bit of HTMX and Django, and lots more. This is Talk Python to Me, episode


00:00:32.240 --> 00:00:36.240
428, recorded July 26th, 2023.


00:00:36.240 --> 00:00:54.280
Welcome to Talk Python to Me, a weekly podcast on Python. This is your host, Michael Kennedy.


00:00:54.280 --> 00:00:59.160
Follow me on Mastodon where I'm @mkennedy and follow the podcast using @talkpython,


00:00:59.160 --> 00:01:01.480
both on fosstodon.org.


00:01:01.480 --> 00:01:05.380
Be careful with impersonating accounts on other instances, there are many.


00:01:05.380 --> 00:01:10.860
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.


00:01:10.860 --> 00:01:14.620
We've started streaming most of our episodes live on YouTube.


00:01:14.620 --> 00:01:20.460
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be


00:01:20.460 --> 00:01:22.540
part of that episode.


00:01:22.540 --> 00:01:27.380
This episode is brought to you by Sentry and us over at Talk Python Training.


00:01:27.380 --> 00:01:29.780
Please check out what we're both offering during our segments.


00:01:29.780 --> 00:01:32.780
It really helps support the show.


00:01:32.780 --> 00:01:34.960
Will Carlton, welcome to Talk Python To Me.


00:01:34.960 --> 00:01:37.340
It's awesome to have you both back on the show.


00:01:37.340 --> 00:01:38.540
Thank you for having us on again, Mike.


00:01:38.540 --> 00:01:39.540
Yes, thank you.


00:01:39.540 --> 00:01:40.540
It's always fun.


00:01:40.540 --> 00:01:43.260
Yeah, it's always fun to have other podcasters on the show.


00:01:43.260 --> 00:01:45.700
We'll talk a bit about your podcast in a moment.


00:01:45.700 --> 00:01:47.020
Maybe just do a quick introduction.


00:01:47.020 --> 00:01:49.660
I know people probably know you from your show Django Chat.


00:01:49.660 --> 00:01:52.420
if you know you're from being on Talk Python To Me previously,


00:01:52.420 --> 00:01:53.620
but for those who don't.


00:01:53.620 --> 00:01:54.460
Will, you wanna go first?


00:01:54.460 --> 00:01:58.080
- Sure, so William Vincent, I have three books on Django,


00:01:58.080 --> 00:01:59.780
most notably Django for Beginners.


00:01:59.780 --> 00:02:01.780
I run a site, learndjango.com.


00:02:01.780 --> 00:02:04.300
I just got off three years being on the board of Django,


00:02:04.300 --> 00:02:05.900
so Django's run by a non-profit.


00:02:05.900 --> 00:02:08.940
Run a weekly newsletter on Django, Django News.


00:02:08.940 --> 00:02:10.060
Too many things.


00:02:10.060 --> 00:02:12.880
So yeah, most of my time is spent doing some consulting


00:02:12.880 --> 00:02:14.740
and a lot of teaching and learning about Django,


00:02:14.740 --> 00:02:16.300
so I'm very happy to be at that stage.


00:02:16.300 --> 00:02:17.260
- It's a good combination, right?


00:02:17.260 --> 00:02:18.300
- If you can make it work, it is.


00:02:18.300 --> 00:02:20.140
- Yeah, you need that sort of cycle of,


00:02:20.140 --> 00:02:22.100
you know, I need to learn too and be interested.


00:02:22.100 --> 00:02:22.940
- Yes.


00:02:22.940 --> 00:02:24.060
- I like learning and teaching, so.


00:02:24.060 --> 00:02:26.500
- One of the challenges that I think people can fall into


00:02:26.500 --> 00:02:31.500
and the traps is if you just teach, it's hard to have that,


00:02:31.500 --> 00:02:33.660
it looks like a good idea, but let me tell you,


00:02:33.660 --> 00:02:36.180
it's a bad idea and here's the three reasons


00:02:36.180 --> 00:02:37.620
and here are the tears that I've shed


00:02:37.620 --> 00:02:39.140
because I tried this this way.


00:02:39.980 --> 00:02:41.940
- You need a little hands-on, like for me,


00:02:41.940 --> 00:02:44.460
it's running all the infrastructure and APIs


00:02:44.460 --> 00:02:46.020
and mobile app stuff at Talk Python,


00:02:46.020 --> 00:02:47.820
which is plenty to get the tears.


00:02:47.820 --> 00:02:49.660
I pulled out plenty of hair, but you know,


00:02:49.660 --> 00:02:51.340
like I think consulting plus teaching


00:02:51.340 --> 00:02:53.560
is a really common mix for that.


00:02:53.560 --> 00:02:54.400
You like it?


00:02:54.400 --> 00:02:55.220
- Yeah, I do.


00:02:55.220 --> 00:02:56.060
I mean, so I've been working on,


00:02:56.060 --> 00:02:57.400
so I have this site, learnjango.com,


00:02:57.400 --> 00:03:00.480
that I'm trying to consolidate everything onto that site.


00:03:00.480 --> 00:03:02.280
And so that's been an effort I've been working on


00:03:02.280 --> 00:03:04.240
in earnest the last couple of months.


00:03:04.240 --> 00:03:05.640
And so it's actually been really fun


00:03:05.640 --> 00:03:07.160
to just be an engineer for a change.


00:03:07.160 --> 00:03:09.200
And I kind of wish I could find a me


00:03:09.200 --> 00:03:11.960
to help me when I get stuck, but there is no being,


00:03:11.960 --> 00:03:13.560
as Carlton will share something, you know,


00:03:13.560 --> 00:03:15.120
being stuck is part of the game,


00:03:15.120 --> 00:03:19.120
But it's uniquely satisfying and frustrating to code


00:03:19.120 --> 00:03:21.220
because everything is solvable,


00:03:21.220 --> 00:03:24.980
but still I find things that stop me for a couple of days


00:03:24.980 --> 00:03:27.520
and I'm just like, it brings me back to the first


00:03:27.520 --> 00:03:30.000
couple of months of coding and the terror of like,


00:03:30.000 --> 00:03:32.120
I'm not smart enough, I can't do this.


00:03:32.120 --> 00:03:34.440
But I know that I'll get it done, and I do get it done.


00:03:34.440 --> 00:03:36.580
So you get the yin and yang,


00:03:36.580 --> 00:03:40.000
but it's uniquely satisfying to do the commit and it's done.


00:03:40.000 --> 00:03:42.480
Whereas even a podcast, it's in the bank,


00:03:42.480 --> 00:03:46.120
but it's not quite the same binary feeling of accomplishment.


00:03:46.120 --> 00:03:47.020
- That's true.


00:03:47.020 --> 00:03:48.720
The getting stuck is frustrating,


00:03:48.720 --> 00:03:51.420
but also it means you're about to level up, right?


00:03:51.420 --> 00:03:53.020
You're gonna figure out something, yeah.


00:03:53.020 --> 00:03:54.180
- I try to be excited about it,


00:03:54.180 --> 00:03:55.420
'cause I know if I'm stuck,


00:03:55.420 --> 00:03:56.780
then lots of other people are gonna be stuck.


00:03:56.780 --> 00:03:58.780
Or a lot of times I'm stuck on one little thing,


00:03:58.780 --> 00:04:00.920
and it's really 'cause there's some other thing,


00:04:00.920 --> 00:04:02.780
some fundamental that I didn't know


00:04:02.780 --> 00:04:03.900
as well as I thought I did.


00:04:03.900 --> 00:04:04.900
So we can talk about that,


00:04:04.900 --> 00:04:06.700
but I have thoughts on all of that.


00:04:06.700 --> 00:04:08.360
So yeah, it's a nice mix to do.


00:04:08.360 --> 00:04:11.140
And more importantly, now I have friends and peers


00:04:11.140 --> 00:04:15.460
when I get stuck, I can ask them. So Carlton, of course, is one of them, you know, Django,


00:04:15.460 --> 00:04:20.580
former Django fellow, a couple others, it's important to, you know, we can talk about this,


00:04:20.580 --> 00:04:24.420
but when you're learning, learning how to ask a good question on stack overflow, or Django has


00:04:24.420 --> 00:04:28.740
its own forum, which is a great resource forum, Django project.com, you know, but the next stage


00:04:28.740 --> 00:04:33.540
is like, I did a walk, I slept on it, like knowing when to ping a friend, because you don't want to


00:04:33.540 --> 00:04:37.860
ping a friend all the time. But sometimes it's like, okay, like, this is, I'm truly stuck.


00:04:37.860 --> 00:04:40.260
there's no point like wasting a week or two on this.


00:04:40.260 --> 00:04:40.980
Yeah, for sure.


00:04:40.980 --> 00:04:44.100
That's a really nice stage to get to. And it's also helpful to help other people too,


00:04:44.100 --> 00:04:47.060
because you're thinking about something and someone gives you something they're stuck on,


00:04:47.060 --> 00:04:49.860
you're like, oh, boom, that's that. And then you're like, hey, I'm working on,


00:04:49.860 --> 00:04:52.900
you know, something that's stuck. So anyways, having a community is really,


00:04:52.900 --> 00:04:57.540
really levels you up to and also people who can relate to good and bad things about code.


00:04:57.540 --> 00:05:00.340
Django is very stable, but has a host of new features,


00:05:00.340 --> 00:05:04.980
many of which I haven't actually used, Carleton can talk about them. So it's important to,


00:05:04.980 --> 00:05:09.140
Yeah, have community, right? Not just be in your own room with your computer fighting with it.


00:05:09.140 --> 00:05:09.940
Yeah, yeah.


00:05:09.940 --> 00:05:13.700
Any trouble or good or bad thing you've had, many, many other people have had,


00:05:13.700 --> 00:05:14.740
you just have to find them.


00:05:14.740 --> 00:05:18.580
Unlike the movie stereotypes, it's way more social, this coding thing.


00:05:18.580 --> 00:05:19.140
It is.


00:05:19.140 --> 00:05:25.300
Indeed, before I let Carlton introduce himself, just a quick comment from the audience to make


00:05:25.300 --> 00:05:30.260
you feel good a bit from Bishnu says, "The first book I read on Django was William's book." So,


00:05:30.260 --> 00:05:30.740
thank you.


00:05:30.740 --> 00:05:34.660
Thank you. I appreciate that. Yeah, I just, one last point and then I want Carlton to talk, but I


00:05:34.660 --> 00:05:40.340
wrote three books, Django for beginners, APIs professionals, that first came out in 2018 and 19.


00:05:40.340 --> 00:05:44.820
And then I've updated all three of them every year since then. So on the one hand, it's been


00:05:44.820 --> 00:05:49.860
four years, I haven't had a new book, but it's also I've written what? Or you've had 12 new books.


00:05:49.860 --> 00:05:50.980
12 new books.


00:05:50.980 --> 00:05:55.460
Yeah, I mean, I really have. I really have. It's, it doesn't feel quite as satisfying,


00:05:55.460 --> 00:05:59.300
but I know that I have a built in audience. And I've, so it's a weird dynamic to be in a


00:05:59.300 --> 00:06:03.380
situation where it's sustainable to maintain and update your stuff. I mean, I'm sure you can relate,


00:06:03.380 --> 00:06:06.500
you have all these different courses, right? That's the thing that falls off. You do all the


00:06:06.500 --> 00:06:10.340
effort, you get the course out, and then it goes out of date or it could be made better, but...


00:06:10.340 --> 00:06:11.700
Or Pydantic 2 comes out.


00:06:11.700 --> 00:06:13.700
Django every eight months comes out. Yeah.


00:06:13.700 --> 00:06:14.260
Exactly.


00:06:14.260 --> 00:06:19.380
So it's, yeah, I try to think of the positive of it. It is, I feel like the book is so much better,


00:06:19.380 --> 00:06:23.300
but a layperson or family members or friends are like, "When's the new book coming out?"


00:06:23.300 --> 00:06:25.780
It's like, "I just did it." Like, yeah.


00:06:25.780 --> 00:06:27.060
Yeah, indeed. Carlton.


00:06:27.060 --> 00:06:27.780
Who are you, Carlton?


00:06:27.780 --> 00:06:28.660
Welcome. Who are you?


00:06:28.660 --> 00:06:33.660
Who am I? Well, my name is Carlton. I do a podcast with Will. So basically, I've just


00:06:33.660 --> 00:06:37.740
stepped down as Django Fellow. So I've spent the last five years being a Django Fellow,


00:06:37.740 --> 00:06:41.540
which means I was contracted by the Django Software Foundation to help maintain Django


00:06:41.540 --> 00:06:44.780
itself. And they have a couple of fellows, and I was one of them for that period. And


00:06:44.780 --> 00:06:49.420
I've stepped down in order to go back to building things with Django rather than working kind


00:06:49.420 --> 00:06:53.860
of just on Django. It's so it's a kind of, you know, after five years, that's, that was


00:06:53.860 --> 00:06:57.100
a good time period. And it's time for me to go back to building things with Django. I've


00:06:57.100 --> 00:07:02.300
I've been using Django forever, and I'm a maintainer on a lot of projects in the ecosystem.


00:07:02.300 --> 00:07:06.400
So I've worked on Django REST framework, Django filter, Django crispy form, Django compressor,


00:07:06.400 --> 00:07:07.400
Django app comp.


00:07:07.400 --> 00:07:08.780
I've maintained the channels package.


00:07:08.780 --> 00:07:10.660
You know, I do quite a lot in that.


00:07:10.660 --> 00:07:13.500
So your code runs on many, many servers, you should say.


00:07:13.500 --> 00:07:16.300
More than I like to think about.


00:07:16.300 --> 00:07:20.660
One thing, when I was a fellow, we were always, people always give us a bit of grief about


00:07:20.660 --> 00:07:22.460
how conservative Django is.


00:07:22.460 --> 00:07:25.320
It's very stable and we're very cautious


00:07:25.320 --> 00:07:27.900
about making backwards incompatible changes.


00:07:27.900 --> 00:07:28.820
We try not to do that.


00:07:28.820 --> 00:07:30.860
We've got a solid deprecation policy,


00:07:30.860 --> 00:07:32.620
got the long-term support policies.


00:07:32.620 --> 00:07:33.980
And then at DjangoCon last year,


00:07:33.980 --> 00:07:37.380
somebody read out the numbers, the download numbers.


00:07:37.380 --> 00:07:40.580
It's not necessarily the most downloaded package,


00:07:40.580 --> 00:07:43.140
but it's millions, millions of downloads,


00:07:43.140 --> 00:07:45.220
millions of projects that are using it,


00:07:45.220 --> 00:07:47.200
and you really can't break it.


00:07:47.200 --> 00:07:49.620
That's always really humbling and really kind of,


00:07:49.620 --> 00:07:52.020
yeah, actually, all the work we put into


00:07:52.020 --> 00:07:56.980
making sure that the product is stable is that's good work. That's important work.


00:07:56.980 --> 00:07:59.940
Yeah, threads is using it, Carlton. You're helping out Mark Zuckerberg.


00:07:59.940 --> 00:08:03.940
Yeah, well, I'll be using a fork of it. We can get into that. But yeah, I was looking


00:08:03.940 --> 00:08:08.540
at a comment on the forum. I got a little heart from somebody asked on the Django forum.


00:08:08.540 --> 00:08:13.100
Can does Django scale or can I run it on lots of systems? And I'm like, well, you do know


00:08:13.100 --> 00:08:17.500
that Instagram was built on it. You know, they're still using that call request response


00:08:17.500 --> 00:08:21.220
cycle. And you know, my comment was, you're not going to serve more traffic than Instagram.


00:08:21.220 --> 00:08:26.420
Yes, Threads is built on that. That core request response bit is still essentially Django.


00:08:26.420 --> 00:08:32.260
Maybe not everyone is up on what Threads is. Not a Parallels programming thing, but a Twitter


00:08:32.260 --> 00:08:35.100
clone from Meta and Facebook, right?


00:08:35.100 --> 00:08:36.300
Apparently so, yes.


00:08:36.300 --> 00:08:39.820
We have an interview, maybe we can put in the show notes, with Carl Mayer, who was original


00:08:39.820 --> 00:08:45.100
core Django developer who then went to Instagram. So he spoke for an hour about... So initially


00:08:45.100 --> 00:08:48.980
it was just, it was pure Django. And then as they scaled, they did things like they


00:08:48.980 --> 00:08:51.180
they ripped out the ORM and they changed this and that,


00:08:51.180 --> 00:08:52.900
but there is still a core of it,


00:08:52.900 --> 00:08:55.620
the request response cycle that's in there.


00:08:55.620 --> 00:08:57.300
That's another interesting thing is Django,


00:08:57.300 --> 00:08:59.080
when you get to massive, massive size,


00:08:59.080 --> 00:09:00.020
a lot of companies, you know,


00:09:00.020 --> 00:09:01.520
they have thousands of engineers, right?


00:09:01.520 --> 00:09:04.580
We have, we Django has just the community.


00:09:04.580 --> 00:09:07.060
So as soon as you hop off the guardrails,


00:09:07.060 --> 00:09:08.100
then you're kind of on your own.


00:09:08.100 --> 00:09:09.620
And that's sort of separate debate


00:09:09.620 --> 00:09:10.540
on whether it's worth it or not,


00:09:10.540 --> 00:09:13.460
but you can get quite large and it's interesting.


00:09:13.460 --> 00:09:17.440
By contrast, like I believe Shopify is still on Rails,


00:09:17.440 --> 00:09:20.880
believe or seem to have gone much longer. Carlton, yeah, you have something to add?


00:09:20.880 --> 00:09:25.520
Well, I don't think it's really I mean, I know, Instagram moved away from the ORM. But that was


00:09:25.520 --> 00:09:28.960
quite a long time ago. If you look at octopus and crack, and they're still basically using


00:09:28.960 --> 00:09:34.400
something that's basically vanilla Django to do, you know, massive projects. And so, you know,


00:09:34.400 --> 00:09:40.400
what it was back in, you know, 1.6 1.7 1.8, when Instagram were needing to pull away from what


00:09:40.400 --> 00:09:45.680
Django is, is a lot different for Django is at 2.2334. Now 4.2,


00:09:45.680 --> 00:09:47.600
I think it's gonna be 5.


00:09:47.600 --> 00:09:49.320
It's gonna be 5.


00:09:49.320 --> 00:09:50.480
I wonder if they regret that.


00:09:50.480 --> 00:09:53.360
I wonder, not necessarily if it was the right choice at the time,


00:09:53.360 --> 00:09:56.480
but do they kind of wish, like, wish they had access,


00:09:56.480 --> 00:09:59.680
if nothing else, to fork version 5 instead of version 1.6.


00:09:59.680 --> 00:10:05.160
I wish they'd been a bit more pushback on Django from thinking about,


00:10:05.160 --> 00:10:07.160
because what was it that caused them to change?


00:10:07.160 --> 00:10:10.680
I think the move from it being able to root string names,


00:10:10.680 --> 00:10:12.200
strings as view names,


00:10:12.200 --> 00:10:14.200
like, and having to import the view itself.


00:10:14.200 --> 00:10:17.700
And I think at that point, like for Instagram to rewrite the whole stack,


00:10:17.700 --> 00:10:19.300
it was too much.


00:10:19.300 --> 00:10:23.500
And in the end, they kind of forked, but it would have been great if we could have kept them on board.


00:10:23.500 --> 00:10:27.800
I think for Instagram, they can, they can, they got enough engineering chops,


00:10:27.800 --> 00:10:31.000
but it would have been much nicer for Django if we could have kept them on board, I think.


00:10:31.000 --> 00:10:36.000
Well, maybe like a quick positive shout out for the whole meta as a larger organization.


00:10:36.000 --> 00:10:38.700
They seem to be doing a lot for Python these days, you know,


00:10:38.700 --> 00:10:41.660
- For Python, yes. - They're really working a lot on,


00:10:41.660 --> 00:10:44.460
you know, Sam Gross' initiative on Nogill


00:10:44.460 --> 00:10:47.100
and the faster Python and Cinder and, you know,


00:10:47.100 --> 00:10:48.660
all that probably does come out of


00:10:48.660 --> 00:10:50.500
some of the foundational stuff for Instagram


00:10:50.500 --> 00:10:51.540
and running Django there.


00:10:51.540 --> 00:10:53.980
- Yeah, and I think Cardinal is still involved in,


00:10:53.980 --> 00:10:55.980
very much in pushing Python forwards


00:10:55.980 --> 00:10:57.300
and, you know, what they're trying to do.


00:10:57.300 --> 00:10:59.020
So, you know, all Q-Ducks do them.


00:10:59.020 --> 00:11:01.860
It's very easy to dog on the big corporations


00:11:01.860 --> 00:11:02.980
so they don't pay enough of it,


00:11:02.980 --> 00:11:05.620
but it's important to recognize when they do contribute


00:11:05.620 --> 00:11:07.140
that, yes, actually that's a good thing.


00:11:07.140 --> 00:11:10.020
- Yeah, there's plenty that need dogging on, like a lot.


00:11:10.020 --> 00:11:10.860
- Most.


00:11:10.860 --> 00:11:13.980
- We still have support for Oracle in Django, for example.


00:11:13.980 --> 00:11:14.820
- Interesting.


00:11:14.820 --> 00:11:16.260
- But Carlton, deployment,


00:11:16.260 --> 00:11:17.340
there's something else you're working on.


00:11:17.340 --> 00:11:18.180
- Well, yes.


00:11:18.180 --> 00:11:19.980
I mean, so I've been,


00:11:19.980 --> 00:11:22.940
so one thing I wanted to quit or step down as fellow


00:11:22.940 --> 00:11:24.340
and get to working is my button tool,


00:11:24.340 --> 00:11:26.420
which is my simple deployment tool.


00:11:26.420 --> 00:11:28.620
So it's quite vanilla.


00:11:28.620 --> 00:11:31.260
It's old school that uses virtual private server.


00:11:31.260 --> 00:11:32.380
It uses Ansible.


00:11:32.380 --> 00:11:34.020
It's all on AWS.


00:11:34.020 --> 00:11:36.780
And then I'm building UI and tooling on front of that.


00:11:36.780 --> 00:11:40.980
slightly delayed because I've had personal issues that have taken me up.


00:11:40.980 --> 00:11:44.020
But, you know, my plan was sit down in April, get on with it.


00:11:44.020 --> 00:11:47.780
My son's been ill for a while. So that's, that's just on the backbone.


00:11:47.780 --> 00:11:50.860
The priority with all of these things is look after yourself.


00:11:50.860 --> 00:11:54.380
And in the situation we've been in, I haven't had time to work on it particularly,


00:11:54.380 --> 00:11:55.820
but that will be the autumn now.


00:11:55.820 --> 00:11:58.860
And that's, that's kind of, yeah, I've been talking about it for a while,


00:11:58.860 --> 00:12:01.300
time to actually ship it and have some capacity to ship it.


00:12:01.300 --> 00:12:04.580
But can we, can we do, can we give it a, maybe it's different angle of pitch,


00:12:04.580 --> 00:12:34.560
which is that so it's built on so deployment is trick. We can talk about this, you know, going from local to production is hard. And when who do you use these days, right? Like there's AWS, there's Azure, there's kind of Google, there still is Heroku, there's new entrance, like fly and some other ones. But what do you really need? Like, if you're a Django, you want someone who knows Django, who just like puts a layer on top of someone that's not going away like AWS. And essentially, as I understand it, button is a Django fellow saying, here's


00:12:34.560 --> 00:12:39.680
you have a Django app, you want to put it online, let me solve all the hard things, do all the hard


00:12:39.680 --> 00:12:44.560
work for you. And it's a beautiful UI on something that's not going to change. Yeah, here we go to


00:12:44.560 --> 00:12:49.600
have it. Because all the it's interesting, I updated my books, I updated away from Heroku to


00:12:49.600 --> 00:12:56.000
fly for the new update, because Heroku eliminated their free tier. And I personally have really like


00:12:56.000 --> 00:13:02.400
what fly.io is doing. But it's hard to scale these companies. Like it's not it's non trivial to build


00:13:02.400 --> 00:13:06.560
what they have. And yet if you're AWS, right, all you're going to do is add, add, add, add features


00:13:06.560 --> 00:13:11.200
when big enterprise clients want things. And so at some point it becomes unusable for a


00:13:11.200 --> 00:13:14.640
solo person or a small startup. So I'm a fan of what Carleton is doing.


00:13:14.640 --> 00:13:18.480
Yeah, you want something scary, just go to the AWS console dashboard.


00:13:18.480 --> 00:13:19.680
Yeah, right.


00:13:19.680 --> 00:13:22.640
Exactly. Where do I start? What should I use?


00:13:22.640 --> 00:13:25.840
There should be enough of a thing. I have a Python web app or I have a


00:13:25.840 --> 00:13:29.200
JavaScript, whatever JavaScript people do, like a, you know, a Rails app. Like,


00:13:29.200 --> 00:13:30.880
I just want to get it up and have it not break.


00:13:30.880 --> 00:13:35.200
But this came so this the idea for button came out of exactly those those kind of thoughts was


00:13:35.200 --> 00:13:40.320
Every week on Django chat, we'd have someone come along and deployment would always come up and it would be like some


00:13:40.320 --> 00:13:45.760
Elaborate story about what they're doing and it's like well, actually if you keep it simple and keep it neat


00:13:45.760 --> 00:13:49.680
First of all, here's how I deploy and here's how I get my clients to deploy it


00:13:49.680 --> 00:13:53.600
And this how I deployed many projects over many years and it's continually evolving


00:13:53.600 --> 00:13:58.160
And then on the other hand when you go to the aws console though, it's like this


00:13:59.280 --> 00:14:08.000
too much. You don't need 58 services and every configuration option under the sun. But it's


00:14:08.000 --> 00:14:12.320
nice to be able to break out of that, you know, if you do need to scale or you do need to do it.


00:14:12.320 --> 00:14:17.840
So anyway, this is my project. If it wasn't for life circumstances, I'd be slightly further along,


00:14:17.840 --> 00:14:21.600
but it's going to be the fall now. It's going to be, you know, the shit's coming on nicely.


00:14:21.600 --> 00:14:27.760
And the idea is a simple approach and with a nice UI on top of it that you can use.


00:14:27.760 --> 00:14:30.960
Well, you definitely have our wishes for your son to get well soon.


00:14:30.960 --> 00:14:34.400
So that's rough. Yeah, that's rough when your kid is sick.


00:14:34.400 --> 00:14:37.120
It's been a full on year. It's been a full on year. It's been a full on year. It's been


00:14:37.120 --> 00:14:41.200
ill over a year now and it's just ongoing. And so, you know, that was another part of


00:14:41.200 --> 00:14:44.800
why I stepped down as fellow. I needed to take a bit of time just for the family.


00:14:44.800 --> 00:14:49.040
Absolutely. I think back the button for a second. BTN.dev, by the way.


00:14:49.040 --> 00:14:52.160
You can sign up for the mailing list or the alpha is available too.


00:14:52.160 --> 00:14:52.960
Nice.


00:14:52.960 --> 00:14:56.160
I'm constantly trying to push Carlton's stuff because he always downplays everything he's


00:14:56.160 --> 00:14:57.440
doing. I'm like, come on, man.


00:14:57.440 --> 00:14:59.640
Yeah, but I've got that natural developer shyness.


00:14:59.640 --> 00:15:02.440
I would, I have to wait, I have to polish it and wait till it's perfect.


00:15:02.440 --> 00:15:05.940
And then launch it and then, yeah, and I'm British, I'm nice and reserved.


00:15:05.940 --> 00:15:08.600
And anyway, Michael, you're going to make a question.


00:15:08.600 --> 00:15:09.900
It's exciting.


00:15:09.900 --> 00:15:11.000
And we were just talking about it.


00:15:11.000 --> 00:15:13.440
We were just hyping people up about it.


00:15:13.440 --> 00:15:17.640
How it's cool to have these huge deployments running tons of traffic,


00:15:17.640 --> 00:15:21.440
doing all sorts of amazing things with like, yeah, we scaled our server.


00:15:21.440 --> 00:15:24.100
So we went from 500 to 300 with this trick.


00:15:24.100 --> 00:15:27.240
Yes, that's a cool thing that pushes the envelope that makes a lot of


00:15:27.240 --> 00:15:29.740
stuff possible with frameworks like Django and


00:15:29.740 --> 00:15:31.500
language like Python.


00:15:31.500 --> 00:15:33.200
But on the other hand,


00:15:33.200 --> 00:15:34.700
most of us are not


00:15:34.700 --> 00:15:38.300
Instagram, you're not Microsoft, you're not Google, you're not all these.


00:15:38.300 --> 00:15:39.640
And having,


00:15:39.640 --> 00:15:43.240
or let's say you're not Netflix. I actually think that like what


00:15:43.240 --> 00:15:47.240
AWS console looks like has a lot to do with how Netflix works probably


00:15:47.240 --> 00:15:49.400
given how early adopters they were.


00:15:49.400 --> 00:15:52.200
But I just think it's worth emphasizing.


00:15:52.200 --> 00:15:54.520
push button, get it running on a simple server,


00:15:54.520 --> 00:15:56.280
make it secure, keep it up,


00:15:56.280 --> 00:15:58.360
you know, zero downtime deploy type stuff,


00:15:58.360 --> 00:16:01.480
CI/CD, a push to a brand, all those types of things.


00:16:01.480 --> 00:16:03.400
That's more than enough for most people,


00:16:03.400 --> 00:16:04.920
not just on your hobby projects,


00:16:04.920 --> 00:16:06.760
but on company business.


00:16:06.760 --> 00:16:09.240
Does your website get a thousand visitors a day?


00:16:09.240 --> 00:16:11.960
It doesn't need five servers with failover


00:16:11.960 --> 00:16:14.840
and Kubernetes clusters and sharded databases.


00:16:14.840 --> 00:16:16.040
And like, it just doesn't, right?


00:16:16.040 --> 00:16:18.040
And so having that option,


00:16:18.040 --> 00:16:19.480
something like button, it's pretty cool, I think.


00:16:19.480 --> 00:16:20.440
- Yeah, that's exactly it.


00:16:20.440 --> 00:16:21.400
Like as you speak there,


00:16:21.400 --> 00:16:23.000
You're just singing to the choir for me.


00:16:23.000 --> 00:16:27.520
It's like, you know, you can get a small box, get a slightly bigger box.


00:16:27.520 --> 00:16:32.520
If you need to get a slightly bigger box than that, you can go get quite an, you can get an awful lot of box for not very much money.


00:16:32.520 --> 00:16:35.040
And then maybe two boxes.


00:16:35.040 --> 00:16:36.160
Yeah, yeah, yeah, exactly.


00:16:36.160 --> 00:16:38.760
But this is the kind of architecture I go for.


00:16:38.760 --> 00:16:41.080
You can scale to a very big site.


00:16:41.080 --> 00:16:45.720
And I know in recent years, Stack Overflow moved to a much more modern and fancy thing.


00:16:45.720 --> 00:16:51.080
But for a long, long, long, long time, they were running on the same kind of big database, couple of front end web servers, a


00:16:51.080 --> 00:16:53.360
load balancer and nothing more than that.


00:16:53.360 --> 00:16:56.360
And you're not going to serve more traffic than Stack Overflow ever.


00:16:56.360 --> 00:17:00.360
Like nobody, not nobody, but basically nobody's going to serve more traffic than that.


00:17:00.360 --> 00:17:01.960
So that's where I'm coming from.


00:17:01.960 --> 00:17:03.240
And it's not for everybody.


00:17:03.240 --> 00:17:06.800
And there's lots of people who've got opinions, but it's for people who haven't got an opinion.


00:17:06.800 --> 00:17:11.680
It's like, if you don't know, if you don't know how to deploy and you don't really have,


00:17:11.680 --> 00:17:14.600
if you're not already in the game, then well, this is how I do it.


00:17:14.600 --> 00:17:16.160
And you can choose to do it the same way.


00:17:16.160 --> 00:17:17.160
Or sure.


00:17:17.160 --> 00:17:18.160
I'm really excited about it.


00:17:18.160 --> 00:17:22.240
been talking about it for a long time and not having the capacity to work on it. And now I


00:17:22.240 --> 00:17:26.400
bar family situation, I have that capacity. And so I'm looking forward to getting out.


00:17:26.400 --> 00:17:33.280
This portion of talk Python me is brought to you by century. You know that century captures the


00:17:33.280 --> 00:17:38.480
errors that would otherwise go unnoticed. Of course, they have incredible support for basically


00:17:38.480 --> 00:17:43.760
any Python framework. They have direct integrations with flask, Django, FastAPI,


00:17:43.760 --> 00:17:47.760
and even things like AWS Lambda and Celery.


00:17:47.760 --> 00:17:50.120
But did you know they also have native integrations


00:17:50.120 --> 00:17:51.920
with mobile app frameworks?


00:17:51.920 --> 00:17:55.240
Whether you're building an Android or iOS app or both,


00:17:55.240 --> 00:17:56.880
you can gain complete visibility


00:17:56.880 --> 00:17:59.080
into your application's correctness


00:17:59.080 --> 00:18:02.200
both on the mobile side and server side.


00:18:02.200 --> 00:18:05.560
We just completely rewrote Talk Python's mobile apps


00:18:05.560 --> 00:18:07.040
for taking our courses,


00:18:07.040 --> 00:18:10.240
and we massively benefited from having Sentry integration


00:18:10.240 --> 00:18:11.720
right from the start.


00:18:11.720 --> 00:18:14.120
We use Flutter for our native mobile framework,


00:18:14.120 --> 00:18:17.320
and with Sentry, it was literally just two lines of code


00:18:17.320 --> 00:18:20.480
to start capturing errors as soon as they happen.


00:18:20.480 --> 00:18:21.880
Of course, we don't love errors,


00:18:21.880 --> 00:18:24.520
but we do love making our users happy.


00:18:24.520 --> 00:18:27.320
Solving problems as soon as possible with Sentry


00:18:27.320 --> 00:18:28.960
on the mobile Flutter code


00:18:28.960 --> 00:18:31.600
and the Python server-side code together


00:18:31.600 --> 00:18:34.440
made understanding error reports a breeze.


00:18:34.440 --> 00:18:37.400
So whether you're building Python server-side apps


00:18:37.400 --> 00:18:39.400
or mobile apps or both,


00:18:39.400 --> 00:18:41.880
give Sentry a try to get a complete view


00:18:41.880 --> 00:18:43.860
of your app's correctness.


00:18:43.860 --> 00:18:46.020
Thank you to Sentry for sponsoring the show


00:18:46.020 --> 00:18:48.300
and helping us ship more reliable mobile apps


00:18:48.300 --> 00:18:49.140
to all of you.


00:18:49.140 --> 00:18:53.240
- Well, I think it's more broadly,


00:18:53.240 --> 00:18:55.300
one of the things we're gonna talk about is HTMX.


00:18:55.300 --> 00:18:58.260
And I think there is this, these more iterative tools.


00:18:58.260 --> 00:19:00.220
You know, you don't need to jump to React


00:19:00.220 --> 00:19:01.660
if you just want a little thing.


00:19:01.660 --> 00:19:03.260
Like you don't need to go Kubernetes.


00:19:03.260 --> 00:19:04.940
- I heard back in, that was done.


00:19:04.940 --> 00:19:06.760
It was just all APIs now, come on.


00:19:06.760 --> 00:19:07.600
- It's all front end.


00:19:07.600 --> 00:19:12.780
I put a toot up the other day that they convinced me otherwise, me,


00:19:12.780 --> 00:19:14.740
where it's Django is a front-end framework.


00:19:14.740 --> 00:19:16.420
I'm busy writing an application.


00:19:16.420 --> 00:19:19.220
I'm using HTMX, I'm using Alpine, I'm using Tailwind.


00:19:19.220 --> 00:19:23.260
I'm doing it all in Django templates.


00:19:23.260 --> 00:19:28.300
It's like, I'm hardly doing any of the exciting backend stuff that we love Django for.


00:19:28.300 --> 00:19:31.940
It's all front-end, and it's just vanilla Django.


00:19:31.940 --> 00:19:32.380
>> It is.


00:19:32.380 --> 00:19:33.940
>> That's the thing that people who are learning,


00:19:33.940 --> 00:19:35.820
they're full-stack developer and they're like,


00:19:35.820 --> 00:19:40.220
APIs, I gotta do it all. And I mean, you must have this, Michael, with people, your students,


00:19:40.220 --> 00:19:44.860
but I have this a lot of times people who are new say, Oh, I want this and that functionality. And


00:19:44.860 --> 00:19:49.500
I'm often like, don't go to APIs unless you need to. Because if you're a professional Django


00:19:49.500 --> 00:19:53.740
developer on a team of more than 10 people, yeah, you're gonna write APIs because they were,


00:19:53.740 --> 00:19:57.100
there will be front end people who just do front end. But when it's just you,


00:19:57.100 --> 00:20:02.300
and even if there's not front end, there might be a mobile app. That's our primary case of APIs. Or


00:20:02.300 --> 00:20:06.500
You might have a public API for users or other companies to work with.


00:20:06.500 --> 00:20:09.000
It doesn't have to be that you're not doing server-side.


00:20:09.000 --> 00:20:11.800
But for a solo person or a small thing,


00:20:11.800 --> 00:20:15.000
don't just leap to it because it adds so much complexity.


00:20:15.000 --> 00:20:18.800
Do you use Tornado or use an older Python thing?


00:20:18.800 --> 00:20:19.500
Pyramid, okay.


00:20:19.500 --> 00:20:23.700
I've considered switching to something like FastAPI or something like that.


00:20:23.700 --> 00:20:25.700
But then I look and I'm like, you know, it's


00:20:25.700 --> 00:20:28.800
it's like a real thin layer over just what would be the same anyway.


00:20:28.800 --> 00:20:31.700
And scalability is totally good.


00:20:31.700 --> 00:20:33.200
I mean, it works, it works too.


00:20:33.200 --> 00:20:34.860
It'll run for months without me touching it.


00:20:34.860 --> 00:20:38.360
Like the chances the website go down and it's not my fault


00:20:38.360 --> 00:20:42.660
because I deployed something is almost zero, like really, really, really close to zero.


00:20:42.660 --> 00:20:46.120
Either that or something's gone wrong in the data center, but like the website itself.


00:20:46.120 --> 00:20:50.240
And so, yeah, I chose that eight years ago and I'm still cruising with it.


00:20:50.240 --> 00:20:50.620
It's great.


00:20:50.620 --> 00:20:54.960
I had a client ask me about HI, HI, sorry, high availability.


00:20:54.960 --> 00:20:58.460
One time they were like, oh, don't we need multiple servers and multiple this and that?


00:20:58.460 --> 00:21:00.580
I'm like, well, how many nines do we need?


00:21:00.580 --> 00:21:15.820
I know, I can't remember the exact number now off the top of my head, but you're already at three nines, even just deploying on the kind of worst setup in the world, because the number of the amount of downtime you'll have will be sub few minutes, because it will be exactly that you deployed something wrong, and then you revert it.


00:21:15.820 --> 00:21:17.300
Yeah, exactly. Oh my gosh, quick.


00:21:17.300 --> 00:21:28.100
But we have, I think people necessarily don't fully appreciate how much really high-end technology for so little money we have accessible to us with these cloud providers.


00:21:28.100 --> 00:21:40.660
We have the best data centers in the world for $10, right? You know what I mean? It's not like, well, these people, like you have the same thing that Netflix is using and for a while they're doing a third of the traffic of the internet.


00:21:40.660 --> 00:21:47.060
Yes, yeah, exactly. So three nines gives you nine hours off a year and you won't even have nine hours off a year.


00:21:47.060 --> 00:21:49.620
Like, yeah, that's highly unlikely. Yeah.


00:21:49.620 --> 00:21:55.100
You know, if something goes down and you don't fix it, but like, it's literally if you deploy, you fix it quickly.


00:21:55.100 --> 00:22:03.500
You get that kind of uptime without having to have multiple availability zones and boiler failover and all the things that, you know, they like to sell.


00:22:03.500 --> 00:22:04.220
Yeah.


00:22:04.220 --> 00:22:06.580
And yet getting to that point for people who are new,


00:22:06.580 --> 00:22:09.740
just the act of local versus production database


00:22:09.740 --> 00:22:11.660
stops people, like every single person, right?


00:22:11.660 --> 00:22:13.620
They build the site, like it's a blog,


00:22:13.620 --> 00:22:14.780
and then they deploy it and they're like,


00:22:14.780 --> 00:22:15.900
"Where's my blog?"


00:22:15.900 --> 00:22:17.260
And it's like, "Oh, well that database


00:22:17.260 --> 00:22:18.620
"is different than this database."


00:22:18.620 --> 00:22:20.880
Like, you know, after a while I get used to that idea,


00:22:20.880 --> 00:22:22.360
but it's like, the code is there,


00:22:22.360 --> 00:22:23.900
why isn't the data there, right?


00:22:23.900 --> 00:22:25.860
And then, so it's just this scale


00:22:25.860 --> 00:22:28.020
of up to how many nines do you need.


00:22:28.020 --> 00:22:30.340
But most people are focused on just put something up online


00:22:30.340 --> 00:22:32.140
and add continuous integration.


00:22:32.140 --> 00:22:33.940
I mean, really, what are the basics,


00:22:33.940 --> 00:22:36.300
but they're not basic when you're doing it the first couple of times.


00:22:36.300 --> 00:22:38.580
No, they're not basic. They're not basic at all.


00:22:38.580 --> 00:22:41.580
So having something that kind of automates that, I think another thing is,


00:22:41.580 --> 00:22:43.940
you know, you have different team members or


00:22:43.940 --> 00:22:46.540
if you're an individual developer, maybe


00:22:46.540 --> 00:22:50.180
getting something up on the web. I know people I've spoken to about how daunting


00:22:50.180 --> 00:22:54.020
it is. Going from got zero web apps published to one


00:22:54.020 --> 00:22:56.820
is a major challenge, right? Like, I don't know Linux,


00:22:56.820 --> 00:23:00.100
I don't know the terminal, I don't do SSH,


00:23:00.100 --> 00:23:02.100
I don't understand the security,


00:23:02.100 --> 00:23:03.860
I don't understand the best practices.


00:23:03.860 --> 00:23:05.700
Like I just can't, you know.


00:23:05.700 --> 00:23:10.400
Well, and that's something I emphasize in my books is getting something as fast as possible.


00:23:10.400 --> 00:23:13.440
It was a little bit smoother with Heroku than Fly, but Fly is still pretty,


00:23:13.440 --> 00:23:17.940
like I take some shortcuts, but I say they're shortcuts, you know, this isn't the most secure thing ever, but


00:23:17.940 --> 00:23:20.640
just getting something up that first time because


00:23:20.640 --> 00:23:23.140
it doesn't have to be crazy complicated. I think


00:23:23.140 --> 00:23:25.240
the sooner you're dealing with a real live website,


00:23:25.240 --> 00:23:28.140
the better for many reasons. But yeah, that first one.


00:23:28.140 --> 00:23:31.240
You know, you've spent all this time building your application, you're finally ready to


00:23:31.240 --> 00:23:34.200
you know, put it online and then it's like, oh, learn about


00:23:34.200 --> 00:23:37.840
servers and learn about firewalls and learn about


00:23:37.840 --> 00:23:40.440
rewrite rules and learn about


00:23:40.440 --> 00:23:43.440
permissions and groups and users and


00:23:43.440 --> 00:23:44.760
Caching, yeah.


00:23:44.760 --> 00:23:48.360
Well, I just say Django has a deployment checklist to help with this, but I still


00:23:48.360 --> 00:23:52.360
think and others may agree with me in the community that the local to production gap


00:23:52.360 --> 00:23:55.120
is a big one that Django could do things to address.


00:23:55.120 --> 00:23:57.120
For example, like everything defaults to


00:23:57.120 --> 00:23:58.280
local setup.


00:23:58.280 --> 00:24:00.280
The deployment checklist, yes, a great resource.


00:24:00.280 --> 00:24:03.160
I spend a lot of time in my books covering this, if you want,


00:24:03.160 --> 00:24:04.000
you know, hand-holding.


00:24:04.000 --> 00:24:07.320
Oh, and it's not just a checklist on the web that you look at.


00:24:07.320 --> 00:24:10.440
You can run manage.py, you know, space check --


00:24:10.440 --> 00:24:12.320
Yeah, it's a management command and there's a whole,


00:24:12.320 --> 00:24:14.160
I guess it would be the, I think, how many,


00:24:14.160 --> 00:24:15.880
12 or something now is sort of the,


00:24:15.880 --> 00:24:17.640
like, really don't launch it without this.


00:24:17.640 --> 00:24:18.840
These aren't even optimizations.


00:24:18.840 --> 00:24:21.120
This is like, just don't leak secrets everywhere.


00:24:21.120 --> 00:24:22.920
But still, for Django, and I think for a lot of places,


00:24:22.920 --> 00:24:25.840
there's a tension, right, between how friendly you are to beginners


00:24:25.840 --> 00:24:27.640
versus advanced users.


00:24:27.640 --> 00:24:30.160
And I think Django overall has done a very good job of


00:24:30.160 --> 00:24:36.400
still being friendly to beginners, but every most technologies over time, you know, move towards where the


00:24:36.400 --> 00:24:41.280
hardcore users are, because that's who's kind of doing this stuff. So that's a attention Django


00:24:41.280 --> 00:24:45.680
feels Python others, you know, how do you still keep it beginner friendly, but the people who are


00:24:45.680 --> 00:24:47.840
in charge want different things often,


00:24:47.840 --> 00:24:51.760
that's a real tension and programming and frameworks and all sorts of things. And I also think that


00:24:51.760 --> 00:24:57.040
that's why Python is so popular, honestly, right, you can do C++, you can do rust, like these are


00:24:57.040 --> 00:24:58.720
These are really great for advanced people.


00:24:58.720 --> 00:25:02.360
You can do, you know, VB6 or super simple old school things


00:25:02.360 --> 00:25:04.480
that are great, easy for beginners.


00:25:04.480 --> 00:25:06.520
But like Python is easy for beginners,


00:25:06.520 --> 00:25:09.240
but you can kind of bring in some more advanced stuff.


00:25:09.240 --> 00:25:12.180
You can bring in async, you can bring in generators,


00:25:12.180 --> 00:25:14.500
you can bring in ORMs, but you don't have to.


00:25:14.500 --> 00:25:16.040
Where a lot of languages are like,


00:25:16.040 --> 00:25:18.880
guess what, we're gonna start with a void voice,


00:25:18.880 --> 00:25:21.400
void star star, we're gonna go from there, you know?


00:25:21.400 --> 00:25:23.480
- Well, the old saying was second best for everything.


00:25:23.480 --> 00:25:25.440
And I think that's not, you know,


00:25:25.440 --> 00:25:27.920
I think it's first best in a number of places now too.


00:25:27.920 --> 00:25:28.760
- I agree.


00:25:28.760 --> 00:25:30.560
I think people say that, but I think honestly,


00:25:30.560 --> 00:25:33.120
it's really, if it's not the first best,


00:25:33.120 --> 00:25:35.680
it is on par with the other first best, right?


00:25:35.680 --> 00:25:38.880
It is a front running contender for a thing


00:25:38.880 --> 00:25:40.680
where I would say it probably is, you know,


00:25:40.680 --> 00:25:43.440
the undisputed king is in data science and machine learning.


00:25:43.440 --> 00:25:44.840
- Yeah, it's all the libraries.


00:25:44.840 --> 00:25:46.260
- There's not a competitor out there


00:25:46.260 --> 00:25:49.640
that is near the level of depth in the ecosystem.


00:25:49.640 --> 00:25:50.840
- Well, because there's R,


00:25:50.840 --> 00:25:53.440
and R doesn't have open source in the community


00:25:53.440 --> 00:25:54.560
that Python does.


00:25:54.560 --> 00:25:55.440
- Yeah. - That seems to be,


00:25:55.440 --> 00:25:57.200
I mean, most, like here in Boston,


00:25:57.200 --> 00:25:58.620
a lot of friends are scientists


00:25:58.620 --> 00:26:00.420
and it's either R or Python,


00:26:00.420 --> 00:26:02.160
and they all kind of want to use Python,


00:26:02.160 --> 00:26:03.600
but sometimes they use R,


00:26:03.600 --> 00:26:05.720
but Python just can do more things.


00:26:05.720 --> 00:26:06.900
So depending on what you need.


00:26:06.900 --> 00:26:08.960
- The next episode I'm going to release,


00:26:08.960 --> 00:26:10.680
which I've already recorded, but I haven't released,


00:26:10.680 --> 00:26:12.860
so you all don't know about it necessarily,


00:26:12.860 --> 00:26:15.380
is "Shiny for Python," which is pretty interesting.


00:26:15.380 --> 00:26:18.920
Like that's the R web story coming to Python,


00:26:18.920 --> 00:26:20.520
which I think is just more cool stuff


00:26:20.520 --> 00:26:21.600
you can do in Python, honestly.


00:26:21.600 --> 00:26:23.600
- Actually, I need to check the Python version of that,


00:26:23.600 --> 00:26:26.080
'cause one of the, we just had DjangoCon Europe


00:26:26.080 --> 00:26:28.920
earlier this year, and one of the people who came up to me


00:26:28.920 --> 00:26:30.720
is someone who worked for the, what do you say,


00:26:30.720 --> 00:26:33.480
the UK government on their putting systems together,


00:26:33.480 --> 00:26:36.440
and he had bought my books to get his team to move--


00:26:36.440 --> 00:26:38.200
- Maybe started with double O or something or other,


00:26:38.200 --> 00:26:39.040
I don't know.


00:26:39.040 --> 00:26:39.880
(laughing)


00:26:39.880 --> 00:26:40.720
- No, not that cool.


00:26:40.720 --> 00:26:44.520
You just COVID information, health stuff, NHIS.


00:26:44.520 --> 00:26:46.800
Is that, yeah, Nathan and Holt, NHS.


00:26:46.800 --> 00:26:47.800
- NHS, I think.


00:26:47.800 --> 00:26:49.280
- They were able, so he had said, though,


00:26:49.280 --> 00:26:51.240
that they were able to use R and use the,


00:26:51.240 --> 00:26:53.360
what is it called, the Webby to put things online,


00:26:53.360 --> 00:26:56.840
But for interactivity, that's where they hit problems.


00:26:56.840 --> 00:26:59.760
So he and his team of 12 had moved a lot of stuff


00:26:59.760 --> 00:27:03.680
over to Django for the just more interactivity of it all.


00:27:03.680 --> 00:27:06.760
But this is something the British government was doing.


00:27:06.760 --> 00:27:10.080
So it's an area I wanna learn more about Shiny


00:27:10.080 --> 00:27:12.160
and how all that works because it's always been like,


00:27:12.160 --> 00:27:13.480
why can't you just take a Jupyter notebook


00:27:13.480 --> 00:27:14.520
and put it online?


00:27:14.520 --> 00:27:17.380
I mean, right, like often put online.


00:27:17.380 --> 00:27:18.720
So I'm trying to understand that too


00:27:18.720 --> 00:27:21.040
because the data science space is so big


00:27:21.040 --> 00:27:23.420
in the web space feels small in comparison,


00:27:23.420 --> 00:27:25.100
but yeah, I look forward to that episode.


00:27:25.100 --> 00:27:27.260
- My quick takeaway, talking to Joe there,


00:27:27.260 --> 00:27:29.820
was they really thought about how to make it


00:27:29.820 --> 00:27:32.660
the Pythonic way, and it seems like they really embraced it,


00:27:32.660 --> 00:27:34.620
not just, "We'll get it to run on Python,"


00:27:34.620 --> 00:27:36.660
but it seems like it's gonna be a good option


00:27:36.660 --> 00:27:38.420
for people out there, so that's really cool.


00:27:38.420 --> 00:27:40.260
I wanna make sure that we talk about


00:27:40.260 --> 00:27:43.180
some of the history of Django and the future of Django,


00:27:43.180 --> 00:27:44.780
but I know something that all three of us


00:27:44.780 --> 00:27:47.700
are super excited about is HTMX.


00:27:47.700 --> 00:27:49.660
So let's, and we were talking about it,


00:27:49.660 --> 00:27:51.200
front end stuff and the back end.


00:27:51.200 --> 00:27:54.520
And so I don't typically share jokes on talk by that much.


00:27:54.520 --> 00:27:58.240
It's more Python bites the show at the end there, but there's this great meme


00:27:58.240 --> 00:28:03.240
and it has the back end dev and it has HTMX two people on the HTMX one.


00:28:03.240 --> 00:28:05.720
Speaking to the back end dev says, look at me, look at me.


00:28:05.720 --> 00:28:07.120
HTMX is talking to you.


00:28:07.120 --> 00:28:08.040
This is full stack.


00:28:08.040 --> 00:28:09.040
Now you're full stack.


00:28:09.040 --> 00:28:09.880
Now, come on.


00:28:09.880 --> 00:28:11.880
You're not just a back end developer.


00:28:11.880 --> 00:28:12.520
You're full stack.


00:28:12.520 --> 00:28:13.580
Cause you're doing HTMX.


00:28:13.580 --> 00:28:15.680
And I think, you know, it's funny.


00:28:15.880 --> 00:28:20.680
Also the thing called X that is kind of Twitter and half X and partially branded.


00:28:20.680 --> 00:28:22.280
That is a whole different joke.


00:28:22.280 --> 00:28:25.440
But I think just this joke up here,


00:28:25.440 --> 00:28:29.560
it really touches on something that I think makes Django,


00:28:29.560 --> 00:28:33.040
makes Blast, make all the Python web frameworks way


00:28:33.040 --> 00:28:36.840
more holistic and important coming back to build these apps.


00:28:36.840 --> 00:28:38.160
It's not just like, well,


00:28:38.160 --> 00:28:42.680
we have to use React, so we're going to push you to just write JSON and points and so on.


00:28:42.680 --> 00:28:47.320
Like, no, you could actually flip that and just embrace Python more with HTMX.


00:28:47.320 --> 00:28:49.800
Who wants to start riffing on HTMX and Django?


00:28:49.800 --> 00:28:51.480
Carlton, you go ahead. This is more of your...


00:28:51.480 --> 00:28:55.640
No, it's exactly that. So, I mean, two years ago, three years ago, it was all like,


00:28:55.640 --> 00:29:00.840
"Oh, Python's existential threat because everything's going to be rewritten in JavaScript


00:29:00.840 --> 00:29:05.320
because, you know, everything on the front end is JavaScript. And so it doesn't make sense having


00:29:05.320 --> 00:29:09.400
these two languages. So it's all going to just swipe over and Python's going to disappear in


00:29:09.400 --> 00:29:14.120
in a puff of JavaScript. Well, now it's kind of like, well, really, is that is that what


00:29:14.120 --> 00:29:20.320
I see happening? Not No, what I see is the super established, mature web framework showing


00:29:20.320 --> 00:29:26.800
the real strength of the HTML tooling and the hypermedia tooling that they've, you know,


00:29:26.800 --> 00:29:30.880
it's just so fully developed. I mean, Django is 18 years old, summer, right? So there's


00:29:30.880 --> 00:29:35.920
a lot of history there. There's a lot of development time gone in, there's a lot of richness. And


00:29:35.920 --> 00:29:40.760
Once you start using HTMX, it really is, it's like, "Oh, do you know what? This just fits


00:29:40.760 --> 00:29:47.520
the patterns that Django wants you to use." It works with Django forms and just, "Oh look,


00:29:47.520 --> 00:29:52.080
it's just a form view. And all I do is add this little header in and, oh look, I changed


00:29:52.080 --> 00:29:58.600
the template maybe. And oh look, it's a fully interactive, rich client that the users can't


00:29:58.600 --> 00:30:03.200
tell the difference between that and a full SBA you built with Rack. Or perhaps they can


00:30:03.200 --> 00:30:06.200
because it loads quicker, because it's not, it's actually faster.


00:30:06.200 --> 00:30:09.900
And one of the great reasons for switching to SBAs was they were meant to be quicker.


00:30:09.900 --> 00:30:14.200
But the reality is, after all these years, they're loading so much JavaScript into the page


00:30:14.200 --> 00:30:19.000
and doing so much work in the browser in order to get the HTML to be interactive,


00:30:19.000 --> 00:30:20.800
that in fact, they feel slower to the user.


00:30:20.800 --> 00:30:24.800
So for people who don't know, HTMX lets you put attributes on HTML,


00:30:24.800 --> 00:30:30.800
not complicated stuff like if you had an image, you could say hx-get and give it a URL.


00:30:30.800 --> 00:30:33.320
You could say hx-target is some other thing.


00:30:33.320 --> 00:30:34.700
So if you click on that image,


00:30:34.700 --> 00:30:36.400
it'll go get this context,


00:30:36.400 --> 00:30:38.840
talk to Django, pull back a fragment of


00:30:38.840 --> 00:30:40.680
HTML and pop it with


00:30:40.680 --> 00:30:42.800
possible animations and transitions and stuff into


00:30:42.800 --> 00:30:45.320
another section for like a master detail,


00:30:45.320 --> 00:30:48.320
like list details, view story.


00:30:48.320 --> 00:30:53.440
It's just as nice as most single-page app,


00:30:53.440 --> 00:30:54.900
most front-end frameworks.


00:30:54.900 --> 00:30:57.200
I suppose if the thing completely


00:30:57.200 --> 00:31:00.400
loaded all the different data and had zero server interaction,


00:31:00.400 --> 00:31:04.360
but then the startup time of that would be completely bad, like you said, Carlton.


00:31:04.360 --> 00:31:05.600
So it's fantastic.


00:31:05.600 --> 00:31:09.160
And let's go back to like the beginner and the people doing simple stuff.


00:31:09.160 --> 00:31:13.160
HTML is not just for beginners, but it really works well for them


00:31:13.160 --> 00:31:16.520
because they no longer have to learn a different framework


00:31:16.520 --> 00:31:20.120
or never different language and a framework like JavaScript and Vue.


00:31:20.120 --> 00:31:21.560
They don't have to write APIs.


00:31:21.560 --> 00:31:22.920
They just do the thing they're doing.


00:31:22.920 --> 00:31:25.680
And all of a sudden, all this cool interactivity comes in, right?


00:31:25.680 --> 00:31:30.360
Yeah. And like for a decade, it hasn't felt to me, you know, I'm 20 years in the business.


00:31:30.360 --> 00:31:35.840
I know how to do quite a lot, but for a decade or so, it hasn't felt to me feasible to be


00:31:35.840 --> 00:31:41.520
building web, good high quality, professional quality web applications single handed. But


00:31:41.520 --> 00:31:45.960
it feels like that again. It feels like, you know what, I don't need a whole team here.


00:31:45.960 --> 00:31:50.480
And with interest rates going up and inflation going, you know, money being tight now, I


00:31:50.480 --> 00:31:56.280
honestly think there is a real big commercial competitive advantage coming back to sort


00:31:56.280 --> 00:32:01.920
of the backend. And that's not just Django, but Django, Flask, and Rails even, if you


00:32:01.920 --> 00:32:07.320
want a different language. But those kind of stacks where you can produce a really competent


00:32:07.320 --> 00:32:13.000
CRUD backend in very little time. And then you can produce the front end that's rich


00:32:13.000 --> 00:32:18.040
enough and feels good and feels developed for a fraction of the team size, one, two


00:32:18.040 --> 00:32:22.120
developers instead of five, 10 developers.


00:32:22.120 --> 00:32:27.580
This portion of Talk Python to Me is brought to you by us over at Talk Python Training.


00:32:27.580 --> 00:32:30.980
Let me tell you about one of our really popular courses.


00:32:30.980 --> 00:32:35.380
HTMX plus Flask, modern Python web apps hold the JavaScript.


00:32:35.380 --> 00:32:40.400
HTMX is one of the hottest properties in web development today, and for good reason.


00:32:40.400 --> 00:32:45.420
You might even remember all the stuff we talked about with Carson Gross back on episode 321.


00:32:45.420 --> 00:32:49.920
HTMX, along with the libraries and techniques we introduced in our new course, will have


00:32:49.920 --> 00:32:54.840
you writing the best Python web apps you've ever written. Clean, fast, and interactive,


00:32:54.840 --> 00:32:58.680
all without that front-end overhead. If you're a Python web developer that has wanted to


00:32:58.680 --> 00:33:03.700
build more dynamic, interactive apps but don't want to or can't write a significant portion


00:33:03.700 --> 00:33:09.800
of your app in rich front-end JavaScript frameworks, you'll absolutely love HTMX. Check it out


00:33:09.800 --> 00:33:17.280
over at talkpython.fm/htmx or just click the link in your podcast player show notes.


00:33:17.280 --> 00:33:22.440
I think it also speaks to the wisdom, I would say, of, so Django has a templating language,


00:33:22.440 --> 00:33:28.940
but it's deliberately basic. You can use Jinja, and Django by design, because 18 years ago,


00:33:28.940 --> 00:33:31.880
the idea was, well, we're not a front-end framework, who knows what's going to happen?


00:33:31.880 --> 00:33:37.120
And that provides the opportunity for, HTML comes along, just slide it right in. Like


00:33:37.120 --> 00:33:41.480
Django is not, doesn't have all this stuff built on top of it, trying to do that too.


00:33:41.480 --> 00:33:45.080
So that can be a frustration for beginners, that why doesn't, why don't the templates


00:33:45.080 --> 00:33:51.400
do more. They actually do a lot, but it opens it up to HTMX. And then there's Django has third party


00:33:51.400 --> 00:33:55.640
package system. So there's one that Adam Johnson, who's a member of the community has Django HTMX


00:33:55.640 --> 00:34:00.680
that has extensions, like basically everything you want to do, you can kind of copy and paste


00:34:00.680 --> 00:34:05.480
it in. I mean, understand what you're doing. But so this, yeah, Django HTMX is a great resource.


00:34:05.480 --> 00:34:09.800
But it's not, it's not rocket science. It's not, you know, you're not reinventing the wheel,


00:34:09.800 --> 00:34:13.640
right? You have a list view, detail view, you want to do auto scroll, you want to do some


00:34:13.640 --> 00:34:17.420
some validation on a form. It's the same solve problems out there. You just have to know


00:34:17.420 --> 00:34:18.420
where to look.


00:34:18.420 --> 00:34:19.420
You go quite far with it. Yeah.


00:34:19.420 --> 00:34:23.880
That would be an interesting question of where do you really need to not use it? I mean,


00:34:23.880 --> 00:34:29.720
certainly even in a team setting, like it's just such less complexity, and it's arguably


00:34:29.720 --> 00:34:31.480
faster and it gets you what you need.


00:34:31.480 --> 00:34:37.560
Where do you not use it? So I'm building a quite rich drag and drop interface for a tool.


00:34:37.560 --> 00:34:42.000
It's pretty complex. It's pretty interactive. And I'm using Alpine to do that on the page.


00:34:42.000 --> 00:34:47.360
And then, but when it comes back to the server request, then dropping back to HTMX to send


00:34:47.360 --> 00:34:51.920
the things and get a chunk back. And I can quite often replace either a part or all of


00:34:51.920 --> 00:34:58.440
the Alpine component with the stuff from the HTMX. So it's still using rich JavaScript


00:34:58.440 --> 00:35:02.840
in the client where you need it. But you go an awful long way before you need that. And


00:35:02.840 --> 00:35:07.200
you're dropping in forms and you've got a nested list view and you're fetching that


00:35:07.200 --> 00:35:11.140
nested list view and dropping that in place. And that's in a modal, which is perhaps powered


00:35:11.140 --> 00:35:16.400
by Alpine. And it looks rich and smooth, and it's, it's everything you want. But the amount


00:35:16.400 --> 00:35:18.120
of code is very minimal.


00:35:18.120 --> 00:35:21.960
It's progressive too, right? I mean, Vue.js, when it first came on the scene, I forget


00:35:21.960 --> 00:35:25.440
if it's still doing this, but like its whole thing was the progressive, you know, you don't,


00:35:25.440 --> 00:35:29.520
you don't need the full React bundle, you can kind of ramp your way in. And so I think


00:35:29.520 --> 00:35:33.920
there's just more ways to get from here to there. And you don't have to just go to APIs


00:35:33.920 --> 00:35:35.160
and the full blown thing.


00:35:35.160 --> 00:35:39.520
I have to admit, last week, I was, or perhaps the week before I was sitting there, I was


00:35:39.520 --> 00:35:43.200
doing everything with HTMX. And I was like, I need a full page load here. I need it to


00:35:43.200 --> 00:35:46.960
refresh the whole page. How do I do that? How do I do that? And I had to step away,


00:35:46.960 --> 00:35:50.520
go and get coffee. And as I was boiling the kettle, I was like, oh, I could just submit


00:35:50.520 --> 00:35:56.360
the form normally. I'll fall back to just doing what the browser does by default. Oh,


00:35:56.360 --> 00:35:57.360
yeah. Okay.


00:35:57.360 --> 00:36:00.080
You just always have to think if it's getting clever, like you're missing something.


00:36:00.080 --> 00:36:04.520
Yeah, yeah. No, it's exactly that. It's like, I was so in the zone, I'd forgotten the base


00:36:04.520 --> 00:36:06.040
technology I was using.


00:36:06.040 --> 00:36:09.540
I did a talk at Pi Bay food cart edition a couple years ago,


00:36:09.540 --> 00:36:12.040
and I was talking about it on X,


00:36:12.040 --> 00:36:14.540
whatever that thing, and we're going to have to figure this out.


00:36:14.540 --> 00:36:17.540
That thing might be gone pretty soon, but we'll see.


00:36:17.540 --> 00:36:19.240
Anyway, I was talking about it, and I said,


00:36:19.240 --> 00:36:21.440
"Look, you can write these awesome web apps with Python,


00:36:21.440 --> 00:36:22.640
you don't have to use JavaScript."


00:36:22.640 --> 00:36:25.740
And somebody's like, "Michael, that's really insensitive.


00:36:25.740 --> 00:36:30.140
People, you shouldn't be degrading the JavaScript developers."


00:36:30.140 --> 00:36:32.140
And I'm like, "That's not the message.


00:36:32.140 --> 00:36:35.240
It's the message that the language you choose, whatever it is,


00:36:35.240 --> 00:36:37.740
you can just embrace that and do a lot more.


00:36:37.740 --> 00:36:40.200
And like the biggest example of that is that


00:36:40.200 --> 00:36:43.740
this is a popular framework in the Node community,


00:36:43.740 --> 00:36:45.120
which is JavaScript.


00:36:45.120 --> 00:36:48.920
And the big value here is that you don't have to also have APIs,


00:36:48.920 --> 00:36:51.580
you don't have to also have a frontend and a backend framework


00:36:51.580 --> 00:36:52.920
in the context.


00:36:52.920 --> 00:36:55.120
Like, you guys probably know,


00:36:55.120 --> 00:36:57.120
teaching how people deploy stuff is like,


00:36:57.120 --> 00:37:01.300
well, there's what your frontend can do, and then there's the security of the browser,


00:37:01.300 --> 00:37:03.300
and there's all the constraints of that.


00:37:03.300 --> 00:37:04.640
and then your backend server,


00:37:04.640 --> 00:37:06.240
oh, it can talk to the database directly,


00:37:06.240 --> 00:37:07.360
and it could do these other things.


00:37:07.360 --> 00:37:10.500
But with HTMX, like, your front-end code executes


00:37:10.500 --> 00:37:12.600
in the same context as your backend code.


00:37:12.600 --> 00:37:14.400
So you don't have to have, like, two security models,


00:37:14.400 --> 00:37:16.140
two runtime models, two all these,


00:37:16.140 --> 00:37:18.260
two conceptual ways of like, well,


00:37:18.260 --> 00:37:20.300
what's, okay, it's happening here, so that means this.


00:37:20.300 --> 00:37:22.160
Like, no, it like all happens in one place.


00:37:22.160 --> 00:37:23.040
And that's even valuable


00:37:23.040 --> 00:37:25.040
if you were doing Node and JavaScript.


00:37:25.040 --> 00:37:26.240
- Yeah, no, absolutely.


00:37:26.240 --> 00:37:28.600
I think there's a, on the HTMX website,


00:37:28.600 --> 00:37:30.240
there's an awesome essay,


00:37:30.240 --> 00:37:31.440
it could be the intercooler,


00:37:31.440 --> 00:37:32.940
but it talks about this impedance


00:37:32.940 --> 00:37:34.420
between the two sides.


00:37:34.420 --> 00:37:37.300
And the example it gives is GraphQL, I think.


00:37:37.300 --> 00:37:40.340
And the GraphQL gives amazing power onto the front end


00:37:40.340 --> 00:37:41.900
and you construct all these queries,


00:37:41.900 --> 00:37:43.500
but are they safe and who knows?


00:37:43.500 --> 00:37:45.820
And what companies end up, often end up doing


00:37:45.820 --> 00:37:47.460
is whitelisting the query.


00:37:47.460 --> 00:37:50.020
So it's in fact, you can't leverage


00:37:50.020 --> 00:37:51.780
the full expressive GraphQL in the client


00:37:51.780 --> 00:37:53.860
because it's only a certain number of queries


00:37:53.860 --> 00:37:56.700
which are allowed in order to get over this security problem.


00:37:56.700 --> 00:37:58.780
Those essays there are just phenomenal.


00:37:58.780 --> 00:38:01.900
- We should mention, so Carleton's given two talks this year,


00:38:01.900 --> 00:38:04.300
one of them at DjangoCon Europe,


00:38:04.300 --> 00:38:06.740
he touches upon the locality of behavior.


00:38:06.740 --> 00:38:08.140
I just put in the show notes for you, Michael.


00:38:08.140 --> 00:38:11.020
It's one of the essays, but some of his projects,


00:38:11.020 --> 00:38:13.220
I saw everyone around me was writing down,


00:38:13.220 --> 00:38:15.100
perhaps you want to expound on that idea, Carlton,


00:38:15.100 --> 00:38:16.520
because it's not necessarily a new idea,


00:38:16.520 --> 00:38:19.220
but it really seemed to resonate at DjangoCon with people.


00:38:19.220 --> 00:38:21.060
- The talk was called Yak Shaving,


00:38:21.060 --> 00:38:22.920
to where the puck's gonna be, and it was about,


00:38:22.920 --> 00:38:24.580
it's just been about what I've been doing


00:38:24.580 --> 00:38:26.860
since I stepped down as a fellow in end of March.


00:38:26.860 --> 00:38:29.020
So April, I sat down to start writing software


00:38:29.020 --> 00:38:30.660
with Django again, rather than on Django,


00:38:30.660 --> 00:38:31.620
as I said at the beginning.


00:38:31.620 --> 00:38:34.900
And the sort of the hook that I built the whole talk around


00:38:34.900 --> 00:38:37.420
was HTMX and this idea of locality behavior.


00:38:37.420 --> 00:38:39.980
And so the example that I gave in the talk,


00:38:39.980 --> 00:38:42.020
and which is from the essay there is,


00:38:42.020 --> 00:38:45.540
HTMX has got just the one HTML file open


00:38:45.540 --> 00:38:47.680
versus a jQuery example, which is very similar,


00:38:47.680 --> 00:38:49.100
but it's over two files.


00:38:49.100 --> 00:38:52.100
And, you know, if you just, it's not the only consideration,


00:38:52.100 --> 00:38:53.180
but in that one case,


00:38:53.180 --> 00:38:55.380
you've got one file open versus two files open,


00:38:55.380 --> 00:38:57.180
well, there's better locality of behavior


00:38:57.180 --> 00:38:58.560
where you've got one file open.


00:38:58.560 --> 00:39:00.940
And that really, when I read that essay,


00:39:00.940 --> 00:39:03.580
really like struck a bell with me for years, I've been talking


00:39:03.580 --> 00:39:06.540
to clients about this. And you've got a form a Django form,


00:39:06.540 --> 00:39:09.460
and it's perhaps only got four lines or three lines, it's


00:39:09.460 --> 00:39:12.220
virtually nothing. And it'll be off on its own in a separate


00:39:12.220 --> 00:39:15.380
form stop pi file, rather than next to the view you're working


00:39:15.380 --> 00:39:18.220
on. And so you have to go and open that second form stop five


00:39:18.220 --> 00:39:20.820
pi file to see the form. And it's always just declares the


00:39:20.820 --> 00:39:23.060
fields. And that's all it does. And then you go back to the view.


00:39:23.060 --> 00:39:25.620
And you have to kind of remember it was if you just move that


00:39:25.620 --> 00:39:29.540
form kind of next to the view, all of a sudden, it's all within


00:39:29.540 --> 00:39:33.080
one screen on your, on your editor and you've, it's much easier to understand.


00:39:33.080 --> 00:39:36.540
And then you're kind of, your, your speed of development increases.


00:39:36.540 --> 00:39:40.000
And the more I've been playing with this, the more I've used this, it's just like,


00:39:40.000 --> 00:39:45.740
yeah, actually I'm able to, I'm able to work much faster by focus, particularly


00:39:45.740 --> 00:39:48.840
of a new code, like when your code starts to get bigger and more gnarly and more


00:39:48.840 --> 00:39:52.000
curly, and there's more bits to it, then, okay, you want to break it out so that it


00:39:52.000 --> 00:39:54.500
maintains, it remains maintainable.


00:39:54.500 --> 00:39:58.300
But when you're first working on it and there isn't much of it and it's constantly


00:39:58.300 --> 00:40:02.720
in flux, keeping it all together. It just helps you go faster. It's this idea of locality


00:40:02.720 --> 00:40:06.840
of behavior. It's, it's, it's phenomenal. I'm just a massive fan of it.


00:40:06.840 --> 00:40:12.760
Yeah, it's really a brilliant framework. And so for Django people, Django dash HTMX, that's


00:40:12.760 --> 00:40:15.200
where the magic is to get it easily integrated.


00:40:15.200 --> 00:40:19.760
Yeah. So that's a, the basics of that is a middleware, which will add a few, an HTMX


00:40:19.760 --> 00:40:23.760
attribute to the request object, which lets you query it. So is this an HTMX request?


00:40:23.760 --> 00:40:28.040
Has it got this header? Is it wanting to redirect? Is it wanting to do a full page refresh? Is


00:40:28.040 --> 00:40:31.000
It got, you know, the various headers that HTMX sends,


00:40:31.000 --> 00:40:33.440
it'll add those and a few other niceties as well.


00:40:33.440 --> 00:40:34.840
But yeah, you may as well use that.


00:40:34.840 --> 00:40:36.040
That's a good package from Adam.


00:40:36.040 --> 00:40:37.160
It's one of the cool--


00:40:37.160 --> 00:40:38.440
- Adam knows what he's talking about.


00:40:38.440 --> 00:40:39.280
- Nice, all right.


00:40:39.280 --> 00:40:41.840
Django, 18, 18 years old.


00:40:41.840 --> 00:40:44.200
- Yes, amazingly, amazingly.


00:40:44.200 --> 00:40:45.080
It's old enough to vote.


00:40:45.080 --> 00:40:47.240
- Yeah, old enough to vote, yeah.


00:40:47.240 --> 00:40:48.880
- It is old enough to vote, not to drink yet,


00:40:48.880 --> 00:40:50.440
so it's not gonna get into trouble


00:40:50.440 --> 00:40:52.000
on the server for a few more years.


00:40:52.000 --> 00:40:53.240
- It is on its holiday.


00:40:53.240 --> 00:40:54.760
- Okay, well, that's true, yes, okay.


00:40:54.760 --> 00:40:57.280
In Europe, it actually, it totally is.


00:40:57.280 --> 00:40:59.800
I remember when we lived there, my daughters were 16


00:40:59.800 --> 00:41:01.680
and we took them out for their 16th birthday.


00:41:01.680 --> 00:41:04.440
So yeah, but in the US we have these rules, you know.


00:41:04.440 --> 00:41:07.360
- Two things, so Django has major releases update


00:41:07.360 --> 00:41:08.200
every eight months.


00:41:08.200 --> 00:41:12.520
So 4.2 came out in April, 5.0 come out in December.


00:41:12.520 --> 00:41:15.440
In between there's 4.2.1, 4.2.2.


00:41:15.440 --> 00:41:18.240
This is all the work the fellows, Carlton, would do.


00:41:18.240 --> 00:41:20.600
But there's also, so in the Django News newsletter,


00:41:20.600 --> 00:41:24.480
there is almost every day there is a new PR accepted


00:41:24.480 --> 00:41:26.440
and merged into Django.


00:41:26.440 --> 00:41:29.720
So on the Django news newsletter, one of the things we have now is a section


00:41:29.720 --> 00:41:32.260
highlighting like the changes this week.


00:41:32.260 --> 00:41:37.580
And I think last week there were 18 new PRs and that's not just someone opening it up.


00:41:37.580 --> 00:41:40.340
That's like open, discussed, accepted, reviewed.


00:41:40.340 --> 00:41:43.060
Like there's so much activity going on.


00:41:43.060 --> 00:41:48.200
So even as it's 18 years old and it is mature, there is still just so much happening.


00:41:48.200 --> 00:41:51.340
And I think that's one of the messages Carlton and I try to get to people is like,


00:41:51.340 --> 00:41:53.840
it's not just this static thing at all.


00:41:54.020 --> 00:41:56.660
There's so much that's happening and yet it won't break on you,


00:41:56.660 --> 00:41:58.900
unlike some other newer technologies.


00:41:58.900 --> 00:42:05.300
I mean, talk about the influx of tickets just while, why does Django need fellows?


00:42:05.300 --> 00:42:09.180
The reason these fellows is because there's basically five new tickets every single day.


00:42:09.180 --> 00:42:13.540
It's over a thousand new tickets a year, you know, 1200 new tickets a year, every year.


00:42:13.540 --> 00:42:15.460
And they keep getting handled.


00:42:15.460 --> 00:42:16.820
They keep getting dealt with.


00:42:16.820 --> 00:42:18.140
The PRs keep getting merged.


00:42:18.140 --> 00:42:20.020
The security releases keep coming.


00:42:20.020 --> 00:42:21.860
And without the fellows, it just wouldn't have happened.


00:42:21.860 --> 00:42:28.760
Django would have sort of just ground into an ever bigger ball of unanswered tickets, unresponded, you know, things.


00:42:28.760 --> 00:42:34.720
And so without it's a project of such a size that without the paid role, it just wouldn't be maintainable.


00:42:34.720 --> 00:42:38.840
Some of these do get resolved. I mean, how long was Lily's one on database constraints?


00:42:38.840 --> 00:42:41.420
That was like 13 years, 12, 13 years.


00:42:41.420 --> 00:42:42.420
Yeah, tell that story.


00:42:42.420 --> 00:42:44.600
This is one of my favorite features of Django 5.0.


00:42:44.600 --> 00:42:48.600
It's come out. So we haven't even talked about Django 4.2, but Django 5.0 is coming out soon.


00:42:48.600 --> 00:42:50.720
And in there, so there's some really big ones,


00:42:50.720 --> 00:42:52.040
there's database defaults.


00:42:52.040 --> 00:42:53.880
So you've always, on a model field,


00:42:53.880 --> 00:42:56.160
you've always been able to declare a default value.


00:42:56.160 --> 00:42:57.200
So, you know, if there isn't one,


00:42:57.200 --> 00:42:59.560
give it a date time field, give it now,


00:42:59.560 --> 00:43:01.400
if it is a classic default.


00:43:01.400 --> 00:43:03.320
But those are from 5.0,


00:43:03.320 --> 00:43:05.540
you'll be able to declare those as database defaults,


00:43:05.540 --> 00:43:07.520
which may not sound like much,


00:43:07.520 --> 00:43:09.800
but A, it's quicker, it's moving work into the database.


00:43:09.800 --> 00:43:12.200
But B, not every connection to your database


00:43:12.200 --> 00:43:13.840
goes by your Django application.


00:43:13.840 --> 00:43:15.840
So you're able to have database level default.


00:43:15.840 --> 00:43:17.040
And so if there is a script,


00:43:17.040 --> 00:43:21.440
isn't using the Django ORM, then you still get the value of that. And that ties in with


00:43:21.440 --> 00:43:26.360
work that's been done on constraints with database constraints have been massively powered


00:43:26.360 --> 00:43:30.720
up. And they'll even now, you know, your form generation will generate validators that are


00:43:30.720 --> 00:43:36.400
based on the database constraints. And it's just so much richness coming out. I think


00:43:36.400 --> 00:43:42.120
I really think we're also going to get database cascades in Django 5.0. It's so it's nearly


00:43:42.120 --> 00:43:45.820
ready. There's a month or so before the feature freeze, I think it's going to go in, in which


00:43:45.820 --> 00:43:50.700
case, we're going to have DB defaults and DB level cascades, both, you know, added to


00:43:50.700 --> 00:43:56.060
Django both of those, it's a decade or more in the resolving in a new release. And that's


00:43:56.060 --> 00:43:57.860
it's just, oh, wow, that's really exciting.


00:43:57.860 --> 00:44:03.660
Yeah, for a lot of people, a lot of companies, the database is the source of truth for the


00:44:03.660 --> 00:44:08.140
apps, right? And like, sure, your code may talk to it, but what is in the database, like


00:44:08.140 --> 00:44:13.700
there are people whose job it is to defend the schema, they call them DBAs, right?


00:44:13.700 --> 00:44:15.940
- So Django 4.2 added DB comments,


00:44:15.940 --> 00:44:17.880
so you could add schema level comments


00:44:17.880 --> 00:44:20.340
to your model fields to explain the use of the model field.


00:44:20.340 --> 00:44:21.420
Again, it's for--


00:44:21.420 --> 00:44:22.380
- Those scenarios, yeah.


00:44:22.380 --> 00:44:24.420
- For people who are serious about their databases,


00:44:24.420 --> 00:44:26.580
that these features are just massively important.


00:44:26.580 --> 00:44:29.260
- Yeah, I think it's certainly worth considering


00:44:29.260 --> 00:44:31.740
that there will be other apps, there will be other tools,


00:44:31.740 --> 00:44:33.860
and maybe even data science, right?


00:44:33.860 --> 00:44:35.860
The data science angle is huge,


00:44:35.860 --> 00:44:37.900
often wants to now talk to the database.


00:44:37.900 --> 00:44:39.500
And even if it's in Python,


00:44:39.500 --> 00:44:42.620
it's unlikely that in Jupyter you're gonna pull in your ORM,


00:44:42.620 --> 00:44:45.020
you're probably using some other data science


00:44:45.020 --> 00:44:47.300
oriented library to talk to that.


00:44:47.300 --> 00:44:49.940
And so pushing those defaults down is viable.


00:44:49.940 --> 00:44:51.420
- Well, so Michael, you're as situated as anyone


00:44:51.420 --> 00:44:52.260
to answer this.


00:44:52.260 --> 00:44:53.420
Carlton and I are in the Django world,


00:44:53.420 --> 00:44:56.500
but how do we bridge the data science to web?


00:44:56.500 --> 00:44:57.820
Doesn't need to be Django world.


00:44:57.820 --> 00:44:59.780
Like what, do they need to be on the web?


00:44:59.780 --> 00:45:01.780
And if so, what's holding them back?


00:45:01.780 --> 00:45:04.580
'Cause it just feels like this megaton star


00:45:04.580 --> 00:45:06.580
of data science in this tiny little web thing.


00:45:06.580 --> 00:45:07.780
But how do they share stuff?


00:45:07.780 --> 00:45:09.220
How do they interact with it?


00:45:09.220 --> 00:45:10.340
- Yeah, you've got your notebook


00:45:10.340 --> 00:45:12.420
and then you wanna publish it somewhere, right?


00:45:12.420 --> 00:45:14.900
- Yeah, or just share your information


00:45:14.900 --> 00:45:17.340
or you have a database of COVID things.


00:45:17.340 --> 00:45:19.060
For example, in the UK, you wanna put online


00:45:19.060 --> 00:45:22.460
but let people make change in some way or make requests.


00:45:22.460 --> 00:45:24.340
I mean, the data isn't generally static.


00:45:24.340 --> 00:45:26.740
- So I think there's two answers from my perspective.


00:45:26.740 --> 00:45:29.940
I think there are the frameworks that are doing that


00:45:29.940 --> 00:45:33.140
and that would be things like Streamlit Dash,


00:45:33.140 --> 00:45:35.640
not Dashly, but the other dashboarding one.


00:45:35.640 --> 00:45:38.300
There's Panel, I say Streamlit,


00:45:38.300 --> 00:45:39.460
probably started with that one, right?


00:45:39.460 --> 00:45:41.340
So those kinds of things where you can get


00:45:41.340 --> 00:45:45.140
like kind of a simplified view that's kind of an interactive thing.


00:45:45.140 --> 00:45:47.440
You wouldn't look at it like we're looking at this Django site and go,


00:45:47.440 --> 00:45:49.240
yeah, it looks like, it feels like this, right?


00:45:49.240 --> 00:45:50.240
It doesn't feel like that.


00:45:50.240 --> 00:45:54.360
It feels like you pushed a kind of an interactive generic UI up.


00:45:54.360 --> 00:45:56.940
But I think that's a pretty good answer for a lot of people.


00:45:56.940 --> 00:45:58.900
I think another is honestly,


00:45:58.900 --> 00:46:01.480
the stuff with HTMX, right?


00:46:01.480 --> 00:46:04.760
You need a lot of interactivity in many of these things,


00:46:04.760 --> 00:46:08.860
these data screens and to get that interactivity often.


00:46:08.860 --> 00:46:10.600
But you also need it to remember,


00:46:10.600 --> 00:46:14.960
Yeah, yeah, you need it to remember, we computed this stuff and I want it to like,


00:46:14.960 --> 00:46:17.800
get me the other info and you kind of need a,


00:46:17.800 --> 00:46:20.840
just because how long it takes to do a lot of the computation,


00:46:20.840 --> 00:46:23.400
you want a somewhat stateful type of behavior.


00:46:23.400 --> 00:46:27.800
And I think HTMX with Plotly or something like that, even Matplotlib,


00:46:27.800 --> 00:46:29.640
I've done some Matplotlib stuff


00:46:29.640 --> 00:46:33.400
and just like returned it as an image in different areas and yeah.


00:46:33.400 --> 00:46:34.640
Carlton, what do you think?


00:46:34.640 --> 00:46:37.640
Yeah, no, I'm nodding, that's a good approach because you know, you can


00:46:37.640 --> 00:46:42.840
quite easily put in a little loading indicator there and it will when the HTML is ready and


00:46:42.840 --> 00:46:46.920
just even if it took the same amount of time by just putting in that little animation while it


00:46:46.920 --> 00:46:51.480
loads, it feels as if it's responsive and doing something and it's not rocket science, but


00:46:51.480 --> 00:46:53.560
Hx dash indicator. Yeah,


00:46:53.560 --> 00:46:57.960
yeah, I was nodding, particularly when you said just use matplotlib and pull it in as an image.


00:46:57.960 --> 00:47:00.680
It's like, yeah, that work that goes an awful long way doing that kind of thing.


00:47:00.680 --> 00:47:03.480
I wasn't familiar with Streamlit. That's really cool. I mean, it makes sense. I'm like,


00:47:03.480 --> 00:47:06.920
there's got to be someone, some people doing this solving this problem. But


00:47:06.920 --> 00:47:10.040
Yeah, Streamlit is really, really interesting.


00:47:10.040 --> 00:47:14.360
Basically, you put dec-- you have like a regular script that's not even a web thing,


00:47:14.360 --> 00:47:19.320
and you put decorators onto the functions, and it says, "Oh, this parameter here is going to be


00:47:19.320 --> 00:47:25.400
a combo box or something," and it knows how to like wire the-- it's some voodoo, but it's cool.


00:47:25.400 --> 00:47:28.520
But it does look like a Streamlit app, right? It doesn't look like, "Well, here's


00:47:28.520 --> 00:47:32.760
my own custom website." It's like, "Well, here's my Streamlit app that I built for you," right?


00:47:32.760 --> 00:47:35.100
- Right, but I mean, and yet, you know,


00:47:35.100 --> 00:47:36.900
many people are using Tailwind now,


00:47:36.900 --> 00:47:38.700
and so every site looks like a Tailwind site,


00:47:38.700 --> 00:47:40.880
and before it was Bootstrap, and before, you know,


00:47:40.880 --> 00:47:43.100
so it's like, we can't get too high on our horse about it,


00:47:43.100 --> 00:47:44.260
you know, 'cause at the end of the day,


00:47:44.260 --> 00:47:46.580
it's like, it just needs to look modern-ish,


00:47:46.580 --> 00:47:47.660
and like, move on.


00:47:47.660 --> 00:47:49.260
- Yeah, absolutely, absolutely.


00:47:49.260 --> 00:47:51.340
And getting something out is super important.


00:47:51.340 --> 00:47:55.780
Okay, so Django is, I would say it is the oldest,


00:47:55.780 --> 00:47:58.940
popular Python web framework period, right?


00:47:58.940 --> 00:48:00.060
There may have been ones before,


00:48:00.060 --> 00:48:04.380
but it certainly seems to be of the few that are like really, really popular.


00:48:04.380 --> 00:48:06.380
The one that's been around the longest.


00:48:06.380 --> 00:48:11.740
What's amazing for me about it is the way the community kind of keeps refreshing itself.


00:48:11.740 --> 00:48:17.100
Like it's not like the founders of Django are still merging every commit and every PR.


00:48:17.100 --> 00:48:17.620
Far from it.


00:48:17.620 --> 00:48:22.420
But you know, I think Simon Willis made a commit in either 4.1 or 4.2, I can't remember.


00:48:22.420 --> 00:48:24.100
It was his first one for six years kind of thing.


00:48:24.100 --> 00:48:26.180
He doesn't even live in Lawrence anymore.


00:48:26.180 --> 00:48:27.180
I mean, none of them.


00:48:27.180 --> 00:48:28.180
Yeah, exactly.


00:48:28.180 --> 00:48:29.180
What right has he got?


00:48:29.180 --> 00:48:34.100
But the point being is that it was set up to liberally to like, hand it on, let it go.


00:48:34.100 --> 00:48:38.420
And it's, I think Django is probably on its fourth or even fifth cohort of generation


00:48:38.420 --> 00:48:40.660
of kind of maintainers now.


00:48:40.660 --> 00:48:45.460
And yeah, that's a whole fresh batch of faces in the community who are doing new and exciting


00:48:45.460 --> 00:48:46.460
things.


00:48:46.460 --> 00:48:50.940
And it's just so wonderful to see because you get old and long in the tooth and think,


00:48:50.940 --> 00:48:53.180
oh, I'm worried about the future of Django.


00:48:53.180 --> 00:48:55.580
No, Django is doing great, actually.


00:48:55.580 --> 00:48:57.580
At DjangoCon, we talk about Django things,


00:48:57.580 --> 00:49:00.140
and one of the things we don't necessarily describe


00:49:00.140 --> 00:49:01.620
to others is what makes Django different


00:49:01.620 --> 00:49:03.740
than other frameworks out there.


00:49:03.740 --> 00:49:05.620
And it is the community.


00:49:05.620 --> 00:49:08.340
I mean, Flask is an amazing resource,


00:49:08.340 --> 00:49:10.660
and David Lord and people do great work,


00:49:10.660 --> 00:49:12.500
but there's no Flask cons.


00:49:12.500 --> 00:49:14.180
There's no, it's its own thing,


00:49:14.180 --> 00:49:17.460
but Django is relatively unique in that it has,


00:49:17.460 --> 00:49:20.700
it's a non-profit, it has fellows, it has conferences,


00:49:20.700 --> 00:49:23.660
it has this whole ecosystem of third-party packages.


00:49:23.660 --> 00:49:25.540
So there's the saying, come for the frameworks,


00:49:25.540 --> 00:49:29.540
for the community. It really is true, but you can't get that across to someone who just looks


00:49:29.540 --> 00:49:34.180
at the Django website, which looks like what it is, which it hasn't been redone in a number of


00:49:34.180 --> 00:49:37.700
years, right? You think, oh, maybe it's a little bit of a stale, crusty Python thing. It's like,


00:49:37.700 --> 00:49:42.340
no, it's alive. There's changes every day. You're just not seeing it. And it's hard to,


00:49:42.340 --> 00:49:47.140
you're HTMX, right? Like Carson does amazing work, but I think it's pretty much just him,


00:49:47.140 --> 00:49:50.980
right? It's not this community of dozens and dozens of people. And so one of the exciting


00:49:50.980 --> 00:49:56.900
things for Carleton and me is we're both transitioning away a little bit, but still helping bring in new


00:49:56.900 --> 00:50:01.300
people. And that's healthy, right? Like we know a bit, but sometimes I get, you know, I know the


00:50:01.300 --> 00:50:05.220
things that kind of I would like to change that may not change as quickly. And then new people


00:50:05.220 --> 00:50:08.580
have great ideas and enthusiasm. And it's like, yes, let me support you because I don't want to


00:50:08.580 --> 00:50:09.940
get stale with this.


00:50:09.940 --> 00:50:14.340
>> Prajnapan asks a pretty good question, which I think is a good question for any really


00:50:14.340 --> 00:50:18.980
large project that's been around a long time. It's like, how do you get more involved with Django?


00:50:18.980 --> 00:50:23.780
For someone who's not proficient in Django, like super, super proficient,


00:50:23.780 --> 00:50:27.540
given that it's a mature project, it's really hard to get that first PR written.


00:50:27.540 --> 00:50:32.340
One thing that often comes up, "Oh, there's no low-hanging fruit. It's a mature framework.


00:50:32.340 --> 00:50:36.420
There's nothing easy to do." It's like, well, yes and no. Yes and no. There are very few


00:50:36.420 --> 00:50:41.620
nothing fixes that an absolute beginner can just come in and get because they get snapped up


00:50:41.620 --> 00:50:45.460
really quickly and they just don't hang around for very long. But we've got something like


00:50:45.460 --> 00:50:52.180
800 open accepted tickets on Django. Now of those 800 tickets, some of them are truly hard, like


00:50:52.180 --> 00:50:58.100
adding database defaults, which took a dozen years and five Django con sprints and you know,


00:50:58.100 --> 00:51:03.540
who knows what to actually get over the line. That's truly hard. But most of the tickets aren't


00:51:03.540 --> 00:51:08.420
like that. Most of the tickets are no harder than a problem that you're solving in your everyday


00:51:08.420 --> 00:51:15.300
Django or Python programming work. And what they need is time and love. And so Django cons I've


00:51:15.300 --> 00:51:18.500
run Django sprints, I've run a kind of getting contributed workshop. And the goal of it,


00:51:18.500 --> 00:51:21.940
you've only got a couple of hours, it's only like half a morning. And the goal is not to


00:51:21.940 --> 00:51:26.340
necessarily get your PR in, but it's just to get you to look at a ticket in a bit of depth,


00:51:26.340 --> 00:51:30.740
get set up with a test suite, you know, install it, get set up, but get involved in a ticket and


00:51:30.740 --> 00:51:35.060
come to understand that ticket. And realize that actually, after that a couple of hours of thinking


00:51:35.060 --> 00:51:40.660
about that ticket, you are literally the world expert on that ticket. And even though you're


00:51:40.660 --> 00:51:44.420
not like, "Oh, it's established. I'm not a Django fellow. I'm not an established contributor."


00:51:44.420 --> 00:51:50.580
You, as the world expert on that ticket, you have a valid opinion and your insight will be valuable.


00:51:50.580 --> 00:51:55.780
And yes, you have to dig around and you have to learn some source code, but you'll have an idea


00:51:55.780 --> 00:51:59.940
and it's going to be on the right track. And if you put the time and work and love in, you'll be


00:51:59.940 --> 00:52:04.260
able to resolve that ticket. And once people have had that experience, then it's like, "Oh, I can


00:52:04.260 --> 00:52:08.380
can do another one and I can do another one and I can, it can become the little side hobby.


00:52:08.380 --> 00:52:13.260
And actually then I'm a Django contributor. So it's take your time, pick a ticket, really


00:52:13.260 --> 00:52:17.740
focus on it, become the world expert. And in so doing, even if you don't resolve the


00:52:17.740 --> 00:52:22.300
ticket, you will learn an awful lot about Django. You think you know Django by developing


00:52:22.300 --> 00:52:25.940
Django apps all day. Well, you start digging around in the code, I'll guarantee you'll


00:52:25.940 --> 00:52:30.900
know it a lot better afterwards. So that was be what I say is find a ticket that grabs


00:52:30.900 --> 00:52:35.060
you and just take that little bit of time to really understand it.


00:52:35.060 --> 00:52:38.980
Yeah, that's great advice. I guess there's probably sprints you could drop into at some


00:52:38.980 --> 00:52:39.980
conferences.


00:52:39.980 --> 00:52:43.260
Yeah, so after the Django concerts, there's two days of sprints. Stay around. There's


00:52:43.260 --> 00:52:47.740
a really great opportunity to meet people who are contributing and to get into contributing


00:52:47.740 --> 00:52:52.140
and be able to sit in the same room as somebody and say, well, you know, how do I get started?


00:52:52.140 --> 00:52:54.300
How, you know, that is a good, a good play.


00:52:54.300 --> 00:52:59.620
Can I just sit there and look over your shoulder as you two work on this? And yes, let me be


00:52:59.620 --> 00:53:00.620
clear.


00:53:00.620 --> 00:53:04.140
DjangoCon. So there's DjangoCon US, DjangoCon Europe, there's going to be a DjangoCon Africa


00:53:04.140 --> 00:53:08.860
this year for the first time. But the most recent DjangoCon US, I was at a sprint talking with


00:53:08.860 --> 00:53:12.780
David Lord, who's the lead maintainer on Flask. And he had a question about something or other.


00:53:12.780 --> 00:53:17.180
And someone was like, oh, like Simon Wilson knows about that. So I was like, oh, grab Simon over.


00:53:17.180 --> 00:53:21.580
And they'd never met. And now it's like, oh, like, so if you can stay for the sprints,


00:53:21.580 --> 00:53:26.220
it seems like the nothing part, it's actually, I'd almost take the sprints over the conference,


00:53:26.220 --> 00:53:31.020
if you could, because it's literally just like anyone you want to talk to. And you don't have to,


00:53:31.020 --> 00:53:34.380
you know, like, what are you working on? Or, yeah, they're like the best part. But maybe it


00:53:34.380 --> 00:53:38.860
seems intimidating, but it's really not. And to Carlton's point, the community really is welcoming.


00:53:38.860 --> 00:53:43.500
So even if, especially if you're inexperienced, if you're making an effort, and people can see that,


00:53:43.500 --> 00:53:47.900
they will be encouraging and want to loop you in. There's also I should mention, there's a new


00:53:47.900 --> 00:53:53.580
Put A Link program called Django-Naut that's trying to pilot having some mentors to give this


00:53:53.580 --> 00:53:55.740
this kind of hands-on help a little bit.


00:53:55.740 --> 00:53:56.560
That's a new program.


00:53:56.560 --> 00:53:58.020
It's only, I think, six people right now,


00:53:58.020 --> 00:54:02.220
but they're trying to foster more mentoring of this type.


00:54:02.220 --> 00:54:04.180
But it is a challenge for a mature framework, right?


00:54:04.180 --> 00:54:06.500
You probably can't just go fix HTML.


00:54:06.500 --> 00:54:07.580
It's probably a little more meaty.


00:54:07.580 --> 00:54:10.080
But it's not all hard just because it's there.


00:54:10.080 --> 00:54:11.980
It's just that it got stuck for whatever reason.


00:54:11.980 --> 00:54:14.220
It needs, as Carlton said, that oomph of someone


00:54:14.220 --> 00:54:15.700
to come in and put a couple hours


00:54:15.700 --> 00:54:17.540
and then be the world expert.


00:54:17.540 --> 00:54:18.380
- Absolutely.


00:54:18.380 --> 00:54:21.460
So what's the async story, Django, these days?


00:54:21.460 --> 00:54:22.300
How's it looking?


00:54:22.300 --> 00:54:23.260
- It's looking really good.


00:54:23.260 --> 00:54:25.980
So in my, so do we get to talk about 4.2?


00:54:25.980 --> 00:54:29.980
Yes, Django 4.2 brought in async support


00:54:29.980 --> 00:54:31.420
for streaming responses.


00:54:31.420 --> 00:54:33.620
So within the core framework itself,


00:54:33.620 --> 00:54:35.040
you can do service and events,


00:54:35.040 --> 00:54:37.140
or you can have a request come in,


00:54:37.140 --> 00:54:39.380
you can keep it open without blocking the worker,


00:54:39.380 --> 00:54:41.680
and you can periodically send messages down.


00:54:41.680 --> 00:54:43.860
That's really quite exciting in 4.2.


00:54:43.860 --> 00:54:47.620
And with the other thing that came in 4.2 was PsychoPG3,


00:54:47.620 --> 00:54:51.300
which is our async database connections.


00:54:51.300 --> 00:54:53.820
And so there's a link in the show notes there


00:54:53.820 --> 00:54:56.700
of somebody put together exactly what I was hoping for,


00:54:56.700 --> 00:55:01.220
which was the chat example, but done 100% async.


00:55:01.220 --> 00:55:04.660
So without blocking ORM call with the server-sent events,


00:55:04.660 --> 00:55:06.060
so instead of long polling,


00:55:06.060 --> 00:55:08.340
or without having to use an add-on like channels,


00:55:08.340 --> 00:55:11.100
which add-on channels is great if you need it,


00:55:11.100 --> 00:55:13.060
but isn't it cool that you can do


00:55:13.060 --> 00:55:15.140
server-sent events just in Django?


00:55:15.140 --> 00:55:16.760
And then in 5.0, which is coming,


00:55:16.760 --> 00:55:19.980
we're gonna have HTTP disconnect handling


00:55:19.980 --> 00:55:21.780
in so there's long lived requests.


00:55:21.780 --> 00:55:23.100
If the client disconnects,


00:55:23.100 --> 00:55:25.900
you'll get an asyncio cancel there in your view,


00:55:25.900 --> 00:55:27.920
and you'll be able to respond to it and do any cleanup.


00:55:27.920 --> 00:55:31.140
We've also in 5.0, we're going to have async signals,


00:55:31.140 --> 00:55:34.820
which gives you an 100% async request response pathway


00:55:34.820 --> 00:55:35.640
if you want it,


00:55:35.640 --> 00:55:39.140
because before the only blocking bit there was the signals,


00:55:39.140 --> 00:55:42.100
which was synced, so you still had to do this sync to async,


00:55:42.100 --> 00:55:43.300
oh, sorry, sync to async,


00:55:43.300 --> 00:55:45.580
jump into a thread pool to dispatch the signals.


00:55:45.580 --> 00:55:47.820
But that, if you've got async signal handles,


00:55:47.820 --> 00:55:49.100
will all be async as well.


00:55:49.100 --> 00:55:51.540
So the entire request response flow can be async.


00:55:51.540 --> 00:55:56.140
And then sessions is going to be async in 5.0 as well.


00:55:56.140 --> 00:55:59.100
Auth is going to be async as well in 5.0.


00:55:59.100 --> 00:56:02.300
So those kind of core flows are,


00:56:02.300 --> 00:56:05.140
this is on top of the async interface to the ORM,


00:56:05.140 --> 00:56:06.020
which was added.


00:56:06.020 --> 00:56:07.260
You know, it's all fleshing out.


00:56:07.260 --> 00:56:09.740
And there's a few decorators, which, you know,


00:56:09.740 --> 00:56:10.580
aren't yet done,


00:56:10.580 --> 00:56:12.740
but they'll be done over the next few releases.


00:56:12.740 --> 00:56:14.300
It's really enriched.


00:56:14.300 --> 00:56:16.140
And it's like, yes, yes.


00:56:16.140 --> 00:56:21.180
five, six years, seven years of work has gone into this, and it's really maturing nicely.


00:56:21.180 --> 00:56:24.740
So I think asyncing Django is a very, very exciting time.


00:56:24.740 --> 00:56:28.380
So when people say I want a fast, yeah, FastAPI, right? That's always the thing. Well,


00:56:28.380 --> 00:56:29.380
why not just use FastAPI?


00:56:29.380 --> 00:56:34.180
Well, no, if you want to use FastAPI, go use FastAPI. But if you're using Django,


00:56:34.180 --> 00:56:37.780
but you need a couple of these endpoints, which you need higher throughput, or, you


00:56:37.780 --> 00:56:41.220
know, what it or an, you know, a real time or two or two directional traffic or whatever,


00:56:41.220 --> 00:56:45.020
you shouldn't have to switch red framework just to have a couple of these, these, these


00:56:45.020 --> 00:56:48.780
endpoints, right? It's like Python needs to be in every area because you shouldn't have to switch


00:56:48.780 --> 00:56:53.900
language just because you need, I don't know what, to be a bit more serious about things. So Python


00:56:53.900 --> 00:56:57.740
needs to be able to account for those more serious use cases. Well, same with Django. It needs an


00:56:57.740 --> 00:57:01.340
async story because you shouldn't have to change your web framework just for, you know, service


00:57:01.340 --> 00:57:06.940
and events or I don't know what other async, you know, a bit of real time. Almost nothing waits on


00:57:06.940 --> 00:57:12.380
other things like web frameworks do. They wait on database calls, they wait on the network, they


00:57:12.380 --> 00:57:15.380
they wait on caches, you know, like Redis,


00:57:15.380 --> 00:57:18.380
they wait on maybe calling other APIs,


00:57:18.380 --> 00:57:22.380
like almost everything they do is coordinating other systems


00:57:22.380 --> 00:57:24.380
and waiting and then turning that to HTML or JSON.


00:57:24.380 --> 00:57:27.380
And so having rich async support is fantastic.


00:57:27.380 --> 00:57:29.380
Yeah, no, I mean, it's really coming on.


00:57:29.380 --> 00:57:31.380
And there are still, you know, there are bits inside, you know,


00:57:31.380 --> 00:57:34.380
I don't know if you need the user passage test,


00:57:34.380 --> 00:57:36.380
decorate, permissions, decorate.


00:57:36.380 --> 00:57:39.380
Is that yet async defined? I'm not sure if it is.


00:57:39.380 --> 00:57:41.860
Okay, that's not, we haven't got to, maybe we have,


00:57:41.860 --> 00:57:43.940
I need to check, but we haven't got to that bit yet.


00:57:43.940 --> 00:57:46.940
But okay, those kind of bits, we'll get there with those.


00:57:46.940 --> 00:57:49.340
But that kind of core, I'm building something


00:57:49.340 --> 00:57:52.540
on the request response cycle with auth, with sessions.


00:57:52.540 --> 00:57:53.740
Yeah, that's all now done.


00:57:53.740 --> 00:57:55.060
And so it's really maturing.


00:57:55.060 --> 00:57:56.260
- Getting short on time here, guys.


00:57:56.260 --> 00:57:58.300
- It's so nice to have you being in charge of this,


00:57:58.300 --> 00:57:59.140
I should say, right?


00:57:59.140 --> 00:58:00.180
'Cause whenever there's those pauses,


00:58:00.180 --> 00:58:02.180
like my instinct is to jump in and like,


00:58:02.180 --> 00:58:04.120
look at our notes, but like, just like, nope,


00:58:04.120 --> 00:58:06.700
you're captain of the ship, it's so nice.


00:58:06.700 --> 00:58:10.500
- Yeah, we're just out for a sunset cruise


00:58:10.500 --> 00:58:13.260
in the old boat, we're coming back to the harbor.


00:58:13.260 --> 00:58:15.860
So what else about the future?


00:58:15.860 --> 00:58:17.820
We talked about Django being 18,


00:58:17.820 --> 00:58:20.780
a lot of the cool ideas and projects and resources,


00:58:20.780 --> 00:58:22.820
but what about the future?


00:58:22.820 --> 00:58:25.180
Some of which we just covered is really exciting,


00:58:25.180 --> 00:58:27.180
maybe we haven't given time to yet.


00:58:27.180 --> 00:58:28.700
- I'm personally excited about


00:58:28.700 --> 00:58:30.120
the new people getting involved.


00:58:30.120 --> 00:58:32.340
I know that's not as tangible for folks,


00:58:32.340 --> 00:58:33.620
but coming from DjangoCon,


00:58:33.620 --> 00:58:36.180
coming, like I just stepped off the board,


00:58:36.180 --> 00:58:41.620
I was treasurer for three years. I know who the new treasurer is, the current president.


00:58:41.620 --> 00:58:46.900
I'm really excited about the new people. And so I don't... For a while during COVID, I think some of


00:58:46.900 --> 00:58:52.340
us had concerns about how do we keep this afloat and not have everything crash and burn. But I


00:58:52.340 --> 00:58:58.340
don't have those concerns anymore. And so just the fact that if you want something in Python that


00:58:58.340 --> 00:59:03.380
solves almost every web problem you have and has a really supportive community, Django is still


00:59:03.380 --> 00:59:07.780
there for you. And so I guess that's the big one. It's just, and I think from a marketing side,


00:59:07.780 --> 00:59:13.140
it's just how do we express that it's still cool and interesting and powerful, and yet won't break


00:59:13.140 --> 00:59:18.420
on you. It doesn't seem as shiny and new as the next whatever, but it's, you know, it's like,


00:59:18.420 --> 00:59:22.260
if you look on Hacker News every like six months, someone's like, wow, Django is like still around.


00:59:22.260 --> 00:59:26.740
Oh, it's like, kind of solves all these problems we have with this new JavaScript, this or that.


00:59:26.740 --> 00:59:32.020
It's like, yeah, it's still just doing its thing. So I would say the community side, I mean, also


00:59:32.020 --> 00:59:34.860
So like I've got projects, if you want to learn Django,


00:59:34.860 --> 00:59:37.240
I mean like, there's a lot of resources to learn it.


00:59:37.240 --> 00:59:41.020
There's videos, you have videos, books, tutorials,


00:59:41.020 --> 00:59:43.320
like some of these newer technologies,


00:59:43.320 --> 00:59:45.520
it's harder, there's not a community,


00:59:45.520 --> 00:59:47.340
and it's harder to find the resources.


00:59:47.340 --> 00:59:49.280
There's a lot of strength in being around for a while


00:59:49.280 --> 00:59:51.100
and yet not being totally stale.


00:59:51.100 --> 00:59:53.560
So that would be my tagline for Django, how's that?


00:59:53.560 --> 00:59:56.820
- I kind of go off that, I think actually it is cool,


00:59:56.820 --> 00:59:58.900
and it's about as cool as it's been for a while.


00:59:58.900 --> 01:00:00.940
I said in my DjangoCon Europe talk


01:00:00.940 --> 01:00:06.060
I'm as excited about the framework and where it's going now as I have been for many years since I


01:00:06.060 --> 01:00:11.020
said since the DRF kickstart, if you remember that back in the day. There are over the last few


01:00:11.020 --> 01:00:18.700
releases, and I don't just mean 4.2 and 5.0 coming up, I mean like the last 3.2, 4.0, 4.1, like


01:00:18.700 --> 01:00:22.780
last few years, there've been a number of threads, not just the async stuff. There's been massive


01:00:22.780 --> 01:00:27.660
changes to the forms, templating. There's been all these changes to the ORM that are powering


01:00:27.660 --> 01:00:32.140
it up every single release. And they've all come together and there are patterns now to be


01:00:32.140 --> 01:00:38.300
discovered. And it's like I said, I'm stepping down in part because of life, but in part to get


01:00:38.300 --> 01:00:43.340
back to working with Django rather than just on Django. I want to play with all of these new toys


01:00:43.340 --> 01:00:47.340
that we've built over the last few releases. And I want to discover those patterns and see them


01:00:47.340 --> 01:00:52.940
codified and see them come out in the community. And it's just a massively fertile time. And so


01:00:52.940 --> 01:00:57.340
that's what I'm excited about. That's where we're going. And I can't say every release Django


01:00:57.340 --> 01:01:01.420
literally gobsmacked by how many new features you think, oh, there won't be any in the new one.


01:01:01.420 --> 01:01:06.780
But it got to be done again. Yeah, but 5.0 is coming out and it's just hitting out of the park


01:01:06.780 --> 01:01:12.620
again. And it's like, wow, we've only just had 4.2. 4.2 is not even old yet. 5.0 is not even


01:01:12.620 --> 01:01:16.540
in alpha. And we're already thinking, oh, can we run it off main because it's so exciting.


01:01:16.540 --> 01:01:20.460
The future is so many things have come together. The future is just really exciting. So that.


01:01:20.460 --> 01:01:24.540
Yeah. And I'd say I feel like I would be bored by now with Django. Like I've only been doing


01:01:24.540 --> 01:01:29.180
it for over a decade. But like I'm, if anything more interesting, there's just so many new features,


01:01:29.180 --> 01:01:33.820
but also I'm understanding built in functionality even better to solve problems that I just had


01:01:33.820 --> 01:01:38.620
didn't have before. So at some point, maybe I'll be like, I know it all. But I feel the opposite.


01:01:38.620 --> 01:01:42.940
I feel like, whoa, like I had no idea. Just one concrete example, doing all the work with


01:01:42.940 --> 01:01:47.820
templates and HTMX and like coming to see the patterns about create, you know, again,


01:01:47.820 --> 01:01:52.140
fresh for the first time in use really using templates for the first time in half a decade.


01:01:52.140 --> 01:01:56.780
it's like, okay, ah, yes, I create a template tag here. And I do it this way. And I use I put a


01:01:56.780 --> 01:02:01.180
mapper in here to create a kind of view model type thing. So I pass in an ORM model object into the


01:02:01.180 --> 01:02:05.580
template tag. And then in the template tag, I map it to what I need in the actual template itself,


01:02:05.580 --> 01:02:10.140
then the template comes in. It's like, oh, that's a really good and powerful pattern. And it's really


01:02:10.140 --> 01:02:17.180
encapsulated and neat. And it makes my template expressive and rediscovering these things. And


01:02:17.180 --> 01:02:21.020
then being able to say, right, okay, well, what changes does the Django template language needs


01:02:21.020 --> 01:02:24.220
that it hasn't had in quite a few years because no one was using it.


01:02:24.220 --> 01:02:27.180
And yeah, it's just a massively fertile.


01:02:27.180 --> 01:02:31.900
It is. And it's no coincidence that we've been hitting on HTMX so much


01:02:31.900 --> 01:02:35.740
because it really puts the power of frameworks like Django


01:02:35.740 --> 01:02:40.700
back front and center and how you think about building and structuring your web apps.


01:02:40.700 --> 01:02:42.940
Right? It's not like, well, there's this thing in the back end,


01:02:42.940 --> 01:02:44.620
and then we're going to go do these other languages.


01:02:44.620 --> 01:02:46.220
It's like, no, actually, it could be all.


01:02:46.220 --> 01:02:49.740
And there's a bunch of cool features and capabilities that we've been talking about.


01:02:49.740 --> 01:02:56.460
And you can use them throughout your app if you leverage something like not necessarily but something like htmx, which is really cool


01:02:56.460 --> 01:02:59.580
I think for me it works just with the grain of the framework


01:02:59.580 --> 01:03:02.880
It's like this is the way I would do it if I was writing in 2005


01:03:02.880 --> 01:03:06.400
and I do exactly the same in 2023


01:03:06.400 --> 01:03:08.700
and


01:03:08.700 --> 01:03:15.820
It just works and it's you know responsive and dynamic and all these nice things that you know clients want. Absolutely


01:03:16.220 --> 01:03:17.820
All right, let's leave it there, guys.


01:03:17.820 --> 01:03:23.660
Thank you so much for covering all this and celebrating Django's 18th birthday.


01:03:23.660 --> 01:03:24.860
18th birthday, yeah.


01:03:24.860 --> 01:03:25.900
Yeah, it's awesome.


01:03:25.900 --> 01:03:29.180
It is an adult and it's a cool framework for sure.


01:03:29.180 --> 01:03:32.300
With really, I think it's the community behind it,


01:03:32.300 --> 01:03:36.060
especially the fellows and all the board and stuff.


01:03:36.060 --> 01:03:39.340
It makes it really unique and it's certainly worth considering


01:03:39.340 --> 01:03:40.780
as part of the framework, right?


01:03:40.780 --> 01:03:41.420
As you said.


01:03:41.420 --> 01:03:45.660
Okay, with that, let's round this out with just a final shout out


01:03:45.660 --> 01:03:48.380
to what you guys have around Django.


01:03:48.380 --> 01:03:50.980
For example, the Django Chat podcast,


01:03:50.980 --> 01:03:52.540
which is excellent.


01:03:52.540 --> 01:03:54.180
Give us a shout about that.


01:03:54.180 --> 01:03:56.380
Will, tell us about LearnDjango


01:03:56.380 --> 01:03:58.740
and maybe button.dev or whatever else you want to throw in.


01:03:58.740 --> 01:04:00.380
- I should say, djangochat.com,


01:04:00.380 --> 01:04:02.060
you're sort of the godfather of it


01:04:02.060 --> 01:04:03.580
'cause you gave me a lot of good advice


01:04:03.580 --> 01:04:06.300
when we were starting out in the early days around things


01:04:06.300 --> 01:04:07.660
and that there might be a market for it.


01:04:07.660 --> 01:04:09.500
So thank you for that.


01:04:09.500 --> 01:04:10.340
- You're welcome.


01:04:10.340 --> 01:04:11.180
It's going strong.


01:04:11.180 --> 01:04:12.000
It's a great show.


01:04:12.000 --> 01:04:13.060
I enjoy listening to the episodes.


01:04:13.060 --> 01:04:14.660
- We're gonna be back in the fall with new episodes.


01:04:14.660 --> 01:04:19.140
And then learndjango.com, that's my main website. If you want to learn Django, access books,


01:04:19.140 --> 01:04:23.740
lots of free tutorials, premium ones coming. That's sort of an all-in-one resource. And


01:04:23.740 --> 01:04:28.740
I think there's also a link to Django-news, which is a weekly Django newsletter with new


01:04:28.740 --> 01:04:33.260
news that's happening, new projects, new tutorials, not just mine. So that's something I've been


01:04:33.260 --> 01:04:37.380
doing with Jeff Triplett for a number of years now. And that's a good way to stay in tune


01:04:37.380 --> 01:04:38.380
with what's happening.


01:04:38.380 --> 01:04:40.460
Yeah, that's kind of an essential resource, I'd say.


01:04:40.460 --> 01:04:41.460
And then Button, Carlton.


01:04:41.460 --> 01:04:46.500
Yeah, so okay, so I'm, I'm, well, I've got a website and I've got a blog somewhere.


01:04:46.500 --> 01:04:50.100
That's a button btn.dev that will be live in the autumn now.


01:04:50.100 --> 01:04:58.500
And then but you can follow me on foster Don or the 30 verse and my website, there's an RSS feed, which you could subscribe to if you you fancy that.


01:04:58.500 --> 01:05:06.780
My other big projects in the moment is working on a set of opinionated crud views for Django called Neapolitan, which is a bit of fun.


01:05:06.780 --> 01:05:08.300
I'm having a lot of fun of that.


01:05:08.300 --> 01:05:10.740
So watch my DjangoCon Europe talk for an introduction of that.


01:05:10.780 --> 01:05:14.280
And then I'm working on a package called Django template partials as well,


01:05:14.280 --> 01:05:17.720
which is about getting template fragments into the Django template language,


01:05:17.720 --> 01:05:18.220
which again,


01:05:18.220 --> 01:05:20.420
- I was going to ask you about that. - I'm talking about Django on your talk.


01:05:20.420 --> 01:05:23.320
I know, now that he's not a fellow, he can do all the things he always wanted to.


01:05:23.320 --> 01:05:26.520
Yeah, when I started using this with Tristan,


01:05:26.520 --> 01:05:31.260
and I'm like, man, you have got to come up with a way


01:05:31.260 --> 01:05:34.300
to reuse HTML almost like functions.


01:05:34.300 --> 01:05:37.040
So I came up with Jinja partials. So what is yours called?


01:05:37.040 --> 01:05:38.540
Django template partials.


01:05:38.540 --> 01:05:39.900
- Template partial. - Django template.


01:05:39.900 --> 01:05:41.340
Oh, you need a spacer.


01:05:41.340 --> 01:05:42.700
A little, I think.


01:05:42.700 --> 01:05:44.140
I think I put a link in the notes.


01:05:44.140 --> 01:05:44.620
But yeah.


01:05:44.620 --> 01:05:45.820
Yeah, there you are.


01:05:45.820 --> 01:05:47.420
So that's my take.


01:05:47.420 --> 01:05:50.940
And it just enables you to define reusable components.


01:05:50.940 --> 01:05:52.300
There's a couple of pull requests open,


01:05:52.300 --> 01:05:54.780
which will just change the API there slightly.


01:05:54.780 --> 01:05:57.740
And then we'll start to think about rolling into Django.


01:05:57.740 --> 01:06:00.140
Hopefully for now, it's going to be Django 5.1.


01:06:00.140 --> 01:06:03.100
There's no chance of me getting in for 5.0 this summer.


01:06:03.100 --> 01:06:05.020
But it's the same idea.


01:06:05.020 --> 01:06:06.780
And the point with it is it's integrated


01:06:06.780 --> 01:06:08.140
with the Django template loader.


01:06:08.140 --> 01:06:12.740
So all you do in your view is change your template name variable,


01:06:12.740 --> 01:06:14.540
and you still return your template response,


01:06:14.540 --> 01:06:16.140
the same as you always had with the context.


01:06:16.140 --> 01:06:18.740
There's no adjusting your view logic.


01:06:18.740 --> 01:06:20.540
It's almost transparent to the view layer.


01:06:20.540 --> 01:06:23.040
And there are, you know, I've seen people writing logic


01:06:23.040 --> 01:06:25.200
where they pass the HX vows,


01:06:25.200 --> 01:06:29.140
which is where you pass extra parameters in your request from the client,


01:06:29.140 --> 01:06:31.580
which you could then specify the partial with,


01:06:31.580 --> 01:06:33.880
and then your view logic wouldn't change at all.


01:06:33.880 --> 01:06:35.900
That's out of scope for Django template partials.


01:06:35.900 --> 01:06:37.300
But it's a possibility.


01:06:37.380 --> 01:06:43.620
But the point being that you just it's this for me or something like it is how Django wants you to do


01:06:43.620 --> 01:06:46.820
pass partials with the Django template language. Obviously, with Jinja,


01:06:46.820 --> 01:06:49.060
there's an option as well with Django.


01:06:49.060 --> 01:06:52.740
Useful outside of HTMX required for HTMX, basically, right?


01:06:52.740 --> 01:06:56.820
Yeah, I mean, you because what's the other way? The problem with it is you are you then have


01:06:56.820 --> 01:07:00.660
if you don't have inline partials, you have to move it to a separate template.


01:07:00.660 --> 01:07:04.420
And then you have to include that template in the other template. And that's great,


01:07:04.420 --> 01:07:17.860
a certain level of complexity. But again, it's this locality of behavior thing. When you're first starting, you don't want that heavyweight kind of you're in your creative flow, you're making progress. And all of a sudden, you have to put the brakes on to create a new file move open.


01:07:17.860 --> 01:07:27.340
What's the what's the file name again? Oh, I've spelled it wrong. Oh, it didn't load. Oh, because it was in the wrong file. You don't want all of that. You just want inline that bit be reusable, please.


01:07:27.340 --> 01:07:31.180
Yeah, very cool. Yeah, this is very, this is different. Mine doesn't embrace the locality


01:07:31.180 --> 01:07:34.300
behavior as much as yours does. So people should check this out. This is interesting.


01:07:34.300 --> 01:07:37.100
Obviously, mine doesn't work with Django either. So that doesn't really matter.


01:07:37.100 --> 01:07:38.700
Well, it works with Jinja though, right?


01:07:38.700 --> 01:07:40.460
So it works with Jinja, right? Yeah, yeah, yeah.


01:07:40.460 --> 01:07:45.900
And so the Django template, Django templates have swappable backends. So you can use the


01:07:45.900 --> 01:07:49.900
Jinja backend to use Jinja templates with Django if that's your cup of tea.


01:07:49.900 --> 01:07:55.500
We got to end this podcast. But if you're looking at like moving a Flask project over to Django,


01:07:55.500 --> 01:07:58.700
that would be a way to not touch the HTML very much, right?


01:07:58.700 --> 01:08:02.780
Yes, exactly. Because you could carry on using the same templates more. You might need one or


01:08:02.780 --> 01:08:07.260
two edits to the, what's it called, the Django environment, the Jinja environment or something.


01:08:07.260 --> 01:08:12.140
Thank you guys for being on the show. It's always a great time to catch up with you.


01:08:12.140 --> 01:08:12.860
Thank you for having us.


01:08:12.860 --> 01:08:17.860
- This has been another episode of Talk Python to Me.


01:08:17.860 --> 01:08:19.300
Thank you to our sponsors.


01:08:19.300 --> 01:08:20.660
Be sure to check out what they're offering.


01:08:20.660 --> 01:08:22.700
It really helps support the show.


01:08:22.700 --> 01:08:24.300
Take some stress out of your life.


01:08:24.300 --> 01:08:26.500
Get notified immediately about errors


01:08:26.500 --> 01:08:28.500
and performance issues in your web


01:08:28.500 --> 01:08:30.380
or mobile applications with Sentry.


01:08:30.380 --> 01:08:35.260
Just visit talkpython.fm/sentry and get started for free.


01:08:35.260 --> 01:08:39.260
And be sure to use the promo code talkpython, all one word.


01:08:39.260 --> 01:08:40.580
Want to level up your Python?


01:08:40.580 --> 01:08:44.740
we have one of the largest catalogs of Python video courses over at Talk Python.


01:08:44.740 --> 01:08:49.780
Our content ranges from true beginners to deeply advanced topics like memory and async.


01:08:49.780 --> 01:08:52.420
And best of all, there's not a subscription in sight.


01:08:52.420 --> 01:08:55.460
Check it out for yourself at training.talkpython.fm.


01:08:55.460 --> 01:08:58.820
Be sure to subscribe to the show, open your favorite podcast app,


01:08:58.820 --> 01:09:01.460
and search for Python. We should be right at the top.


01:09:01.460 --> 01:09:06.500
You can also find the iTunes feed at /itunes, the Google Play feed at /play,


01:09:06.500 --> 01:09:10.500
and the direct RSS feed at /rss on talkpython.fm.


01:09:10.500 --> 01:09:14.020
We're live streaming most of our recordings these days.


01:09:14.020 --> 01:09:17.460
If you want to be part of the show and have your comments featured on the air,


01:09:17.460 --> 01:09:22.260
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.


01:09:22.260 --> 01:09:23.780
This is your host, Michael Kennedy.


01:09:23.780 --> 01:09:24.980
Thanks so much for listening.


01:09:24.980 --> 01:09:26.100
I really appreciate it.


01:09:26.100 --> 01:09:28.100
Now get out there and write some Python code.


01:09:28.100 --> 01:09:50.100
[MUSIC]

