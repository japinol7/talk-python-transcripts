WEBVTT

00:00:00.000 --> 00:00:05.840
What if we distributed CPython, the runtime, in the same way we distribute Python packages,


00:00:05.840 --> 00:00:11.120
as pre-built binary wheels that only need to be downloaded and unzipped to run? For starters,


00:00:11.120 --> 00:00:16.800
that'd mean we could ship and deploy Python apps without worrying whether Python itself is available


00:00:16.800 --> 00:00:24.080
or up-to-date on the platform. Nathaniel Smith has just proposed a PEP to do just that, PEP 7.11,


00:00:24.080 --> 00:00:31.680
We'll dive into it with him next. This is Talk Python To Me, episode 412, recorded April 18th, 2023.


00:00:31.680 --> 00:00:49.680
Welcome to Talk Python To Me, a weekly podcast on Python. This is your host, Michael Kennedy.


00:00:49.680 --> 00:00:54.800
Follow me on Mastodon, where I'm @mkennedy and follow the podcast using @talkpython,


00:00:54.800 --> 00:00:59.680
both on fosstodon.org. Be careful with impersonating accounts on other instances,


00:00:59.680 --> 00:01:05.520
there are many. Keep up with the show and listen to over seven years of past episodes at talkpython.fm.


00:01:05.520 --> 00:01:11.280
We've started streaming most of our episodes live on YouTube. Subscribe to our YouTube channel over


00:01:11.280 --> 00:01:17.120
at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.


00:01:17.760 --> 00:01:23.200
This episode is brought to you by Sentry and us over at Talk Python Training. Please check out


00:01:23.200 --> 00:01:28.480
what we're both offering during our segments. It really helps support the show. Nathaniel,


00:01:28.480 --> 00:01:33.520
welcome back to Talk Python to me. How's it going? It's going real well. It's going real well. We're


00:01:33.520 --> 00:01:40.720
on the eve of the eve of PyCon. How about that? Eve square. Okay. Yeah. I don't know how many


00:01:40.720 --> 00:01:45.200
eve maybe it's a third that eve to the third, but we're very near PyCon. I'm pretty excited.


00:01:46.000 --> 00:01:46.500
Yeah.


00:01:46.500 --> 00:01:48.500
Anti-penulti-pe-eve?


00:01:48.500 --> 00:01:49.000
I don't know.


00:01:49.000 --> 00:01:50.200
Penultimate eve, perhaps?


00:01:50.200 --> 00:01:51.200
Yeah, exactly.


00:01:51.200 --> 00:01:54.600
I suspect a lot of people will be listening to this show on their way to PyCon.


00:01:54.600 --> 00:01:56.700
So if you are, awesome.


00:01:56.700 --> 00:01:57.700
Come say hello to me.


00:01:57.700 --> 00:02:00.600
I'm going to be doing some live shows, some Ask Me Anything, some various other things.


00:02:00.600 --> 00:02:02.400
Are you going to be at PyCon this year?


00:02:02.400 --> 00:02:03.000
I'm not.


00:02:03.000 --> 00:02:04.400
I'm not, unfortunately.


00:02:04.400 --> 00:02:09.700
So they're going to have to just shoot you a message on Twitter or on Mastodon or something like that, right?


00:02:09.700 --> 00:02:10.200
Yeah.


00:02:10.200 --> 00:02:11.800
I'm easy to find.


00:02:11.800 --> 00:02:13.400
GitHub, email, whatever.


00:02:13.400 --> 00:02:13.900
Yeah.


00:02:13.900 --> 00:02:14.200
Cool.


00:02:14.200 --> 00:02:17.920
Well, everyone going to PyCon, hope you have a great time


00:02:17.920 --> 00:02:19.520
and do come say hi.


00:02:19.520 --> 00:02:24.520
And with that, we're going to be talking about this project,


00:02:24.520 --> 00:02:28.300
this new PEP about distributing Python itself,


00:02:28.300 --> 00:02:30.400
kind of like you distribute Python packages,


00:02:30.400 --> 00:02:32.240
but a little bit more.


00:02:32.240 --> 00:02:33.080
Why not?


00:02:33.080 --> 00:02:34.400
I mean, it seems pretty reasonable to me


00:02:34.400 --> 00:02:38.720
and I'm super, super excited to see work in this area


00:02:38.720 --> 00:02:42.400
because Python is so strong in so many areas


00:02:42.400 --> 00:02:46.440
And there's just a couple of really big gaps


00:02:46.440 --> 00:02:49.860
that other technologies have nailed so well.


00:02:49.860 --> 00:02:52.520
Two of them that I see that are super significant


00:02:52.520 --> 00:02:54.720
is like, hey, Michael, I want to build a mobile app.


00:02:54.720 --> 00:02:55.960
How do I do that in Python?


00:02:55.960 --> 00:02:57.200
Or I want to build a desktop app.


00:02:57.200 --> 00:02:58.440
How do I do that in Python?


00:02:58.440 --> 00:02:59.640
I'm not sure.


00:02:59.640 --> 00:03:02.120
I'm not sure you should even think about doing--


00:03:02.120 --> 00:03:03.040
desktop, maybe.


00:03:03.040 --> 00:03:04.280
Mobile.


00:03:04.280 --> 00:03:07.760
I mean, Kibbe is great, but it's not a general purpose UI


00:03:07.760 --> 00:03:08.320
toolkit.


00:03:08.320 --> 00:03:10.240
And so that's the one.


00:03:10.240 --> 00:03:12.560
The other is, hey, I have an application.


00:03:12.560 --> 00:03:15.880
I want to give it to someone who is not a developer


00:03:15.880 --> 00:03:16.880
and have them run it.


00:03:16.880 --> 00:03:20.340
And there are some tools that address that.


00:03:20.340 --> 00:03:21.440
But one of them is just like,


00:03:21.440 --> 00:03:23.340
how do they get Python at all?


00:03:23.340 --> 00:03:26.240
And your project, your pep, and some of the ideas


00:03:26.240 --> 00:03:29.220
relate specifically to how do we make it easier


00:03:29.220 --> 00:03:32.440
to get a pre-built non-admin,


00:03:32.440 --> 00:03:35.500
not installed for the whole system, Python for somebody


00:03:35.500 --> 00:03:39.560
so they can run an app or even for developers, right?


00:03:39.560 --> 00:03:42.360
Yeah, I mean, in fact, I mean, I'm a developer.


00:03:42.360 --> 00:03:46.480
So that's kind of in some ways the original use case, you know, scratch your head.


00:03:46.480 --> 00:03:48.040
Of course. Right. Yeah.


00:03:48.040 --> 00:03:52.280
But yeah, I mean, it's just it's a very general capability, I think, once you have it.


00:03:52.280 --> 00:03:58.480
So, yeah, I mean, the motivation there is basically like, you know, there are lots and lots of ways to get Python right.


00:03:58.480 --> 00:04:01.680
You can get it from the Windows store.


00:04:01.680 --> 00:04:05.520
It comes with preinstalled on your Mac, but not a very good one.


00:04:05.520 --> 00:04:06.760
Yeah, not quite. Sort of.


00:04:07.400 --> 00:04:11.400
you know, but there's also homebrew or Pyenv or your Linux distro has it.


00:04:11.400 --> 00:04:14.880
And you can, you know, get it through Conda.


00:04:14.880 --> 00:04:18.080
And if you download Blender, oh, there's secretly a Python inside.


00:04:18.080 --> 00:04:22.240
You know, like it's just, you know, there's just so many different ways to do it.


00:04:22.240 --> 00:04:26.080
And that's great. You know, like it's good to have all these options.


00:04:26.080 --> 00:04:27.640
They also are different use cases.


00:04:27.640 --> 00:04:32.840
But it's sort of silly that, you know, it's obviously it's, you know, it's flexible.


00:04:32.840 --> 00:04:34.960
There's lots of ways to do it.


00:04:34.960 --> 00:04:37.520
But there's no way to just be like, OK, I just want a zip


00:04:37.520 --> 00:04:39.400
file that has Python in it.


00:04:39.400 --> 00:04:41.660
And it's like a standard way that's supported


00:04:41.660 --> 00:04:45.760
and we all use so we can all share benefits and improvements


00:04:45.760 --> 00:04:47.120
and all of that.


00:04:47.120 --> 00:04:49.120
So that's kind of the key.


00:04:49.120 --> 00:04:51.240
The PEP is not that innovative in terms


00:04:51.240 --> 00:04:53.080
of what it's actually doing.


00:04:53.080 --> 00:04:55.480
It's a zip file with Python in it.


00:04:55.480 --> 00:04:58.880
But it's just trying to do the logistics of, OK,


00:04:58.880 --> 00:05:01.480
but let's all agree on how we're going to put it on PyPI.


00:05:01.480 --> 00:05:04.220
Let's have tags and stuff so tools can figure out


00:05:04.220 --> 00:05:06.300
what they're looking at and do stuff automatically.


00:05:06.300 --> 00:05:08.460
And I think that unlocks a lot of use cases,


00:05:08.460 --> 00:05:10.220
just that one simple change.


00:05:10.220 --> 00:05:11.300
- I think it does as well.


00:05:11.300 --> 00:05:14.820
I mean, your abstract is one of the more concise ones,


00:05:14.820 --> 00:05:15.660
I would say.


00:05:15.660 --> 00:05:16.500
- Sure, yeah.


00:05:16.500 --> 00:05:20.140
- Tell people about the abstract here.


00:05:20.140 --> 00:05:22.740
- Yeah, the abstract on the PEP is,


00:05:22.740 --> 00:05:25.300
it's quote, "Like wheels,


00:05:25.300 --> 00:05:27.020
but instead of a prebuilt Python package,


00:05:27.020 --> 00:05:28.900
it's a prebuilt Python interpreter."


00:05:28.900 --> 00:05:29.900
That is the full abstract.


00:05:29.900 --> 00:05:31.700
I figured that basically, you know,


00:05:31.700 --> 00:05:33.980
tells people what they need to know.


00:05:33.980 --> 00:05:37.660
- Yeah, so the idea is kind of like you would say


00:05:37.660 --> 00:05:42.660
pip install request, you might say pip install Python 3.11.


00:05:42.660 --> 00:05:44.860
Except for that you can't use the word pip


00:05:44.860 --> 00:05:46.340
because pip is built on Python


00:05:46.340 --> 00:05:48.340
and so you need Python to run.


00:05:48.340 --> 00:05:50.180
I mean, it's a little bit circular there.


00:05:50.180 --> 00:05:53.420
So you kind of need something outside of Python.


00:05:53.420 --> 00:05:56.460
But conceptually, it's I have these things


00:05:56.460 --> 00:05:57.280
I need to run my app.


00:05:57.280 --> 00:06:01.380
I need requests, SQLAlchemy, and Beautiful Soup.


00:06:01.380 --> 00:06:02.540
I also need Python 3.11.


00:06:02.540 --> 00:06:03.700
So those are my dependencies.


00:06:03.700 --> 00:06:04.860
Give me that, right?


00:06:04.860 --> 00:06:06.780
- And I mean, you could even imagine


00:06:06.780 --> 00:06:09.820
potentially pip install Python 3.11 working, I suppose.


00:06:09.820 --> 00:06:12.300
Like you would need a Python, some Python to run pip,


00:06:12.300 --> 00:06:13.260
but once you have that,


00:06:13.260 --> 00:06:15.900
then it's probably still convenient to be able to say,


00:06:15.900 --> 00:06:16.900
okay, actually, shoot.


00:06:16.900 --> 00:06:20.240
So I got this bug report saying in 3.11.2 specifically,


00:06:20.240 --> 00:06:22.620
there's some issue and I'm not sure if I can reproduce it.


00:06:22.620 --> 00:06:25.300
Like being able to just grab that in one command,


00:06:25.300 --> 00:06:26.160
pretty useful.


00:06:26.160 --> 00:06:31.420
But that said, you know, yeah, it's not necessarily,


00:06:31.420 --> 00:06:33.520
pip isn't necessarily the target.


00:06:33.520 --> 00:06:35.920
I've been working on some stuff there as well.


00:06:35.920 --> 00:06:38.320
I don't know if you want to get into that.


00:06:38.320 --> 00:06:41.040
- Yeah, we'll definitely get into it.


00:06:41.040 --> 00:06:44.400
I think, you know, you need something a little bit on the outside,


00:06:44.400 --> 00:06:47.400
and I think ideally doesn't depend on Python being on the system,


00:06:47.400 --> 00:06:52.000
because that, it would be perfectly useful for it to depend on Python.


00:06:52.000 --> 00:06:53.440
And this gives you a different version.


00:06:53.440 --> 00:06:56.280
This gives you a way to quickly toggle between these versions


00:06:56.280 --> 00:06:57.680
and these different setups.


00:06:57.680 --> 00:07:00.280
But if you could omit that dependency on Python,


00:07:00.280 --> 00:07:02.400
then all of a sudden you give away to,


00:07:02.400 --> 00:07:24.660
give it to people who are not developers and use cases where it's not just I already have Python and I need to do it. Maybe you're a developer, but you're not a Python developer. Should you have to manage your own Python installation so that you can use some thing that needs Python to run against your source code? Right? That is not Python. So there's a lot of scenarios where I think it gets unlocked if you use a different foundation.


00:07:24.660 --> 00:07:30.020
Yeah, some of the one of the audiences definitely have in mind here is like, you know, people with


00:07:30.020 --> 00:07:34.740
like taking their very first ever programming course on the first day of class. Like right now,


00:07:34.740 --> 00:07:38.340
it's pretty awkward that you're like, Okay, well, first, you have to go to python.org and then click


00:07:38.340 --> 00:07:41.620
through here and click there and download that. Oh, wait, no, not that version.


00:07:41.620 --> 00:07:44.900
Did you forget to check to put in your path? Oh, dear. Hold on.


00:07:44.900 --> 00:07:48.980
Yeah. And oh, no, do you use the pi launcher? You on Windows? Are you like, it was just


00:07:48.980 --> 00:07:54.660
it's this extra fiddliness. And it's funny, we've spent all this effort in the last few years


00:07:54.660 --> 00:07:58.820
kind of getting wheels to the point where they can just work, right? You can just pip install


00:07:58.820 --> 00:08:02.900
Dumpy and it works everywhere, stuff like that. But Python itself isn't there yet.


00:08:02.900 --> 00:08:10.020
Another use case, sort of maybe my primary use case, sort of audience I have in mind is, right,


00:08:10.020 --> 00:08:17.380
I develop Python packages and as open source and distributed on PyPI, stuff like Trio.


00:08:18.340 --> 00:08:24.420
And so I have the problem of I want to be welcoming to new contributors. I want to bring


00:08:24.420 --> 00:08:30.100
them in, get them started first, quickly. They're volunteers, so I don't want them faffing around


00:08:30.100 --> 00:08:33.780
and struggling and getting stuck trying to just run the tests or anything like that.


00:08:33.780 --> 00:08:39.460
Both that's just a waste of their time. It's kind of rude and inconsiderate. And it's also,


00:08:39.460 --> 00:08:43.700
you know, there's likely they'll just give up if it's just a casual, like,


00:08:43.700 --> 00:08:47.060
they aren't really invested yet. It's just something they're doing for fun or out of interest.


00:08:47.940 --> 00:08:51.480
I really want to make that easy for them.


00:08:51.480 --> 00:08:53.520
And so part of the vision here is


00:08:53.520 --> 00:08:57.120
like being able to say, oh, yeah, so you check out Trio.


00:08:57.120 --> 00:08:59.120
You type this git clone command.


00:08:59.120 --> 00:09:03.760
And then you have some kind of Python management tool


00:09:03.760 --> 00:09:04.380
installed.


00:09:04.380 --> 00:09:07.280
You type that tool, run tests, and it


00:09:07.280 --> 00:09:09.280
makes sure you get the right version of Python


00:09:09.280 --> 00:09:10.520
and set up the environment correctly.


00:09:10.520 --> 00:09:12.040
And then it executes it for you.


00:09:12.040 --> 00:09:13.880
And it knows what tests are, how to run


00:09:13.880 --> 00:09:15.840
the tests in this project, because it looks at,


00:09:15.840 --> 00:09:17.380
pyproject.toml or whatever.


00:09:17.380 --> 00:09:17.880
Right.


00:09:17.880 --> 00:09:20.760
And so just sort of capturing all,


00:09:20.760 --> 00:09:22.260
you know, we have all those pieces.


00:09:22.260 --> 00:09:25.020
We don't really have anything that kind of brings them all together


00:09:25.020 --> 00:09:27.660
into that, like, just type one thing.


00:09:27.660 --> 00:09:28.360
That's it.


00:09:28.360 --> 00:09:29.460
It's going, you know,


00:09:29.460 --> 00:09:30.700
and it just works.


00:09:30.700 --> 00:09:32.860
We honestly don't have many tools that are


00:09:32.860 --> 00:09:34.700
outside looking in in Python.


00:09:34.700 --> 00:09:37.600
So much of our tooling and our infrastructure is


00:09:37.600 --> 00:09:39.840
you have Python, now,


00:09:39.840 --> 00:09:41.740
now you have the tools, now you install it,


00:09:41.740 --> 00:09:45.240
now you install Black or Rough or other,


00:09:45.240 --> 00:10:07.680
Yeah, there's just this kind of very old assumption, which I mean, it made sense, like 10, 15, 20 years ago, where sort of everything was sort of installed manually. And of course, you have, you're going to go through some work to like get set up with Python, it's the foundation of your whole environment. And then you to kind of we add stuff to make it easier on top of that, but kind of, I think it's time to kind of go back and re reevaluate that sort of foundational assumption.


00:10:07.680 --> 00:10:14.280
Yeah, absolutely. So you mentioned trio, I know, before we dive too much further, and I'm gonna give you a chance to kind of


00:10:14.960 --> 00:10:18.160
Let the folks know what you're up to.


00:10:18.160 --> 00:10:20.360
We'll talk about Trio at the end if we got time.


00:10:20.360 --> 00:10:26.060
But what have you been up to since June 29th, 2018?


00:10:26.060 --> 00:10:27.460
Five years ago, roughly.


00:10:27.460 --> 00:10:28.860
Right, last time I was on the podcast.


00:10:28.860 --> 00:10:30.560
Yeah, last time you were on the show.


00:10:30.560 --> 00:10:32.260
Yeah.


00:10:32.260 --> 00:10:36.060
Wow, that was really early in Trio's life, I guess, actually.


00:10:36.060 --> 00:10:40.760
So, I mean, I've had a lot of just real life has happened.


00:10:40.760 --> 00:10:47.480
been, I was, you know, sick for a while and trying to kind of get back on my feet, did some consulting,


00:10:47.480 --> 00:10:54.280
just started a new job. So it's kind of, you know, a lot of distractions. But also, you know, yeah,


00:10:54.280 --> 00:11:03.000
I think Trio is still, you know, I still like it a lot. It's definitely had more influence. Actually,


00:11:03.000 --> 00:11:05.960
had I even published the Structured Concurrency blog post then? I don't remember.


00:11:06.600 --> 00:11:10.840
I feel like it sounds familiar to me, even though it's been five years, it does sound familiar. So


00:11:10.840 --> 00:11:18.200
I do think so. But what has happened since then certainly is Python has seen some of these ideas


00:11:18.200 --> 00:11:25.560
and adopted them, right? Like 311s, concurrency stuff. Yeah. So there's been a, like sort of the


00:11:25.560 --> 00:11:30.040
influence has gone a lot further than I ever expected, both actually in other languages. So


00:11:30.040 --> 00:11:36.440
Yeah, like Swift and Kotlin and, you know, have all kind of adopted ideas from here.


00:11:36.440 --> 00:11:42.520
Java apparently is making some big changes coming up soon with a whole new concurrency setup. And


00:11:42.520 --> 00:11:46.840
they're like saying, like, yeah, we're basing it on that Nathaniel Smith's random blog post.


00:11:46.840 --> 00:11:57.000
Okay. Yeah. Okay. You know, it's very flattering. But yeah. And yes, also,


00:11:58.360 --> 00:12:02.360
In the Python itself, it's sort of complicated because it's sort of this awkward situation


00:12:02.360 --> 00:12:05.880
where there's async.io that's in the standard library, and then there's my sort of competing


00:12:05.880 --> 00:12:11.960
thing, Trio, which, yeah, I guess we should say Trio is an async library for Python that's


00:12:11.960 --> 00:12:17.080
portable. It's sort of an alternative to async.io. There are some tools to kind of let you use both


00:12:17.080 --> 00:12:25.800
at once, but it's not a library for async.io. It's its own thing. And so, obviously, we all


00:12:25.800 --> 00:12:31.400
wish there was just one obvious choice. I kind of looked, you know, but async/a was also in this


00:12:31.400 --> 00:12:36.440
very difficult position being in the standard library and being sort of built up over time,


00:12:36.440 --> 00:12:41.800
and a lot of it was designed before we even had stuff like async/await. So there's just a lot of


00:12:41.800 --> 00:12:45.800
machinery in there that's kind of already committed to other ways of doing things, and it's very hard


00:12:45.800 --> 00:12:50.600
to change. And Trio was sort of like, well, look, we have all these modern things and some new ideas


00:12:50.600 --> 00:12:55.720
coming in like structured concurrency as a better way to kind of write your concurrent


00:12:55.720 --> 00:13:00.280
programs. And it was able to set up a clean slate to like, really, you know, do that all


00:13:00.280 --> 00:13:05.440
from the start and be much simpler. So that was important, you know, to have it be its


00:13:05.440 --> 00:13:08.200
own thing, just so we could, you know, work that stuff out. Then there's a question of,


00:13:08.200 --> 00:13:11.800
okay, now what do we all switch to Trio? Do we move it back into async I/O? Do they both


00:13:11.800 --> 00:13:12.800
continue?


00:13:12.800 --> 00:13:17.120
That's been a debate for some really popular things, I think that is interesting. A lot


00:13:17.120 --> 00:13:22.800
of people say, well, why is library X, which everyone uses? Why is that not built into


00:13:22.800 --> 00:13:27.400
Python? Why do I need to pip install it? And a lot of times the answer is because making


00:13:27.400 --> 00:13:32.100
a part of Python will harm its ability to innovate and change, right? It'll slow it


00:13:32.100 --> 00:13:33.100
way down.


00:13:33.100 --> 00:13:36.880
Yeah. Like there was a whole debate some years ago about like, you know, like we all know


00:13:36.880 --> 00:13:41.040
the HTTP client and Python, you're a lib or whatever. It's just really bad. You should


00:13:41.040 --> 00:13:46.400
just never use it. And it's broken a lot of ways. Like it's just, you just don't use it.


00:13:46.400 --> 00:13:51.400
But we still ship it because it would be too disruptive to take it out.


00:13:51.400 --> 00:13:52.600
That's also why we can't change it.


00:13:52.600 --> 00:13:56.720
There's just too much code out there depending on all the weird quirks.


00:13:56.720 --> 00:14:01.840
And we don't want to ship something else because then it'll end up being like URLlib five years


00:14:01.840 --> 00:14:02.840
later.


00:14:02.840 --> 00:14:06.560
So it was a question, like, should we put requests in the standard library or URLlib


00:14:06.560 --> 00:14:08.960
3 or one of these?


00:14:08.960 --> 00:14:13.280
And it's just, you know, then you can't ship security fixes, you can't improve your API,


00:14:13.280 --> 00:14:14.720
you can't, you know.


00:14:14.720 --> 00:14:20.320
So as we've gotten better at packaging also, it's taken some of the pressure off the standard


00:14:20.320 --> 00:14:24.320
library to be all things to all people.


00:14:24.320 --> 00:14:28.400
This portion of talk Python me is brought to you by CodeCov from Sentry.


00:14:28.400 --> 00:14:29.920
Have you heard about CodeCov?


00:14:29.920 --> 00:14:32.840
They are the leading code coverage tool on the market.


00:14:32.840 --> 00:14:37.000
And they just joined Sentry the error tracking and performance monitoring company that you


00:14:37.000 --> 00:14:38.440
know and love.


00:14:38.440 --> 00:14:43.920
CodeCov is the all in one code coverage reporting solution for any test suite, giving developers


00:14:43.920 --> 00:14:48.160
actionable insights to deploy reliable code with confidence.


00:14:48.160 --> 00:14:49.980
CodeCov is easy to set up.


00:14:49.980 --> 00:14:55.760
If you are already both a CodeCov and Sentry user, GitHub integration is even enabled automatically


00:14:55.760 --> 00:14:56.760
for you.


00:14:56.760 --> 00:14:59.800
You'll get coverage insights directly in your workflows.


00:14:59.800 --> 00:15:04.320
Code coverage pull request comments allow you to quickly analyze your PR's coverage


00:15:04.320 --> 00:15:06.800
and risk without leaving your workflow.


00:15:06.800 --> 00:15:08.360
It'll reduce the guesswork.


00:15:08.360 --> 00:15:13.680
You set up customizable quality gates and let your continuous integration do the rest.


00:15:13.680 --> 00:15:18.200
CodeCov identifies where tests can help you avoid errors in production through their Sentry


00:15:18.200 --> 00:15:19.780
integration.


00:15:19.780 --> 00:15:25.760
If an error does occur, you'll even see code coverage details directly in your stack traces.


00:15:25.760 --> 00:15:30.960
So you can see the untested, partially or fully covered code that may be causing errors


00:15:30.960 --> 00:15:35.880
to help you fix your tests to avoid similar errors happening in the future.


00:15:35.880 --> 00:15:40.880
Get started for free or take advantage of Sentry's promo pricing where with a Sentry


00:15:40.880 --> 00:15:47.240
team or business plan, you can get your first five pro CodeCov seats for just $29 a month.


00:15:47.240 --> 00:15:54.700
That's a 40% savings. Visit talkpython.fm/sentry to get started. Remember to use the code talkpython


00:15:54.700 --> 00:16:03.740
to let them know you came from us. It really does help support the show. That's talkpython.fm/sentry


00:16:03.740 --> 00:16:10.860
and the code talkpython. Thank you to Sentry and CodeCov for supporting the show.


00:16:10.860 --> 00:16:16.780
when the standard library first came into existence, there was no PyPI and there was


00:16:16.780 --> 00:16:21.540
no package. It had to come with it because how else are you going to get it? Hunt it


00:16:21.540 --> 00:16:26.420
down on Usenet and on base64 and code it, but what are you going to do?


00:16:26.420 --> 00:16:30.260
Yeah. Or I mean, maybe you find it, you download, I don't know, Twisted or something like from


00:16:30.260 --> 00:16:31.260
an FTP site.


00:16:31.260 --> 00:16:32.260
Yeah. Yeah. Or an FTP site or something.


00:16:32.260 --> 00:16:38.020
You'd have to unpack it and have to put it in your pipe. It was all totally, yeah, knocking


00:16:38.020 --> 00:16:39.020
rocks together.


00:16:39.020 --> 00:16:41.020
(laughing)


00:16:41.020 --> 00:16:41.860
- Sharpen sticks.


00:16:41.860 --> 00:16:43.220
- You hope it's Flint and it creates a spark.


00:16:43.220 --> 00:16:44.460
- Yeah, yeah.


00:16:44.460 --> 00:16:49.020
- So I think the motivations and the decisions,


00:16:49.020 --> 00:16:51.020
the way you might lean in making the decisions


00:16:51.020 --> 00:16:52.260
are really different now.


00:16:52.260 --> 00:16:55.420
Like I would, even though we're already far down the road


00:16:55.420 --> 00:16:58.420
and making changes is breaking and doesn't make sense,


00:16:58.420 --> 00:17:01.300
it might make sense to ship less in the standard library,


00:17:01.300 --> 00:17:03.060
quite a bit less, and just say,


00:17:03.060 --> 00:17:05.340
oh, you're going to pip install some meta package


00:17:05.340 --> 00:17:07.660
that explodes out some section.


00:17:07.660 --> 00:17:12.060
to pip install the collections area. Boom. And now I got a bunch more potentially.


00:17:12.060 --> 00:17:18.300
One thing I'd really like to see as a possible sort of future there is moving some of the


00:17:18.300 --> 00:17:21.980
standard library into wheels that are installed by default.


00:17:21.980 --> 00:17:22.540
Exactly.


00:17:22.540 --> 00:17:26.380
So you get, so, you know, that's sort of, it's sort of this halfway house, right? Where,


00:17:26.380 --> 00:17:29.740
you know, it's still the case you download Python, install it, they're there. So we don't


00:17:29.740 --> 00:17:35.660
just like break everyone in the world who just assumes they're there. But then it kind of gives


00:17:35.660 --> 00:17:40.460
us that both in the long term, if it's like we want to get rid of it, it kind of gives us or


00:17:40.460 --> 00:17:46.140
push it out to PyPI or just remove it entirely, then it gives us kind of a way to do that more


00:17:46.140 --> 00:17:52.300
gradually. But also for libraries like AsyncIO that are big and complex and really would benefit


00:17:52.300 --> 00:17:57.340
from being able to have their own release cadence and bug fixes and deprecation cycles and all of


00:17:57.340 --> 00:18:02.540
that, then it's like, yeah, it still ships with Python, but then you can pip upgrade it. You're


00:18:02.540 --> 00:18:05.440
you're not stuck with that exact version


00:18:05.440 --> 00:18:08.140
that could only change when a whole new Python release comes out.


00:18:08.140 --> 00:18:10.440
And you have to take all those changes together at once.


00:18:10.440 --> 00:18:13.640
Yeah, I've absolutely had this thought.


00:18:13.640 --> 00:18:16.640
I think it's a really elegant solution.


00:18:16.640 --> 00:18:20.440
Because on one hand, it lets the core developers focus more on


00:18:20.440 --> 00:18:22.940
the true essence of Python.


00:18:22.940 --> 00:18:25.140
And it lets it be used in more locations, right?


00:18:25.140 --> 00:18:28.440
Think PyScript, for example, or MicroPython, right?


00:18:28.440 --> 00:18:31.740
It might be that you should create a central core


00:18:31.740 --> 00:18:34.580
that is exactly the same on all of these.


00:18:34.580 --> 00:18:37.460
You don't have to consider, of course, this is what runs, it runs everywhere.


00:18:37.460 --> 00:18:40.080
But you still get that backwards compatibility


00:18:40.080 --> 00:18:44.160
and you get the ability to say, actually, I want the newest version of AsyncIO


00:18:44.160 --> 00:18:48.840
because I want this more high-performance background worker or something.


00:18:48.840 --> 00:18:51.840
Yeah, or even just, I mean, for smaller, like,


00:18:51.840 --> 00:18:55.140
you know, I don't want the newest version of AsyncIO because, like, I don't know if it works,


00:18:55.140 --> 00:18:58.640
but I want to install in a scratch environment


00:18:58.640 --> 00:19:01.140
this, like, development version so I can try it out


00:19:01.140 --> 00:19:05.860
and give them feedback before they, you know, make the release and set the API in stone.


00:19:05.860 --> 00:19:09.860
And again, like right now, like, you'd have to go build your own Python. And it's like,


00:19:09.860 --> 00:19:14.180
it's just kind of a whole thing, right? You can't just do install --pre.


00:19:14.180 --> 00:19:19.140
Right, exactly. It's definitely a more of a barrier for people who are just casually wanting


00:19:19.140 --> 00:19:24.660
to test stuff out. You got to be pretty committed to getting Python 312, alpha six or whatever we're


00:19:24.660 --> 00:19:30.420
at. Right? I don't know. Yeah, yeah, yeah, indeed. Okay. Very cool. Maybe we'll come back and dive


00:19:30.420 --> 00:19:34.260
into Tree a little bit more. But yeah, and what are you doing these days? You talked about


00:19:34.260 --> 00:19:40.900
doing a little consulting and... Well, yeah, so I just started at a new job, just like last week,


00:19:40.900 --> 00:19:46.260
week before, I guess. Yeah, it's been less than two weeks. Exciting. Yeah, I'm working at Anthropic,


00:19:46.260 --> 00:19:52.740
which I don't know if anyone's heard of. It's still somewhat stealthy, but it's sort of...


00:19:52.740 --> 00:19:59.460
Yeah, I mean, quickly changing. I don't know the exact status currently. But yeah, so my


00:19:59.460 --> 00:20:04.660
My understanding of the background here is that there's actually the team at OpenAI


00:20:04.660 --> 00:20:12.380
who trained GPT-3, just sort of sat down together and decided they really wanted to do more


00:20:12.380 --> 00:20:16.700
of a pure focus on interpretability and safety.


00:20:16.700 --> 00:20:20.140
How do you know what these models are actually going to do?


00:20:20.140 --> 00:20:26.300
And how do you get them to do what you want instead of stuff like making things up?


00:20:26.300 --> 00:20:31.260
all kind of got the scene now how these large language models can go just all over the place,


00:20:31.260 --> 00:20:34.540
do all kinds of strange things. And so, and they decided to-


00:20:34.540 --> 00:20:36.780
There's even one of them being sued for slander, I believe.


00:20:36.780 --> 00:20:38.460
Yes. Yeah.


00:20:38.460 --> 00:20:41.500
Somebody in the UK, I think.


00:20:41.500 --> 00:20:45.500
Yeah. Well, yeah, there's definitely, there's one that just like, if you ask the model,


00:20:45.500 --> 00:20:48.220
like, you know, can you give me some advantages of like, you know,


00:20:48.220 --> 00:20:52.540
problems with sexual harassment in law schools? And it just picks like five real law professors


00:20:52.540 --> 00:20:59.180
and makes up stuff like it's really, really bad. Yeah. And it like site sources that are


00:20:59.180 --> 00:21:03.420
all made up like it's, you know, like that, you know, they're just, they're very powerful,


00:21:03.420 --> 00:21:07.700
but also not well understood or how to like kind of make them useful and safe.


00:21:07.700 --> 00:21:12.500
Just a little bit of devil's advocate, though, they are incredibly powerful, and they are


00:21:12.500 --> 00:21:16.380
incredibly capable. And that's, I think, part of the dangers, you're like, Oh, my God, it


00:21:16.380 --> 00:21:19.980
knows this, oh my gosh, it understood all of that.


00:21:19.980 --> 00:21:23.140
And I ask it, so the fifth thing it says,


00:21:23.140 --> 00:21:24.580
you're like, well, at this point I'm convinced


00:21:24.580 --> 00:21:26.220
that it really is on.


00:21:26.220 --> 00:21:27.860
And then maybe that's the made up one.


00:21:27.860 --> 00:21:29.220
And I think that's the dangers,


00:21:29.220 --> 00:21:31.940
'cause it's actually, it's almost an uncanny valley.


00:21:31.940 --> 00:21:33.740
It's close enough to right that you're like,


00:21:33.740 --> 00:21:35.180
okay, this thing's right, it knows.


00:21:35.180 --> 00:21:37.100
- Yeah, so yeah, so personally,


00:21:37.100 --> 00:21:39.340
like I'm still kind of up in the air on


00:21:39.340 --> 00:21:42.220
how impactful it'll be, where the impact will be.


00:21:42.220 --> 00:21:45.260
Like I think it's just a lot of open questions.


00:21:45.260 --> 00:21:48.380
You haven't bought a farm, like a goat farm in the woods,


00:21:48.380 --> 00:21:51.100
because you just give them technologies like blow rod now?


00:21:51.100 --> 00:21:54.700
OK, all right, super good.


00:21:54.700 --> 00:21:57.780
But I guess I do have stock options now, apparently.


00:21:57.780 --> 00:21:59.340
Or I will at some point if they vest.


00:21:59.340 --> 00:22:01.660
So I guess that's the other route.


00:22:01.660 --> 00:22:05.180
But no, but anyway, so I was just saying, so yeah,


00:22:05.180 --> 00:22:07.540
so Anthropics, just interesting company


00:22:07.540 --> 00:22:10.700
where you actually get to play with some of those big models


00:22:10.700 --> 00:22:13.940
internally, they're kind of working on releasing products now.


00:22:13.940 --> 00:22:19.820
But it's also been kind of just a really interesting to kind of get the sense


00:22:19.820 --> 00:22:23.820
internally of like, it's really kind of this like research culture, which is


00:22:23.820 --> 00:22:27.860
appealing to me. I'm sort of coming out of academia, have a lot of like numerics


00:22:27.860 --> 00:22:33.140
background. And what's also interesting is that part of the reason we kind


00:22:33.140 --> 00:22:37.260
of connected is that apparently it turns out a ton of their internal


00:22:37.260 --> 00:22:54.020
infrastructure runs on Trio. So they're, you know, partly hired me to support that, and are actually giving me time to work on open source paid time. So actually, they are funding this PEP 711, you know, Python binary stuff, though they don't know it yet.


00:22:54.020 --> 00:22:55.620
Now they do.


00:22:55.620 --> 00:22:56.460
Yeah, yeah.


00:22:56.460 --> 00:22:57.780
If they listen to the podcast, they'll learn.


00:22:57.780 --> 00:23:06.780
That's great. That's really, that's really cool. It looks like an interesting area to be working. I agree that the research oriented places, they are fun area to work, right?


00:23:06.780 --> 00:23:12.900
Yeah, and there's just a lot of flexibility kind of, you know, like, it's clear this stuff is gonna have effects.


00:23:12.900 --> 00:23:17.900
Which effects and how big and all that, I don't know, but, you know, being at ground zero is, you know,


00:23:17.900 --> 00:23:19.900
- It's exciting. - It's really exciting, yeah.


00:23:19.900 --> 00:23:22.780
- And a lot of chance to maybe have some impact, so. - Cool.


00:23:22.780 --> 00:23:25.380
Alright, let's dive into the pip. The pip, the pep.


00:23:25.380 --> 00:23:28.860
- The pep, okay. - It's not quite pip, but it's kind of like pip, okay.


00:23:28.860 --> 00:23:29.780
Yeah, okay.


00:23:29.780 --> 00:23:32.780
So, we talked a little bit about the motivation.


00:23:32.780 --> 00:23:36.940
We talked a little bit about what it is.


00:23:36.940 --> 00:23:39.240
Maybe tell us a bit about the spec.


00:23:39.240 --> 00:23:42.240
Like, what does the PEP actually say?


00:23:42.240 --> 00:23:43.940
What is it actually trying to deliver?


00:23:43.940 --> 00:23:45.940
And we can talk about the use cases and


00:23:45.940 --> 00:23:49.240
some of the tools for it and so on later.


00:23:49.240 --> 00:23:51.240
I mean, so, like I said,


00:23:51.240 --> 00:23:53.740
the abstract deal is like wheels,


00:23:53.740 --> 00:23:55.740
but it's an interpreter instead of a package.


00:23:55.740 --> 00:23:58.940
That's partly just sort of a tagline of how you use it,


00:23:58.940 --> 00:24:02.540
but it's actually also a lot about how the actual spec is written.


00:24:02.540 --> 00:24:09.500
It's just sort of like, well, we've done a ton of work over the last five, ten years.


00:24:09.500 --> 00:24:12.780
A lot of people have put a lot of work into making wheels work, right?


00:24:12.780 --> 00:24:18.060
In terms of like, figure out, okay, how do we have metadata that's usable to keep track of


00:24:18.060 --> 00:24:21.500
which packages are installed and their versions and which ones are compatible?


00:24:21.500 --> 00:24:25.580
And for a binary build, which systems can you put this on?


00:24:25.580 --> 00:24:29.900
And all the many Linux work and just all of that stuff.


00:24:29.900 --> 00:24:34.460
And it's just like, well, you know, so we have wheels, we don't need to reinvent the wheel


00:24:34.460 --> 00:24:42.300
again. So I'm just sort of taking all of that. So it's just like, okay, it's mostly it's just a


00:24:42.300 --> 00:24:47.180
delta against the wheel spec. It's like, okay, and the wheel spec, you have, you know, this


00:24:47.180 --> 00:24:51.660
directory for metadata, I have, you know, that same directory, but I call this calling these


00:24:51.660 --> 00:24:56.940
Python binaries, PyBys, just to have sort of a short name, you can stick in a prefix, or sorry,


00:24:56.940 --> 00:24:58.340
Sorry, in a file extension.


00:24:58.340 --> 00:25:02.340
- Yeah, pybi.pybi.


00:25:02.340 --> 00:25:03.300
I like it.


00:25:03.300 --> 00:25:06.060
- Yeah, the PyPy, the interpreter, and PyPI,


00:25:06.060 --> 00:25:09.580
the package repository, we're confusing it up.


00:25:09.580 --> 00:25:12.100
So I thought I'd add another near homonym to the--


00:25:12.100 --> 00:25:13.500
(laughing)


00:25:13.500 --> 00:25:15.060
- PyPy, it's PyBuy.


00:25:15.060 --> 00:25:16.260
- Yeah, yeah, you know.


00:25:16.260 --> 00:25:20.980
Anyway, but so yeah, so like, but they look like,


00:25:20.980 --> 00:25:22.860
you know, the file names look like wheels.


00:25:22.860 --> 00:25:24.220
Like, you know, something like, you know,


00:25:24.220 --> 00:25:29.220
cpython-version-manyLinux217.pybi.


00:25:29.220 --> 00:25:31.760
The context looks like Wheels.


00:25:31.760 --> 00:25:33.180
They're basically just zip files.


00:25:33.180 --> 00:25:35.880
There's some, you know, instead of a .distinfo directory,


00:25:35.880 --> 00:25:37.700
you have a pybinfo directory,


00:25:37.700 --> 00:25:40.460
and it has a metadata file that's in the same format


00:25:40.460 --> 00:25:43.060
as Wheel metadata files for the name and version


00:25:43.060 --> 00:25:45.800
and, you know, description, all that stuff.


00:25:45.800 --> 00:25:48.820
There are a few tweaks,


00:25:48.820 --> 00:25:50.180
basically just what, you know,


00:25:50.180 --> 00:25:52.980
you need specifically for interpreters.


00:25:53.820 --> 00:26:00.940
So, okay, so like one thing that makes it a lot simpler is that there's only one interpreter in a


00:26:00.940 --> 00:26:05.340
Python environment, right? Whereas wheels are kind of designed to be flexible and be installed into


00:26:05.340 --> 00:26:11.420
different kinds of Python environments with different layouts. A PyBy is just like, it's


00:26:11.420 --> 00:26:16.060
just a raw set of files. You unzip it, that's it, you're done. Where wheels, there's like, well,


00:26:16.060 --> 00:26:19.900
okay, if you want to put this in site packages, so you have to go find that. Whereas this goes


00:26:19.900 --> 00:26:23.820
in the bin directory. So you have to go find that and do the special, you know, so that part's just,


00:26:23.820 --> 00:26:31.740
you know, not relevant. Leave that out. There's some slight, you know, we have to support symlinks,


00:26:31.740 --> 00:26:37.020
which wheels don't, mostly just because there's never been a big compelling reason.


00:26:37.020 --> 00:26:37.580
What's that?


00:26:37.580 --> 00:26:42.220
The Windows folks out there, maybe, and others who are just like, what the heck are symlinks?


00:26:42.220 --> 00:26:46.620
Yeah, okay. Well, so yeah, symlink is a classic Unix concept. Though Windows does have them too


00:26:46.620 --> 00:26:53.260
I guess, where it's like a special magic file that instead of having like its actual contents,


00:26:53.260 --> 00:26:57.340
it just lists says, go look at this other location on the file system for my content.


00:26:57.340 --> 00:27:02.460
- Right. It's like an app shortcut, but for programs, not for UI.


00:27:02.460 --> 00:27:04.620
- Yeah, well, like built into the file system.


00:27:04.620 --> 00:27:07.500
- Yes, exactly. So you try to open it, it goes to the other one.


00:27:07.500 --> 00:27:12.140
- Yeah, the operating system automatically opens that other file for you. But you could also


00:27:13.180 --> 00:27:42.680
look at, you know, if you can like say, like, can you show me the same link and like, it'll tell you about it, if you ask, but if you don't, then it just, you know, magically works. And it's mostly, it's just it turns out that traditionally, Unix Pythons tend to use these, both for things like you'll, you know, in the your bin directory, you'll have the Python executable. And then you'll also have Python three as a similar to Python and Python 3.11 is a similar to Python three. And so you know, one to preserve that. And also, it turns out on


00:27:42.680 --> 00:27:47.680
on macOS, they have this very specific kind of layout they want with like framework.


00:27:47.680 --> 00:27:50.760
Like, I don't really understand it in detail, but like there's sort of like a how a Mac


00:27:50.760 --> 00:27:54.800
OS app is supposed to be structured and that it turns out to involve symlinks.


00:27:54.800 --> 00:27:58.480
So we just, you know, we just have to support that said, I mean, the way we support them


00:27:58.480 --> 00:28:01.300
is like, it turns out there's a standard way to put them in zips.


00:28:01.300 --> 00:28:02.300
So I say, let's do that.


00:28:02.300 --> 00:28:06.360
You know, like, again, really trying to keep this as boring as possible.


00:28:06.360 --> 00:28:07.800
You know, I did know.


00:28:07.800 --> 00:28:10.080
And then the last thing, that's crazy.


00:28:10.080 --> 00:28:15.480
Yeah, it's an extension from the InfoZip folks, but then it's become... I don't know.


00:28:15.480 --> 00:28:21.480
Zip's a strange format. It's kind of like an oral tradition as much as an actual specified format.


00:28:21.480 --> 00:28:24.280
There's an entire documentary on Zip.


00:28:24.280 --> 00:28:27.280
And I believe the guy who came up with it.


00:28:27.280 --> 00:28:30.980
It's even controversial in its early days. It's nuts.


00:28:30.980 --> 00:28:36.080
But yes, it's even won the compression de facto standard these days for the most part.


00:28:36.080 --> 00:28:38.480
Yeah, it's definitely got trade-offs, but it's just in terms of,


00:28:38.480 --> 00:28:42.480
it's just really useful just to think that everything could understand.


00:28:42.480 --> 00:28:44.880
It's just so compatible.


00:28:44.880 --> 00:28:48.080
And it's also convenient that you can do random access,


00:28:48.080 --> 00:28:49.680
unlike some of the alternatives.


00:28:49.680 --> 00:28:52.480
You can pull out one file from the middle if you want to.


00:28:52.480 --> 00:28:55.080
The fact that anyone can open it is so much better


00:28:55.080 --> 00:28:58.080
than it might save one more percent. Yeah, for sure.


00:28:58.080 --> 00:28:59.480
- Yeah. - Cool.


00:28:59.480 --> 00:29:02.080
Okay, so we've got these...


00:29:02.080 --> 00:29:13.240
Basically, the pyby file is the zip file. Is that basically the entire interpreter just kind of bundled into a zip file? Like, what's the deal there?


00:29:13.240 --> 00:29:20.360
Yeah. I mean, it's just literally like, you know, you install Python into a certain directory, and then you take that directory, you put it in a zip file.


00:29:20.360 --> 00:29:27.600
There's a little bit of tweaking to like, make sure it's self contained, and you can move it in a portable, portable relocatable, I guess is a better word.


00:29:27.600 --> 00:29:32.640
Yeah. So sometimes if you just install Python regularly, it's kind of, well, I've hard-coded,


00:29:32.640 --> 00:29:37.120
I know that I'm at this particular position on the file system. And so I need to make sure we


00:29:37.120 --> 00:29:42.480
don't do that. And also to make it self-contained, it's like, same thing we do with wheels. Like,


00:29:42.480 --> 00:29:46.480
you have to vendor some libraries, right? If it wants to use readline as a library to,


00:29:46.480 --> 00:29:51.520
for like in the REPL to be able to like edit your line as you're typing it, then, you know,


00:29:51.520 --> 00:29:55.600
we can't just assume it's on the system. We have to include that inside the PyBuy.


00:29:56.480 --> 00:30:04.480
So and but again, like this is stuff we've all already dealt with with wheels, there's tools for doing it, we understand how to do it. And I'm just reusing those tools.


00:30:04.480 --> 00:30:19.480
So if I were to run a Python application delivered by one of these PyBys, does it have to unzip the contents into a location and then run it there? Or can it just run it straight out of memory? Or what?


00:30:19.480 --> 00:30:20.480
How does that work?


00:30:20.480 --> 00:30:25.480
Well, so by itself, the format, I mean, it's just a zip file, right?


00:30:25.480 --> 00:30:28.960
So you can do with it what you can do with a zip file, which, I mean,


00:30:28.960 --> 00:30:30.160
is not much on its own.


00:30:30.160 --> 00:30:32.800
You need some software to work with it, right?


00:30:32.800 --> 00:30:34.760
Now, that said, I think--


00:30:34.760 --> 00:30:37.400
so yeah, so like if you just were starting with nothing and you're like,


00:30:37.400 --> 00:30:41.280
I just I have a URL to some PyBuy and I want to use it,


00:30:41.280 --> 00:30:43.400
then you'd have to download it, run a numzip tool,


00:30:43.400 --> 00:30:45.560
and then you'd have a-- you could go into that directory.


00:30:45.560 --> 00:30:46.680
It's a Python environment.


00:30:46.680 --> 00:30:49.280
You could run pip in there or whatever.


00:30:49.280 --> 00:30:52.340
That said, I think this is a really useful building block


00:30:52.340 --> 00:30:53.940
for tools that want to go beyond that.


00:30:53.940 --> 00:30:56.940
So things like delivering a pre-built application


00:30:56.940 --> 00:30:59.080
that you can just run without unpacking.


00:30:59.080 --> 00:31:01.080
Like there are various tools to do that,


00:31:01.080 --> 00:31:03.880
like PyOxidizer, Py2App.


00:31:03.880 --> 00:31:05.380
I don't know, there's a ton of them, actually.


00:31:05.380 --> 00:31:07.180
I'm probably forgetting like 10 more.


00:31:07.180 --> 00:31:10.940
Yeah, the ones that come to mind for me are Py2Amp, PyInstaller,


00:31:10.940 --> 00:31:12.680
and PyOxidizer for sure.


00:31:12.680 --> 00:31:15.240
PyOxidizer being the newest of them.


00:31:15.240 --> 00:31:19.180
Yes. Oxidizer because it involves Rust somehow.


00:31:19.180 --> 00:31:22.540
- All the new things involve Rust. - Yes.


00:31:22.540 --> 00:31:28.860
So, but yeah, so those tools that it's really useful to be able to say,


00:31:28.860 --> 00:31:33.900
"Okay, like, I'm going to do some clever thing to like set up, I don't know, a self-extracting executable


00:31:33.900 --> 00:31:37.500
or whatever it is they do for their distribution mechanism.


00:31:37.500 --> 00:31:40.220
I'm going to create an installer program, I'm going to..." whatever it is,


00:31:40.220 --> 00:31:44.140
but you still need an actual Python to put into that, right?


00:31:44.140 --> 00:31:46.860
And so having a straightforward way where it's like,


00:31:46.860 --> 00:31:51.180
that's not their problem anymore to figure out how to find a Python and get it built and working for


00:31:51.180 --> 00:31:55.900
the target system. They can just say, okay, I can just like grab, you know, okay, yeah,


00:31:55.900 --> 00:32:00.460
you want to target, you know, many Linux, cool. I'll just go grab the right Python. It's already


00:32:00.460 --> 00:32:05.340
there. I know it works. And now I can take the files out of this PyBI and do whatever I want


00:32:05.340 --> 00:32:10.620
with them. I can pack them into my installer or do clever things to make them usable out of memory


00:32:10.620 --> 00:32:16.060
or whatever. And they can focus on that part instead of just the like, how do you even get a


00:32:16.060 --> 00:32:17.060
a Python.


00:32:17.060 --> 00:32:23.780
Yeah. Or how do you once find yourself in the wrong Python, get the right Python?


00:32:23.780 --> 00:32:24.780
Yeah.


00:32:24.780 --> 00:32:29.660
Yeah. That's a, I don't know if that's trickier or less tricky, right? It's one thing to say,


00:32:29.660 --> 00:32:34.340
dear user, go get Python. You need that. It's another thing to say, go upgrade your Python


00:32:34.340 --> 00:32:36.940
and hope you don't break something. You know, I think.


00:32:36.940 --> 00:32:41.180
Yeah. Well, but also that's part of the point of these being self-contained is, so I mean,


00:32:41.180 --> 00:32:44.780
this is one of the more trivial use cases, right? But right now we all use virtual ends


00:32:44.780 --> 00:32:48.460
And mostly that's fine. But also sometimes, you know, they can get, you know, janking


00:32:48.460 --> 00:32:52.300
stuff could happen. Like, you know, you're on Linux, you do an app to upgrade, and now


00:32:52.300 --> 00:32:56.380
your system pythons change and all the virtual ends that were based on are broken now. Because


00:32:56.380 --> 00:33:01.300
it like had some kind of dependence on that exact binary. Now, I won't say you would always


00:33:01.300 --> 00:33:04.340
want to do this, but at least it's nice to have the option, you could say, okay, instead


00:33:04.340 --> 00:33:07.300
of making virtual ends, I'm just going to make real ends. They're all just going to


00:33:07.300 --> 00:33:10.740
be I'm just going to drop a new copy of Python in each environment. And that way, I just


00:33:10.740 --> 00:33:14.180
just totally self contained, I know exactly what I have it upgrades when I decide to upgrade


00:33:14.180 --> 00:33:18.980
And it's just, you know, it's a nice option, right, sometimes to have that.


00:33:18.980 --> 00:33:22.780
And also, you know, it gives you that total isolation, right?


00:33:22.780 --> 00:33:25.180
So you're then, we were just saying about that issue of like,


00:33:25.180 --> 00:33:27.780
"Oh, I wanted to use this, so I went and installed, upgraded my Python,


00:33:27.780 --> 00:33:29.460
but now that other thing I was already using broke


00:33:29.460 --> 00:33:30.660
because they're using the same Python."


00:33:30.660 --> 00:33:33.140
It's like very easy to say, "No, just give them different Pythons."


00:33:33.140 --> 00:33:33.660
You know.


00:33:33.660 --> 00:33:35.660
There's not that much that changes over time.


00:33:35.660 --> 00:33:37.860
That's a backwards breaking sort of thing.


00:33:37.860 --> 00:33:39.500
I mean, two to three, but I think that's kind of...


00:33:39.500 --> 00:33:39.980
Yeah.


00:33:39.980 --> 00:33:40.900
Let's put that in the past.


00:33:40.900 --> 00:33:42.260
But I did...


00:33:42.260 --> 00:33:45.460
Well, but I did recently, I was working with MongoDB


00:33:45.460 --> 00:33:47.620
using Beanie, which was using


00:33:47.620 --> 00:33:49.620
Motor, which was using


00:33:49.620 --> 00:33:51.620
the @async


00:33:51.620 --> 00:33:53.620
or @coroutine decorator,


00:33:53.620 --> 00:33:55.620
which was just moved in 3.11


00:33:55.620 --> 00:33:58.460
or 3.10, one of those recent upgrades.


00:33:58.460 --> 00:34:01.060
And it had been deprecated forever.


00:34:01.060 --> 00:34:03.620
The people at MongoDB said, "We don't care, we're just going to leave it.


00:34:03.620 --> 00:34:05.120
Who wants to put the word async


00:34:05.120 --> 00:34:07.120
in front of my method? That's tricky."


00:34:07.120 --> 00:34:09.120
I mean, they just probably weren't paying attention.


00:34:09.120 --> 00:34:11.120
And my code wouldn't work. I'm like,


00:34:11.120 --> 00:34:14.720
"Why doesn't this work? Oh, the thing I depend on, which the thing it depends on,


00:34:14.720 --> 00:34:19.920
that thing needed less than 310 or whatever, 310 or 311, whatever."


00:34:19.920 --> 00:34:25.040
- Yeah, and now we're back to the ICKO struggles to adapt without breaking it.


00:34:25.040 --> 00:34:26.640
- Yeah, stuff like this would...


00:34:26.640 --> 00:34:27.920
- Stuff that does happen, you know.


00:34:27.920 --> 00:34:32.000
- And this kind of isolation gives you 100% confidence to say,


00:34:32.000 --> 00:34:35.520
"I'm going to make this new app. We're going to try running this app on this


00:34:35.520 --> 00:34:39.120
in production, and it's not going to hurt anything, and I don't need Docker."


00:34:39.120 --> 00:34:44.620
And you can say, or you could use, say, I'm going to, you know, use this exact point version


00:34:44.620 --> 00:34:49.020
in development. And then I'm going to take that and build it, create my, use that to


00:34:49.020 --> 00:34:52.740
create my Docker image. Like, I don't need the like prebuilt Docker stuff. I could just


00:34:52.740 --> 00:34:57.220
grab Python from PyPI. And I know it's the exact same version everyone else is using,


00:34:57.220 --> 00:35:01.260
built by the Python.org folks. Hopefully, you know, we're not there yet. But like, that's


00:35:01.260 --> 00:35:05.820
kind of the way we're trying to get a PEP and not something on GitHub, right?


00:35:05.820 --> 00:35:07.280
- Yeah, sure.


00:35:07.280 --> 00:35:08.720
Well, it has been on GitHub for a while,


00:35:08.720 --> 00:35:10.160
but I have time to kind of move it more.


00:35:10.160 --> 00:35:12.320
- Yeah, yeah, so maybe it's worth jumping over that,


00:35:12.320 --> 00:35:14.880
but before we do, two questions, maybe.


00:35:14.880 --> 00:35:15.880
- Yeah, sure.


00:35:15.880 --> 00:35:18.040
- Two top-level questions anyway.


00:35:18.040 --> 00:35:21.240
So this is about the concept of kind of like


00:35:21.240 --> 00:35:25.560
pip install Python 3.11, or 10 beta 2, or whatever.


00:35:25.560 --> 00:35:26.480
- Whatever it is, yeah.


00:35:26.480 --> 00:35:29.440
- Yeah, does that, is there a way to say,


00:35:29.440 --> 00:35:32.680
and these three packages off of PyPI?


00:35:32.680 --> 00:35:35.360
Can I take and kind of bring a virtual environment


00:35:35.360 --> 00:35:38.400
effectively along with me with what you're doing so far?


00:35:38.400 --> 00:35:42.160
So PyBI is, again, by themselves, I mean, it's just an archive format,


00:35:42.160 --> 00:35:44.640
right, a package format. It doesn't do anything.


00:35:44.640 --> 00:35:49.280
That said, obviously, yeah, part of what we want is for these to be useful


00:35:49.280 --> 00:35:53.680
for things like, you know, building environments that have other packages in them and stuff.


00:35:53.680 --> 00:35:59.280
So that's the one other thing I didn't, I forgot to mention about defining the format.


00:35:59.280 --> 00:36:03.440
Probably the most interesting part, actually, is that we do add some new


00:36:03.440 --> 00:36:09.440
static metadata that we put into the package. And kind of the motivation there is that I try to


00:36:09.440 --> 00:36:15.840
figure out, okay, what do I need to know in order to install wheels into this Python without running


00:36:15.840 --> 00:36:20.320
it? Right? Because right now, right, like pip assumes that it's running on the Python it's


00:36:20.320 --> 00:36:25.920
installing into. So anytime it wonders, like, you know, okay, like, what ABI's does this Python


00:36:25.920 --> 00:36:29.680
support? And what version is it? What platform am I on? It can just ask the interpreter it's


00:36:29.680 --> 00:36:34.400
running on, right? And it's like, okay, well, it would be really nice if you didn't have to do


00:36:34.400 --> 00:36:39.680
that both for like efficiency, like you want to be able to, you know, figure out which, you know,


00:36:39.680 --> 00:36:44.320
have your like installer, your resolver, figure out which versions of everything it wants,


00:36:44.320 --> 00:36:48.640
without having to like download and run multiple versions of Python and stuff like,


00:36:48.640 --> 00:36:53.760
you really like to avoid that. It's also things like I want to build a cross, I want to build,


00:36:53.760 --> 00:37:00.480
release distributions for macOS, but I'm on Windows or vice versa.


00:37:00.480 --> 00:37:06.880
Or I just want to, you know, I'm developing my package like Trio on Linux personally,


00:37:06.880 --> 00:37:13.280
but I would like it that when I lock my version, so I know all my collaborators are using the same versions,


00:37:13.280 --> 00:37:16.880
that we figure out locks that also work on Windows and macOS.


00:37:16.880 --> 00:37:22.080
And I can't just trivial run all those Pythons from one resolver


00:37:22.080 --> 00:37:28.560
because it's not running on all three at once. And Python packaging does have the ability to


00:37:28.560 --> 00:37:35.360
have different dependencies on different OSs. It can get very complicated to figure out which


00:37:35.360 --> 00:37:40.320
packages do I need where. And so, I wanted to put a bunch of metadata into the PyBI,


00:37:40.320 --> 00:37:46.240
all the stuff you need to solve those problems. So, yeah. So, the PyBI itself, I think normally


00:37:46.240 --> 00:37:51.280
they won't ship with any packages. Maybe, again, callback. Maybe in the future we'll start moving


00:37:51.280 --> 00:37:57.360
some of the standard library into wheels that are pre-installed, you can do that. But I'm guessing


00:37:57.360 --> 00:38:03.120
like, you know, for now, it'll mostly just be, you know, a plain vanilla Python install. But


00:38:03.120 --> 00:38:07.440
then you could take that, you could take some wheels, bundle them all together into a new


00:38:07.440 --> 00:38:11.680
archive if you want. Or, again, whatever you want to do with it, stick it in a Docker image,


00:38:11.680 --> 00:38:18.000
whatever. It's a step towards but not necessarily trying to propose an entire solution of here is


00:38:18.000 --> 00:38:24.400
the interpreter and all the dependencies and the code and just run it as if it was, it had no


00:38:24.400 --> 00:38:30.240
dependency on your system. Just treat it as like a .exe or a .app. I can just double click.


00:38:30.240 --> 00:38:36.320
I mean, it makes that a lot easier than it is right now. First step is just to figure out,


00:38:36.320 --> 00:38:41.120
like, how do I even build a Python that'll work like that? And that is like some arcane,


00:38:41.120 --> 00:38:47.440
dark knowledge written on a tome in black ink on black paper and a black tomb. You have to go


00:38:47.440 --> 00:38:53.960
find or something like, you know, it's just, yeah, it's not easy. And so just having the


00:38:53.960 --> 00:38:58.960
ability to say like, yeah, just grab this file, unzip it, drop some wheels in it, zip


00:38:58.960 --> 00:39:02.400
it up again. Now that's a package you can drop, you can hand to someone and it'll work


00:39:02.400 --> 00:39:06.960
on their system. You know, like that's, that makes it a lot more accessible. It's not the


00:39:06.960 --> 00:39:10.640
thing I most personally like, I'm not immediately going to go build that one last extra tool,


00:39:10.640 --> 00:39:11.640
but I bet someone will.


00:39:11.640 --> 00:39:17.320
Yeah, I can imagine someone will for sure.


00:39:17.320 --> 00:39:21.340
This portion of Talk Python To Me is brought to you by us over at Talk Python Training with


00:39:21.340 --> 00:39:22.340
our courses.


00:39:22.340 --> 00:39:26.860
And I want to tell you about a brand new one that I'm super excited about.


00:39:26.860 --> 00:39:30.060
Python web apps that fly with CDNs.


00:39:30.060 --> 00:39:33.980
If you have a Python web app, you want it to go super fast.


00:39:33.980 --> 00:39:37.940
Static resources turn out to be a huge portion of that equation.


00:39:37.940 --> 00:39:42.860
Leveraging a CDN could save you up to 75% of your server load and make your app way


00:39:42.860 --> 00:39:44.560
faster for users.


00:39:44.560 --> 00:39:48.640
And this course is a step-by-step guide on how to do it.


00:39:48.640 --> 00:39:53.440
And using the CDN to make your Python apps faster is way easier than you think.


00:39:53.440 --> 00:39:58.000
So if you've got a Python web app and you would like to have it scaled out globally,


00:39:58.000 --> 00:40:02.680
if you'd like to have your users have a much better experience, and maybe even save some


00:40:02.680 --> 00:40:08.800
money on server hosting and bandwidth, check out this course over at talkpython.fm/courses.


00:40:08.800 --> 00:40:10.600
It'll be right up there at the top.


00:40:10.600 --> 00:40:13.120
And of course, the link will be in your show notes.


00:40:13.120 --> 00:40:17.180
Thank you to everyone who's taken one of our courses. It really helps support the podcast.


00:40:17.180 --> 00:40:20.180
And back to the show.


00:40:20.180 --> 00:40:25.720
Our next question is not what our shared screen here but is what impact do you think this


00:40:25.720 --> 00:40:33.840
would have on PyPI? First of all, do you see PyPI the way the CDN that delivers packages


00:40:33.840 --> 00:40:39.360
like trio and wheels like trio? Do you see that as the same channel through which CPython


00:40:39.360 --> 00:40:40.360
3.11 is delivered?


00:40:40.360 --> 00:40:46.440
Yeah, I mean, so I would like these to literally be like you go to PyPI slash project slash


00:40:46.440 --> 00:40:51.040
CPython. It says like, here's the latest release and you click on downloads and it shows you


00:40:51.040 --> 00:40:54.360
the, yeah, I'd like it to just literally be stuff you upload to PyPI.


00:40:54.360 --> 00:40:58.360
Right. And when you pip and solve from there, it figures out the platform to pick from and


00:40:58.360 --> 00:41:03.160
it downloads that wheel and off it goes. Right. Do you think that that would add like a huge


00:41:03.160 --> 00:41:06.560
burden to the amount of traffic or do you think?


00:41:06.560 --> 00:41:10.920
- No. I mean, largely we'll have to see and adapt,


00:41:10.920 --> 00:41:15.920
but Python itself, it's like, shoot, it's tens of megabytes.


00:41:15.920 --> 00:41:17.520
- Okay, cool.


00:41:17.520 --> 00:41:18.880
So plenty of other packages.


00:41:18.880 --> 00:41:20.440
- There are a lot of much bigger,


00:41:20.440 --> 00:41:22.440
like go look at TensorFlow or something.


00:41:22.440 --> 00:41:25.480
There are hundreds of megabyte packages on Python


00:41:25.480 --> 00:41:27.240
that are very popular.


00:41:27.240 --> 00:41:29.300
Also, I mean, Python.org downloads


00:41:29.300 --> 00:41:30.860
go through the same CDN anyway.


00:41:30.860 --> 00:41:32.960
It's just sort of different infrastructure on the backend,


00:41:32.960 --> 00:41:36.400
but it's still fastly serving it and donating the bandwidth.


00:41:36.400 --> 00:41:40.040
So in that regard, I wouldn't expect much change.


00:41:40.040 --> 00:41:44.120
And also just people tend to install wheels more often


00:41:44.120 --> 00:41:45.440
than they install Python.


00:41:45.440 --> 00:41:48.000
Again, it's hard to know the second order effects.


00:41:48.000 --> 00:41:51.680
Maybe virtual ends will be less popular in favor of full ends


00:41:51.680 --> 00:41:53.400
if this takes off.


00:41:53.400 --> 00:41:55.560
And then people will start installing Python more


00:41:55.560 --> 00:41:56.320
than they do now.


00:41:56.320 --> 00:42:00.880
But nonetheless, I don't think it's a huge--


00:42:00.880 --> 00:42:04.800
I wouldn't anticipate it being a huge change.


00:42:04.800 --> 00:42:09.500
And if it turns out to be a problem, then we can kind of address it then.


00:42:09.500 --> 00:42:13.100
Well, you could also do, to a large degree,


00:42:13.100 --> 00:42:16.100
you could do things like pip does already that caches.


00:42:16.100 --> 00:42:20.540
You could just cache the CPython wheel, the PyBI,


00:42:20.540 --> 00:42:23.540
into the user profile, and the second, third, fourth time you get it,


00:42:23.540 --> 00:42:26.680
it's really the CI systems and all the dockers and all that stuff


00:42:26.680 --> 00:42:29.980
that don't understand what a cache is or any of those things.


00:42:29.980 --> 00:42:32.380
Yeah, but then, you know, so like if it becomes a real problem,


00:42:32.380 --> 00:42:36.380
then you go to GitHub and you're like, "Hey, can we work something out so that you stick


00:42:36.380 --> 00:42:43.960
a cache in front of PyPI?" Stuff like that. It's not trivial, but you could talk to people


00:42:43.960 --> 00:42:49.560
and solve problems. Certainly, I don't think we should hold back the entire design of how


00:42:49.560 --> 00:42:53.620
we distribute Python and make it available because, "Oh, maybe it'll be too easy and


00:42:53.620 --> 00:42:58.320
people will use it too much." That's a good problem to have, right?


00:42:58.320 --> 00:43:00.520
- Yes, exactly. Look, they're using it. This is terrible.


00:43:00.520 --> 00:43:03.020
- Yeah, like first, you know, make it easy


00:43:03.020 --> 00:43:05.020
and then figure out how to solve any problems that cause it.


00:43:05.020 --> 00:43:08.020
- Yeah, I think we've more than once solved the problem of,


00:43:08.020 --> 00:43:09.220
"Oh my gosh, they're using it."


00:43:09.220 --> 00:43:12.020
Like Google, Netflix, you name it, you know.


00:43:12.020 --> 00:43:15.020
Think of the benefit that you'll be doing for all the developers,


00:43:15.020 --> 00:43:18.620
especially those who have Python skills and are looking for a job.


00:43:18.620 --> 00:43:22.220
I mean, if the popularity of Python by downloads is one thing,


00:43:22.220 --> 00:43:25.420
if you could like 4X that, we'd all be more demand.


00:43:25.420 --> 00:43:28.960
and like, really, really downloaded now.


00:43:28.960 --> 00:43:30.640
- Right, yeah, just go out there


00:43:30.640 --> 00:43:32.600
and just download it five times in every CI job.


00:43:32.600 --> 00:43:33.640
Just, you know.


00:43:33.640 --> 00:43:34.480
- Exactly.


00:43:34.480 --> 00:43:36.140
- Just throw a form away, but you know.


00:43:36.140 --> 00:43:38.560
- Just do it a couple of times, just show.


00:43:38.560 --> 00:43:40.020
- Right, yeah.


00:43:40.020 --> 00:43:41.140
- Awesome.


00:43:41.140 --> 00:43:43.020
The question that you put into the PEP


00:43:43.020 --> 00:43:45.200
here on the screen though, is why not just Conda?


00:43:45.200 --> 00:43:49.320
And I, not being a particularly data focused person,


00:43:49.320 --> 00:43:52.120
I definitely prefer using pip over Conda


00:43:52.120 --> 00:43:54.540
because especially it seems like a lot of the web packages


00:43:54.540 --> 00:43:57.640
are not as close to update up to date.


00:43:57.640 --> 00:43:59.980
You know, there's a latency before it hits conda


00:43:59.980 --> 00:44:01.440
and it's like immediately on pip.


00:44:01.440 --> 00:44:03.440
That said, there's a bunch of people who are like,


00:44:03.440 --> 00:44:04.940
I kind of use conda for this.


00:44:04.940 --> 00:44:07.340
Yeah, and right. If you're just like,


00:44:07.340 --> 00:44:10.140
look, I don't really care about all this.


00:44:10.140 --> 00:44:12.980
Like, I just, you know, want to run my Jupyter notebooks


00:44:12.980 --> 00:44:16.240
and I, you know, just need a Python that can do that.


00:44:16.240 --> 00:44:18.240
And maybe, you know, some NumPy or whatever.


00:44:18.240 --> 00:44:20.240
Conda solves that really well.


00:44:20.240 --> 00:44:22.940
And this thing could, you know, I'm working on


00:44:22.940 --> 00:44:28.980
could also potentially solve that really well. And so it feels duplicative to those people.


00:44:28.980 --> 00:44:33.980
And to them it is. You know, it doesn't really -- they're both two solutions that work, but


00:44:33.980 --> 00:44:36.940
there isn't necessarily a reason for them to choose one or the other.


00:44:36.940 --> 00:44:44.700
>> But this could also be a foundation for the way that Conda provides Python to itself.


00:44:44.700 --> 00:44:48.920
>> Maybe. I don't know. Like, there's a whole other question about how, like, we could bring


00:44:48.920 --> 00:44:55.360
Conda and PyPI, PIP, that kind of world closer together and interoperate better. But that's


00:44:55.360 --> 00:45:02.600
a whole can of worms, lots of complicated stuff. I don't think this PEP itself is going


00:45:02.600 --> 00:45:05.720
to be the thing that makes a big difference there.


00:45:05.720 --> 00:45:08.600
Okay. But it's not an anti-Conda type of thing.


00:45:08.600 --> 00:45:12.200
No. No. Yeah. Well, and so, right. And so, I mean, you can also get to see a version


00:45:12.200 --> 00:45:17.920
of this in the PEP. But basically, the way I think about it is that the key reason why


00:45:17.920 --> 00:45:22.960
we just like why PyPI is a critical piece of infrastructure that, you know, cannot be replaced


00:45:22.960 --> 00:45:30.880
by anything else is not because it's of its use for end users. I mean, it's great that end users


00:45:30.880 --> 00:45:36.000
use it and find it helpful and all that, but like that isn't the people who absolutely need it and


00:45:36.000 --> 00:45:41.840
could not have any replacement. The reason why we just absolutely need it is for package developers


00:45:41.840 --> 00:45:45.840
because the way, again, you're talking about all those different ways you can get Python,


00:45:45.840 --> 00:45:49.180
And there's all these different ways Python packages get distributed.


00:45:49.180 --> 00:45:51.180
You can brew install Python packages.


00:45:51.180 --> 00:45:53.640
There's versions, you know, NumPy,


00:45:53.640 --> 00:45:57.520
a patched version of NumPy used to be part of the standard macOS install.


00:45:57.520 --> 00:45:59.520
Maybe it still is, I don't know.


00:45:59.520 --> 00:46:03.560
You know, like when you install Blender, there are Python packages in there.


00:46:03.560 --> 00:46:07.200
Install some game using, was it RenPy?


00:46:07.200 --> 00:46:09.860
It's going to have Python packages in there.


00:46:09.860 --> 00:46:11.860
Or just, you know, there's just like,


00:46:11.860 --> 00:46:14.500
there's so many different ways that Python code


00:46:14.500 --> 00:46:17.540
goes out in the world and gets used in all these different contexts.


00:46:17.540 --> 00:46:20.660
And if you're developing some upstream library, like, you know,


00:46:20.660 --> 00:46:24.340
Trio again, or, but, you know, or requests or NumPy or anything,


00:46:24.340 --> 00:46:27.780
then what you absolutely don't want to do


00:46:27.780 --> 00:46:31.860
is have to maintain a separate distribution for all of those different


00:46:31.860 --> 00:46:34.180
things. You don't want to have to upload your package


00:46:34.180 --> 00:46:38.660
to CondaForge and also to Debian and also to Fedora


00:46:38.660 --> 00:46:43.940
and also to BlenderForge, like, you just, like, that's not,


00:46:43.940 --> 00:46:50.820
that doesn't make any sense. And then having every different package maintainer do that,


00:46:50.820 --> 00:46:57.140
like that just would be terrible. It just would be unworkable. So the critical role that PyPI


00:46:57.140 --> 00:47:02.660
serves that just nothing else can, is it's this intermediation point between package uploaders and


00:47:02.660 --> 00:47:11.220
package users, including package redistributors. And so I make a release of my package, I upload


00:47:11.220 --> 00:47:15.220
to PyPI. And then that's where Conda forward gets, that's where Debian gets it, that's where


00:47:15.220 --> 00:47:19.700
the end users get it if they're pulling straight from PyPI. It fans out from there.


00:47:19.700 --> 00:47:26.900
And the key difference in terms of design between pip and Conda is that PIP's metadata formats and


00:47:26.900 --> 00:47:32.500
wheels and the metadata and sourced disks and all that are designed around this abstraction of you


00:47:32.500 --> 00:47:37.940
have some kind of Python environment, but it could be any of those. It could be on different OSs,


00:47:37.940 --> 00:47:42.020
it could be different, you know, ways of building it, different layout, different pieces could be


00:47:42.020 --> 00:47:46.980
missing, like, whatever, you could be laid out in all kinds of different ways. I just know that


00:47:46.980 --> 00:47:52.260
there is some kind of Python environment. And I have the metadata to like figure out how to adapt


00:47:52.260 --> 00:47:58.260
to how this particular Python environment is put together. And conda, on the other hand, is one of


00:47:58.260 --> 00:48:02.500
these sort of downstream systems. It's it can the reason people like love it and like data science,


00:48:02.500 --> 00:48:07.780
right, is because it's a full-fledged, like, arbitrary application distribution thing, right?


00:48:07.780 --> 00:48:12.900
You can install random, you know, C libraries and, you know, you can install R and R packages,


00:48:12.900 --> 00:48:17.540
like, it's just, it's got, you know, compilers that are all there in the one thing. But because


00:48:17.540 --> 00:48:23.060
of that, it doesn't have this abstraction of, "Oh, I can handle any Python environment."


00:48:23.060 --> 00:48:28.820
A conda package of a Python package is set up to install in a conda Python that's laid out in a,


00:48:28.820 --> 00:48:33.060
the way a conda environment is laid out in the way of using the libraries a conda library has,


00:48:33.060 --> 00:48:37.300
right? And so it doesn't have that flexibility. If you just release something for conda,


00:48:37.300 --> 00:48:43.540
then it's great for conda, but it's not usable to Debian and Homebrew and all of those other folks.


00:48:43.540 --> 00:48:49.380
And so that's the key thing that PyPI does, right? It has that abstraction that lets you


00:48:49.380 --> 00:48:55.060
have the Python packaging ecosystem of all those packages and they're dependent on each other.


00:48:55.060 --> 00:49:00.660
and then you kind of project it down into each of these more specific, specialized packaging systems.


00:49:00.660 --> 00:49:04.060
And then also, because, you know, as a...


00:49:04.060 --> 00:49:06.660
That's the other thing as a package maintainer,


00:49:06.660 --> 00:49:08.740
I don't just write my package and upload it.


00:49:08.740 --> 00:49:13.660
Like I'm also using all the other open source maintainers work as I do it.


00:49:13.660 --> 00:49:14.980
We're all working together, right?


00:49:14.980 --> 00:49:17.220
And I'm depending on their work and they're depending on mine.


00:49:17.220 --> 00:49:21.540
And so I need to be able to say, like, okay, you know, my package needs those three other packages,


00:49:21.540 --> 00:49:22.660
and here are the versions.


00:49:22.660 --> 00:49:27.460
and I need to be able to create an environment with those versions and test it


00:49:27.460 --> 00:49:32.820
before I upload my package to PyPI. And so, again, all that work has to happen at that


00:49:32.820 --> 00:49:36.740
higher abstraction level. You can't just say, "I'm going to take the latest version from Conda


00:49:36.740 --> 00:49:41.780
and test against it," because that's not necessarily the version that other people will


00:49:41.780 --> 00:49:46.420
get. Where you take the versions from PyPI, those are like the original ones. I can get exactly...


00:49:46.420 --> 00:49:51.460
I have access to anything anyone has ever uploaded as soon as they upload it, and I can test them


00:49:51.460 --> 00:49:55.620
all together. And then, you know, if condo wants to take some curated subset of those or whatever,


00:49:55.620 --> 00:50:00.820
that's great. That's a really valuable service. But you know, they kind of need that underlying


00:50:00.820 --> 00:50:04.820
set of packages to curate. And that's why. Yeah.


00:50:04.820 --> 00:50:12.100
PyPI is kind of the definitive source of truth as the package creator intended it to be.


00:50:12.100 --> 00:50:15.700
Yeah. And then so right. And then of course, yeah, for a lot of end users,


00:50:15.700 --> 00:50:18.660
it turns out they're just going straight to that without any intermediary.


00:50:19.380 --> 00:50:24.260
works great for them. And that's really cool. But also, you know, it's not like I don't have


00:50:24.260 --> 00:50:29.620
anything against people who prefer to go through Debian or Conda or whatever. I think that's also


00:50:29.620 --> 00:50:35.540
great, you know, if that works better for you. But for the folks who are, you know, developing,


00:50:35.540 --> 00:50:39.380
you know, packages to upload, or who just, you know, would rather just, you know, get stuff


00:50:39.380 --> 00:50:43.700
straight from the source, the PyBI's, I think, can solve a lot of problems that Conda, you know,


00:50:43.700 --> 00:50:46.740
just, it just doesn't address those. It has a different focus.


00:50:46.740 --> 00:50:54.180
Trying to make it a swap over to do that might kill a little bit of what it's good for, you know?


00:50:54.180 --> 00:50:59.940
Yeah. All right. Let's see. So let's move on to your announcement here. I think...


00:50:59.940 --> 00:51:01.140
Okay. Right. Yeah.


00:51:01.140 --> 00:51:06.260
So over on discuss.python.org, when was this? This was January 21st.


00:51:06.260 --> 00:51:07.300
That's a few months ago.


00:51:07.300 --> 00:51:12.340
Yeah. A few months ago, you announced PyBI and Posi.


00:51:12.340 --> 00:51:13.140
Yes.


00:51:13.140 --> 00:51:18.340
And Posey is, we talked about this mythical pip that could pip install CPython 3.11.


00:51:18.340 --> 00:51:20.980
Posey is that mythical pip, right?


00:51:20.980 --> 00:51:27.780
Yeah. So yeah, the pip 7.11, the PyBI stuff is just the one brick in my master plan.


00:51:27.780 --> 00:51:34.340
So, right. Because yeah, because sort of this vision I had in mind, I kind of alluded to earlier


00:51:34.340 --> 00:51:38.500
talking about like, you know, okay, if somebody does, you know, Git clone my project, I want them


00:51:38.500 --> 00:51:42.180
to, you'll just run the tests and know that they have the right version of Python and the right


00:51:42.180 --> 00:51:45.460
version of the dependencies and just kind of, you know, and they know how to run the, you know,


00:51:45.460 --> 00:51:52.500
just do it, right? Encode all that information somewhere. And Posey is sort of my experimental,


00:51:52.500 --> 00:51:58.660
it's not ready to use, but it does have a lot of stuff working, is my attempt to solve that part


00:51:58.660 --> 00:52:06.660
of the problem. So the vision is Posey is a, it is a full reimplementation of PIP, you know,


00:52:06.660 --> 00:52:15.620
the metadata parsers and dependency resolvers and archive installers and all of that, except


00:52:15.620 --> 00:52:25.380
I rewrote it all in Rust, as is the style. But it's all built around PyBIs. So it doesn't...


00:52:25.380 --> 00:52:32.100
Maybe at some point we'll also start supporting VNs or user-installed Pythons. But for now,


00:52:32.100 --> 00:52:36.820
sort of for the MVP, it just says, like, okay, yeah, you have a PyBuy, I will grab that,


00:52:36.820 --> 00:52:42.580
I will grab packages that are compatible with it, I will arrange them all to run together based on,


00:52:42.580 --> 00:52:48.020
you know, you just say what you need, I turn that into, like, a lock file, I fetch those packages,


00:52:48.020 --> 00:52:53.940
I run, you know, your test script or whatever. And yeah, I mean, that is the core idea.


00:52:53.940 --> 00:53:00.740
And one advantage of being in Rust is that it's, you know, just because just so obviously,


00:53:00.740 --> 00:53:05.380
you know, if you want to hack on it, then you need like a Rust compiler and stuff. But if you just


00:53:05.380 --> 00:53:10.420
want to use it, then we can just take a button, we can compile it down to a single binary that you


00:53:10.420 --> 00:53:15.620
just, you know, upload to wherever, install it from wherever, and you just you drop it on your


00:53:15.620 --> 00:53:21.380
system, you run it, and it's self-contained, it can handle everything from there. So again,


00:53:21.380 --> 00:53:27.460
thinking of that target audience of like beginners, right, you say, okay, install this one program,


00:53:27.460 --> 00:53:31.700
And now you type, you know, Posey run. And oh, look, you're in a rebel. And it's like,


00:53:31.700 --> 00:53:35.380
and I would totally, of course, I had to go find the latest version of Python and grab it and


00:53:35.380 --> 00:53:39.700
figure out which build is right for your system and do that. But like, but you know, you don't


00:53:39.700 --> 00:53:44.100
have to think about that. You just hit enter and it happens. And there's your rebel. Or they say,


00:53:44.100 --> 00:53:49.140
you know, Posey add requests and then Posey add Jupyter and then Posey run notebook, you know,


00:53:49.140 --> 00:53:55.060
like, and it kind of is handling the environments behind the scenes.


00:53:55.620 --> 00:54:03.860
Yeah, we did a panel discussion with a bunch of core developers around packaging recently.


00:54:03.860 --> 00:54:08.340
And a lot of them were saying things like, I don't really want to put words in mouth, but


00:54:08.340 --> 00:54:13.780
kind of getting the sense that like, okay, so we have a bunch of tools that are really neat,


00:54:13.780 --> 00:54:19.540
that live within Python, you know, I'm thinking Hatch, Poetry, those that category of tools,


00:54:19.540 --> 00:54:24.820
Pip itself even. And some of the challenges or problems that they would like to solve,


00:54:24.820 --> 00:54:29.860
they could unlock a simpler API if it was turned inside out, right?


00:54:29.860 --> 00:54:34.420
If the tool itself controlled Python, it didn't depend on Python to get started.


00:54:34.420 --> 00:54:40.500
They mentioned RustUp as a way to get started, which is a way to kind of install a version of


00:54:40.500 --> 00:54:45.380
Rust and get started, right? And it feels to me like this is pretty close to that.


00:54:45.380 --> 00:54:51.620
Yeah, there's a lot of overlap, for sure, in terms of sort of goals and approach and all of that.


00:54:52.980 --> 00:54:55.780
- One challenge I see is,


00:54:55.780 --> 00:54:59.380
so like for example, to run the application


00:54:59.380 --> 00:55:02.020
for the, with the Python that's bundled up


00:55:02.020 --> 00:55:04.060
inside of one of these PyBIs is you would say,


00:55:04.060 --> 00:55:07.300
Posey run or Posey some kind of file


00:55:07.300 --> 00:55:08.820
or something like that, right?


00:55:08.820 --> 00:55:09.660
- Sure, yeah, whatever.


00:55:09.660 --> 00:55:11.140
- Could, could, yeah, yeah, yeah.


00:55:11.140 --> 00:55:14.220
Whatever the CLI that's yet to be fully spec'd out


00:55:14.220 --> 00:55:15.300
comes out to be.


00:55:15.300 --> 00:55:16.960
But, you know, could you do things like,


00:55:16.960 --> 00:55:20.060
could you create, you know, speaking of symlinks


00:55:20.060 --> 00:55:21.380
and other types of stuff,


00:55:21.380 --> 00:55:24.520
Could you create just in the same folder where that app lives,


00:55:24.520 --> 00:55:28.520
a Python that actually just calls Posey,


00:55:28.520 --> 00:55:31.020
the Python inside instead of Python itself,


00:55:31.020 --> 00:55:33.420
and pip that says, you know,


00:55:33.420 --> 00:55:37.020
Posey run pip inside this Python to kind of bridge,


00:55:37.020 --> 00:55:39.920
to unify the API from where people are coming from,


00:55:39.920 --> 00:55:43.520
to kind of expose the same tools that are inside a little bit?


00:55:43.520 --> 00:55:44.320
You know what I mean?


00:55:44.320 --> 00:55:46.420
Well, so, yes. I mean, so,


00:55:46.420 --> 00:55:49.420
the way I am currently


00:55:49.420 --> 00:55:56.940
sort of in my current prototype, basically. It doesn't work like that just because it felt


00:55:56.940 --> 00:56:02.620
sort of more complicated to then like try to expose those things. So, sort of the sense is like,


00:56:02.620 --> 00:56:08.140
you know, let's see how far we can get with treating sort of the UI paradigm of like Posi


00:56:08.140 --> 00:56:12.940
is just your front end to Python. Like you don't, you just, you start your command with Posi and


00:56:12.940 --> 00:56:18.780
that's, that's the only command you need to know, kind of. And so, and that also allows some


00:56:18.780 --> 00:56:23.660
interesting things. So like the way Posey does environments right now is it doesn't, you can


00:56:23.660 --> 00:56:27.580
have multiple environments within a project. Like if you need to test against multiple Python


00:56:27.580 --> 00:56:33.100
versions or you need different installs for, I don't know, tests and for building your docs and


00:56:33.100 --> 00:56:38.540
whatever. But it doesn't actually materialize all those as separate independent virtual


00:56:38.540 --> 00:56:44.620
environments. Instead what it does is it, for like each unique wheel or PyBi that it needs,


00:56:44.620 --> 00:56:49.500
it unpacks that into its own directory. And then on the fly, it assembles environments by


00:56:49.500 --> 00:56:54.060
setting up environment variables so that it can launch a Python in such a way that it


00:56:54.060 --> 00:56:58.460
picks the right Python and launches in such a way that it sees the right packages it's supposed to


00:56:58.460 --> 00:57:02.380
see. But there's only one copy of those packages on disk, if you have multiple environments.


00:57:02.380 --> 00:57:10.540
If you want to try out different versions or whatever, it can just do that without having


00:57:10.540 --> 00:57:12.540
to go rearrange everything on disk.


00:57:12.540 --> 00:57:14.540
And that's just, you know, it's convenient.


00:57:14.540 --> 00:57:18.540
It's just a really nice way to work with sort of having declarative Python environments.


00:57:18.540 --> 00:57:20.540
So you never update an environment in place.


00:57:20.540 --> 00:57:23.540
There is no environment in place. It's just on each command you run,


00:57:23.540 --> 00:57:26.540
it sort of knows declaratively, "Okay, these are which packages are supposed to be there.


00:57:26.540 --> 00:57:28.540
I'll give you those packages."


00:57:28.540 --> 00:57:32.540
So there isn't even a concept exactly of like pip upgrade or pip install.


00:57:32.540 --> 00:57:35.540
You can just say that next time I invoke environment,


00:57:35.540 --> 00:57:38.540
I'm going to give you a different specification for which versions I want.


00:57:38.540 --> 00:57:40.540
and it'll make sure that happens.


00:57:40.540 --> 00:57:42.540
It feels a little like Docker, right?


00:57:42.540 --> 00:57:44.540
Like, if you create a Docker image


00:57:44.540 --> 00:57:46.540
and you run a container,


00:57:46.540 --> 00:57:48.540
you want to make changes to it, you don't log into the container


00:57:48.540 --> 00:57:50.540
typically and mess with it.


00:57:50.540 --> 00:57:52.540
I see what that says, right.


00:57:52.540 --> 00:57:54.540
You would just say, "Okay, well, we changed the Dockerfile,


00:57:54.540 --> 00:57:56.540
we shut it down and we start it back up with the new,


00:57:56.540 --> 00:57:58.540
better version of itself, right?"


00:57:58.540 --> 00:58:00.540
That's like Docker.


00:58:00.540 --> 00:58:02.540
Yeah, a big difference would be that


00:58:02.540 --> 00:58:04.540
in Docker, when you build it, like, the actual


00:58:04.540 --> 00:58:06.540
Dockerfile is this big old imperative,


00:58:06.540 --> 00:58:10.140
imperative, go scribble here and then delete that and then put something else,


00:58:10.140 --> 00:58:13.580
you know, that kind of thing. It's not just like, here's the list of things you need.


00:58:13.580 --> 00:58:17.660
Well, it feels to me like maybe a better solution than what


00:58:17.660 --> 00:58:22.140
Docker is giving you. If what you really just want to do is run a Python and isolated Python


00:58:22.140 --> 00:58:26.540
thing repeatedly, because with Docker, the idea is like, well, you want it,


00:58:26.540 --> 00:58:30.300
you want it isolated. So let's do this. Let me give you an entire separate copy of Linux.


00:58:32.060 --> 00:58:34.900
I know what you're running in like not a full VM way,


00:58:34.900 --> 00:58:37.600
and it's not as heavy as a VM, but it's still,


00:58:37.600 --> 00:58:41.640
you're configuring a Linux computer inside of this container in the way that,


00:58:41.640 --> 00:58:46.240
whereas this is just like, I just want Python configured, not everything.


00:58:46.240 --> 00:58:48.940
Well, and even more like in Docker,


00:58:48.940 --> 00:58:52.840
if you want to make sure that you run Docker build twice and get the same package versions,


00:58:52.840 --> 00:58:54.580
like you have to do that yourself.


00:58:54.580 --> 00:58:58.580
You have to come up, you have to use, I don't know, pip compile or something like create a lock file


00:58:58.580 --> 00:59:01.560
and then install from that instead of your original requirements.


00:59:01.560 --> 00:59:04.020
It's a whole thing. There's lots of ways to get it wrong.


00:59:04.020 --> 00:59:06.520
Whereas in Posi, the way I've written it currently,


00:59:06.520 --> 00:59:08.520
it's just like there is, you know,


00:59:08.520 --> 00:59:12.100
there's one operation, one internal function that takes a set of like,


00:59:12.100 --> 00:59:13.600
"Okay, these are the packages I want."


00:59:13.600 --> 00:59:16.200
And it like renders that down into a block file of like,


00:59:16.200 --> 00:59:18.200
"Here's the exact set of packages you need,


00:59:18.200 --> 00:59:20.200
including all the dependencies and all their versions."


00:59:20.200 --> 00:59:23.400
And then that's the thing that you hand to the run-me-in environment.


00:59:23.400 --> 00:59:25.400
So like you have to go through that step.


00:59:25.400 --> 00:59:27.400
It's just built in. And so we can like,


00:59:27.400 --> 00:59:30.080
you know, so and of course, you know, as we build up the,


00:59:30.080 --> 00:59:36.500
you know, CLI and stuff, ideally that that will be then, you know, written to disk, similar to a cargo dot lock or poetry dot lock or whatever.


00:59:36.500 --> 00:59:43.880
And so you just automatically get that reproducibility, which, you know, you don't get that automatically from Docker, right?


00:59:43.880 --> 00:59:46.880
This is a thing that people could go get.


00:59:46.880 --> 00:59:51.920
On your GitHub profile, they could check this out and they could try it, right?


00:59:51.920 --> 00:59:58.600
So, yeah. Let's see. So, yeah, so obviously, there's a lot of moving parts here.


00:59:58.600 --> 01:00:02.600
Folks want to help with the PyBI part, that PEP 7.11.


01:00:02.600 --> 01:00:05.100
There's lots of stuff you could use help with.


01:00:05.100 --> 01:00:07.600
But it is also, there's a draft pop-up,


01:00:07.600 --> 01:00:10.100
and I have built lots of PyBI packages


01:00:10.100 --> 01:00:12.100
for lots of different versions of Python.


01:00:12.100 --> 01:00:15.100
For Mac, Windows, Linux, they're up on a CDN.


01:00:15.100 --> 01:00:18.600
So, you know, that uses the same API as PyPI,


01:00:18.600 --> 01:00:21.600
so you could pip install from there if you had a pip that did it.


01:00:21.600 --> 01:00:24.100
So it is stuff you could try out right now,


01:00:24.100 --> 01:00:25.600
experiment with at least.


01:00:25.600 --> 01:00:27.600
And then, yeah, as for the POSI part,


01:00:27.600 --> 01:00:30.400
Again, like I said, it's mostly the backend stuff,


01:00:30.400 --> 01:00:33.900
but it is a pretty complete implementation of all the packaging stuff.


01:00:33.900 --> 01:00:37.200
It can actually do that demo I was just saying of like,


01:00:37.200 --> 01:00:39.500
I need these three packages in this version of Python,


01:00:39.500 --> 01:00:44.600
and it can do the dependency resolution for a named specific operating system,


01:00:44.600 --> 01:00:46.300
which may not be the one you're running on,


01:00:46.300 --> 01:00:48.900
and then generate that environment and actually invoke it.


01:00:48.900 --> 01:00:52.500
Well, you can only invoke it if it's for the operating system you're running on, of course.


01:00:52.500 --> 01:00:56.200
But it can do all that stuff. There isn't really a UI in front of it yet.


01:00:56.200 --> 01:01:01.480
But so it's not like something I'm suggesting you go start, you know, rolling out to your company.


01:01:01.480 --> 01:01:04.520
I really want to adopt it. Yeah, it's a good story.


01:01:04.520 --> 01:01:12.120
If this is like an exciting project for you, then you could check it out, see where it's at, join in, whatever.


01:01:12.120 --> 01:01:17.800
There's definitely tons and tons of stuff to do, but it's, you know, there's a good solid start.


01:01:17.800 --> 01:01:24.200
And I think it's at this point, I'm pretty confident like everything could work, right, you know, kind of the proving it out part.


01:01:24.200 --> 01:01:26.840
is pretty much there, done.


01:01:26.840 --> 01:01:29.360
Question from Marwan in the audience.


01:01:29.360 --> 01:01:34.200
Hypothetically speaking, does a posy.lock work as is on different platforms?


01:01:34.200 --> 01:01:39.680
Right, yes. So cross-platform support is a huge issue with locking.


01:01:39.680 --> 01:01:43.120
I don't know if anyone's ever tried to do this with pip compile.


01:01:43.120 --> 01:01:45.120
It just doesn't work.


01:01:45.120 --> 01:01:48.480
If you have anything complicated, like multiple Python versions,


01:01:48.480 --> 01:01:50.480
it just doesn't work.


01:01:50.480 --> 01:01:52.480
They tried hard, but yeah.


01:01:52.480 --> 01:01:59.620
So what I'm doing right now in Posi is I've tried to kind of keep it simple.


01:01:59.620 --> 01:02:03.120
I just say, like, you know, tell me which platforms you care about.


01:02:03.120 --> 01:02:09.820
You know, like, you know, ResaDish Linux and Windows 64 and macOS


01:02:09.820 --> 01:02:12.820
ARM and Intel or something. You'll give me like a list.


01:02:12.820 --> 01:02:17.000
And then it will, it can go through just like loop through that.


01:02:17.000 --> 01:02:20.840
And for each one, find the right PyBI, look up the metadata to figure out


01:02:20.840 --> 01:02:24.840
which kinds of packages are appropriate to install there


01:02:24.840 --> 01:02:26.480
and generate a lock file for each of those.


01:02:26.480 --> 01:02:29.080
And then, you know, you can somehow like merge the common parts


01:02:29.080 --> 01:02:30.780
and write them to a file.


01:02:30.780 --> 01:02:33.920
So the individual things that like, you know,


01:02:33.920 --> 01:02:36.420
resolve this set of versions,


01:02:36.420 --> 01:02:40.360
or set of package requests into an exact set of versions,


01:02:40.360 --> 01:02:45.100
that only runs for one specific platform at a time.


01:02:45.100 --> 01:02:47.100
But, you know, you can run it multiple times.


01:02:48.400 --> 01:02:52.120
There are-- it might be possible to do something smarter.


01:02:52.120 --> 01:02:54.280
So I know Poetry has some algorithm


01:02:54.280 --> 01:02:56.840
that I don't really understand very well, where


01:02:56.840 --> 01:02:59.840
they try to simultaneously resolve all the platforms


01:02:59.840 --> 01:03:00.800
into their lock file.


01:03:00.800 --> 01:03:04.040
And then the way the lock file works is then you actually--


01:03:04.040 --> 01:03:06.480
it's only mostly resolved.


01:03:06.480 --> 01:03:08.240
And then when you actually go to install,


01:03:08.240 --> 01:03:10.680
it does that last step to try to narrow it down


01:03:10.680 --> 01:03:13.080
to the exact platform you're on.


01:03:13.080 --> 01:03:15.440
And I just-- I don't quite--


01:03:15.440 --> 01:03:16.920
no one's been able to explain to me


01:03:16.920 --> 01:03:22.920
how exactly that algorithm works or even like I'm not 100% sure it's even like if it's fully correct


01:03:22.920 --> 01:03:28.600
or if it's heuristics based or what. So I don't know but like you know we can change you know


01:03:28.600 --> 01:03:32.920
there's lots of options right you know we can change the code if there's a better way to do it


01:03:32.920 --> 01:03:37.320
just that's where I'm at so far. So there's something people can play with but it's early


01:03:37.320 --> 01:03:41.160
days and you wouldn't mind having help if people wanted to jump in. No for sure if you want if


01:03:41.160 --> 01:03:43.880
if you've been looking for an excuse to learn Rust,


01:03:43.880 --> 01:03:48.260
if you want to play around with cool--


01:03:48.260 --> 01:03:51.160
I mean, there's interesting problems in terms of things


01:03:51.160 --> 01:03:55.760
like how you efficiently resolve do package resolution.


01:03:55.760 --> 01:04:00.040
It's like this whole messy logic programming problem.


01:04:00.040 --> 01:04:03.280
It's NP-complete.


01:04:03.280 --> 01:04:05.960
There's just interesting system engineering problems of, OK,


01:04:05.960 --> 01:04:08.240
if we're going to really make this a really nice to use,


01:04:08.240 --> 01:04:12.640
Like, how do you unpack 20 wheels as fast as possible?


01:04:12.640 --> 01:04:14.440
You get to use threads and concurrency


01:04:14.440 --> 01:04:16.080
and all kinds of stuff.


01:04:16.080 --> 01:04:18.720
Yeah, there's lots of cool technical bits, too.


01:04:18.720 --> 01:04:21.720
And of course, just making something that's a joy to use,


01:04:21.720 --> 01:04:23.000
fits nicely in your hand.


01:04:23.000 --> 01:04:25.200
Lots of fun user interface problems.


01:04:25.200 --> 01:04:27.880
Yeah, I'm excited about it, as you can probably tell.


01:04:27.880 --> 01:04:30.840
Like, I just love these kinds of problems.


01:04:30.840 --> 01:04:32.000
- Yeah, absolutely.


01:04:32.000 --> 01:04:36.080
So this announcement was on discuss.python.org,


01:04:36.080 --> 01:04:39.360
And I thought, okay, well, it says there's 72 responses.


01:04:39.360 --> 01:04:42.000
Let me flip down and see how this landed with people, right?


01:04:42.000 --> 01:04:42.840
- Okay, yeah.


01:04:42.840 --> 01:04:43.680
- Okay?


01:04:43.680 --> 01:04:47.000
- You know, a wide variety of responses, yeah.


01:04:47.000 --> 01:04:48.720
- Yeah, well, but I mean, I would say


01:04:48.720 --> 01:04:51.280
that at least the top batch, the first bunch of people,


01:04:51.280 --> 01:04:53.400
Paul Moore, deeply involved with Pip,


01:04:53.400 --> 01:04:54.840
jumps in and says, "This is beyond awesome.


01:04:54.840 --> 01:04:57.440
"I had realized you were working actively on this.


01:04:57.440 --> 01:04:58.280
"I'll take a look.


01:04:58.280 --> 01:04:59.520
"I'd love to help out too."


01:04:59.520 --> 01:05:01.720
Talks about Rust a little.


01:05:01.720 --> 01:05:03.780
Frederick says, "Really nice to see this.


01:05:03.780 --> 01:05:05.620
This is a great direction.


01:05:05.620 --> 01:05:08.620
Um, Janice says, well, certainly blew my mind.


01:05:08.620 --> 01:05:12.720
Count me in on how we could explore how this might work for Conda and so on.


01:05:12.720 --> 01:05:16.140
And just, I thought it was really, really quite positive.


01:05:16.140 --> 01:05:19.940
How many, you know, next person this checks many of the boxes, what I have in mind.


01:05:19.940 --> 01:05:23.740
So I, it seems like it's landing well with the community.


01:05:23.740 --> 01:05:26.660
I hope that I hope that it continues to make good progress.


01:05:26.660 --> 01:05:27.140
Yeah.


01:05:27.140 --> 01:05:30.100
I think the biggest thing is like, there were definitely some folks going like,


01:05:30.100 --> 01:05:32.940
okay, but why are you writing everything at rust?


01:05:33.660 --> 01:05:40.820
Like, especially it's like, you know, we've spent a lot of effort not just making standards for Python packaging, but also like implementing those.


01:05:40.820 --> 01:05:49.300
So like you can pip install packaging and like right now and that is a library that could do things like unpack wheels and access the PyPI.


01:05:49.300 --> 01:05:58.940
Or I forget exactly which set, but like a lot of the tricky stuff, you know, parse Python metadata formats and you know, just all these different tricky things.


01:05:59.220 --> 01:06:00.900
And it's like, why are you re-implementing this?


01:06:00.900 --> 01:06:04.660
And also, does it like send the wrong message that like, you know,


01:06:04.660 --> 01:06:09.140
when we wanted to do something complicated, we thought Python wasn't good enough,


01:06:09.140 --> 01:06:10.980
we needed to switch to Rust.


01:06:10.980 --> 01:06:13.220
And I get where they're coming from.


01:06:13.220 --> 01:06:16.260
But, well, I mean, there's a few things.


01:06:16.260 --> 01:06:19.860
So one is just that I thought writing in Rust would be fun, you know,


01:06:19.860 --> 01:06:22.180
I'm not telling you you can't use Python for anything.


01:06:22.180 --> 01:06:24.020
Sure, I mean, let's take a step back and say,


01:06:24.020 --> 01:06:26.900
how would you propose writing that in Python?


01:06:26.900 --> 01:06:28.340
Well, so, exactly.


01:06:28.340 --> 01:06:33.180
No, it's possible, right? So like, so conda is written in Python, right? But, and the


01:06:33.180 --> 01:06:37.340
way, so it makes the distribution a little complicated because like when you, you get


01:06:37.340 --> 01:06:42.360
your conda.sh or mini conda, you know, like the installer, it has a Python package inside


01:06:42.360 --> 01:06:47.420
it, which it unpacks. So that uses it to run conda to install like another, another Python


01:06:47.420 --> 01:06:51.060
or whatever it is that you want to install with conda. But it sort of has one built in


01:06:51.060 --> 01:06:53.860
and you could do the same thing for something like Posey.


01:06:53.860 --> 01:06:57.460
use something like PyInstaller to build an executable.


01:06:57.460 --> 01:07:00.980
Exactly, yeah. But then up for PyInstaller effectively, right?


01:07:00.980 --> 01:07:08.020
Just kind of recursively do that. It's totally something one could do.


01:07:08.020 --> 01:07:14.580
So yeah, but the main reasons I'm not to go that way is one is, like I said,


01:07:14.580 --> 01:07:19.140
it just was more interesting to me. It's one thing. There's also, like, you know, every


01:07:20.020 --> 01:07:26.420
language has trade-offs, right? And the exact set of things you want from a package installer are


01:07:26.420 --> 01:07:31.860
kind of right in Rust's sweet spot and not Python's. So there's sort of four things that


01:07:31.860 --> 01:07:36.980
are really important for a tool like Posey. So there's the initial install. There's


01:07:36.980 --> 01:07:44.260
how quickly it starts up, because this is in between you and invoking Python or whatever


01:07:44.260 --> 01:07:51.060
it is you actually want to do. There's how quickly you can resolve packages and how quickly can it


01:07:51.060 --> 01:07:57.060
unpack packages. Those are the things that you care about. Those are the big load-bearing pieces.


01:07:57.060 --> 01:08:01.780
And those are kind of four of Python's weakest spots, honestly. So we just talked about the


01:08:01.780 --> 01:08:06.260
deployment part. You can make it work, but it's not as straightforward as some things. There'd be


01:08:06.260 --> 01:08:11.140
more possible moving parts, things that could go wrong. It's not the strongest argument, but it is


01:08:11.140 --> 01:08:16.420
there. For startup speed, just notoriously one of Python's weak spots because it has to do all


01:08:16.420 --> 01:08:20.980
those imports from scratch every time. Something tools like Mercurial have struggled with a lot.


01:08:20.980 --> 01:08:26.580
Lots of Python applications, doesn't matter. But for this particular one, that would be a challenge.


01:08:26.580 --> 01:08:34.340
And then resolving is big, heavy, like that MP complete, like just really gnarly, burning as


01:08:34.340 --> 01:08:38.980
as many CPUs as you can on complicated logical operations.


01:08:38.980 --> 01:08:41.380
Again, not Python's strongest point.


01:08:41.380 --> 01:08:43.020
It's not something you could use NumPy for,


01:08:43.020 --> 01:08:45.580
and it's not I/O bound or anything.


01:08:45.580 --> 01:08:48.220
>> Yeah. You could use something like Cython potentially,


01:08:48.220 --> 01:08:50.460
using no-gil operation.


01:08:50.460 --> 01:08:51.020
>> Yeah.


01:08:51.020 --> 01:08:52.020
>> But at the same time, then you're pretty far.


01:08:52.020 --> 01:08:53.860
>> You'd basically be writing it in C at that point.


01:08:53.860 --> 01:08:56.620
>> Yeah. You're pretty far from core Python.


01:08:56.620 --> 01:08:58.980
>> Yeah. Then finally,


01:08:58.980 --> 01:09:02.860
they just unpacking files is totally I/O bound and so simple,


01:09:02.860 --> 01:09:08.460
that it's actually a big advantage to be able to like, like, like, I always so fast these days,


01:09:08.460 --> 01:09:14.700
with like SSDs and everything, and VME drives, that like almost any overhead in the unpacking


01:09:14.700 --> 01:09:20.540
path actually is pretty substantial as a relative proportion. So like you add like one Python


01:09:20.540 --> 01:09:26.700
operation per, you know, you know, 100 kilobytes written, and that might suddenly be like a 2x


01:09:26.700 --> 01:09:31.660
slowdown, just because everything else is so fast that even that small amount of Python overhead


01:09:31.660 --> 01:09:35.340
could be large. And you know, in a tool like this, like people are really sensitive, like they really


01:09:35.340 --> 01:09:41.260
care if it takes 10 seconds versus one second to unpack those, the environment, like that's just a


01:09:41.260 --> 01:09:46.060
huge difference in usability. So I think it's just it's kind of really, like it just happens to be


01:09:46.060 --> 01:09:50.860
an exact combination of things that makes Rust pretty compelling, but you could do it the other


01:09:50.860 --> 01:09:57.340
way too. You know, I'm not making a, it isn't meant as a political point. Yeah, okay, got it.


01:09:57.340 --> 01:10:07.340
Yeah, Python is written in C. Yeah, sure. So it's a pipeline. But I mean, the core, you know, the core bit of it is written in C, right?


01:10:07.340 --> 01:10:10.340
No, but yeah, pypy is written in Python, right? Hence the name.


01:10:10.340 --> 01:10:12.340
Yeah, that's true.


01:10:12.340 --> 01:10:15.340
Yeah, yeah. C, Python written in C. It says it right there.


01:10:15.340 --> 01:10:18.340
Yeah, exactly. Okay, interesting.


01:10:18.340 --> 01:10:25.340
I think we're probably out of time to dive much further in this, but...


01:10:25.340 --> 01:10:26.340
Sure. Yeah, I think we covered a lot.


01:10:26.340 --> 01:10:28.340
- I think we covered a lot. - I think we covered a lot.


01:10:28.340 --> 01:10:30.340
- I guess... - Anything else you want to add?


01:10:30.340 --> 01:10:32.340
Give me your thoughts on the future. Like, what do you think?


01:10:32.340 --> 01:10:34.340
Is the PEP gaining traction? Right?


01:10:34.340 --> 01:10:37.340
This is in draft mode. I don't know how much I emphasized at the beginning,


01:10:37.340 --> 01:10:39.340
but it is not an accepted thing yet, right?


01:10:39.340 --> 01:10:41.340
Yes, that is important to be clear on, though. Yeah.


01:10:41.340 --> 01:10:43.340
- Yeah? Where is it? - I wrote it.


01:10:43.340 --> 01:10:45.340
I posted it for feedback. That's as far as it's gotten.


01:10:45.340 --> 01:10:49.340
You know, there's no commitment on anyone's part


01:10:49.340 --> 01:10:51.340
to, like, that this is what's actually going to happen.


01:10:51.340 --> 01:10:54.340
That said, I'm pretty optimistic.


01:10:54.340 --> 01:11:00.680
Like I said, I got a little bit of pushback on the Posi part because of the rust and whatever.


01:11:00.680 --> 01:11:06.280
But I don't think I've gotten -- I can't think of really any pushback on the PEP 7.11, the


01:11:06.280 --> 01:11:07.280
actual PyBI part.


01:11:07.280 --> 01:11:10.160
Except people are like, well, why aren't you using Conda or something?


01:11:10.160 --> 01:11:12.760
Which fair question, but there's an answer.


01:11:12.760 --> 01:11:18.920
I don't think anyone -- it's not something that the people that you need -- whose agreement


01:11:18.920 --> 01:11:23.240
you need to get this accepted are the PyPI maintainers and Python packaging maintainers.


01:11:23.240 --> 01:11:26.600
And they are totally okay with like, "Conda's not the solution to everything," obviously.


01:11:26.600 --> 01:11:27.600
Right, sure.


01:11:27.600 --> 01:11:32.120
Well, how complicated would it be to fit Conda into this particular use case, right?


01:11:32.120 --> 01:11:35.160
Yeah, I mean, there's definitely room to collaborate better there.


01:11:35.160 --> 01:11:37.560
And I would love to see that in the future.


01:11:37.560 --> 01:11:42.080
But yeah, but my sense is that there's just really hasn't been a lot of like, people just


01:11:42.080 --> 01:11:44.120
seem pretty much like, "Yeah, this is cool."


01:11:44.120 --> 01:11:49.160
I guess actually, the biggest thing is that there's been some feedback from folks like


01:11:49.160 --> 01:11:55.120
the PyOxidizer folks saying, "Hey, we would like a bit more metadata so we can fully dissolve


01:11:55.120 --> 01:11:59.240
some of our other things we want to do." We want to be able to cross-compile for a given


01:11:59.240 --> 01:12:03.480
Python and we need to know a bit more about the target Python in order to do that. So


01:12:03.480 --> 01:12:06.760
that's just a very technical, it's like, "Yeah, okay, more stuff we should add and tweak."


01:12:06.760 --> 01:12:07.760
It's not against the idea.


01:12:07.760 --> 01:12:08.760
But the core idea...


01:12:08.760 --> 01:12:09.760
Evolving it, yeah.


01:12:09.760 --> 01:12:15.040
Yeah, I think the basic idea, generally people seem to be on board. I'm not going to make


01:12:15.040 --> 01:12:19.000
a commitment to what like Python.org and PyPI and all they're actually going to do. But


01:12:19.000 --> 01:12:25.720
I'm pretty hopeful. I think that there are definitely some of the folks involved in building


01:12:25.720 --> 01:12:29.680
the Python.org downloads right now are like, "Oh yeah, I'd build one of these if that was


01:12:29.680 --> 01:12:30.680
standard, sure."


01:12:30.680 --> 01:12:31.680
Sure.


01:12:31.680 --> 01:12:36.440
So it isn't all signed off on, but there seems to be a pretty reasonable consensus that this


01:12:36.440 --> 01:12:39.120
is a good direction that we're interested in moving in.


01:12:39.120 --> 01:12:43.560
Well, it sure caught my attention when I saw it. So I'm excited to see what it looks like.


01:12:43.560 --> 01:12:46.180
- Thank you for having me on to talk about it.


01:12:46.180 --> 01:12:47.020
- Yeah, you bet.


01:12:47.020 --> 01:12:49.260
No, let me just ask you real quick the final two questions.


01:12:49.260 --> 01:12:52.220
Since it has been five years since I asked them of you.


01:12:52.220 --> 01:12:53.060
- Okay.


01:12:53.060 --> 01:12:53.880
- Do you write some Python code?


01:12:53.880 --> 01:12:55.060
Do you work on this?


01:12:55.060 --> 01:12:57.100
What editor are you using these days?


01:12:57.100 --> 01:13:00.820
- I am using Emacs, same as I've been since I was 13.


01:13:00.820 --> 01:13:03.460
So that's not a political position.


01:13:03.460 --> 01:13:05.100
That's just, I'm stuck.


01:13:05.100 --> 01:13:08.280
- Like all your commands are coming in chords, right?


01:13:08.280 --> 01:13:09.120
Okay, got it.


01:13:09.120 --> 01:13:11.020
- You know, like that's it.


01:13:11.020 --> 01:13:12.080
- Excellent.


01:13:12.080 --> 01:13:14.080
And then notable PyPI package?


01:13:14.080 --> 01:13:16.080
Just some random PyPI package?


01:13:16.080 --> 01:13:18.080
Yeah, something you ran across, that's awesome.


01:13:18.080 --> 01:13:20.080
People should know about this.


01:13:20.080 --> 01:13:22.080
Could be very popular or not popular at all.


01:13:22.080 --> 01:13:24.080
Oh, man, shoot, I did not prepare for this.


01:13:24.080 --> 01:13:26.080
Should have.


01:13:26.080 --> 01:13:28.080
I mean, I don't-- like, there's some obvious--


01:13:28.080 --> 01:13:30.080
like, obviously, I like-- you know, Trio's been thinking


01:13:30.080 --> 01:13:32.080
about it a lot, but that's not an interesting answer


01:13:32.080 --> 01:13:34.080
for this.


01:13:34.080 --> 01:13:36.080
You mentioned Ruff earlier.


01:13:36.080 --> 01:13:38.080
I think you mentioned Ruff, but Ruff is pretty cool.


01:13:38.080 --> 01:13:40.080
Maybe I didn't mention Ruff, yeah, okay.


01:13:40.080 --> 01:13:45.440
Ruff is very awesome. If anyone doesn't know, Ruff is sort of, you know, Flake 8 and such


01:13:45.440 --> 01:13:49.940
re-implemented in Rust. So it's like a hundred times faster. Like you just like instantaneously


01:13:49.940 --> 01:13:52.440
lint all your code, which is very sweet.


01:13:52.440 --> 01:13:57.280
Is a selling point for Rust integrated with Python, right? Like another use case that


01:13:57.280 --> 01:13:58.280
looks pretty neat.


01:13:58.280 --> 01:14:02.520
Yeah. And I, you know, sort of as I'm digging into it, I'm really impressed at how they,


01:14:02.520 --> 01:14:06.600
those two, how well they fit together. People put a lot of work into like making that really


01:14:06.600 --> 01:14:11.160
smooth and having them collaborate well. Actually, something I've just been working on at work


01:14:11.160 --> 01:14:19.680
is we've been having trouble with -- so in an async library like Trio, you have lots


01:14:19.680 --> 01:14:24.560
of tasks running concurrently, but the scheduler only gets to switch from one task to another


01:14:24.560 --> 01:14:29.200
when one task explicitly lets go, like says, okay, I can stop here. We're using an await


01:14:29.200 --> 01:14:34.200
statement. So it's possible to write code where you accidentally don't do that for a


01:14:34.200 --> 01:14:38.600
long time and that task will just like hog all the runtime and block other tasks from running.


01:14:38.600 --> 01:14:42.840
And it'd be nice, it's hard to kind of tell when that's happening. And a similar thing could happen


01:14:42.840 --> 01:14:47.320
with the gill. So if you have like an extension library like, you know, PyTorch or something,


01:14:47.320 --> 01:14:50.920
and they forget to drop the GIL before doing some big heavyweight operation, then it could


01:14:50.920 --> 01:14:54.840
just block any other threads from running. That's really awkward. We've been having trouble with


01:14:54.840 --> 01:15:00.360
that. And, but well, you know, like PySpy, that's another really cool package if anyone's seen it,


01:15:00.360 --> 01:15:07.560
is a Rust profiler for Python that can just sit outside your process and can tell you what it's


01:15:07.560 --> 01:15:14.600
doing. But also, it being in Rust and it's up on crates.io, I could just write a little program


01:15:14.600 --> 01:15:21.160
that imports PySpy and uses it as a library and tweak it so that instead of looking for where's


01:15:21.160 --> 01:15:27.000
code spending time, it detects, "Okay, is something hogging the GIL or the run loop?"


01:15:27.000 --> 01:15:31.320
And give me the trace back, show me which code is doing that.


01:15:31.320 --> 01:15:36.760
And it's, again, really neat to be able to get that really deep insight into this Python stuff


01:15:36.760 --> 01:15:42.920
that we're still using it. It's still Python, but the Rust really is a great flavor that goes with


01:15:42.920 --> 01:15:49.080
it. Cool. PySpy. All right, people can check that out. That's sampling profiler for Python programs.


01:15:49.080 --> 01:15:52.360
Yes. Yeah. PySpy is really cool. Indeed. All right. Well...


01:15:52.360 --> 01:15:56.280
Okay, cool. Thanks for being here. If people are interested in the PEP,


01:15:56.280 --> 01:16:05.880
What should they do? I mean, I guess the post on discuss.python.org is the best place for feedback.


01:16:05.880 --> 01:16:10.920
It's also where I posted about Posey. So if you want to see the discussion or join in,


01:16:10.920 --> 01:16:19.560
that's a good place. If you want to help, then github.com/njsmith/posey is the repository.


01:16:19.560 --> 01:16:26.920
jump in, send PRs, file issues, whatever. Or just send me a, I don't know, what's the


01:16:26.920 --> 01:16:32.920
toot at me, I guess? The Mastodon version. I'm not really on Twitter these days, but yeah,


01:16:32.920 --> 01:16:38.120
njs@mastodon.social. And I'll see you. Cool. All right. Well, Nathaniel, thanks for being here.


01:16:38.120 --> 01:16:42.600
Thanks for this pep. It looks interesting. Yeah, thanks. It's great being here.


01:16:42.600 --> 01:16:47.640
Yeah, you bet. This has been another episode of Talk Python to Me.


01:16:48.280 --> 01:16:52.120
Thank you to our sponsors. Be sure to check out what they're offering. It really helps support


01:16:52.120 --> 01:16:57.960
the show. Take some stress out of your life. Get notified immediately about errors and performance


01:16:57.960 --> 01:17:04.280
issues in your web or mobile applications with Sentry. Just visit talkpython.fm/sentry


01:17:04.280 --> 01:17:09.400
and get started for free. And be sure to use the promo code talkpython, all one word.


01:17:09.400 --> 01:17:14.040
Want to level up your Python? We have one of the largest catalogs of Python video courses over at


01:17:14.040 --> 01:17:19.080
at Talk Python. Our content ranges from true beginners to deeply advanced topics like memory


01:17:19.080 --> 01:17:23.640
and async. And best of all, there's not a subscription in sight. Check it out for yourself


01:17:23.640 --> 01:17:29.280
at training.talkpython.fm. Be sure to subscribe to the show, open your favorite podcast app,


01:17:29.280 --> 01:17:33.440
and search for Python. We should be right at the top. You can also find the iTunes feed


01:17:33.440 --> 01:17:42.000
at /itunes, the Google Play feed at /play, and the Direct RSS feed at /rss on talkpython.fm.


01:17:42.000 --> 01:17:44.540
We're live streaming most of our recordings these days.


01:17:44.540 --> 01:17:48.120
If you want to be part of the show and have your comments featured on the air, be sure


01:17:48.120 --> 01:17:52.840
to subscribe to our YouTube channel at talkpython.fm/youtube.


01:17:52.840 --> 01:17:54.120
This is your host, Michael Kennedy.


01:17:54.120 --> 01:17:55.280
Thanks so much for listening.


01:17:55.280 --> 01:17:56.520
I really appreciate it.


01:17:56.520 --> 01:17:58.280
Now get out there and write some Python code.


01:17:58.280 --> 01:18:20.280
[MUSIC]

