WEBVTT

00:00:00.000 --> 00:00:04.280
One of the most exciting initiatives in the Python space these days is PyScript, which


00:00:04.280 --> 00:00:07.360
enables Python running natively in your browser.


00:00:07.360 --> 00:00:11.400
With consistent support from the folks at Anaconda, this project has been making solid


00:00:11.400 --> 00:00:14.040
strides since its initial release.


00:00:14.040 --> 00:00:17.920
On this episode, we catch up with Fabio Pleiger and Nicholas Tollervé to see where they are


00:00:17.920 --> 00:00:20.000
with the PyScript project.


00:00:20.000 --> 00:00:25.080
This is Talk Python to Me, episode 426, recorded June 22nd, 2023.


00:00:25.080 --> 00:00:37.800
[Music]


00:00:37.800 --> 00:00:42.920
Welcome to Talk Python To Me, a weekly podcast on Python. This is your host, Michael Kennedy.


00:00:42.920 --> 00:00:48.120
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython,


00:00:48.120 --> 00:00:52.920
both on fosstodon.org. Be careful with impersonating accounts on other instances,


00:00:52.920 --> 00:00:58.760
there are many. Keep up with the show and listen to over seven years of past episodes at talkpython.fm.


00:00:58.760 --> 00:01:04.600
We've started streaming most of our episodes live on YouTube. Subscribe to our YouTube channel over


00:01:04.600 --> 00:01:10.360
at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.


00:01:10.360 --> 00:01:17.880
This episode is brought to you by JetBrains, who encourage you to get work done with PyCharm.


00:01:17.880 --> 00:01:24.880
Download your free trial of PyCharm Professional at talkpython.fm/done-with-pycharm.


00:01:24.880 --> 00:01:27.380
And it's brought to you by Sentry.


00:01:27.380 --> 00:01:29.480
Don't let those errors go unnoticed.


00:01:29.480 --> 00:01:30.580
Use Sentry.


00:01:30.580 --> 00:01:33.580
Get started at talkpython.fm/sentry.


00:01:33.580 --> 00:01:36.080
Nicolas, Fabio, welcome to Talk Python to Me.


00:01:36.080 --> 00:01:37.280
Hi, how are you, Michael?


00:01:37.280 --> 00:01:39.580
Doing well. I think I should say welcome back.


00:01:39.580 --> 00:01:43.480
You know, I've been on the show a couple of times for various things.


00:01:43.480 --> 00:01:45.680
Most recently, other than this,


00:01:45.680 --> 00:01:49.520
Also about PyScript and MicroPython,


00:01:49.520 --> 00:01:52.400
which we'll touch a little bit on as well.


00:01:52.400 --> 00:01:54.440
But yeah, excited to have you both here,


00:01:54.440 --> 00:01:57.200
excited as always to be talking about PyScript.


00:01:57.200 --> 00:01:58.920
One day I can just feel it,


00:01:58.920 --> 00:02:00.200
we're going to be living the dream,


00:02:00.200 --> 00:02:02.040
Python in the browser.


00:02:02.040 --> 00:02:04.120
It's going to be fantastic. Let's do it.


00:02:04.120 --> 00:02:05.920
>> I'm so, let's hope, yes.


00:02:05.920 --> 00:02:07.400
>> I mean, is the dream real now?


00:02:07.400 --> 00:02:09.080
That's part of the question.


00:02:09.080 --> 00:02:11.840
We'll see how it's to some degree real,


00:02:11.840 --> 00:02:13.720
and you all are making great progress on that.


00:02:13.720 --> 00:02:15.720
I'm going to spoiler alert, and that's the thing.


00:02:15.720 --> 00:02:17.720
(laughter)


00:02:17.720 --> 00:02:21.560
Yeah, and Niklas and I are laughing for a reason, too,


00:02:21.560 --> 00:02:24.060
which we can't wait to talk about it.


00:02:24.060 --> 00:02:25.420
So that's going to be good.


00:02:25.420 --> 00:02:27.020
We can't wait to hear about it.


00:02:27.020 --> 00:02:30.060
But before we do, like I said, you both have been on the show


00:02:30.060 --> 00:02:33.460
for a couple of reasons, a couple of episodes previously.


00:02:33.460 --> 00:02:36.560
But quick introductions for folks that don't necessarily know you.


00:02:36.560 --> 00:02:37.560
You want to start, Niklas?


00:02:37.560 --> 00:02:38.720
Okay, I'll go first.


00:02:38.720 --> 00:02:39.720
I'm Niklas.


00:02:39.720 --> 00:02:43.680
I'm a principal engineer on the PyScript team at Anaconda.


00:02:43.680 --> 00:02:50.720
And my passion is Python and education, which is one of the other reasons


00:02:50.720 --> 00:02:52.560
why I was on the show earlier.


00:02:52.560 --> 00:02:55.140
And I've also been involved in all sorts of different aspects of


00:02:55.140 --> 00:02:56.840
the Python community as well.


00:02:56.840 --> 00:03:00.960
And other interesting things like, Oh, have I got one?


00:03:00.960 --> 00:03:04.160
I think I have BBC micro bits was something that I was


00:03:04.160 --> 00:03:07.120
involved in and stuff like that.


00:03:07.120 --> 00:03:08.480
So, yep, that's me.


00:03:08.480 --> 00:03:10.480
But right now, I'm doing PyScript.


00:03:10.480 --> 00:03:14.120
And I am joined by my esteemed colleague, Fabio.


00:03:14.120 --> 00:03:15.180
Thank you, Niklas.


00:03:15.180 --> 00:03:18.780
Well, as you can tell, I work with Niklas at Anaconda,


00:03:18.780 --> 00:03:20.340
creator of PyScript,


00:03:20.340 --> 00:03:23.580
been in the community for a long time as well.


00:03:23.580 --> 00:03:27.080
Probably not— let's not focus on numbers or years.


00:03:27.080 --> 00:03:32.180
But very interested in, just like Niklas, Python for education as well,


00:03:32.180 --> 00:03:34.480
and the whole community aspect of it,


00:03:34.480 --> 00:03:38.240
which is mostly why I am here, I would say.


00:03:38.320 --> 00:03:41.880
So I've been involved in a lot of community things,


00:03:41.880 --> 00:03:45.680
was chairman of EuroPython for, I think, five, six years,


00:03:45.680 --> 00:03:49.240
then chair of PyCon Italy,


00:03:49.240 --> 00:03:51.200
co-founder of Python Italia, et cetera.


00:03:51.200 --> 00:03:54.960
Always loved the community aspect of Python.


00:03:54.960 --> 00:03:55.800
And happy to be here. - Yeah, absolutely.


00:03:55.800 --> 00:03:57.120
- Thank you for having us.


00:03:57.120 --> 00:03:58.600
- Yeah, it's great to have you, as always.


00:03:58.600 --> 00:04:01.360
You both mentioned having an interest


00:04:01.360 --> 00:04:03.880
or background or both in education.


00:04:03.880 --> 00:04:07.040
And Nicholas, I think probably the high watermark


00:04:07.040 --> 00:04:11.720
is probably the BBC micro bit, which touched, you know, the lives of more


00:04:11.720 --> 00:04:17.120
students than, you know, almost any other regular school teacher, via


00:04:17.120 --> 00:04:18.880
massive, massive margin, millions of kids.


00:04:18.880 --> 00:04:19.480
That's amazing.


00:04:19.480 --> 00:04:23.320
But I think another angle here, teaching people to work with Python and getting


00:04:23.320 --> 00:04:27.400
them started in programming from going from, I have this idea, or I've learned


00:04:27.400 --> 00:04:31.640
what I got to do in programming until I can make it happen on a machine that is


00:04:31.640 --> 00:04:33.600
not set up for programming necessarily.


00:04:33.840 --> 00:04:35.840
that gap is pretty far with Python.


00:04:35.840 --> 00:04:37.640
And it's pretty far with most languages, right?


00:04:37.640 --> 00:04:41.560
Like you want to, you do Ruby, probably got to set up some kind of Ruby thing.


00:04:41.560 --> 00:04:44.000
You want to do Java, a bunch of stuff there, right?


00:04:44.000 --> 00:04:50.000
But being able to do it in your browser or something, you just open a page and run it.


00:04:50.000 --> 00:04:52.760
Like there's this educational empowering aspect to it.


00:04:52.760 --> 00:04:53.360
Absolutely.


00:04:53.360 --> 00:04:58.320
And you wouldn't believe the, the interesting situations that teachers have


00:04:58.320 --> 00:05:03.560
to work in at school and, you know, locked down computers and things like that, where


00:05:03.560 --> 00:05:07.880
their sysadmins won't install Python or any other kind of programming language.


00:05:07.880 --> 00:05:12.420
Despite here in the UK and all over the U S programming being part of the


00:05:12.420 --> 00:05:14.900
curriculum, it's mandated in the national curriculum here.


00:05:14.900 --> 00:05:18.120
And I was in a call yesterday with someone who just told me that, the


00:05:18.120 --> 00:05:22.040
Norwegians have now got programming mandatory in their national curriculum.


00:05:22.040 --> 00:05:24.900
And nobody seems to have told the school admins this.


00:05:24.900 --> 00:05:27.980
So what's the piece of software that was running on everybody's


00:05:27.980 --> 00:05:29.160
computer in the school?


00:05:29.160 --> 00:05:30.320
It's a, it's a browser.


00:05:30.320 --> 00:05:32.740
So I see where this compensation is going.


00:05:32.940 --> 00:05:36.740
Wouldn't it be great if you had Python that ran in the browser?


00:05:36.740 --> 00:05:40.220
It would solve all your installation problems if you're an educator.


00:05:40.220 --> 00:05:44.860
I mean, how much of JavaScript's rise to fame and continued,


00:05:44.860 --> 00:05:48.460
not quite dominance, but almost certainly in the front end side dominance


00:05:48.460 --> 00:05:51.100
has to do just with the fact that it's possible.


00:05:51.100 --> 00:05:53.020
Yes, yes, totally.


00:05:53.020 --> 00:05:55.580
It's not necessarily the best, it's not necessarily what people want,


00:05:55.580 --> 00:05:58.460
at least not in the early days, but it's possible.


00:05:58.460 --> 00:05:59.820
And that's just a lot of things.


00:05:59.820 --> 00:06:05.260
I think, you know, JavaScript has lots of really wonderful aspects to it.


00:06:05.260 --> 00:06:10.180
I've been using JavaScript for almost 20 years, but it's certainly not a beginner-friendly


00:06:10.180 --> 00:06:11.180
language.


00:06:11.180 --> 00:06:13.940
I think you can say that with some confidence.


00:06:13.940 --> 00:06:19.980
You could try teaching it to beginners, but with all the coercion rules and gotchas that


00:06:19.980 --> 00:06:25.180
make sense if you understand JavaScript, but it's quite a journey to get you to that understanding.


00:06:25.180 --> 00:06:29.220
With all of that, it's hard enough just to sort of concentrate on getting Hello World


00:06:29.220 --> 00:06:34.340
working and things like that. Just a simple proof of concept to show that your development


00:06:34.340 --> 00:06:40.100
environment is working. But if a language that you're using is the equivalent of trying


00:06:40.100 --> 00:06:45.060
to teach a five-year-old beginner violinist with a Stradivarius, they're not going to


00:06:45.060 --> 00:06:51.340
kind of get it, okay? You give them an instrument that helps them take the first steps into


00:06:51.340 --> 00:06:57.500
programming and Python as a programming language, and this is at the core of Guido's mission


00:06:57.500 --> 00:07:00.200
At the very beginning, ABC, the language that he based it off,


00:07:00.200 --> 00:07:01.660
was a teaching language.


00:07:01.660 --> 00:07:04.040
So education and learning and teaching


00:07:04.040 --> 00:07:06.500
and making sure that Python is teachable


00:07:06.500 --> 00:07:09.180
is a part of the DNA, which is a wonderful thing.


00:07:09.180 --> 00:07:11.780
It is. It's been around since 1989, I guess,


00:07:11.780 --> 00:07:13.140
if you put it that way, hasn't it?


00:07:13.140 --> 00:07:15.240
That is the striking difference, honestly,


00:07:15.240 --> 00:07:18.220
between Python and almost all languages today.


00:07:18.220 --> 00:07:21.980
Like, why BASIC was super popular,


00:07:21.980 --> 00:07:23.920
why JavaScript is super popular, etc.,


00:07:23.920 --> 00:07:25.660
because it's your only option, right?


00:07:25.720 --> 00:07:31.220
It's the thing, or if not, it's the thing that you have right away there already installed for you.


00:07:31.220 --> 00:07:36.320
And you don't have to go through the pain of trying to download things, install on your system, and whatnot.


00:07:36.320 --> 00:07:39.220
Python, on the contrary, it's very interesting.


00:07:39.220 --> 00:07:45.420
It's the most popular language, but it's because people in specific domain areas chose Python


00:07:45.420 --> 00:07:50.820
because it was the easiest and the most expressive and, you know, tailored for education.


00:07:50.820 --> 00:07:57.120
And then he started competing with very specific languages that were born to do specific things.


00:07:57.120 --> 00:07:59.620
R is another example.


00:07:59.620 --> 00:08:04.120
R was born with that goal, and that's why it's so good at it.


00:08:04.120 --> 00:08:11.320
Python just happens to be very easy to understand, so data scientists and people adopt it, which is great.


00:08:11.320 --> 00:08:13.020
Python actually, just to close,


00:08:13.020 --> 00:08:19.020
Python actually is the most popular language, but it has a horrible story for mobile


00:08:19.020 --> 00:08:24.460
and browser and tablets, the most popular hardware and software on earth.


00:08:24.460 --> 00:08:27.900
And it's still the most popular, which is mind-blowing.


00:08:27.900 --> 00:08:30.700
Yeah, so you would agree if it were good on both, right?


00:08:30.700 --> 00:08:36.460
Yeah, quite. But what you say, Fabio, it reminds me of, was it a keynote?


00:08:36.460 --> 00:08:40.460
Maybe the pre-COVID keynote at PyCon US,


00:08:40.460 --> 00:08:45.500
where I think one of the keynoters said, "Python is the world's best second-best language."


00:08:45.500 --> 00:08:48.100
And I think that's kind of the essence of what you've just said.


00:08:48.100 --> 00:08:52.940
R is great for doing stats and maths and things, but so is Python.


00:08:52.940 --> 00:08:58.540
Might not be up there with R for very specialist niche mathematical things,


00:08:58.540 --> 00:08:59.900
but Python's good enough.


00:08:59.900 --> 00:09:03.180
And because it's easy to learn, folks are going to go fly with that.


00:09:03.180 --> 00:09:06.500
Yeah, I think, building on what you said, Fabio,


00:09:06.500 --> 00:09:10.100
I think one of the really unique aspects of Python,


00:09:10.100 --> 00:09:12.660
you know, compare this to like Visual Basic


00:09:12.660 --> 00:09:16.180
or the super simple programming languages like Scratch,


00:09:16.180 --> 00:09:19.340
or the super high-end ones like C++ and Rust.


00:09:19.340 --> 00:09:21.700
Python is a full spectrum language.


00:09:21.700 --> 00:09:25.700
Like you can start really easy with a super partial understanding.


00:09:25.700 --> 00:09:29.060
You don't even know what classes are, but you can put six lines together.


00:09:29.060 --> 00:09:30.620
And you can do cool stuff.


00:09:30.620 --> 00:09:33.060
That's like Scratch and Basic and stuff.


00:09:33.060 --> 00:09:36.860
But those languages run out of real programming ideas really soon,


00:09:36.860 --> 00:09:38.780
where you can just keep growing into Python


00:09:38.780 --> 00:09:40.980
till you get to the C++ and Rust style.


00:09:40.980 --> 00:09:43.740
Conversely, if you want to start with C++ or Rust,


00:09:43.740 --> 00:09:47.140
you don't want to teach a beginner what avoid *** is.


00:09:47.140 --> 00:09:49.500
You know, like that's down the road,


00:09:49.500 --> 00:09:51.500
but you're hit with that kind of stuff soon.


00:09:51.500 --> 00:09:54.380
So I think that's a little bit of its magic as well.


00:09:54.380 --> 00:09:57.500
And what you all are doing to bring that magic to


00:09:57.500 --> 00:09:59.660
front end of the web world,


00:09:59.660 --> 00:10:02.620
and kind of through the transitive property a little bit


00:10:02.620 --> 00:10:04.180
through progressive web apps,


00:10:04.180 --> 00:10:06.900
to things that run in really good ways


00:10:06.900 --> 00:10:09.860
on mobile and tablet as well.


00:10:09.860 --> 00:10:12.860
it really unlocks a lot and I'm super excited for it.


00:10:12.860 --> 00:10:16.260
So I know I've had you on before to talk about this,


00:10:16.260 --> 00:10:19.060
but I'm sure there's some folks out there like,


00:10:19.060 --> 00:10:21.060
"This sounds amazing. What is this


00:10:21.060 --> 00:10:26.060
angle bracket Python pi-script


00:10:26.060 --> 00:10:29.620
in my HTML? What is this pi-script stuff? Tell us about it."


00:10:29.620 --> 00:10:32.500
Cool, let me give you a minute,


00:10:32.500 --> 00:10:36.220
DLDR. So basically pi-script is a platform


00:10:36.220 --> 00:10:40.860
that allows users to create applications or frameworks on top of it


00:10:40.860 --> 00:10:43.560
and supports Python as a language.


00:10:43.560 --> 00:10:49.720
And it basically uses the browser as technology as its vector, right?


00:10:49.720 --> 00:10:52.720
It treats the browser as almost like a virtual machine.


00:10:52.720 --> 00:10:53.920
It can move around.


00:10:53.920 --> 00:10:57.560
And then because of the current stack around Wasm,


00:10:57.560 --> 00:11:00.560
WebAssembly on the browser technology,


00:11:00.560 --> 00:11:04.160
we are now able to run Python inside,


00:11:04.160 --> 00:11:06.060
you know, either Wazzy or Emscripten,


00:11:06.060 --> 00:11:09.700
which are just implementations of WebAssembly on the browser.


00:11:09.700 --> 00:11:13.300
And PyScript sits on top of interpreters.


00:11:13.300 --> 00:11:16.980
We have the browser, WebAssembly, Emscripten or Wazy,


00:11:16.980 --> 00:11:19.300
and then a Python implementation,


00:11:19.300 --> 00:11:22.180
Pyodide or MicroPython or other things like this.


00:11:22.180 --> 00:11:26.140
And PyScript goes on top by providing a friendly interface,


00:11:26.140 --> 00:11:29.620
higher-level APIs that are Pythonic and friendly,


00:11:29.620 --> 00:11:33.100
allows extensibility with plugins and things like this


00:11:33.100 --> 00:11:34.500
to create an ecosystem.


00:11:34.500 --> 00:11:38.900
And basically what we want to do is reuse the ecosystem.


00:11:38.900 --> 00:11:41.700
As much as we can, we don't want to reinvent anything.


00:11:41.700 --> 00:11:44.660
Actually, that's one of the things that I'm most proud of it


00:11:44.660 --> 00:11:49.140
during this first year, which is I think we made really good progress in helping


00:11:49.140 --> 00:11:53.780
other projects that are developing and making Python happen on the browser.


00:11:53.780 --> 00:11:57.460
Long story short, PyScript allows you through those tags,


00:11:57.460 --> 00:12:00.980
PyScript or PyConfig or PyRapple


00:12:00.980 --> 00:12:06.280
to define what's my environment, what packages I want to install and whatnot.


00:12:06.280 --> 00:12:08.520
And then with the PyScript script,


00:12:08.520 --> 00:12:11.820
it can define scripts that run your application


00:12:11.820 --> 00:12:13.420
and then just use it.


00:12:13.420 --> 00:12:16.220
You don't need to install anything, to download anything.


00:12:16.220 --> 00:12:17.260
It just works on the browser.


00:12:17.260 --> 00:12:20.660
Yeah, excellent. I think maybe let me just give one more piece,


00:12:20.660 --> 00:12:24.100
one more resource for folks out there who might be interested.


00:12:24.100 --> 00:12:27.240
Have you all seen the birth and death of JavaScript by Gary Bernard?


00:12:27.240 --> 00:12:29.940
- Did you see that? - I was there when you gave it.


00:12:29.940 --> 00:12:33.700
Oh my gosh, what was the crowd's reaction like?


00:12:33.700 --> 00:12:36.340
Oh, we were just rolling around, laughing.


00:12:36.340 --> 00:12:37.540
It was great.


00:12:37.540 --> 00:12:38.740
It was great delivery as well.


00:12:38.740 --> 00:12:45.180
So this is a, let's see, 15 minutes, 30 minute presentation he gave at PyCon 2014.


00:12:45.180 --> 00:12:49.780
So quite, quite outdated in like web technology evolution speed.


00:12:49.780 --> 00:12:53.460
But I throw this out there because it's both an amazing comedy skit,


00:12:53.460 --> 00:13:00.420
but also super nice build up of how you got to places like now with Emscripten


00:13:00.420 --> 00:13:05.760
and WebAssembly and how do you take C code like CPython and run it on top


00:13:05.760 --> 00:13:07.760
of the browser on the front end.


00:13:07.760 --> 00:13:10.260
So people are interested, they can, you know, they are like,


00:13:10.260 --> 00:13:11.520
what is all this magic?


00:13:11.520 --> 00:13:14.860
You can have both a really good laugh and watch that, that was good.


00:13:14.860 --> 00:13:19.860
So with PyScript, you can write, just like in JavaScript,


00:13:19.860 --> 00:13:25.320
You can write JavaScript or in this case, Python in the browser, right?


00:13:25.320 --> 00:13:28.680
Like you could just like, you could say angle bracket JavaScript and just


00:13:28.680 --> 00:13:30.320
start writing JavaScript code here.


00:13:30.320 --> 00:13:34.460
You can say PI dash script, and then you can say print, you know, hello


00:13:34.460 --> 00:13:36.660
from Python or whatever, and it'll run.


00:13:36.660 --> 00:13:40.580
But you can also have more well-structured applications, right?


00:13:40.580 --> 00:13:41.100
Yes.


00:13:41.100 --> 00:13:43.980
Thinking I might even lean so far saying you should have more


00:13:43.980 --> 00:13:45.660
well-structured applications.


00:13:45.660 --> 00:13:46.560
Yeah.


00:13:46.560 --> 00:13:47.380
What do you all think?


00:13:47.420 --> 00:13:52.420
One thing about PyScript, and that we are actually trying to work a lot on it,


00:13:52.420 --> 00:13:55.660
about it, is that it gives a lot of freedom, as you said.


00:13:55.660 --> 00:13:58.540
You can put tags in it, it's just HTML.


00:13:58.540 --> 00:14:02.540
So everything you have access to in an HTML page,


00:14:02.540 --> 00:14:05.380
you should have access to in PyScript as well.


00:14:05.380 --> 00:14:08.380
So like your tags in the page, your scripts,


00:14:08.380 --> 00:14:11.900
if you loaded anything in your JavaScript scope,


00:14:11.900 --> 00:14:14.780
you can import those things in PyScript and say,


00:14:14.780 --> 00:14:17.780
from JavaScript import this and then just run.


00:14:17.780 --> 00:14:19.980
Actually, one of the things that we're working right now


00:14:19.980 --> 00:14:23.180
is actually going to explore that even more.


00:14:23.180 --> 00:14:25.380
And we're going to demo that later.


00:14:25.380 --> 00:14:28.380
We have currently a next branch


00:14:28.380 --> 00:14:30.980
where we are redesigning the core of PyScript


00:14:30.980 --> 00:14:35.180
and making it smaller, fully web-based,


00:14:35.180 --> 00:14:37.580
fixing most of the bugs and the very crappy code


00:14:37.580 --> 00:14:39.580
that I wrote at the beginning.


00:14:39.580 --> 00:14:42.480
And we had an amazing addition to the team


00:14:42.480 --> 00:14:44.980
from Andrea who's been in tech,


00:14:44.980 --> 00:14:47.880
in the web for a lifetime.


00:14:47.880 --> 00:14:49.280
And he's amazing.


00:14:49.280 --> 00:14:51.280
And he's bringing that aspect that we lacked


00:14:51.280 --> 00:14:52.980
and the team, you know,


00:14:52.980 --> 00:14:54.980
web native point of view.


00:14:54.980 --> 00:14:57.080
Well, Pythonists and Python geeks.


00:14:57.080 --> 00:14:59.080
So we missed that.


00:14:59.080 --> 00:15:03.780
This portion of Talk Python to Me is brought to you by


00:15:03.780 --> 00:15:05.580
JetBrains and PyCharm.


00:15:05.580 --> 00:15:07.580
Are you a data scientist or a web developer


00:15:07.580 --> 00:15:10.180
looking to take your projects to the next level?


00:15:10.180 --> 00:15:12.080
Well, I have the perfect tool for you.


00:15:12.080 --> 00:15:17.600
PyCharm is a powerful integrated development environment that empowers developers and data


00:15:17.600 --> 00:15:22.080
scientists like us to write clean and efficient code with ease.


00:15:22.080 --> 00:15:27.400
Whether you're analyzing complex datasets or building dynamic web applications, PyCharm


00:15:27.400 --> 00:15:28.780
has got you covered.


00:15:28.780 --> 00:15:33.040
With its intuitive interface and robust features, you can boost your productivity and bring


00:15:33.040 --> 00:15:35.880
your ideas to life faster than ever before.


00:15:35.880 --> 00:15:40.320
For data scientists, PyCharm offers seamless integration with popular libraries like NumPy,


00:15:40.320 --> 00:15:42.180
pandas, and matplotlib.


00:15:42.180 --> 00:15:45.460
You can explore, visualize, and manipulate data effortlessly,


00:15:45.460 --> 00:15:49.340
unlocking valuable insights with just a few lines of code.


00:15:49.340 --> 00:15:51.860
And for us web developers, PyCharm provides a rich set


00:15:51.860 --> 00:15:53.900
of tools to streamline your workflow.


00:15:53.900 --> 00:15:55.300
From intelligent code completion


00:15:55.300 --> 00:15:57.340
to advanced debugging capabilities,


00:15:57.340 --> 00:16:00.140
PyCharm helps you write clean, scalable code


00:16:00.140 --> 00:16:03.140
that powers stunning web applications.


00:16:03.140 --> 00:16:05.560
Plus, PyCharm's support for popular frameworks


00:16:05.560 --> 00:16:08.860
like Django, FastAPI, and React make it a breeze


00:16:08.860 --> 00:16:11.340
to build and deploy your web projects.


00:16:11.340 --> 00:16:13.900
It's time to say goodbye to tedious configuration


00:16:13.900 --> 00:16:16.180
and hello to rapid development.


00:16:16.180 --> 00:16:17.620
But wait, there's more.


00:16:17.620 --> 00:16:19.880
With PyCharm, you get even more advanced features


00:16:19.880 --> 00:16:22.580
like remote development, database integration,


00:16:22.580 --> 00:16:24.460
and version control, ensuring your projects


00:16:24.460 --> 00:16:26.400
stay organized and secure.


00:16:26.400 --> 00:16:28.140
So whether you're diving into data science


00:16:28.140 --> 00:16:29.780
or shaping the future of the web,


00:16:29.780 --> 00:16:31.660
PyCharm is your go-to tool.


00:16:31.660 --> 00:16:33.540
Join me and try PyCharm today.


00:16:33.540 --> 00:16:38.540
Just visit talkpython.fm/done-with-pycharm.


00:16:38.540 --> 00:16:41.820
links in your show notes and experience the power of PyCharm


00:16:41.820 --> 00:16:44.140
firsthand for three months free.


00:16:44.140 --> 00:16:47.060
PyCharm, it's how I get work done.


00:16:47.060 --> 00:16:53.740
Now we're going to allow also execution in workers or blocking calls, or


00:16:53.740 --> 00:16:56.500
actually we support other languages as well.


00:16:56.500 --> 00:16:59.860
Like we have demos with Lua or Ruby and things like this.


00:16:59.860 --> 00:17:06.180
And I think that's part of the vision where we want to PyScript to be a tool


00:17:06.180 --> 00:17:11.240
that allows you to almost do anything with any language and deploy anywhere, right?


00:17:11.240 --> 00:17:18.080
It's beyond Python, even if Python is the primary citizen there.


00:17:18.080 --> 00:17:22.480
We want to make sure that we are unlocking everything for all the users.


00:17:22.480 --> 00:17:24.120
Which is hard.


00:17:24.120 --> 00:17:25.580
Yeah, I'm sure it is.


00:17:25.580 --> 00:17:31.240
Do you see an analogy with Jupyter going from IPython notebooks to Jupyter notebooks


00:17:31.240 --> 00:17:34.980
and starting to bring on a broader view of the ecosystem,


00:17:34.980 --> 00:17:37.020
but still kind of being Python at heart.


00:17:37.020 --> 00:17:40.320
Yeah, I think so in a different way than Jupyter.


00:17:40.320 --> 00:17:45.580
Jupyter has always been very self-contained into the notebook itself.


00:17:45.580 --> 00:17:50.920
And the programming paradigm that the notebook brings with it,


00:17:50.920 --> 00:17:53.420
you know, it's a very, it's an exploration tool


00:17:53.420 --> 00:17:55.420
rather than editor or authoring tool.


00:17:55.420 --> 00:17:59.280
And then with JupyterLab, it evolved in different things as well.


00:17:59.280 --> 00:18:02.020
I think PyScript has maybe the opposite problem.


00:18:02.020 --> 00:18:08.980
We're too open, which is hard for actually our user base that we want to...


00:18:08.980 --> 00:18:11.460
We said PyScript is for the 99%.


00:18:11.460 --> 00:18:13.780
We need to do a lot of hard work to make it happen.


00:18:13.780 --> 00:18:17.380
-Nicholas. -Well, this is a really great point that Fabio is making.


00:18:17.380 --> 00:18:21.300
And you've got to remember the key word here is that PyScript is a platform.


00:18:21.300 --> 00:18:26.100
Now, it's a platform, you know, the layers of that platform were articulated by Fabio.


00:18:26.100 --> 00:18:29.380
You know, at the bottom is WebAssembly, which runs in your browser,


00:18:29.380 --> 00:18:35.940
and you can compile, you know, M scripting or other things can sort of work on top of that and blah, blah, blah, blah, blah.


00:18:35.940 --> 00:18:43.780
And then you get PyScript. Okay, so with PyScript, we hope, and we're doing this ourselves to build frameworks on top of that.


00:18:43.780 --> 00:18:51.340
So what's the difference between a framework and a platform? If the platform is like the foundational stuff that gives you the core verbs and nouns and things, okay,


00:18:51.340 --> 00:18:59.220
the framework is perhaps focused on a particular problem that you're trying to solve, like in the classic Python world,


00:18:59.220 --> 00:19:04.280
you know, Django and Flask are web frameworks. Okay, you have a matplotlib is a kind of


00:19:04.280 --> 00:19:10.420
like a framework for creating graphs and things like that. And so we expect people to reuse


00:19:10.420 --> 00:19:14.180
some of these things, because this is another aspect of having Python in the browser is


00:19:14.180 --> 00:19:19.580
that you also bring the whole of the Python ecosystem into the browser as well. And then


00:19:19.580 --> 00:19:25.460
all the modules and the things like that, and that Python brings. So we hope and we're


00:19:25.460 --> 00:19:26.720
building this sort of stuff.


00:19:26.720 --> 00:19:30.340
And we'll probably come on to that later in this conversation, but we hope the


00:19:30.340 --> 00:19:33.980
community, because this is an open source project as well, let's not forget.


00:19:33.980 --> 00:19:37.880
The community come along and they start building cool things on top of, of


00:19:37.880 --> 00:19:41.540
PyScript frameworks and, applications and things.


00:19:41.540 --> 00:19:44.840
So, so that they surprise us and delight us and make us go.


00:19:44.840 --> 00:19:49.800
And this is one of the ways that I would measure our success is that if somebody


00:19:49.800 --> 00:19:54.460
turns up and goes, I built this thing and I go, Oh man, I never thought anyone


00:19:54.460 --> 00:19:56.020
And we'll do that with PyScript.


00:19:56.020 --> 00:19:59.380
So when we get to that, then I know we're rocking.


00:19:59.380 --> 00:19:59.880
Yeah.


00:19:59.880 --> 00:20:02.540
You've queued up a nice comment from the audience here.


00:20:02.540 --> 00:20:05.740
Sarah says, I'm exploring Vue.js.


00:20:05.740 --> 00:20:08.260
Shall I wait and use PyScript in my app?


00:20:08.260 --> 00:20:10.660
Great question.


00:20:10.660 --> 00:20:14.380
I think we're coming close to a world where the two play well


00:20:14.380 --> 00:20:16.620
together, actually very well together.


00:20:16.620 --> 00:20:20.500
So we'll talk about later about PyScript.com,


00:20:20.500 --> 00:20:23.580
which is an additional thing on top of PyScript.


00:20:23.580 --> 00:20:25.580
And we're using Vue there, too.


00:20:25.580 --> 00:20:30.280
Vue is a great tool for building front-end apps and whatnot.


00:20:30.280 --> 00:20:34.120
But I hope in the future we will have Vue written in Python


00:20:34.120 --> 00:20:36.520
or something similar, which is more Pythonic.


00:20:36.520 --> 00:20:39.380
So I'd say the thing for Sarah to understand is that


00:20:39.380 --> 00:20:44.320
because Python's in the browser, it has access to the JavaScript context.


00:20:44.320 --> 00:20:47.380
So you could start to mix and match.


00:20:47.380 --> 00:20:49.680
You've got Vue stuff happening in JavaScript,


00:20:49.680 --> 00:20:53.680
and you've got Python stuff that could be working in concert with it as well.


00:20:53.680 --> 00:20:55.180
You know, mix it up a bit.


00:20:55.180 --> 00:20:57.520
I don't know, this is an early part of the journey.


00:20:57.520 --> 00:21:00.880
Sarah, you go away and check this out and tell us what you find.


00:21:00.880 --> 00:21:02.580
You know, knock yourself out.


00:21:02.580 --> 00:21:05.380
- Yeah, absolutely. - I'll keep repeating this.


00:21:05.380 --> 00:21:09.740
Anyone that has questions or specific use cases or want to contribute,


00:21:09.740 --> 00:21:12.180
reach out. We want to hear from you.


00:21:12.180 --> 00:21:15.820
And we are very welcoming, and so come be a contributor.


00:21:15.820 --> 00:21:16.880
Super.


00:21:16.940 --> 00:21:19.900
And just, you know, shout out to Anaconda, Anaconda Inc.


00:21:19.900 --> 00:21:23.260
for making this possible for you all to be working on this


00:21:23.260 --> 00:21:25.500
in a more dedicated way instead of just,


00:21:25.500 --> 00:21:27.380
I'm really passionate and I've got an hour a day


00:21:27.380 --> 00:21:29.860
I can spend on it, but like legitimately,


00:21:29.860 --> 00:21:31.100
you can be more responsive


00:21:31.100 --> 00:21:33.500
and put yourself a little more out there


00:21:33.500 --> 00:21:34.620
'cause it's not like it,


00:21:34.620 --> 00:21:37.420
it takes away from that one hour you could add features with.


00:21:37.420 --> 00:21:38.500
- I agree, yeah.


00:21:38.500 --> 00:21:40.540
I will say like we're very lucky


00:21:40.540 --> 00:21:42.860
and very thankful to Anaconda to support this.


00:21:42.860 --> 00:21:44.660
It's a huge effort, so.


00:21:44.660 --> 00:21:49.660
I would add one more possibility out there for folks in Sarah's situation.


00:21:49.660 --> 00:21:54.660
I would love to see PyView or something like really ready to work with it.


00:21:54.660 --> 00:21:59.660
And I know the MicroPython work I'm about to ask you all about for a follow-up on


00:21:59.660 --> 00:22:03.660
makes that really a possible case.


00:22:03.660 --> 00:22:06.660
But if you're really just like, "It's got to be some JavaScript framework,"


00:22:06.660 --> 00:22:10.660
give HTMX a look. It's really, really nice.


00:22:10.660 --> 00:22:12.660
You can just keep writing Python.


00:22:12.660 --> 00:22:15.740
You got to do it on the server and it's kind of a little async type of thing,


00:22:15.740 --> 00:22:18.220
but that's how all the, a lot of the view stuff happens anyway.


00:22:18.220 --> 00:22:20.700
So if PyScript weren't the answer,


00:22:20.700 --> 00:22:26.180
maybe consider HTMX before you decide like it's all front end and React and just a bunch of APIs.


00:22:26.180 --> 00:22:27.220
That's really nice stuff.


00:22:27.220 --> 00:22:28.420
All right, back to PyScript.


00:22:28.420 --> 00:22:31.820
What's the story of the MicroPython thing that we spoke about last time?


00:22:31.820 --> 00:22:34.540
Okay, so let's just recap.


00:22:34.540 --> 00:22:39.500
What happened last time was I think I just finished doing the proof of concepts


00:22:39.500 --> 00:22:42.380
And we had micropython kind of running.


00:22:42.380 --> 00:22:42.980
Okay.


00:22:42.980 --> 00:22:45.980
And that was, that was late last year.


00:22:45.980 --> 00:22:46.460
Wasn't it?


00:22:46.460 --> 00:22:46.620
Yeah.


00:22:46.620 --> 00:22:47.940
It was like six months ago or so.


00:22:47.940 --> 00:22:48.220
Yeah.


00:22:48.220 --> 00:22:48.980
Just about.


00:22:48.980 --> 00:22:49.180
Yeah.


00:22:49.180 --> 00:22:49.460
Yeah.


00:22:49.460 --> 00:22:49.700
Yeah.


00:22:49.700 --> 00:22:50.660
If you can get, yeah.


00:22:50.660 --> 00:22:51.940
Cause we have Brett on the call as far.


00:22:51.940 --> 00:22:56.660
I remember now, if you can get micropython running by the middle of the next year,


00:22:56.660 --> 00:22:59.100
it's going to be kind of hallelujah moment.


00:22:59.100 --> 00:23:01.940
You know, the crowds will part, the angels will sing and the sun will


00:23:01.940 --> 00:23:03.540
shine and all of this, yeah.


00:23:03.540 --> 00:23:04.740
Cats and dogs living together.


00:23:04.740 --> 00:23:05.060
All that.


00:23:05.060 --> 00:23:06.140
Yeah, exactly.


00:23:06.140 --> 00:23:06.700
Exactly.


00:23:06.700 --> 00:23:08.500
Sharks with lasers, that sort of thing.


00:23:08.740 --> 00:23:09.820
And who wouldn't want that?


00:23:09.820 --> 00:23:12.300
And so what's happened in the intervening six months?


00:23:12.300 --> 00:23:15.380
So I think two important things have happened.


00:23:15.380 --> 00:23:19.260
The first one is the re-architecting of PyScript.


00:23:19.260 --> 00:23:27.220
And just to reinforce what Fabio said, maybe six months ago, when we said PyScript is


00:23:27.220 --> 00:23:32.380
Python in the browser, the emphasis was on Python and not so much in the browser.


00:23:32.380 --> 00:23:32.860
Okay.


00:23:32.860 --> 00:23:36.860
Because we've been joined, you know, our colleague, Andrea is very much of the web


00:23:36.860 --> 00:23:41.900
world. In fact, his nickname inside the team is Web Yoda for a very good reason.


00:23:41.900 --> 00:23:48.740
OK, it's now, you know, Python and we have in the browser has been kind of worked on


00:23:48.740 --> 00:23:53.500
and we've been looking at how that sort of works and how these two sort of things


00:23:53.500 --> 00:23:58.380
mesh together. Because Andrea is frankly incredible at this sort of stuff.


00:23:58.380 --> 00:24:03.300
And he's kind of of the web and he knows the idioms and he knows the APIs and he


00:24:03.300 --> 00:24:06.100
knows how the browsers work and things like that.


00:24:06.100 --> 00:24:08.660
The actual PyScript core that's coming next


00:24:08.660 --> 00:24:10.620
is very small and very flexible.


00:24:10.620 --> 00:24:12.860
So that's the first sort of pillar of this.


00:24:12.860 --> 00:24:15.500
Second pillar goes by the name of Damian,


00:24:15.500 --> 00:24:17.500
we all know and love in Melbourne.


00:24:17.500 --> 00:24:20.780
And Damian's a buddy, we worked on the micro bit together.


00:24:20.780 --> 00:24:23.140
That's how we first got to know each other.


00:24:23.140 --> 00:24:26.140
And clearly, I don't think in a million years,


00:24:26.140 --> 00:24:29.980
Damian imagined that a Python would be running on a browser.


00:24:29.980 --> 00:24:32.900
That's completely the opposite end of the computing spectrum.


00:24:32.900 --> 00:24:38.340
Watch MicroPython become the most popular base to run Python globally.


00:24:38.340 --> 00:24:40.340
It easily could if it goes out on the web.


00:24:40.340 --> 00:24:42.100
Exactly. Now here's the thing.


00:24:42.100 --> 00:24:47.140
Because Pyodide is CPython compiled to WebAssembly.


00:24:47.140 --> 00:24:49.700
And that's we started with Python.


00:24:49.700 --> 00:24:51.780
But depending on how you build it,


00:24:51.780 --> 00:24:54.580
it's around 11 megabytes if you had the whole,


00:24:54.580 --> 00:24:56.500
everything but the kitchen sink in there.


00:24:56.500 --> 00:24:58.660
Okay, that's a lot for a web page.


00:24:58.660 --> 00:25:01.460
Okay, I know everybody says the New York Times


00:25:01.460 --> 00:25:05.340
is however many megabytes it is, but still 11 megs is large.


00:25:05.340 --> 00:25:08.340
And it doesn't play well with these black mirrors that we


00:25:08.340 --> 00:25:09.380
carry around in our pocket.


00:25:09.380 --> 00:25:14.020
MicroPython, I noticed today, thanks to compression and other


00:25:14.020 --> 00:25:17.900
things, it's down to 170K to deliver into the browser.


00:25:17.900 --> 00:25:25.220
And with the 50 plus, 50 odd K for the core of PyScripts, the next thing we,


00:25:25.220 --> 00:25:30.420
we have an incredibly, it's around half a megabyte to get the thing into a browser,


00:25:30.420 --> 00:25:35.540
which I think it was Simon Willison said that's smaller than some hero images you get on websites.


00:25:35.540 --> 00:25:40.900
Okay, we get a development environment. So we reached out to Damien, and Damien's been working


00:25:40.900 --> 00:25:46.500
with us. He's been doing an awful lot of work, impeccable work, excellent work to make sure that


00:25:46.500 --> 00:25:52.100
the story of MicroPython in the browser is that it's kind of like a first class Python. Okay, so


00:25:52.100 --> 00:25:59.060
he has implemented the FFI, the foreign function interface between Python and the JavaScript


00:25:59.060 --> 00:26:05.380
context. Okay, it's the same sort of API as you get in Pyodide. Okay, so it's familiar.


00:26:05.380 --> 00:26:10.740
Okay, so you import JS, and then you're away. You're referencing things in the land of JavaScript.


00:26:10.740 --> 00:26:15.140
To be clear for people listening, that means you can hook button click events,


00:26:15.140 --> 00:26:19.140
you can hook document ready, mouse, like in Python.


00:26:19.140 --> 00:26:21.060
What API functions. Yep.


00:26:21.060 --> 00:26:26.340
I want to play some audio. There's an audio API built into the web, into the browser,


00:26:26.340 --> 00:26:33.300
I can import JS and then do JS.audio as a class to instantiate something to then play.


00:26:33.300 --> 00:26:38.660
It's just super easy and a real joy to use, but it starts like that.


00:26:38.660 --> 00:26:43.780
And this is, I think, the key aspect of the difference between MicroPython and PyDi.


00:26:43.780 --> 00:26:46.900
PyDi gives you all of Python, okay?


00:26:46.900 --> 00:26:52.420
So you want to do some data science or you want to bring in some CPython module to work in the browser, you use PyDi.


00:26:52.420 --> 00:26:55.720
But if you want something Python-ish, and it's fast,


00:26:55.720 --> 00:26:58.620
and it goes like the clappers, and it's really quick to load,


00:26:58.620 --> 00:27:00.720
then MicroPython is the thing for you.


00:27:00.720 --> 00:27:02.880
If you want to start manipulating the DOM


00:27:02.880 --> 00:27:06.520
and working with what the browser makes available to you.


00:27:06.520 --> 00:27:08.080
And so, to answer Sarah's point,


00:27:08.080 --> 00:27:11.480
maybe MicroPython is the thing that you should be using


00:27:11.480 --> 00:27:12.560
to coordinate with that.


00:27:12.560 --> 00:27:14.560
I think it certainly is an alternative to Vue.


00:27:14.560 --> 00:27:16.320
- It would be, yeah. - Yes.


00:27:16.320 --> 00:27:18.480
I really want to chime in on one thing,


00:27:18.480 --> 00:27:22.080
just because I'm really proud of what we're doing there.


00:27:22.160 --> 00:27:28.000
what Niklas highlighted, I think it's really great to see projects like


00:27:28.000 --> 00:27:33.880
MicroPython coming together with Pyodide and PyScript, all talking, "Hey,


00:27:33.880 --> 00:27:38.780
how can we make things be share the best parts of each project and have a common


00:27:38.780 --> 00:27:40.480
interface to interface JavaScript?


00:27:40.480 --> 00:27:42.020
How can we make this happen?


00:27:42.020 --> 00:27:45.080
How can we support MicroPython and PyScript?"


00:27:45.080 --> 00:27:51.760
And so it was, I really need to thank Damian, Hood, Roman from those projects


00:27:51.760 --> 00:27:56.560
to be so nice and so easy to work with and willing to just,


00:27:56.560 --> 00:28:00.040
"Yeah, let's talk about it. Let's see what's best for the community."


00:28:00.040 --> 00:28:02.040
And yeah, great, great work.


00:28:02.040 --> 00:28:03.740
Yeah, it's an absolute joy.


00:28:03.740 --> 00:28:06.340
And I'll tell you a funny story.


00:28:06.340 --> 00:28:09.600
Just after Christmas, we met up, the PyScript team,


00:28:09.600 --> 00:28:11.500
in real life for the first time.


00:28:11.500 --> 00:28:13.200
And because we were all in the same place,


00:28:13.200 --> 00:28:15.800
and we had Hood with us, Hood has since joined the team,


00:28:15.800 --> 00:28:20.040
and because of time zones, we were all able to drop onto a call with Damien.


00:28:20.100 --> 00:28:24.460
and having Hood and Damien talk together for the first time,


00:28:24.460 --> 00:28:29.780
you'd think, you know, these are exceptionally gifted engineers, okay?


00:28:29.780 --> 00:28:33.540
And after maybe, I don't know, two minutes of small talk,


00:28:33.540 --> 00:28:36.700
they were talking about, I don't know,


00:28:36.700 --> 00:28:41.380
the intricacies of garbage collection in the WebAssembly context,


00:28:41.380 --> 00:28:45.100
and, you know, the whole kind of conversation just went...


00:28:45.100 --> 00:28:48.940
They exploded off into the technical sort of ether, as it were.


00:28:49.020 --> 00:28:54.140
But what I want to highlight is that PyScript has sort of lit a fuse underneath


00:28:54.140 --> 00:28:56.780
and these projects working together.


00:28:56.780 --> 00:29:00.220
And it's so wonderful to see the open source community working in the way that


00:29:00.220 --> 00:29:05.300
it should, you know, people bringing the best themselves and being very humble and


00:29:05.300 --> 00:29:08.860
listening and being compassionate to other people when they, when there are


00:29:08.860 --> 00:29:11.140
differences of opinion and there are always differences of opinion.


00:29:11.140 --> 00:29:15.580
One of the things that I take away from this project is the amount of fun I have


00:29:15.580 --> 00:29:18.260
working on this, that people pay me to do this is incredible.


00:29:18.460 --> 00:29:22.460
So that's awesome.


00:29:22.460 --> 00:29:25.700
This portion of Talk Python to Me is brought to you by Sentry.


00:29:25.700 --> 00:29:32.460
You know Sentry for their error tracking service, but did you know you can take that all the way through your multi-tiered and distributed app


00:29:32.460 --> 00:29:34.860
with their distributed tracing feature?


00:29:34.860 --> 00:29:42.620
Distributed tracing is a debugging technique that involves tracking requests of your system, starting from the very beginning like a user action,


00:29:42.620 --> 00:29:46.120
all the way to the back end, database, and third-party services.


00:29:46.120 --> 00:29:51.240
This can help you identify if the cause of an error in one project is due to the error in another.


00:29:51.240 --> 00:29:56.400
Every system can benefit from distributed tracing, but they are especially useful for microservices.


00:29:56.400 --> 00:30:03.080
In this architecture, logs won't give you the full picture, so you can't debug every request in full just by reading the logs.


00:30:03.080 --> 00:30:11.480
Distributed tracing with a platform like Sentry gives you a visual overview about which services were called during the execution of certain requests.


00:30:11.480 --> 00:30:16.120
Aside from debugging and visualizing your architecture, distributed tracing also helps


00:30:16.120 --> 00:30:18.560
you identify performance bottlenecks.


00:30:18.560 --> 00:30:22.600
Through a visual like a Gantt chart, you can see if a particular span in your stack took


00:30:22.600 --> 00:30:27.540
longer than expected and how it could be causing slowdowns in other parts of your app.


00:30:27.540 --> 00:30:32.240
Learn more and see some examples in the tracing section at docs.sentry.io.


00:30:32.240 --> 00:30:37.120
To take advantage of all the features of the Sentry platform, just create your free account.


00:30:37.120 --> 00:30:41.920
And for all of you, talk Python listeners use the code talk Python, all one word, and


00:30:41.920 --> 00:30:47.680
you'll activate a free month of their premium paid features. Get started today at talkpython.fm


00:30:47.680 --> 00:30:53.620
slash sentry dash trace. That link is in your podcast player show notes in the episode page.


00:30:53.620 --> 00:30:57.760
Thank you to sentry for supporting talk Python to me.


00:30:57.760 --> 00:31:01.960
We kind of introduced the possibility and what we can do with PyScript pretty well,


00:31:01.960 --> 00:31:06.920
but I can't resist showing this this video here. So Nicholas, you have a one minute video,


00:31:06.920 --> 00:31:13.000
which I'm going to link to that shows Python running in the browser, which is great.


00:31:13.000 --> 00:31:20.320
And then very nicely, you have it running on a mobile phone, which is really nice.


00:31:20.320 --> 00:31:22.360
Tell people where it runs next.


00:31:22.360 --> 00:31:23.360
In a car.


00:31:23.360 --> 00:31:27.960
So Tesla is basically a computer on wheels, and it has a browser built in.


00:31:27.960 --> 00:31:32.020
This Lucy Goosey app, a colleague of mine, you know, clearly I'm British.


00:31:32.020 --> 00:31:34.480
And she said to me, you've got to be Lucy Goosey about this.


00:31:34.480 --> 00:31:35.480
She's from Boston.


00:31:35.480 --> 00:31:38.360
And I was like, "What on earth is Lucy Goosey?"


00:31:38.360 --> 00:31:39.520
And she explained.


00:31:39.520 --> 00:31:41.440
And since then, I've been getting Lucy Goosey


00:31:41.440 --> 00:31:42.680
into all of these kind of places,


00:31:42.680 --> 00:31:44.040
just to pull her leg a little bit.


00:31:44.040 --> 00:31:45.320
You click on the goose,


00:31:45.320 --> 00:31:49.000
and it uses the underlying browser's audio API


00:31:49.000 --> 00:31:50.560
to go honk, right?


00:31:50.560 --> 00:31:52.040
So it's just honking on demand.


00:31:52.040 --> 00:31:54.760
And the fact that you can get a car to honk like a goose


00:31:54.760 --> 00:31:57.920
kind of seems kind of appropriate in any sort of way.


00:31:57.920 --> 00:31:59.680
- It certainly is for Teslas.


00:31:59.680 --> 00:32:02.160
- Yeah, yeah, exactly, exactly, exactly.


00:32:02.160 --> 00:32:03.440
- They only make weird noises.


00:32:03.440 --> 00:32:06.800
This is MicroPython running on a Tesla, playing Goose.


00:32:06.800 --> 00:32:07.800
I love it.


00:32:07.800 --> 00:32:08.800
And on a mobile.


00:32:08.800 --> 00:32:13.200
Yeah, so maybe the next thing that we could do here is we could talk about one of the


00:32:13.200 --> 00:32:15.080
bigger announcements that you had recently.


00:32:15.080 --> 00:32:20.080
So there's probably two plus the shift in API and the changes there.


00:32:20.080 --> 00:32:23.280
But one, whoever wants to take this is PyScript.com.


00:32:23.280 --> 00:32:26.000
Yeah, I can talk real quick about it.


00:32:26.000 --> 00:32:27.240
It was the beginning.


00:32:27.240 --> 00:32:30.400
Part of the vision when we started was, okay, cool.


00:32:30.400 --> 00:32:33.560
PyScript needs to be open source and everything always.


00:32:33.560 --> 00:32:36.440
How can we make it it's on the browser, right?


00:32:36.440 --> 00:32:41.680
Like how can we make it even easier for people to just hop in somewhere, start a


00:32:41.680 --> 00:32:43.880
project and just share it with others.


00:32:43.880 --> 00:32:48.280
And that was, okay, we need a product or something like this.


00:32:48.280 --> 00:32:53.420
So we launched PyScript.com, which is a free service or a free service.


00:32:53.420 --> 00:32:58.300
Right now we actually, the only option for paid features or anything like this is,


00:32:58.540 --> 00:33:02.780
is really just through being a founder, which is basically in the Kickstarter


00:33:02.780 --> 00:33:05.220
model, you want to support the project.


00:33:05.220 --> 00:33:06.740
It really is what it is.


00:33:06.740 --> 00:33:09.220
And we're saying a little bit like a GitHub sponsor kind of.


00:33:09.220 --> 00:33:09.780
Yes.


00:33:09.780 --> 00:33:10.180
Yeah.


00:33:10.180 --> 00:33:15.760
And we will always have a free tier with unlimited projects, unlimited


00:33:15.760 --> 00:33:17.940
ways you can share it, et cetera.


00:33:17.940 --> 00:33:20.820
And we were probably gonna, we were going to have paid features for things


00:33:20.820 --> 00:33:25.140
that we were probably we're paying or things that are make it worth, you know,


00:33:25.340 --> 00:33:31.300
But we want to have a place where people can just drop a snippet or a Python application,


00:33:31.300 --> 00:33:32.420
then share with others.


00:33:32.420 --> 00:33:36.340
One thing that was super clear to me recently was,


00:33:36.340 --> 00:33:39.260
after also the video of Nikolas,


00:33:39.260 --> 00:33:42.460
was last keynote I gave in Colombia was,


00:33:42.460 --> 00:33:44.940
"Hey, how many of you," I asked the question,


00:33:44.940 --> 00:33:48.220
"How many of you think you can write a Hello World application


00:33:48.220 --> 00:33:50.260
and then share with 30 people,


00:33:50.260 --> 00:33:54.020
not technical, like your mom, your family, and others,


00:33:54.020 --> 00:33:56.560
and share with them within an hour, right?


00:33:56.560 --> 00:33:58.320
Hello World without complexity.


00:33:58.320 --> 00:33:59.460
And then what?


00:33:59.460 --> 00:34:02.860
10 people showed that raised their hands out of 450.


00:34:02.860 --> 00:34:06.020
Yeah, and it'll take a good chunk of that hour to do it,


00:34:06.020 --> 00:34:07.720
even for the ones who can do it.


00:34:07.720 --> 00:34:11.560
Yes, or even worse, like in a day,


00:34:11.560 --> 00:34:13.920
not many more raised their hands, right?


00:34:13.920 --> 00:34:15.460
The goal here is really like,


00:34:15.460 --> 00:34:19.060
you can just hop in, click, you know, start a new project.


00:34:19.060 --> 00:34:23.760
It's already conveniently already a Hello World application by default, right?


00:34:23.760 --> 00:34:26.500
So, and by default, it's shareable anywhere.


00:34:26.500 --> 00:34:30.940
So all of a sudden you come from, Hey, I'm not sure I can deploy the simplest


00:34:30.940 --> 00:34:33.500
app in the world to my audience.


00:34:33.500 --> 00:34:36.620
And effectively too, it's just a matter of seconds.


00:34:36.620 --> 00:34:39.820
I just need to share the link and then can see, you know, they can


00:34:39.820 --> 00:34:42.020
see on mobile and things like this.


00:34:42.020 --> 00:34:42.380
Yeah.


00:34:42.380 --> 00:34:46.320
That's the striking thing that messaging that I think to me was clear


00:34:46.320 --> 00:34:48.060
that we're not doing a good job, right?


00:34:48.060 --> 00:34:53.620
Like we're no, before PyScript, you could still deploy those things


00:34:53.620 --> 00:34:57.060
on mobile with PyDi directly and stuff, but it wasn't that easy.


00:34:57.060 --> 00:35:01.500
Right now, like that's the key to Python adoption, Python and


00:35:01.500 --> 00:35:03.420
education, all of those use cases.


00:35:03.420 --> 00:35:08.260
That's why I really beg everyone talk about PyScript and that's the value


00:35:08.260 --> 00:35:11.180
sharing and spreading Python all over.


00:35:11.180 --> 00:35:11.540
Yeah.


00:35:11.540 --> 00:35:12.780
Let's look at one of these.


00:35:12.780 --> 00:35:17.100
So if you create an account, you log in, there's a trending in a featured set.


00:35:17.100 --> 00:35:19.940
So one of these is tic-tac-toe and I'll view the site that we can maybe


00:35:19.940 --> 00:35:21.100
talk about the code real quick.


00:35:21.220 --> 00:35:25.420
So I pulled this up in my browser, it's based on the Pyodide version.


00:35:25.420 --> 00:35:30.700
And down here you can, it does show the terminal just for people who are interested in the print statements,


00:35:30.700 --> 00:35:34.900
but you can just go play tic-tac-toe on yourself and, you know, end up,


00:35:34.900 --> 00:35:37.260
you just click crazy, I guess you'll win or something, right?


00:35:37.260 --> 00:35:38.900
The O's win this time.


00:35:38.900 --> 00:35:43.940
But it shows the JavaScript interaction, the click down, the changing the DOM from Python,


00:35:43.940 --> 00:35:44.860
all those good things, right?


00:35:44.860 --> 00:35:46.620
- Yep. - And so,


00:35:46.620 --> 00:35:48.300
you can go view the code for it.


00:35:48.300 --> 00:35:59.420
Maybe just we could use this as a chance to just talk through a little bit of like how you're structuring this because you've got a manifest, you've got a main.py, you've got an index.html.


00:35:59.420 --> 00:36:02.740
You come across an app that's written in with PyScript.com.


00:36:02.740 --> 00:36:14.460
You want to know how does it work? You know, the classic, you know, view source, the number of people who said I became a software engineer because in the 90s, when I was a teenager, I could right click view source and figure out what, okay, that's that.


00:36:14.460 --> 00:36:17.380
So I just wanted to highlight that that was there.


00:36:17.380 --> 00:36:20.860
Anypyscript.com app, you'll be able to see the source.


00:36:20.860 --> 00:36:24.260
- And you can copy the project. - Yeah, exactly, we're on the same page.


00:36:24.260 --> 00:36:28.260
There's a copy of the project, which is like a clone to my account,


00:36:28.260 --> 00:36:29.460
and I'll play with it, right?


00:36:29.460 --> 00:36:30.660
Yeah, exactly.


00:36:30.660 --> 00:36:35.060
That's actually one thing that we've been struggling with, terminology.


00:36:35.060 --> 00:36:38.660
Do we use the usual geek terminology,


00:36:38.660 --> 00:36:40.860
or are we user-friendly?


00:36:40.860 --> 00:36:42.780
Should we use copy or fork?


00:36:42.780 --> 00:37:12.480
That's a sort of thing. Yeah. Anyway. Yeah. Yes. Nice. Yeah. So tell people quickly about how what you can do with byscript.com kind of how it works. It's a little bit like replete, but really Python focused, right? Yes, it's very similar to replete or, you know, code ban and other services like these that the idea is that you have your space where you host your project. We have an editor right now. We're working also on creating views that are more user friendly. And you don't need to know about HTML or anything like that.


00:37:12.480 --> 00:37:13.820
So just hop in.


00:37:13.820 --> 00:37:16.360
But the nice thing about this is with any project,


00:37:16.360 --> 00:37:18.520
you can just hop in, see the Python code,


00:37:18.520 --> 00:37:21.720
how it was done, implemented, and playing around it.


00:37:21.720 --> 00:37:24.720
And we always have the view of the files,


00:37:24.720 --> 00:37:27.120
then a preview with an iframe


00:37:27.120 --> 00:37:28.460
that you can see your app,


00:37:28.460 --> 00:37:30.920
why you develop and whatnot.


00:37:30.920 --> 00:37:31.660
- Yeah. - Mm-hmm.


00:37:31.660 --> 00:37:35.160
- Quickly about the geography of how the project is organized.


00:37:35.160 --> 00:37:35.860
- Mm-hmm, sure.


00:37:35.860 --> 00:37:37.480
- You have your index.html,


00:37:37.480 --> 00:37:40.480
which is the thing that is first served to the browser.


00:37:40.480 --> 00:37:42.180
And if we go look at that,


00:37:42.180 --> 00:37:46.180
We'll see that in there, it's just referencing basically all the other things.


00:37:46.180 --> 00:37:49.060
And it's just plain old HTML in there as well.


00:37:49.060 --> 00:37:51.260
So we've got PyScript being loaded as well.


00:37:51.260 --> 00:37:52.620
We've got some CSS.


00:37:52.620 --> 00:37:57.060
They've got the PyScript tag that tells us that main.py


00:37:57.060 --> 00:37:59.580
is where the application is going to be run from.


00:37:59.580 --> 00:38:04.360
And then we just have the HTML code for displaying the user interface.


00:38:04.360 --> 00:38:09.660
If we hop over to manifest.json, this is an old one.


00:38:09.720 --> 00:38:12.360
The others I have a PyScript.toml, right?


00:38:12.360 --> 00:38:16.360
Yes, I was just going to say, it's usually a PyScript.toml file.


00:38:16.360 --> 00:38:18.560
I can pull that out for us here.


00:38:18.560 --> 00:38:19.960
That's great.


00:38:19.960 --> 00:38:23.040
In the toml file, it's going to be empty because there's nothing there.


00:38:23.040 --> 00:38:27.840
But this is where you start to define characteristics of the environment


00:38:27.840 --> 00:38:30.320
in which this app is going to run.


00:38:30.320 --> 00:38:34.640
So you might say packages equals and then a list of packages


00:38:34.640 --> 00:38:38.440
that you want installed as if it were a requirements.txt file.


00:38:38.440 --> 00:38:41.340
Give me a sense of what I can put in that list.


00:38:41.340 --> 00:38:45.440
I know of anything that is pure Python.


00:38:45.440 --> 00:38:47.240
Almost everything.


00:38:47.240 --> 00:38:52.040
There are complicated caveats, which we could go into.


00:38:52.040 --> 00:39:00.000
Overall, the differentiator is really if you're using anything that does multiprocessing or threading or sockets.


00:39:00.000 --> 00:39:02.740
Those on the browser don't really exist.


00:39:02.740 --> 00:39:09.440
Right, so I couldn't use PyMongo or PgMosaico or requests per se,


00:39:09.440 --> 00:39:12.040
because those are basically violating some...


00:39:12.040 --> 00:39:14.040
- Yes. - ...browser sandboxing rule.


00:39:14.040 --> 00:39:15.340
- Yeah. - Yeah, right.


00:39:15.340 --> 00:39:21.340
A request specifically, there is a package that patches requests.


00:39:21.340 --> 00:39:22.740
So you can actually...


00:39:22.740 --> 00:39:26.240
It's called, for PyDite, it's PyDite HTTP, I think.


00:39:26.240 --> 00:39:28.040
And it basically just patches everything.


00:39:28.040 --> 00:39:32.540
After you do that, then you can just import requests and use it normally.


00:39:32.540 --> 00:39:33.940
So it does work right now.


00:39:33.940 --> 00:39:34.400
Yes.


00:39:34.400 --> 00:39:38.740
But so the important thing is, is that you remember that your tab is the


00:39:38.740 --> 00:39:40.880
conceptually equivalent to your virtualenv.


00:39:40.880 --> 00:39:41.640
Okay.


00:39:41.640 --> 00:39:47.400
And so the PyScript.toml file is just the way PyScript learns about how do you want


00:39:47.400 --> 00:39:50.100
to configure your environment for this?


00:39:50.100 --> 00:39:50.540
Okay.


00:39:50.540 --> 00:39:53.140
And then if we look in main.py, there we go.


00:39:53.140 --> 00:39:54.460
It's the classic Python.


00:39:54.460 --> 00:39:56.660
This is where you start.


00:39:56.660 --> 00:39:58.700
This is where you just type your Python code.


00:39:58.740 --> 00:40:03.740
just go ahead, import JS and then js.document.whatever


00:40:03.740 --> 00:40:06.580
to get yourself into the DOM, that sort of stuff.


00:40:06.580 --> 00:40:08.740
- Yep, and from that moment, you have a link


00:40:08.740 --> 00:40:10.100
that you can share with anyone, right?


00:40:10.100 --> 00:40:11.900
Like it just works.


00:40:11.900 --> 00:40:13.740
Yeah, that's the power of it.


00:40:13.740 --> 00:40:14.580
- Right, excellent.


00:40:14.580 --> 00:40:17.260
So yeah, just got to share or copy it or whatever.


00:40:17.260 --> 00:40:21.380
Okay, so this is a way for people to play with PyScript.


00:40:21.380 --> 00:40:25.620
I saw here in the index that you specifically refer


00:40:25.620 --> 00:40:28.860
to certain releases of PyScript here.


00:40:28.860 --> 00:40:33.480
So I guess, presumably it's kind of however much you want to stay on the


00:40:33.480 --> 00:40:37.740
cutting edge of PyScript or kind of just take some version in time and stick with it.


00:40:37.740 --> 00:40:38.020
Yeah.


00:40:38.020 --> 00:40:38.340
Yeah.


00:40:38.340 --> 00:40:42.540
That's actually a great question because we've been discussing that a lot and Hey,


00:40:42.540 --> 00:40:47.220
just we should actually, should we remove latest and or unstable?


00:40:47.220 --> 00:40:51.060
Those are always linked to the latest stable release and the


00:40:51.060 --> 00:40:54.700
latest merged commit in the repo.


00:40:54.940 --> 00:40:57.640
And I think ultimately we're leaning towards yes,


00:40:57.640 --> 00:40:59.340
and always spin the version,


00:40:59.340 --> 00:41:01.840
mostly because that guarantees that, you know,


00:41:01.840 --> 00:41:04.700
we're not going to change things under the rug for you and your app.


00:41:04.700 --> 00:41:05.940
It just works.


00:41:05.940 --> 00:41:08.500
It's been courtesy to the user, isn't it?


00:41:08.500 --> 00:41:11.340
I mean, we don't want to do something that breaks their code.


00:41:11.340 --> 00:41:16.480
Okay, so if you pin it to, you know, PyScript version 0.0.1 alpha 1,


00:41:16.480 --> 00:41:19.140
you know, from way back when dinosaurs ruled the world,


00:41:19.140 --> 00:41:22.940
but your code still works, it might not be the most up-to-date PyScript,


00:41:23.000 --> 00:41:25.240
But it's your code, it's your responsibility.


00:41:25.240 --> 00:41:28.000
If you want to update the runtime, you go knock yourself out.


00:41:28.000 --> 00:41:29.640
- Nice. - Or you can use a--


00:41:29.640 --> 00:41:31.000
That's a good idea.


00:41:31.000 --> 00:41:34.600
So that brings up a bit of a comment from ToonArmy out there,


00:41:34.600 --> 00:41:37.740
who says, "So we're just about out of alpha.


00:41:37.740 --> 00:41:39.740
Do not use in production?"


00:41:39.740 --> 00:41:41.740
- Yeah, that's a very good question. - What's the status?


00:41:41.740 --> 00:41:43.740
[LAUGHTER]


00:41:43.740 --> 00:41:45.740
YOLO/latest, let's go.


00:41:45.740 --> 00:41:46.940
[LAUGHTER]


00:41:46.940 --> 00:41:49.440
So even with very stable things,


00:41:49.440 --> 00:41:53.600
I would always recommend pinning all your versions anyway, right?


00:41:53.600 --> 00:41:57.200
I can, and even the secondary versions and whatnot.


00:41:57.200 --> 00:42:00.880
Like when you deploy, pin the thing, pin the thing down.


00:42:00.880 --> 00:42:04.800
And that's what with PyScript.com, we're trying to basically


00:42:04.800 --> 00:42:09.680
put all those small details baked in so that you don't need to think about those.


00:42:09.680 --> 00:42:12.240
And, you know, just use best practices.


00:42:12.240 --> 00:42:16.720
For instance, we are using config and PyConfig and PyScript with source


00:42:16.720 --> 00:42:19.200
and not having code in line, right?


00:42:19.200 --> 00:42:24.660
because coding in line is great to get going, but it's really hard to read.


00:42:24.660 --> 00:42:26.760
Editors don't play well with it.


00:42:26.760 --> 00:42:29.160
It's hard to test your code, all of this.


00:42:29.160 --> 00:42:33.060
So we're saying just, let's just use templates that are encouraging best


00:42:33.060 --> 00:42:35.360
practices and pinning the versions is one of them.


00:42:35.360 --> 00:42:36.640
Could I write unit tests?


00:42:36.640 --> 00:42:40.920
Could I have a page that is like test.html, then import pytest and


00:42:40.920 --> 00:42:42.600
I do that in the browser.


00:42:42.600 --> 00:42:43.040
Yeah.


00:42:43.040 --> 00:42:43.200
Actually.


00:42:43.200 --> 00:42:43.720
Yeah.


00:42:43.720 --> 00:42:44.080
Yeah.


00:42:44.080 --> 00:42:45.160
So, okay.


00:42:45.160 --> 00:42:45.720
Here's the thing.


00:42:45.780 --> 00:42:49.820
And we've not mentioned PyPicard or Invent that we've renamed it.


00:42:49.820 --> 00:42:55.260
But when I was writing that before, or the kind of proof of concept before PyCon, I had


00:42:55.260 --> 00:42:56.940
pytest running in the browser.


00:42:56.940 --> 00:42:59.100
I mean, why wouldn't you run it in the browser?


00:42:59.100 --> 00:43:02.740
That's the context literally in which this code is supposed to run.


00:43:02.740 --> 00:43:05.160
So let's run the test suite in the browser.


00:43:05.160 --> 00:43:06.160
And it just works.


00:43:06.160 --> 00:43:07.160
It's lovely.


00:43:07.160 --> 00:43:12.660
Yeah, it'll be 10 minutes to go, hmm, that'd be a good idea to actually seeing the thing.


00:43:12.660 --> 00:43:15.140
A real kind of woohoo, kind of fist pump moment.


00:43:15.140 --> 00:43:17.860
Yeah, that's fantastic. So speaking of...


00:43:17.860 --> 00:43:18.740
Avi, why don't you jump in?


00:43:18.740 --> 00:43:21.460
Yeah, I just want to mention one aspect, which is...


00:43:21.460 --> 00:43:23.340
we don't always think about this.


00:43:23.340 --> 00:43:27.300
Because PyScript runs in your browser, in your client,


00:43:27.300 --> 00:43:30.820
like, there's no server-side logic or anything like this.


00:43:30.820 --> 00:43:32.940
So scalability comes for free.


00:43:32.940 --> 00:43:37.420
You can scale your Hello World app to a billion users


00:43:37.420 --> 00:43:38.860
and not notice.


00:43:38.860 --> 00:43:41.580
Because all the computation is going to run on their end,


00:43:41.580 --> 00:43:45.180
which is another really cool aspect of the whole thing.


00:43:45.180 --> 00:43:48.820
We don't give enough credit to it, but it's important.


00:43:48.820 --> 00:43:50.380
>> Yeah, it absolutely is.


00:43:50.380 --> 00:43:53.420
Unless you have some server sync type of thing,


00:43:53.420 --> 00:43:57.420
there's no effort other than delivering the WASM bits.


00:43:57.420 --> 00:43:59.820
All right, somewhere buried in here,


00:43:59.820 --> 00:44:01.340
we have PiperCard. There we go.


00:44:01.340 --> 00:44:01.780
>> Okay.


00:44:01.780 --> 00:44:04.460
>> So you had mentioned that you were working on this.


00:44:04.460 --> 00:44:06.020
Tell us about this, Nick.


00:44:06.020 --> 00:44:07.700
>> Okay. So Peter,


00:44:07.700 --> 00:44:13.060
when he announced PyScripts the world at PyCon last year, he said, this is going to be for


00:44:13.060 --> 00:44:21.080
the 99%. And for that, he meant that not developers. Okay. And I'm old enough because I'm dinosaur


00:44:21.080 --> 00:44:22.560
really in internet time.


00:44:22.560 --> 00:44:25.180
You were on the internet before the web existed.


00:44:25.180 --> 00:44:34.180
I was actually, I was, I remember getting NCSA mosaic onto a 386 machine in my computing


00:44:34.180 --> 00:44:38.120
lab at university and going, Oh my gosh, this is incredible.


00:44:38.120 --> 00:44:39.980
It was mind blowing.


00:44:39.980 --> 00:44:41.320
That's the first graphical


00:44:41.320 --> 00:44:47.120
just in two minutes.


00:44:47.120 --> 00:44:48.320
I'll be able to download this picture.


00:44:48.320 --> 00:44:49.540
It'll be so remarkable.


00:44:49.540 --> 00:44:50.100
Yeah.


00:44:50.100 --> 00:44:50.880
There was Archie.


00:44:50.880 --> 00:44:51.680
There was gopher.


00:44:51.680 --> 00:44:53.820
There was telling all before the web.


00:44:53.820 --> 00:44:54.560
Okay.


00:44:54.560 --> 00:44:58.700
That's a whole different podcast for old fellows who were on the web back in the


00:44:58.700 --> 00:45:02.080
day, we should stop that now we're turning into the internet.


00:45:02.580 --> 00:45:05.080
The internet used to have a sound, Nicholas.


00:45:05.080 --> 00:45:06.180
It had a sound.


00:45:06.180 --> 00:45:06.900
Yes.


00:45:06.900 --> 00:45:07.660
Oh yeah.


00:45:07.660 --> 00:45:08.400
Oh yes.


00:45:08.400 --> 00:45:08.820
Yes.


00:45:08.820 --> 00:45:12.260
Anyway, worry young people, anyone under the age of 40.


00:45:12.260 --> 00:45:19.300
Back then when dinosaurs ruled the world, there was an incredible


00:45:19.300 --> 00:45:24.260
framework for writing GUI based apps on the early versions of the Mac.


00:45:24.260 --> 00:45:24.820
Okay.


00:45:24.820 --> 00:45:26.400
And it's called HyperCard.


00:45:26.400 --> 00:45:30.460
And, the, the concept is very easy to explain.


00:45:30.680 --> 00:45:33.800
the user interface is just made of a stack of cards.


00:45:33.800 --> 00:45:34.140
Okay.


00:45:34.140 --> 00:45:39.300
And there is always one card being displayed at once and you interact with that card.


00:45:39.300 --> 00:45:43.540
So there might be a button or there might be some text or a link or a picture or a movie,


00:45:43.540 --> 00:45:47.340
but when you interact with that, it transitions you to another card.


00:45:47.340 --> 00:45:51.380
So it's a little bit like, you know, again, from a similar vintage that those choose your


00:45:51.380 --> 00:45:55.100
own adventure games where, you know, if you want to kill troll, turn to page 291.


00:45:55.100 --> 00:45:57.300
You want to run away, turn to page 32.


00:45:57.300 --> 00:45:59.140
So you transition to a new state.


00:45:59.300 --> 00:46:03.180
That's a new card or a new piece of text in the adventure game as it were, and so on and so.


00:46:03.180 --> 00:46:03.620
Okay.


00:46:03.620 --> 00:46:06.660
It's really easy to explain that to 11 year olds.


00:46:06.660 --> 00:46:07.020
Okay.


00:46:07.020 --> 00:46:19.780
And so we took that Piper card model and we created something that we demoed at PyCon that allows you to essentially build apps on top of PyScript using these concepts.


00:46:19.780 --> 00:46:20.220
Okay.


00:46:20.220 --> 00:46:22.620
I'm not sure whether these will work still.


00:46:22.620 --> 00:46:25.180
The auto-advance one works.


00:46:25.180 --> 00:46:28.260
You just have to have patience because it takes 10 seconds to auto-advance.


00:46:28.260 --> 00:46:28.620
Yeah.


00:46:28.620 --> 00:46:28.980
Okay.


00:46:28.980 --> 00:46:36.720
So these demos allow me to exercise different aspects of the underlying browser and how


00:46:36.720 --> 00:46:38.760
that interacts with Python and things.


00:46:38.760 --> 00:46:44.320
But what we've done is we've renamed it from a Piper card because that has a legacy.


00:46:44.320 --> 00:46:48.600
People think it's going to be HyperCard when in fact it's not HyperCard, it's actually


00:46:48.600 --> 00:46:52.560
Python in the browser, but we use that card-like metaphor.


00:46:52.560 --> 00:46:55.740
But there are other things that we want to build into that.


00:46:55.740 --> 00:47:02.340
So right now, literally, this is what I do in my day, is I'm thinking very hard and writing


00:47:02.340 --> 00:47:08.500
first draft of what Invent, this framework, will be so that it makes it easy for people


00:47:08.500 --> 00:47:14.980
to create user interface led applications using Python and PyScript in the browser,


00:47:14.980 --> 00:47:19.260
wherever the browser may be, on your Tesla, on your mobile phone, on your tablet, on your


00:47:19.260 --> 00:47:21.060
desktop, it'll all look the same.


00:47:21.060 --> 00:47:25.940
Now, I've been working at perhaps the Python end of things, but another aspect of this


00:47:25.940 --> 00:47:30.620
is that we want to make sure that we create a development environment that will probably


00:47:30.620 --> 00:47:35.780
be end up in PyScript.com that will allow beginner coders in the same way that, you


00:47:35.780 --> 00:47:40.820
know, my work on Mew tries to give you a code editor that's not as complicated as a Visual


00:47:40.820 --> 00:47:44.140
Studio code, but it lets you get to the good stuff as quickly as possible.


00:47:44.140 --> 00:47:48.740
So it is a similar sort of philosophy will allow you to draw your user interface, allow


00:47:48.740 --> 00:47:54.460
you to create the logic that you need to make your app run without actually even realizing


00:47:54.460 --> 00:47:57.140
that under the hood, you've got Python running as well.


00:47:57.140 --> 00:48:01.780
Very cool. So we should see Piper card is kind of a proof of concept. And then you're


00:48:01.780 --> 00:48:06.940
coming out with this, you called it invent, invent. So you literally import, invent, and


00:48:06.940 --> 00:48:14.700
then import dot app or import dot whatever. Yeah. Yeah, yeah, yeah. Yeah. Yeah. Yeah.


00:48:14.700 --> 00:48:15.700
I agree in the UK.


00:48:15.700 --> 00:48:19.240
I'll say one thing to you, Nicholas, actually, I'm a little disappointed,


00:48:19.240 --> 00:48:21.940
to be honest, that I'm the only one that actually


00:48:21.940 --> 00:48:24.640
is dogfooding Pype Invent


00:48:24.640 --> 00:48:28.040
and writing my talks with Invent and all of those.


00:48:28.040 --> 00:48:28.700
Yeah.


00:48:28.700 --> 00:48:29.700
You should please.


00:48:29.700 --> 00:48:30.840
For Pype.


00:48:30.840 --> 00:48:33.100
Hey, it's great. I've been using actually


00:48:33.100 --> 00:48:37.140
Visual PyScript and Invent, etc. for my talk and


00:48:37.140 --> 00:48:39.540
I was expecting you would say like, yeah, me too.


00:48:39.540 --> 00:48:41.100
You're like, oh, really?


00:48:41.100 --> 00:48:43.540
Really brave of you.


00:48:43.540 --> 00:48:46.340
Just left you hanging dry.


00:48:46.340 --> 00:48:50.440
Yeah, he's got me banged to the right.


00:48:50.440 --> 00:48:53.340
But honestly, one thing that I didn't think before,


00:48:53.340 --> 00:48:56.240
while in the Uber to the conference,


00:48:56.240 --> 00:48:58.940
the day before, actually the day of my talk,


00:48:58.940 --> 00:49:02.600
the ability to actually check my slides and change them


00:49:02.600 --> 00:49:05.080
on the backseat of a car, on my phone,


00:49:05.080 --> 00:49:08.140
was mind-blowing and really cool.


00:49:08.140 --> 00:49:11.540
Which helps the power of the framework itself.


00:49:11.540 --> 00:49:12.800
Yeah, kudos.


00:49:12.880 --> 00:49:18.880
So you've told a really good story here because now imagine that you are in a classroom in,


00:49:18.880 --> 00:49:22.840
I don't know, I'm just picking random country, in Mexico, okay, and you've got a class where


00:49:22.840 --> 00:49:28.400
there are kids with Chromebooks, okay, getting Python on there, getting any app to be built


00:49:28.400 --> 00:49:30.800
on those is difficult enough.


00:49:30.800 --> 00:49:37.160
Like with PyScripts, it's going to be so much easier, sort of story to do, that sort of


00:49:37.160 --> 00:49:38.160
thing.


00:49:38.160 --> 00:49:42.080
So that's, we're working hard on that and it's going to be a long journey, but we're


00:49:42.080 --> 00:49:44.680
confident that it'll, it'll produce good results.


00:49:44.680 --> 00:49:51.560
Do you have some dreams or have you thought about Git and GitHub integration into pyscript.com?


00:49:51.560 --> 00:49:56.540
Like if I had a pyscript.com thing and a GitHub repo, could I have one mirror the other so


00:49:56.540 --> 00:49:59.640
that I could do GitHub like things to it?


00:49:59.640 --> 00:50:00.640
Yeah, go ahead, Niklas.


00:50:00.640 --> 00:50:06.560
I was going to say, I look forward to the feature request on our repository.


00:50:06.560 --> 00:50:09.900
Well, we're listening to the community.


00:50:09.900 --> 00:50:12.100
If that's something that you want, tell us about it.


00:50:12.100 --> 00:50:16.900
Yeah, actually, I would love to hear more about how people would envision it.


00:50:16.900 --> 00:50:20.300
So we already kind of already have it in the sense that


00:50:20.300 --> 00:50:25.000
people working on both firescript.com, but also the open source project,


00:50:25.000 --> 00:50:28.800
we have a CLI for both, right?


00:50:28.800 --> 00:50:33.160
The CLI on the open source side allows you to create new projects with a template,


00:50:33.160 --> 00:50:35.800
to run them locally and those type of things.


00:50:35.800 --> 00:50:38.000
we have a plugin for that CLI


00:50:38.000 --> 00:50:42.440
that is a PyScript.com plugin that allows you to log in, log out,


00:50:42.440 --> 00:50:47.240
and then basically have a local copy version of your project that is in .com.


00:50:47.240 --> 00:50:50.280
And one of the first scenarios that we're thinking was,


00:50:50.280 --> 00:50:51.480
as a developer,


00:50:51.480 --> 00:50:54.080
probably not as a non-technical user,


00:50:54.080 --> 00:50:56.720
but as a developer, I want to use GitHub for my


00:50:56.720 --> 00:51:00.400
version control things, and I want to use PyScript.com to deploy


00:51:00.400 --> 00:51:01.480
and change things.


00:51:01.480 --> 00:51:04.000
So we do have a minimal integration


00:51:04.000 --> 00:51:06.840
we're going to be announcing and properly announcing


00:51:06.840 --> 00:51:09.880
and releasing those things in a month time frame.


00:51:09.880 --> 00:51:12.240
- Nice. - That is one of the most


00:51:12.240 --> 00:51:14.240
important use cases that we have.


00:51:14.240 --> 00:51:15.240
Yeah.


00:51:15.240 --> 00:51:17.240
Take my thoughts for what they are,


00:51:17.240 --> 00:51:19.720
is very loosely informed.


00:51:19.720 --> 00:51:23.880
Not a lot of skin in the game, but with my website,


00:51:23.880 --> 00:51:25.560
my personal website,


00:51:25.560 --> 00:51:28.200
I use Hugo and then I just push to a branch


00:51:28.200 --> 00:51:31.160
that triggers a deploy on Netlify.


00:51:31.160 --> 00:51:34.640
you know, there's kind of the Heroku type thing, right?


00:51:34.640 --> 00:51:36.640
It'd be cool if it kind of just like,


00:51:36.640 --> 00:51:39.520
it goes to this branch, that's what's on PyScript.com.


00:51:39.520 --> 00:51:43.120
That's what I would love if I were doing that integration and using it, but...


00:51:43.120 --> 00:51:46.240
Yeah, that's one use case.


00:51:46.240 --> 00:51:50.680
Interesting that you mentioned, we've been looking at Heroku as well, et cetera.


00:51:50.680 --> 00:51:52.920
The kind of difficulty here is


00:51:52.920 --> 00:51:58.280
we're often used to a one repo, one app type of separation.


00:51:58.280 --> 00:52:02.920
But you may have like a one repo where let's say you collect all your talks over


00:52:02.920 --> 00:52:04.920
that you give around conferences.


00:52:04.920 --> 00:52:09.320
You may want to have a folder and each folder is one app on PyScript.com.


00:52:09.320 --> 00:52:12.760
And how do we support those different workflows?


00:52:12.760 --> 00:52:14.840
That's the type of thing I'm thinking right now.


00:52:14.840 --> 00:52:16.280
And that's the thing.


00:52:16.280 --> 00:52:21.880
Sure. Well, people who are using it, reach out to these guys and give me your thoughts here.


00:52:21.880 --> 00:52:22.520
Thank you.


00:52:22.520 --> 00:52:24.600
We're getting, of course, yeah, we're getting short on time.


00:52:24.600 --> 00:52:28.940
So maybe the last thing we should talk about is kind of a PyScript next.


00:52:28.940 --> 00:52:30.660
Where are we going from here folks?


00:52:30.660 --> 00:52:31.260
Yes.


00:52:31.260 --> 00:52:33.360
So let me use this real quick.


00:52:33.360 --> 00:52:37.540
And I think, I think you should have like a link to a bunch of tabs open.


00:52:37.540 --> 00:52:38.240
That one.


00:52:38.240 --> 00:52:38.760
Perfect.


00:52:38.760 --> 00:52:40.580
So what's my script next?


00:52:40.580 --> 00:52:44.380
It's as I said, like we're rewriting by scripts with a smaller core, more


00:52:44.380 --> 00:52:47.780
flexible, web native, et cetera, to allow different things.


00:52:47.780 --> 00:52:52.180
So this tech preview that we are formally launching next week.


00:52:52.420 --> 00:52:57.020
So, you all listening, it was saw first, and it all happened.


00:52:57.020 --> 00:52:59.920
Awesome. I'm sure the release was amazing, and it went really well.


00:52:59.920 --> 00:53:02.720
So, perfect. Yes, congratulations.


00:53:02.720 --> 00:53:05.120
That's very Doctor Who of you to say that.


00:53:05.120 --> 00:53:06.380
Yeah, it is.


00:53:06.380 --> 00:53:10.220
But the gist of it is that we rethought a lot of the core concepts,


00:53:10.220 --> 00:53:16.280
and now we're able to allow multiple interpreters.


00:53:16.280 --> 00:53:20.520
We have MicroPython by default, supported by default.


00:53:20.580 --> 00:53:23.980
All of the interpreters support execution on the main thread,


00:53:23.980 --> 00:53:26.180
just like the previous version of PyScript.


00:53:26.180 --> 00:53:29.980
But now also we support on a worker, a web worker,


00:53:29.980 --> 00:53:34.780
which means you can run Python while the web is loading


00:53:34.780 --> 00:53:37.480
or while the page is doing other things.


00:53:37.480 --> 00:53:41.480
It's like there's another process or other processes in your page.


00:53:41.480 --> 00:53:43.380
That's one place to get web workers.


00:53:43.380 --> 00:53:46.180
That's been a big part of WebAssembly for quite a while,


00:53:46.180 --> 00:53:48.380
but you all haven't leveraged that previously, right?


00:53:48.380 --> 00:53:52.780
Yes. And it was very painful for us because, you know, for instance,


00:53:52.780 --> 00:53:57.500
Pano, an internal project of Anaconda, like they have all the examples


00:53:57.500 --> 00:53:59.700
ported to the web with Pyodive.


00:53:59.700 --> 00:54:03.500
And because we didn't support the workers yet, it was better for them


00:54:03.500 --> 00:54:05.020
to just use Pyodive directly.


00:54:05.020 --> 00:54:09.300
Now we can allow them to use PyScript and, you know, do all those things.


00:54:09.300 --> 00:54:15.380
We saw actually a type preview of even Django or FastAPI running on PyScript


00:54:15.380 --> 00:54:19.420
with workers, right? Like, which is extremely cool. And you can think of


00:54:19.420 --> 00:54:19.860
– That is cool.


00:54:19.860 --> 00:54:23.900
It's hard to actually imagine, but even just the educational


00:54:23.900 --> 00:54:28.900
purpose of this, you can have live running examples in your docs,


00:54:28.900 --> 00:54:31.140
and you can just play with it, which is interesting.


00:54:31.140 --> 00:54:34.740
Well, I don't know how well PyScript plugs into this world, but


00:54:34.740 --> 00:54:39.140
there is an entire ecosystem that I don't operate very much in,


00:54:39.140 --> 00:54:42.940
but where if you had a, if you have WebAssembly, you can run it


00:54:42.940 --> 00:54:45.900
kind of like Node can run JavaScript on a server,


00:54:45.900 --> 00:54:48.180
you can run WebAssembly stuff


00:54:48.180 --> 00:54:50.420
in the cloud on a server in a container,


00:54:50.420 --> 00:54:51.420
you can run it directly.


00:54:51.420 --> 00:54:53.780
So in those scenarios, it makes tons of sense to say,


00:54:53.780 --> 00:54:56.580
we're going to use PyScript to host FastAPI,


00:54:56.580 --> 00:54:58.420
and it has a meaning, right?


00:54:58.420 --> 00:55:01.900
It's not just browsers all the way down or something, right?


00:55:01.900 --> 00:55:03.300
It has a purpose for being there.


00:55:03.300 --> 00:55:05.020
Yeah, yeah. And well,


00:55:05.020 --> 00:55:06.460
I wish we had more time.


00:55:06.460 --> 00:55:08.980
There's a lot going on in WebAssembly ecosystem


00:55:08.980 --> 00:55:11.620
as well to support this as well, which is cool.


00:55:11.620 --> 00:55:16.020
But just in the interest of time, this next branch as well,


00:55:16.020 --> 00:55:20.980
it also supports communication between workers and the main thread and vice versa.


00:55:20.980 --> 00:55:26.340
So, and we can have multiple interpreters, maybe one is Pyodite, another is Python,


00:55:26.340 --> 00:55:31.700
another is Lua, and we have examples of those that can communicate between each other.


00:55:31.700 --> 00:55:39.140
If you click on all together, okay, so you've got JavaScript starting MicroPython in a WebWorker,


00:55:39.140 --> 00:55:43.220
Okay, and then micropython saying hello back to JavaScript.


00:55:43.220 --> 00:55:45.820
But at the same time, micropython on the main thread


00:55:45.820 --> 00:55:49.820
has actually started in a web worker a Lua interpreter.


00:55:49.820 --> 00:55:53.780
And Lua is saying back to the main thread to micropython,


00:55:53.780 --> 00:55:54.900
hi micropython.


00:55:54.900 --> 00:56:00.140
And then you've got micropython starting CPython on a web worker.


00:56:00.140 --> 00:56:03.020
And then when CPython has loaded and everything,


00:56:03.020 --> 00:56:06.260
back to the micropython context, you know, hello micropython.


00:56:06.260 --> 00:56:08.340
This, you know, can you imagine?


00:56:08.340 --> 00:56:13.140
Well, I can actually, because I used to do some work for the UK government, and I was


00:56:13.140 --> 00:56:18.460
on a data platform, and the civil servants who were doing all the stats work in the Ministry


00:56:18.460 --> 00:56:23.900
of Justice were using our platform, and they would want data where they wanted to grab


00:56:23.900 --> 00:56:28.780
data, then run it through some R thing, and then run it through some Python thing, and


00:56:28.780 --> 00:56:34.500
then stick it on a website somewhere so some minister or a highfalutin civil servant can


00:56:34.500 --> 00:56:37.540
and go and have a look at the graph of, I don't know, COVID,


00:56:37.540 --> 00:56:41.140
the spread of COVID through the UK prison system or something like that.


00:56:41.140 --> 00:56:43.500
Well, you can do that all in a single browser.


00:56:43.500 --> 00:56:46.580
The amount of standing on one leg, stick your finger in your ear,


00:56:46.580 --> 00:56:48.640
and whistle, "God save the king," backwards,


00:56:48.640 --> 00:56:50.780
you needed to get that to work.


00:56:50.780 --> 00:56:54.380
It took them weeks to just get their development environment set up.


00:56:54.380 --> 00:56:57.340
With WebWorkers and the multiple runtimes,


00:56:57.340 --> 00:56:59.800
we kind of got that as a solution here now as well.


00:56:59.800 --> 00:57:04.040
Actually, the speed of loading speed,


00:57:04.100 --> 00:57:07.400
Like you didn't, we didn't have a loading screen.


00:57:07.400 --> 00:57:10.160
We didn't have like, actually, if you check the network.


00:57:10.160 --> 00:57:12.360
Let me try the, the map plot live.


00:57:12.360 --> 00:57:12.860
Yeah.


00:57:12.860 --> 00:57:14.700
Oh, just try my Python.


00:57:14.700 --> 00:57:16.200
See how fast that brings you up.


00:57:16.200 --> 00:57:16.560
This one.


00:57:16.560 --> 00:57:16.860
Yeah.


00:57:16.860 --> 00:57:17.500
There we go.


00:57:17.500 --> 00:57:19.160
I mean, it's like instant.


00:57:19.160 --> 00:57:20.500
Yeah, it is instant.


00:57:20.500 --> 00:57:21.300
It's amazing.


00:57:21.300 --> 00:57:21.860
Yeah.


00:57:21.860 --> 00:57:25.800
And once it's cached, it's, you know, yeah, it's this kind of stuff that I'm


00:57:25.800 --> 00:57:29.340
thinking, like, then the front end framework type of story starts to


00:57:29.340 --> 00:57:31.300
become completely realistic.


00:57:31.300 --> 00:57:31.460
Yeah.


00:57:31.460 --> 00:57:31.700
Yeah.


00:57:31.940 --> 00:57:35.180
Actually, the last one that I wanted to show


00:57:35.180 --> 00:57:37.480
actually is the next tab that you have, I think,


00:57:37.480 --> 00:57:38.920
which is--there you go.


00:57:38.920 --> 00:57:40.780
Can you open the console as well?


00:57:40.780 --> 00:57:41.420
Thank you.


00:57:41.420 --> 00:57:43.420
I should use my little hotkey thing here.


00:57:43.420 --> 00:57:46.120
My little--is it like a hotkey you can do to open those?


00:57:46.120 --> 00:57:47.560
Anyway, yeah, okay.


00:57:47.560 --> 00:57:50.160
If you go to console, actually, just to show the results.


00:57:50.160 --> 00:57:51.000
- Yeah. - Perfect.


00:57:51.000 --> 00:57:53.060
So this example is actually having--


00:57:53.060 --> 00:57:56.200
it's a Python input keyword


00:57:56.200 --> 00:57:58.400
stopping its execution,


00:57:58.400 --> 00:58:00.180
waiting for an answer.


00:58:00.180 --> 00:58:01.040
- Oh. - I like it.


00:58:01.040 --> 00:58:02.480
So it's actually blocking calls.


00:58:02.480 --> 00:58:03.280
- You're good at it, Matt.


00:58:03.280 --> 00:58:03.880
Seven.


00:58:03.880 --> 00:58:05.480
- Right, and so if you add in...


00:58:05.480 --> 00:58:06.320
- No, no, no, no, no.


00:58:06.320 --> 00:58:08.000
That's the JavaScript console.


00:58:08.000 --> 00:58:09.840
You want to type seven into the input.


00:58:09.840 --> 00:58:10.360
- The input.


00:58:10.360 --> 00:58:12.160
- Ah, okay.


00:58:12.160 --> 00:58:14.640
- So basically what's happening is it's blocking


00:58:14.640 --> 00:58:15.840
and then waiting for its call


00:58:15.840 --> 00:58:18.760
while the page is still responsive and everything else.


00:58:18.760 --> 00:58:21.040
And then when you answer, it executes.


00:58:21.040 --> 00:58:21.880
- Mm-hmm.


00:58:21.880 --> 00:58:22.520
- Okay.


00:58:22.520 --> 00:58:25.240
- 'Cause that unlocks a lot of use cases.


00:58:25.240 --> 00:58:26.680
A debugger, for instance,


00:58:26.680 --> 00:58:28.960
like we can have breakpoints somewhere


00:58:28.960 --> 00:58:30.960
and you can go and debug your code


00:58:30.960 --> 00:58:35.660
And a lot of scenarios that were not working before can work now.


00:58:35.660 --> 00:58:37.660
So this is very exciting.


00:58:37.660 --> 00:58:41.000
Yeah, there's a lot of under the hood stuff that has changed


00:58:41.000 --> 00:58:43.620
that enables us to do some really cool things now.


00:58:43.620 --> 00:58:47.700
Yeah, excellent. So with the web workers, do I get async and await?


00:58:47.700 --> 00:58:50.320
Yes, and proper async and await. Yes.


00:58:50.320 --> 00:58:51.960
- Yes. - That's fantastic.


00:58:51.960 --> 00:58:53.260
Okay, I love it.


00:58:53.260 --> 00:58:55.560
All right, guys, what else?


00:58:55.560 --> 00:58:57.200
What final things do you want to tell people


00:58:57.200 --> 00:59:01.160
before we wrap up this PyScript update episode.


00:59:01.160 --> 00:59:02.160
I've got two things.


00:59:02.160 --> 00:59:04.240
First one is, if you want to play,


00:59:04.240 --> 00:59:05.640
if you want to have a look around,


00:59:05.640 --> 00:59:09.720
PyScript.com is the place to just get your hands dirty.


00:59:09.720 --> 00:59:13.080
And our colleagues who work on that have done an amazing job.


00:59:13.080 --> 00:59:15.400
And the feedback that you can give them


00:59:15.400 --> 00:59:17.920
through the form that you'll find on the website is read.


00:59:17.920 --> 00:59:20.360
And we care very deeply about, you know,


00:59:20.360 --> 00:59:23.040
the experience that users have and suggestions and things.


00:59:23.040 --> 00:59:25.560
So knock yourself out, go and do that.


00:59:25.560 --> 00:59:29.640
And the second thing I want to say is that PyScript is open source software.


00:59:29.640 --> 00:59:35.960
So I know Fabio and myself are employed by Anaconda, but we have contributors who are not Anaconda employees.


00:59:35.960 --> 00:59:39.600
And, you know, we would love the community to come with us on this journey.


00:59:39.600 --> 00:59:41.280
Tell us what you want.


00:59:41.280 --> 00:59:43.000
Build a framework on top of PyScript.


00:59:43.000 --> 00:59:44.680
Build plugins on top of PyScript.


00:59:44.680 --> 00:59:46.840
Create a goofy app on top of PyScript.


00:59:46.840 --> 00:59:48.640
You know, put it on your Tesla or whatever.


00:59:48.640 --> 00:59:49.840
You know, I don't know.


00:59:49.840 --> 00:59:53.560
I would love, it would make my day if before the end of the year, somebody's gone,


00:59:53.560 --> 00:59:56.600
"Hey, I've built a Death Star using PyScript


00:59:56.600 --> 00:59:59.100
or some ridiculous project or whatever."


00:59:59.100 --> 01:00:00.960
And I go, "Wow."


01:00:00.960 --> 01:00:03.340
Like I said, I never thought someone would do that.


01:00:03.340 --> 01:00:06.600
Be playful, explore, be creative, have fun.


01:00:06.600 --> 01:00:08.880
That's what I want to see.


01:00:08.880 --> 01:00:10.140
Fabio, how about you?


01:00:10.140 --> 01:00:13.720
Yeah, I would actually just double down what you said


01:00:13.720 --> 01:00:17.180
and actually encourage everyone to reach out.


01:00:17.180 --> 01:00:23.020
We're trying to make it a good tool for anyone to learn programming


01:00:23.100 --> 01:00:24.800
or to share your things, et cetera.


01:00:24.800 --> 01:00:27.600
And a lot of the difficulties we have all the time


01:00:27.600 --> 01:00:31.900
is trying to think with new users' brain


01:00:31.900 --> 01:00:36.140
or students' brain and people with different backgrounds,


01:00:36.140 --> 01:00:38.480
because unfortunately or fortunately,


01:00:38.480 --> 01:00:41.240
we've been in this game for 20 years, right?


01:00:41.240 --> 01:00:42.400
So it's really hard.


01:00:42.400 --> 01:00:45.680
So when we say, "Reach out, we need you,"


01:00:45.680 --> 01:00:47.080
we really mean it.


01:00:47.080 --> 01:00:49.600
Like, I think I strongly believe


01:00:49.600 --> 01:00:53.360
that all open source projects are about people


01:00:53.360 --> 01:00:56.240
and benefit from diversity, right?


01:00:56.240 --> 01:00:59.160
Like good docs are made by non-developers.


01:00:59.160 --> 01:01:04.160
Good content is made by people that have passion


01:01:04.160 --> 01:01:08.280
for hopping on a video and talking about stuff.


01:01:08.280 --> 01:01:10.720
Like I'm trying to convince my daughter


01:01:10.720 --> 01:01:13.040
to have like a PyScript channel on TikTok.


01:01:13.040 --> 01:01:14.760
Just to talk--


01:01:14.760 --> 01:01:15.840
- Oh, that'd be cool, yeah.


01:01:15.840 --> 01:01:17.300
- Right, to talk the lingo.


01:01:17.300 --> 01:01:24.300
So we really value you reaching out and coming and helping us be more, you know, human as a project.


01:01:24.300 --> 01:01:33.060
And the second thing is really help us spread the word and make it popular so that we can make Python even more popular and help people.


01:01:33.060 --> 01:01:39.580
Which I think in this age where we have AI and big tech companies and algorithms and all of that,


01:01:39.580 --> 01:01:44.940
giving power to people to just run programming language on their machines


01:01:44.940 --> 01:01:49.180
and the distributed nature of PyScript, I think it's important today.


01:01:49.180 --> 01:01:51.900
So, yeah, that's all I wanted to say.


01:01:51.900 --> 01:01:54.140
Yeah, excellent. Maybe a quick final question.


01:01:54.140 --> 01:01:57.260
Marwan says, "Any work on the HTML canvas for your PyScript?"


01:01:57.260 --> 01:02:00.300
Thinking of simple stuff like creating a snake game.


01:02:00.300 --> 01:02:02.700
Okay, Marwan, import JS.


01:02:02.700 --> 01:02:04.940
Now you have global this, okay?


01:02:04.940 --> 01:02:07.020
Now you have access to your canvas.


01:02:07.020 --> 01:02:11.020
And it's the same API because we're proxying the JavaScript objects


01:02:11.020 --> 01:02:14.860
as you'll find on the Mozilla developer docs.


01:02:14.860 --> 01:02:16.860
- So go knock yourself out. - Awesome.


01:02:16.860 --> 01:02:18.060
Yeah, that's what I imagine.


01:02:18.060 --> 01:02:22.060
MDN network, W3Schools, if you can choose.


01:02:22.060 --> 01:02:24.540
Yes, MDN.


01:02:24.540 --> 01:02:28.300
I'm also working on a higher level web API for PyScript,


01:02:28.300 --> 01:02:33.020
which will help with that as well, make the API more Pythonic.


01:02:33.020 --> 01:02:36.540
But what they've got is available today, and you can just...


01:02:36.540 --> 01:02:41.840
Yeah, and you get to reuse your JavaScript skills if you have them. Yeah, it's the same API. It's the same API


01:02:41.840 --> 01:02:45.860
Yeah. All right guys. Thank you for being here. Thank you for this project


01:02:45.860 --> 01:02:51.140
It's really really exciting and I look forward to catching up again and seeing what else


01:02:51.140 --> 01:02:54.920
Lc built in six months or a year whenever it turns out to be. Yes, and


01:02:54.920 --> 01:03:02.260
This and running the show this is this is always a great fun. Thank you. Yes. Thank you. Yeah, you bet. Bye. Bye


01:03:03.540 --> 01:03:06.740
This has been another episode of Talk Python to Me.


01:03:06.740 --> 01:03:08.360
Thank you to our sponsors.


01:03:08.360 --> 01:03:09.840
Be sure to check out what they're offering.


01:03:09.840 --> 01:03:11.560
It really helps support the show.


01:03:11.560 --> 01:03:16.260
The folks over at JetBrains encourage you to get work done with PyCharm.


01:03:16.260 --> 01:03:19.040
PyCharm professional understands complex projects


01:03:19.040 --> 01:03:21.940
across multiple languages and technologies,


01:03:21.940 --> 01:03:24.560
so you can stay productive while you're writing Python code


01:03:24.560 --> 01:03:27.520
and other code like HTML or SQL.


01:03:27.520 --> 01:03:32.860
Download your free trial at talkpython.fm/donewithpycharm.


01:03:32.860 --> 01:03:34.980
Take some stress out of your life.


01:03:34.980 --> 01:03:37.180
Get notified immediately about errors


01:03:37.180 --> 01:03:39.160
and performance issues in your web


01:03:39.160 --> 01:03:41.080
or mobile applications with Sentry.


01:03:41.080 --> 01:03:45.960
Just visit talkpython.fm/sentry and get started for free.


01:03:45.960 --> 01:03:49.960
And be sure to use the promo code talkpython, all one word.


01:03:49.960 --> 01:03:51.260
Want to level up your Python?


01:03:51.260 --> 01:03:53.040
We have one of the largest catalogs


01:03:53.040 --> 01:03:55.400
of Python video courses over at Talk Python.


01:03:55.400 --> 01:03:57.440
Our content ranges from true beginners


01:03:57.440 --> 01:04:00.440
to deeply advanced topics like memory and async.


01:04:00.440 --> 01:04:03.120
And best of all, there's not a subscription in sight.


01:04:03.120 --> 01:04:06.160
Check it out for yourself at training.talkpython.fm.


01:04:06.160 --> 01:04:07.760
Be sure to subscribe to the show,


01:04:07.760 --> 01:04:10.760
open your favorite podcast app, and search for Python.


01:04:10.760 --> 01:04:12.120
We should be right at the top.


01:04:12.120 --> 01:04:15.000
You can also find the iTunes feed at /itunes,


01:04:15.000 --> 01:04:17.200
the Google Play feed at /play,


01:04:17.200 --> 01:04:21.200
and the Direct RSS feed at /rss on talkpython.fm.


01:04:21.200 --> 01:04:24.720
We're live streaming most of our recordings these days.


01:04:24.720 --> 01:04:25.880
If you want to be part of the show


01:04:25.880 --> 01:04:28.140
and have your comments featured on the air,


01:04:28.140 --> 01:04:30.000
be sure to subscribe to our YouTube channel


01:04:30.000 --> 01:04:33.000
at talkpython.fm/youtube.


01:04:33.000 --> 01:04:34.420
This is your host, Michael Kennedy.


01:04:34.420 --> 01:04:35.580
Thanks so much for listening.


01:04:35.580 --> 01:04:36.820
I really appreciate it.


01:04:36.820 --> 01:04:39.020
Now get out there and write some Python code.


01:04:39.020 --> 01:04:41.600
(upbeat music)


01:04:41.600 --> 01:04:44.180
(upbeat music)


01:04:44.180 --> 01:04:46.760
(upbeat music)


01:04:46.760 --> 01:04:57.760
[Music]


01:04:57.760 --> 01:05:07.760
[BLANK_AUDIO]

