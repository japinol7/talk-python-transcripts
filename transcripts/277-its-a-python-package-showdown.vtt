WEBVTT

00:00:00.140 --> 00:00:04.760
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.760 --> 00:00:10.380
This is episode 277, recorded March 28th, 2022.

00:00:10.380 --> 00:00:11.920
And I am Brian Okken.

00:00:11.920 --> 00:00:13.340
I am Michael Kennedy.

00:00:13.340 --> 00:00:14.800
And I'm Thomas Geiger.

00:00:14.800 --> 00:00:19.120
Welcome, Thomas. Welcome to the show. Thanks for coming on and being a guest.

00:00:19.120 --> 00:00:21.700
Can you tell us a little bit about you?

00:00:21.700 --> 00:00:25.600
Thanks, Brian. And thanks, Michael. Big fan, so it's an honor being here.

00:00:26.060 --> 00:00:31.620
I'm the creator and maintainer of the PyPro Task Runner, which it so happens you discussed last week.

00:00:31.620 --> 00:00:34.720
So I come in riding on AtWave.

00:00:34.720 --> 00:00:36.280
Yeah.

00:00:36.280 --> 00:00:39.080
Yeah, very cool projects. Congrats on it.

00:00:39.080 --> 00:00:39.740
Thank you very much.

00:00:39.740 --> 00:00:42.380
Well, so, Michael, it's March.

00:00:42.380 --> 00:00:46.000
It is March. It's like March Madness, right?

00:00:46.000 --> 00:00:46.580
Yeah.

00:00:46.580 --> 00:00:52.680
So Chris May sent in this thing that says, hey, Python Bytes people, here's a fun thing to cover.

00:00:52.680 --> 00:00:54.820
For March Madness, but for Python.

00:00:54.820 --> 00:01:05.340
And for those of you who are not college basketball fans and follow it carefully, March Madness is basically the playoffs for the college basketball.

00:01:05.340 --> 00:01:07.100
And it's single elimination.

00:01:07.100 --> 00:01:09.540
You start with 16, I think.

00:01:09.540 --> 00:01:11.680
And then every team plays another one.

00:01:11.680 --> 00:01:13.220
Then it's down to eight, then down to four, and so on.

00:01:13.220 --> 00:01:15.380
So that's the idea, but for Python.

00:01:15.380 --> 00:01:16.020
Oh.

00:01:16.380 --> 00:01:17.440
And check it here.

00:01:17.440 --> 00:01:18.380
We have round one.

00:01:18.380 --> 00:01:21.420
I guess it starts with 32 and then 16 and so on.

00:01:21.420 --> 00:01:23.280
So we've got these different rounds.

00:01:23.280 --> 00:01:28.960
And some of the rounds have already occurred, but the winner, the champion, is still yet to be crowned.

00:01:28.960 --> 00:01:31.280
So you all need to get out there and vote.

00:01:31.280 --> 00:01:32.480
I'll tell you how in a second.

00:01:32.480 --> 00:01:35.720
A bit amazed NumPy is outdoing pytest there.

00:01:37.220 --> 00:01:39.040
It's outdoing it pretty handily.

00:01:39.040 --> 00:01:40.460
I mean, it did outdo it, right?

00:01:40.460 --> 00:01:43.580
So if you go here, what you see is this tournament bracket.

00:01:43.580 --> 00:01:46.220
And the first ones were like NumPy versus Redis.

00:01:46.220 --> 00:01:48.780
And NumPy won.

00:01:48.780 --> 00:01:52.580
And then pytest versus LXML, Parser.

00:01:52.580 --> 00:01:54.260
And pytest won that one handily.

00:01:54.260 --> 00:01:58.360
And then NumPy and pytest had to face off.

00:01:58.660 --> 00:02:04.620
And as Thomas said, surprisingly, NumPy pretty badly beat up on pytest.

00:02:04.620 --> 00:02:06.060
Brian, are you okay with this?

00:02:06.060 --> 00:02:06.560
How are you feeling?

00:02:06.560 --> 00:02:10.060
I didn't get to vote, so I'm not sure how this was done.

00:02:10.060 --> 00:02:10.900
Yeah.

00:02:10.900 --> 00:02:16.000
This is going to be the start of a long blood feud between the NumPy community and pytest.

00:02:16.000 --> 00:02:23.260
Well, and the other part of this story I'm telling, the other side of the bracket was Psykit-learn versus Beautiful Soup.

00:02:23.260 --> 00:02:26.320
And Beautiful Soup, oh my gosh, I think it was a buzzer beater.

00:02:26.440 --> 00:02:31.260
It came in at the last second, and it's like 52% to 48%, Beautiful Soup won.

00:02:31.260 --> 00:02:35.440
And so now this week, we're in the Elite Eight.

00:02:35.440 --> 00:02:37.780
And so you can come and vote.

00:02:37.780 --> 00:02:38.380
I'm going to vote.

00:02:38.380 --> 00:02:43.520
Like my metric here is sort of how useful and how impactful is this thing?

00:02:43.520 --> 00:02:44.880
Not necessarily do I like it better.

00:02:44.880 --> 00:02:46.360
So I'm going to vote over here.

00:02:46.360 --> 00:02:48.980
I'm going to say for NumPy versus Beautiful Soup, NumPy.

00:02:48.980 --> 00:02:53.140
I actually would use Beautiful Soup probably more, but I think NumPy is more impactful.

00:02:53.140 --> 00:02:56.180
Pip versus Matplotlib, I'll pip all day long.

00:02:56.620 --> 00:02:57.200
Same reason.

00:02:57.200 --> 00:02:58.860
Pandas versus Docker.

00:02:58.860 --> 00:02:59.860
Ooh.

00:02:59.860 --> 00:03:01.780
Ooh, I do like me some Docker.

00:03:01.780 --> 00:03:02.640
I'm going with Pandas.

00:03:02.640 --> 00:03:04.520
And then Wheel versus Request.

00:03:04.520 --> 00:03:05.420
I'm going to go with Request.

00:03:05.420 --> 00:03:09.780
I know Wheel is important under the covers, but I don't see it, so I don't want to think about it.

00:03:09.780 --> 00:03:10.820
So Request, top of mind.

00:03:10.820 --> 00:03:11.380
I use that all the time.

00:03:11.680 --> 00:03:17.180
So here you can see I voted, and everyone else who would like to can just click the link in the show notes, and you can vote too.

00:03:17.180 --> 00:03:22.360
And these are basically open for a week, and then the elimination happens, and it moves on.

00:03:22.360 --> 00:03:24.320
So we're going to see what happens in the final four.

00:03:24.320 --> 00:03:25.960
Coming real soon, actually.

00:03:26.360 --> 00:03:34.000
Okay, we're going to have to highlight this earlier in the month next year so that people can vote.

00:03:34.000 --> 00:03:37.960
You want to create some voting blocks like in the reality TV shows.

00:03:37.960 --> 00:03:39.520
The one on the island?

00:03:39.520 --> 00:03:40.380
Survivor?

00:03:41.040 --> 00:03:42.240
Yeah, Survivor, exactly.

00:03:42.240 --> 00:03:47.800
Oh, you know, I'm sad to say Scikit Learn's torch has been extinguished.

00:03:47.800 --> 00:03:48.280
Oh, no.

00:03:48.280 --> 00:03:49.820
You're going to have to leave the island.

00:03:49.820 --> 00:03:50.780
Yes, that's right.

00:03:50.780 --> 00:03:53.660
Anyway, thank you, Chris, for sending this in.

00:03:53.660 --> 00:03:57.100
This is fun, and it's very low stakes.

00:03:57.100 --> 00:04:00.160
It's just sort of, you know, people just enjoy this for what it is.

00:04:00.160 --> 00:04:01.660
Yeah, bragging rights and whatnot.

00:04:01.660 --> 00:04:06.020
So we'll send out a tweet or something about it.

00:04:06.020 --> 00:04:07.440
You can get in there and check this out.

00:04:07.440 --> 00:04:08.520
Definitely.

00:04:08.520 --> 00:04:10.020
Yeah.

00:04:10.020 --> 00:04:10.600
How about you, Brian?

00:04:10.780 --> 00:04:11.420
What's your next one?

00:04:11.420 --> 00:04:16.420
I'd like to talk about NB Preview, which actually I thought we covered, but I couldn't find it anywhere.

00:04:16.420 --> 00:04:22.580
So NB Preview is a notebook previewer, so IPython or Jupyter notebook.

00:04:22.580 --> 00:04:26.400
And it's kind of neat.

00:04:26.400 --> 00:04:30.080
It's a command line thing, and I like to spend a lot of time on the command line.

00:04:30.080 --> 00:04:38.000
So you just, once you pip install it, or since it's not really part of your project, I used pipx.

00:04:38.000 --> 00:04:39.340
pipx installed this.

00:04:40.200 --> 00:04:40.440
Oh, yeah.

00:04:40.440 --> 00:04:56.600
But it's so you say NB Preview, and then you can give it some options, but then a notebook file name, and it will, it just previews your notebook in ASCII, which is awesome.

00:04:57.880 --> 00:04:59.600
But it's not just ASCII.

00:04:59.600 --> 00:05:00.200
It's rich.

00:05:00.200 --> 00:05:04.300
So we've got colors and nice colors and tables and stuff.

00:05:04.300 --> 00:05:07.360
There's actually quite a few features that I want to run down.

00:05:07.360 --> 00:05:13.120
One of the things I loved right away was it's not just a file.

00:05:13.200 --> 00:05:19.820
I tried it out on some local files, but you can give it like a URL or something.

00:05:19.820 --> 00:05:22.700
There's a great way to, you can get a whole bunch of stuff.

00:05:22.700 --> 00:05:25.360
You don't have to have local notebook files to put it in.

00:05:25.360 --> 00:05:25.940
Oh, that's cool.

00:05:26.980 --> 00:05:27.540
Yeah.

00:05:27.540 --> 00:05:27.900
Yeah.

00:05:27.900 --> 00:05:27.900
Yeah.

00:05:27.900 --> 00:05:28.100
Yeah.

00:05:28.100 --> 00:05:28.700
Yeah.

00:05:28.700 --> 00:05:28.900
Yeah.

00:05:28.900 --> 00:05:32.340
It's showing even you can curl something and pipe it to it.

00:05:32.340 --> 00:05:34.180
So it'll take inputs as pipes.

00:05:34.320 --> 00:05:40.500
And the fact that it's a command line tool and it deals with pipes correctly is what I really like about it.

00:05:40.500 --> 00:05:42.180
So you can pipe a notebook to it.

00:05:42.180 --> 00:05:45.520
I don't know if you do that or not, but you might want to pipe output.

00:05:45.520 --> 00:05:54.400
So by default, you get these nice colors, but if you pipe it to an output, you can pipe it to grep or something and you can grep for things.

00:05:54.400 --> 00:05:56.520
So this is kind of great.

00:05:56.520 --> 00:06:02.260
I don't know if you've ever tried to grep for something in a notebook, but there's a lot of junk around it.

00:06:02.380 --> 00:06:06.740
There's a lot of formatting stuff that, and if that's not really what you're looking for, it's not helpful.

00:06:06.740 --> 00:06:08.820
So be having this tool to strip that out.

00:06:08.820 --> 00:06:09.500
It's pretty nice.

00:06:09.500 --> 00:06:10.200
Oh yeah.

00:06:10.200 --> 00:06:11.040
That's really nice.

00:06:11.040 --> 00:06:13.500
I love the ability to just pull this up and view them.

00:06:13.500 --> 00:06:18.200
And given that it's based on rich, like it has formatting for all the cells.

00:06:18.200 --> 00:06:24.840
I mean, Jupyter is like markdown plus code and rich as rich highlighting for both of those.

00:06:24.840 --> 00:06:25.280
So that's cool.

00:06:25.280 --> 00:06:25.500
Yeah.

00:06:25.500 --> 00:06:29.620
It looks like it's got some pigments under the hood also, which happens.

00:06:29.620 --> 00:06:31.220
Ian brought up last week, I think.

00:06:31.700 --> 00:06:32.560
Yeah, exactly.

00:06:32.560 --> 00:06:34.920
So a lot of continuations said this week.

00:06:34.920 --> 00:06:37.860
So a lot of cool stuff that you would expect, like code highlighting and stuff.

00:06:37.860 --> 00:06:44.600
But the thing that like really stood out to me is what does it do with images like graphs and stuff?

00:06:44.600 --> 00:06:46.660
And the images are kind of amazing.

00:06:46.660 --> 00:06:58.240
They're like these, by default, these block things, which not that clear to use for utilities, but it kind of shows you what it's going to do.

00:06:58.240 --> 00:07:00.000
And there's a few options.

00:07:00.180 --> 00:07:04.720
You can do this block level thing.

00:07:04.720 --> 00:07:06.700
And I like the characters.

00:07:06.700 --> 00:07:10.580
So it does like the ASCII art stuff of your images.

00:07:10.580 --> 00:07:14.000
Or it uses the Braille stuff.

00:07:14.000 --> 00:07:21.040
I don't know if there's an example here, but you can do Braille for all the dots to show up, which is kind of neat.

00:07:21.040 --> 00:07:23.720
It even does like cool data frame rendering.

00:07:23.720 --> 00:07:31.200
So if you've got a data frame printed out there in your notebook, it will format it nicely.

00:07:31.200 --> 00:07:36.540
So even LaTeX is formatted, which is kind of a surprise.

00:07:36.540 --> 00:07:37.580
I didn't expect that.

00:07:37.580 --> 00:07:38.760
So that's kind of neat.

00:07:39.640 --> 00:07:44.080
Anyway, I specifically, oh, cool, hyperlinks too.

00:07:44.080 --> 00:07:46.340
So you can click on HTML that's in there.

00:07:46.340 --> 00:07:47.020
That's kind of neat.

00:07:47.020 --> 00:07:54.560
The thing that I really like that is the simple part, though, is to be able to strip stuff and pipe it to grip and things like that.

00:07:54.560 --> 00:07:55.660
So this is handy.

00:07:55.660 --> 00:07:57.160
Nice.

00:07:57.160 --> 00:07:58.360
Thomas, what do you think?

00:07:58.360 --> 00:07:59.840
Oh, this is great.

00:08:00.720 --> 00:08:03.700
I don't really use notebooks all that much, to be honest with you.

00:08:03.700 --> 00:08:04.980
So it's a little bit lost on me.

00:08:04.980 --> 00:08:07.700
But more command line is absolutely good.

00:08:07.700 --> 00:08:10.060
And it looks delicious.

00:08:10.060 --> 00:08:12.280
Yeah, it does.

00:08:12.280 --> 00:08:18.380
It's the terminal, the TUIs, the terminal user interfaces are definitely coming on strong these days.

00:08:18.380 --> 00:08:20.600
We forgot to ask you, what kind of Python do you do?

00:08:20.600 --> 00:08:22.220
What's your flavor of Python?

00:08:22.220 --> 00:08:23.960
Are you building APIs?

00:08:23.960 --> 00:08:25.800
Are you doing data science?

00:08:25.800 --> 00:08:26.460
What kind?

00:08:26.460 --> 00:08:29.940
Well, the Piper project is what consumes most of my hours.

00:08:29.940 --> 00:08:34.760
So I guess that's normal-ish Python as opposed to notebook-ish Python.

00:08:34.760 --> 00:08:39.980
Data science, I don't really do too much either.

00:08:39.980 --> 00:08:44.100
So it's mostly traditional style Python programming.

00:08:44.100 --> 00:08:45.280
Yeah, got it.

00:08:45.280 --> 00:08:45.900
All right.

00:08:45.900 --> 00:08:47.120
Well, your topic is up next.

00:08:47.120 --> 00:08:47.660
Tell us about it.

00:08:47.660 --> 00:08:50.680
Well, funnily enough, this is very traditional programming.

00:08:50.680 --> 00:08:55.660
What I bring for you for your delectation is PyFakeFS.

00:08:55.660 --> 00:09:02.120
Which I think is a sadly relatively unknown open source library.

00:09:02.120 --> 00:09:06.080
And I'd like to give them some props and recognition because I think it's amazing.

00:09:06.080 --> 00:09:09.860
And it's made a huge difference to me and my own code and the Piper project.

00:09:09.860 --> 00:09:12.380
So hopefully this helps out some other people.

00:09:12.380 --> 00:09:16.400
Now, what it is, is a fake file system.

00:09:16.880 --> 00:09:22.880
So in a nutshell, it intercepts all calls from Python to the actual file system.

00:09:22.880 --> 00:09:36.100
So if you think of the open function, the built-in open, that is, or shutil or pathlib, all of those that might have real-world side effects in terms of the disk, the fake file system will intercept these.

00:09:36.100 --> 00:09:38.100
And this is completely transparent.

00:09:38.100 --> 00:09:42.280
And which is to say that your functional code doesn't need to know about this.

00:09:42.280 --> 00:09:52.400
So the patching happens without you needing to inject something or without you needing to go and alter your actual code to take countenance of the system.

00:09:52.400 --> 00:10:01.640
Now, what's great about this is the moment you start talking about testing a file system, you're almost by definition in integration testing or functional testing terrain.

00:10:01.640 --> 00:10:06.120
Like it's not a unit test anymore, which comes with its own disadvantages.

00:10:06.120 --> 00:10:12.000
So if you do want a unit test, then let's consider a simplistic example, right?

00:10:12.000 --> 00:10:16.440
If you want to, if your, the code under test writes an output file.

00:10:16.440 --> 00:10:21.780
So first of all, you need to patch out that if you're in your unit testing framework with something like mock open.

00:10:21.780 --> 00:10:32.440
But secondly, you probably have a pathlib in there somewhere where you're either creating the parent directories for the path to check that they exist before you try and write to that location.

00:10:32.440 --> 00:10:34.920
So now we already have two things we have to patch out.

00:10:34.920 --> 00:10:38.980
And then on top of that, you might be doing in it in a loop.

00:10:38.980 --> 00:10:40.980
You might be writing more than one file.

00:10:41.400 --> 00:10:43.340
And the testing becomes very clumsy very quickly.

00:10:43.340 --> 00:10:53.540
Whereas once you use the PyFaFS library, you can just write as normal, validate against that file system using the standard Python inputs.

00:10:53.540 --> 00:11:00.840
And what you end up with is, and once the test finishes, it all just goes out of scope and you don't even need to bother cleaning it up.

00:11:00.840 --> 00:11:02.340
Yeah, that's cool.

00:11:02.400 --> 00:11:05.140
And you can specify the string that is the content to the file.

00:11:05.140 --> 00:11:08.580
So when the thing reads it, you can control the, what it sees, right?

00:11:08.580 --> 00:11:11.440
So it comes with a, and Brian, you're going to love this.

00:11:11.440 --> 00:11:14.320
It comes with a super handy pytest fixture.

00:11:15.040 --> 00:11:21.260
So if you are using pytest, which you should, you can just add the FS fixture to your unit test.

00:11:21.500 --> 00:11:29.640
And now everything in your unit test will be going to the fake file system rather than the real underlying fake file system.

00:11:29.640 --> 00:11:31.200
That's pretty cool.

00:11:31.720 --> 00:11:31.980
Yeah.

00:11:31.980 --> 00:11:38.900
And the helper functions allows you, like you were hinting at, Mike, you can specify encodings, you can write in binary.

00:11:38.900 --> 00:11:40.400
It's super useful.

00:11:40.400 --> 00:11:52.000
Something else that I use quite a lot is the ability to switch between Linux, Mac, and Windows file systems, which again, for PyPer is such a boon to be able to test the cross-platform compatibility.

00:11:52.240 --> 00:11:52.740
Oh, interesting.

00:11:52.740 --> 00:11:59.320
So if it asks for, like, the representation from a pathlib thing, it'll do c colon backslash instead of forward slash.

00:11:59.320 --> 00:12:00.720
Yeah, exactly right.

00:12:00.720 --> 00:12:14.320
So all of these things are, you know, like, I'm relatively conservative when it comes to pulling in new libraries because I'm, especially if the library feels heavy and I feel I can do it just using standard lib functionality.

00:12:14.320 --> 00:12:20.320
And also with some libraries, I'm a little bit worried that they might stop being maintained or something like that.

00:12:20.880 --> 00:12:25.820
But PyFakeFS has been around since 2006, developed by Google.

00:12:25.820 --> 00:12:28.400
It was open sourced in 2011.

00:12:28.400 --> 00:12:30.820
The maintainers are really on it.

00:12:30.820 --> 00:12:40.360
I submitted and had a PR merged earlier this year within an afternoon on a Saturday, which for open source is very quick.

00:12:40.360 --> 00:12:42.140
So they're on top of it.

00:12:42.140 --> 00:12:43.640
Great project.

00:12:43.640 --> 00:12:44.460
Check it out on GitHub.

00:12:44.460 --> 00:12:46.480
Check out the documentation, too.

00:12:46.480 --> 00:12:47.240
It's well documented.

00:12:47.240 --> 00:12:49.460
And it's super useful.

00:12:49.520 --> 00:12:51.280
And I was looking at the toxinny.

00:12:51.280 --> 00:12:55.580
It looks like it's tested to be compatible with PyPy also, which is kind of nice.

00:12:55.580 --> 00:12:56.200
Yeah.

00:12:56.200 --> 00:12:57.400
Yeah, absolutely.

00:12:57.400 --> 00:13:05.340
Especially for what I'm doing in Piper, where wrangling configuration files is a lot of the functionality as a task runner.

00:13:05.620 --> 00:13:16.140
You're forever reading JSON, writing out YAML, converting between formats, converting between encodings, swapping out values inside configuration files, merging configuration files.

00:13:16.840 --> 00:13:25.780
And I'm now able to test all of this stuff without having to write integration tests for each and every permutation, which has been such a boon.

00:13:25.780 --> 00:13:28.480
This actually does way more than I thought it did.

00:13:28.480 --> 00:13:30.200
This is I'm going to check this out.

00:13:30.200 --> 00:13:30.700
This is neat.

00:13:31.080 --> 00:13:32.460
Yeah, there's a lot of cool stuff there.

00:13:32.460 --> 00:13:32.940
Absolutely.

00:13:32.940 --> 00:13:34.200
And yeah.

00:13:34.200 --> 00:13:39.600
And also, if you've Chris and Alvaro both think pretty, pretty neat out there.

00:13:39.600 --> 00:13:40.400
They're digging it.

00:13:40.520 --> 00:13:40.680
Yeah.

00:13:40.680 --> 00:13:42.380
And I see the comment there.

00:13:42.380 --> 00:13:48.660
It is like temp path with the difference that it's not actually writing to the desk itself, of course.

00:13:48.660 --> 00:13:58.480
And what's also a little bit difficult when you're using the temp directory and the temp file modules is depending on how you're testing, it doesn't always help you very much.

00:13:58.480 --> 00:14:02.260
Because the thing that might be generating the file might be the code under test.

00:14:02.260 --> 00:14:07.380
So you're effectively going to have to intercept that and create a temp file to attach to it.

00:14:07.380 --> 00:14:09.240
And then the temple will clean itself up.

00:14:09.860 --> 00:14:17.820
But that starts interrupting the flow of the functional code so much that I start questioning whether it's even a useful unit test anymore.

00:14:17.820 --> 00:14:19.540
Yeah, absolutely.

00:14:19.540 --> 00:14:20.900
Well, very, very cool.

00:14:20.900 --> 00:14:24.660
So, Brian, before we move on, let me tell you about our sponsor, all right?

00:14:24.660 --> 00:14:25.300
All right.

00:14:25.300 --> 00:14:30.660
This episode of Python Bytes is brought to you by Microsoft for Startups Founders Hub.

00:14:30.660 --> 00:14:32.660
Starting a business is hard.

00:14:32.660 --> 00:14:37.580
By some estimates, over 90% of startups will go out of business in just their first year.

00:14:38.140 --> 00:14:46.960
With that in mind, Microsoft for Startups set out to understand what startups need to be successful and to create a digital platform to help them overcome those challenges.

00:14:46.960 --> 00:14:49.660
Microsoft for Startups Founders Hub was born.

00:14:49.660 --> 00:14:56.320
Founders Hub provides all founders at any stage with free resources to solve their startup challenges.

00:14:56.820 --> 00:15:04.920
The platform provides technology benefits, access to expert guidance and skilled resources, mentorship and networking connections, and much more.

00:15:04.920 --> 00:15:14.340
Unlike others in the industry, Microsoft for Startups Founders Hub doesn't require startups to be investor-backed or third-party validated to participate.

00:15:14.340 --> 00:15:17.040
Founders Hub is truly open to all.

00:15:17.380 --> 00:15:18.520
So, what do you get if you join them?

00:15:18.520 --> 00:15:26.820
You speed up your development with free access to GitHub and Microsoft Cloud computing resources and the ability to unlock more credits over time.

00:15:26.820 --> 00:15:36.520
To help your startup innovate, Founders Hub is partnering with innovative companies like OpenAI, a global leader in AI research and development, to provide exclusive benefits and discounts.

00:15:36.520 --> 00:15:41.680
Through Microsoft for Startups Founders Hub, becoming a founder is no longer about who you know.

00:15:41.680 --> 00:15:55.220
You'll have access to their mentorship network, giving you a pool of hundreds of mentors across a range of disciplines and areas like idea validation, fundraising, management and coaching, sales and marketing, as well as specific technical stress points.

00:15:55.340 --> 00:16:00.500
You'll be able to book a one-on-one meeting with the mentors, many of whom are former founders themselves.

00:16:00.500 --> 00:16:05.580
Make your idea a reality today with the critical support you'll get from Founders Hub.

00:16:05.580 --> 00:16:12.000
To join the program, just visit pythonbytes.fm/foundershub, all one word, no links in your show notes.

00:16:12.000 --> 00:16:14.220
Thank you to Microsoft for supporting the show.

00:16:14.220 --> 00:16:15.000
Awesome.

00:16:15.000 --> 00:16:15.780
Thank you, Microsoft.

00:16:15.780 --> 00:16:24.280
Now, let me tell you about something that sounds incredibly simple, but as you kind of unwind it, you're like, wait, it does that too?

00:16:24.280 --> 00:16:25.320
Oh, it does that too?

00:16:25.320 --> 00:16:26.240
Oh, that's kind of cool.

00:16:26.240 --> 00:16:30.420
It's pretty similar to the fake file system that Thomas was just telling us about.

00:16:30.420 --> 00:16:32.260
This thing called sternum.

00:16:32.260 --> 00:16:35.480
Sternum is a fantastic name.

00:16:35.480 --> 00:16:38.160
It's short for string enum, right?

00:16:38.160 --> 00:16:40.220
Enums, when were enums added?

00:16:40.220 --> 00:16:42.440
Was that three, four, something like that?

00:16:42.440 --> 00:16:43.560
A little while ago.

00:16:43.560 --> 00:16:51.260
So enums have been in Python for a while, pretty much prehistory now that those are no longer supported.

00:16:51.260 --> 00:16:57.320
And with enums, you can write cool code that says this class, its fields are enumerations.

00:16:57.320 --> 00:17:01.120
And then you can say, you know, enum type dot enum value.

00:17:01.120 --> 00:17:03.640
And you can use that instead of magic words.

00:17:03.640 --> 00:17:08.580
So for example, you might have HTTP method or something like that.

00:17:08.580 --> 00:17:10.120
Or let's say HTTP status.

00:17:10.120 --> 00:17:12.920
Start with that one because that's like a built-in type thing you could do easily.

00:17:13.140 --> 00:17:20.100
You could have a 200, a 201, a 400, a 500, a 404, those kinds of things.

00:17:20.100 --> 00:17:24.920
So you could have like HTTP statuses dot and then those types with those numbers, right?

00:17:24.920 --> 00:17:27.640
But there's a couple of challenges to working with those.

00:17:27.640 --> 00:17:32.820
Their natural representation is a number, not a string.

00:17:33.040 --> 00:17:37.080
And I know you can derive from enum and then also derive from string.

00:17:37.080 --> 00:17:39.780
But like I said, more stuff happening than just that.

00:17:39.780 --> 00:17:48.020
So this sternum allows you to create enums like that and use the enum auto, enum dot auto field.

00:17:48.020 --> 00:17:52.340
So I can say, here's an HTTP method with like verbs is really probably what it should be.

00:17:52.980 --> 00:17:55.440
So you can have a get, you can have a head and a post and a put.

00:17:55.440 --> 00:17:56.900
And you just say auto, auto, auto, auto.

00:17:56.900 --> 00:18:02.420
But the actual representation is that the get is a string get.

00:18:02.420 --> 00:18:09.300
And the like put one or post is, you know, put or post.

00:18:09.300 --> 00:18:09.940
Yeah.

00:18:09.940 --> 00:18:15.220
And Alvaro is out there pointing out, thank you, that sternum was temporarily part of 310, but that it was dropped.

00:18:15.220 --> 00:18:16.580
So there was...

00:18:16.580 --> 00:18:19.080
I saw a note that it might be included in 311 again.

00:18:19.080 --> 00:18:19.780
Okay.

00:18:19.780 --> 00:18:20.680
That'd be fantastic.

00:18:20.680 --> 00:18:21.260
It would be.

00:18:21.260 --> 00:18:21.960
Yeah.

00:18:21.960 --> 00:18:23.480
So there's some really neat stuff in here.

00:18:23.480 --> 00:18:28.720
For example, one of the things that's nice is because this thing basically has the value string,

00:18:28.720 --> 00:18:33.480
where you're using it, you can actually use it where a string would be accepted.

00:18:33.480 --> 00:18:37.260
So here, if you're doing a request to a URL and you've got to say method equals,

00:18:37.260 --> 00:18:42.000
here you can say method equals HTTP method dot head or whatever from the enum.

00:18:42.000 --> 00:18:45.560
And it directly passes just the string head to the method.

00:18:45.560 --> 00:18:51.460
So it's a really nice way to like gather up string values that are like part of a group, right?

00:18:51.460 --> 00:18:53.720
Like HTTP verbs or something like that.

00:18:53.720 --> 00:18:54.240
Wow.

00:18:54.240 --> 00:18:55.660
So that's pretty neat.

00:18:55.660 --> 00:18:56.040
Okay.

00:18:56.040 --> 00:18:59.880
The side question is, I don't really use auto much.

00:18:59.880 --> 00:19:03.140
Is auto used anywhere else or is auto just an enum?

00:19:03.140 --> 00:19:04.820
It comes out of the enum module.

00:19:04.820 --> 00:19:05.100
Okay.

00:19:05.100 --> 00:19:06.420
So it's part of this.

00:19:06.540 --> 00:19:08.560
So it's part of the enum thing.

00:19:08.560 --> 00:19:08.800
Right.

00:19:09.260 --> 00:19:14.120
And one of the things I really like about this that is super tricky with enums is databases.

00:19:14.120 --> 00:19:22.520
So for example, imagine we had, we had like get head and post and we just had auto, but it was an integer based one.

00:19:22.520 --> 00:19:23.580
So it was like one, two, three.

00:19:24.300 --> 00:19:26.320
And we store it in the database, right?

00:19:26.320 --> 00:19:28.240
As a one or two or three, and then you parse it back.

00:19:28.240 --> 00:19:28.520
Fine.

00:19:28.520 --> 00:19:34.060
But then somebody adds another auto thing in there and they don't put it at the end.

00:19:34.060 --> 00:19:35.740
They're like, oh, this one starts with a D.

00:19:35.740 --> 00:19:36.880
So it goes after delete.

00:19:36.880 --> 00:19:37.500
Yeah.

00:19:37.720 --> 00:19:42.740
Well, all the stuff after that one is now off by one in the database, right?

00:19:42.740 --> 00:19:43.740
Like do this.

00:19:43.740 --> 00:19:47.260
If it goes into the database, it goes in as a string and it'll parse back as the string.

00:19:47.260 --> 00:19:53.220
It also has cool stuff like lowercase sternum and uppercase string enum.

00:19:53.220 --> 00:19:55.180
So you can derive from that instead.

00:19:55.180 --> 00:20:01.640
And then no matter how you define your field, you get a lowercase string version or an uppercase string version.

00:20:01.640 --> 00:20:02.300
Okay.

00:20:02.300 --> 00:20:04.740
And there's, there's other cases as well.

00:20:04.920 --> 00:20:10.280
There's pascal case, snake case, kebab case, macro case, and camel case.

00:20:10.280 --> 00:20:10.480
Woo!

00:20:10.480 --> 00:20:12.060
Go crazy on them, people.

00:20:12.060 --> 00:20:17.340
And you can have the same code, but then like the string representation varies.

00:20:17.340 --> 00:20:19.420
So that's, that's pretty awesome.

00:20:19.420 --> 00:20:22.560
I think I'm going to go with kebab case just because that's fun to say.

00:20:22.560 --> 00:20:23.620
It's so fun.

00:20:23.620 --> 00:20:23.960
I know.

00:20:23.960 --> 00:20:29.240
And then, yeah, you can also directly assign the value.

00:20:29.240 --> 00:20:33.700
So, you know, enum value equals some string and then it like, right.

00:20:33.780 --> 00:20:34.860
You don't have to worry about a casing.

00:20:34.860 --> 00:20:36.240
It's exactly the string that you put.

00:20:36.240 --> 00:20:37.240
Right.

00:20:37.240 --> 00:20:39.180
So there it is.

00:20:39.180 --> 00:20:41.620
It's like regular enum, but strings.

00:20:41.620 --> 00:20:47.840
And as people pointed out that it's, it's not that different from what people have been considering for CPython.

00:20:47.840 --> 00:20:53.140
I'm pretty sure I'd heard about it as well in being in there, but the fact that it's not there, maybe it'll be there.

00:20:53.140 --> 00:20:53.620
Maybe not.

00:20:53.620 --> 00:20:54.040
We'll see.

00:20:54.040 --> 00:20:54.660
It's interesting.

00:20:54.660 --> 00:20:56.060
But this has a lot of cool features.

00:20:56.060 --> 00:21:01.380
And if you're not using 3.11 or want to depend upon it, you know, this is a small little project.

00:21:01.380 --> 00:21:02.000
Yeah.

00:21:02.000 --> 00:21:02.860
It's nice.

00:21:02.860 --> 00:21:03.520
Cool.

00:21:03.520 --> 00:21:03.720
Yeah.

00:21:03.720 --> 00:21:04.900
Thomas, what do you think?

00:21:04.900 --> 00:21:06.480
This is great.

00:21:06.480 --> 00:21:18.800
I especially like how you can, how it auto, it's smart enough to autocast so that where you use the enum, it just, it's, it will end up translating to a string when you're actually hitting the database or your underlying API.

00:21:18.800 --> 00:21:18.920
Yeah.

00:21:18.920 --> 00:21:19.800
Yeah.

00:21:19.800 --> 00:21:22.600
It makes it actually usable in those situations just directly.

00:21:22.600 --> 00:21:23.140
Yeah.

00:21:23.140 --> 00:21:24.320
Which I think is, is great.

00:21:24.320 --> 00:21:33.560
And funnily enough, the example they chose is so great by way of great documentation because HTTP verbs are just almost the, the example of magic strings.

00:21:33.560 --> 00:21:33.840
Right.

00:21:33.840 --> 00:21:35.380
Yeah, exactly.

00:21:35.380 --> 00:21:36.120
Exactly.

00:21:36.120 --> 00:21:36.740
Yeah.

00:21:36.740 --> 00:21:37.460
Quite cool.

00:21:37.460 --> 00:21:38.580
All right.

00:21:38.580 --> 00:21:39.680
Ryan, over to you.

00:21:39.680 --> 00:21:41.780
I'd like to review your code a little bit.

00:21:41.780 --> 00:21:42.260
No.

00:21:42.260 --> 00:21:44.520
I don't know.

00:21:44.520 --> 00:21:48.780
I was trying to do a transition thing on, but so Tim Hopper wrote this, this, this, this,

00:21:48.780 --> 00:21:50.500
this article, which I absolutely love.

00:21:50.500 --> 00:21:54.600
And it's called the code review guidelines for data science teams.

00:21:54.600 --> 00:21:57.900
And I just recommend it really go read it.

00:21:57.900 --> 00:21:59.080
It's, it's short.

00:21:59.080 --> 00:21:59.540
It's good.

00:21:59.540 --> 00:22:13.420
But one of the things I really like that he highlighted is before he got into code, the code review or the code review guidelines, he, he started with, why are we doing a code review?

00:22:13.700 --> 00:22:15.160
What is a code review for?

00:22:15.160 --> 00:22:25.860
And, and this is something that I think that is important just to talk with whoever, whatever team is going on and talking, maybe even sticking it in a, a, a participation guideline.

00:22:26.540 --> 00:22:28.260
In a project, open source project.

00:22:28.260 --> 00:22:42.340
And that's, that's what we think about is making sure the code's correct.

00:22:42.760 --> 00:22:46.840
But also code familiar, familiarity.

00:22:46.840 --> 00:22:52.380
So you might be the expert on a project and everybody else is only kind of new on it.

00:22:52.480 --> 00:23:02.100
You still should have code reviews for your code changes so that everybody else can, you know, watch also and, and, and get familiar with the changes going on.

00:23:02.100 --> 00:23:03.340
So that's nice.

00:23:03.340 --> 00:23:10.720
Design feedback, of course, and mutual learning and regression protection are all things, reasons why he did a code review.

00:23:11.140 --> 00:23:17.060
And, and what, the other, the other thing I also love is what to leave out of code review.

00:23:17.060 --> 00:23:22.160
So code reviews are not about trying to impose your guidelines on somebody else.

00:23:22.160 --> 00:23:29.120
Um, and they're, or, and they're also not a reason to, to push off responsibility.

00:23:29.120 --> 00:23:31.780
So as long as your code's getting reviewed, it doesn't have to be correct.

00:23:31.780 --> 00:23:32.060
Right.

00:23:32.060 --> 00:23:34.580
Cause everybody, somebody will catch any problems.

00:23:34.580 --> 00:23:36.540
It's a bad thing to do in a code review.

00:23:36.540 --> 00:23:39.120
So, make sure your code's correct.

00:23:39.120 --> 00:23:46.940
That as far, it's all cleaned up as soon as you, what you think is it's ready and then submit it, but then also be nice.

00:23:46.940 --> 00:23:49.580
So, being nice is important.

00:23:49.580 --> 00:23:50.300
Yeah.

00:23:50.300 --> 00:23:50.880
Very cool.

00:23:50.880 --> 00:23:59.100
So then it goes, he goes through, I'm not going to go through all these here, but he goes through different things about, what to think about before you do it.

00:23:59.100 --> 00:24:05.000
Uh, create a pull request and then what to do if you're reviewing a pull request.

00:24:05.000 --> 00:24:11.140
And a lot of these are just, they're just around being a kind human to the person on the other end.

00:24:11.140 --> 00:24:13.840
So, that's really kind of what it's about.

00:24:13.840 --> 00:24:21.060
So I saw a mention in the summer that I really liked, which is, I mean, by nature, a code review is sort of nitpicky, right?

00:24:21.060 --> 00:24:24.900
You're paying attention to flaws, but it's nice to compliment also.

00:24:25.040 --> 00:24:29.980
Like if there's something nifty or cool or cute, acknowledge compliment, call attention to it.

00:24:29.980 --> 00:24:32.260
Oh, that's a, that's a good point.

00:24:32.260 --> 00:24:33.220
And I really liked that.

00:24:33.220 --> 00:24:42.520
I also think, so one of the things that you don't want to do in a code review is, like one of the guidelines is, is we're not looking for perfection.

00:24:43.000 --> 00:24:52.580
Uh, we're just, it, it's gotta, you know, that isn't one of the things we're looking for, but, so what happens if you notice something and you're like, it's a little weird.

00:24:52.580 --> 00:24:53.280
It does it.

00:24:53.280 --> 00:24:56.240
I'd like to say something about it, but I don't know how to say that.

00:24:56.240 --> 00:25:03.140
Um, his comment is to, to have, if you've got a minor thing that you want to comment on, go ahead and sort of tag it.

00:25:03.140 --> 00:25:07.980
He, he recommends tagging it with knit in it or a nitpick or something.

00:25:07.980 --> 00:25:15.800
Um, just to be clear that I'm, I don't know if I like the word knit, but, to be clear, Hey, I noticed this.

00:25:15.800 --> 00:25:17.520
Maybe we want to change this in the future.

00:25:17.520 --> 00:25:22.520
Somehow indicate to the person that they don't need to fix this before the PR gets merged.

00:25:22.660 --> 00:25:23.860
You're just noticed it.

00:25:23.860 --> 00:25:31.760
Um, so, and it might be something that the, the person that submitting the PR didn't realize in the first place and went, Oh yeah, I don't like that either.

00:25:31.760 --> 00:25:32.520
I'm going to fix it.

00:25:32.520 --> 00:25:34.760
Or yes, I do know about that.

00:25:34.760 --> 00:25:37.140
And I do plan on fixing it later or what, you know, whatever.

00:25:37.140 --> 00:25:40.280
So, just an interesting guideline.

00:25:40.280 --> 00:25:49.940
And, I think it can just, I'm kind of, I've been on a kick lately of reading things about community and, and creating cohesive teams.

00:25:50.220 --> 00:25:56.380
And the review process is definitely some somewhere to you need to have attention to for most teams.

00:25:56.380 --> 00:25:58.300
So anyway, that's it.

00:25:58.300 --> 00:25:58.920
Yeah.

00:25:58.920 --> 00:25:59.320
I like it.

00:25:59.320 --> 00:26:00.140
This is really handy.

00:26:00.140 --> 00:26:07.060
Um, I love the idea of having as much as possible, have the automation, make the complaints.

00:26:07.060 --> 00:26:07.620
Definitely.

00:26:07.620 --> 00:26:11.580
And like Thomas said, have the people give the compliments and the sort of interesting discussion.

00:26:11.580 --> 00:26:11.860
Right.

00:26:11.860 --> 00:26:15.740
But like if black can just take care of the formatting, like you shouldn't have to debate a formatting.

00:26:15.740 --> 00:26:16.240
Yeah.

00:26:16.240 --> 00:26:17.880
And if a lender can tell you, you know what?

00:26:17.880 --> 00:26:19.420
There's something wrong with this.

00:26:19.460 --> 00:26:21.420
It's just like, let the lender be the bad guy.

00:26:21.420 --> 00:26:21.900
Yeah.

00:26:21.900 --> 00:26:32.140
It was one of the guidelines that he brought up, which is interesting is, especially with CI and we're pushing a lot of things on black or, or linters that, to wait.

00:26:32.140 --> 00:26:33.580
So wait a little bit.

00:26:33.580 --> 00:26:41.580
So don't, don't like review a code review right away, especially not if the CI hasn't finished, let the CI finish.

00:26:41.580 --> 00:26:46.300
And let the person, creating it fix anything before you jump in.

00:26:46.300 --> 00:26:50.620
I also, that peeve of mine, don't comment on it right away.

00:26:50.620 --> 00:26:59.200
I might, one of the things I do frequently is I'll create a, a PR, especially for, in a work setting, I'll create a PR.

00:26:59.200 --> 00:27:01.700
And then I, there's some complicated things.

00:27:01.700 --> 00:27:07.000
So I plan on going through and writing some comments around some of the complicated bits.

00:27:07.000 --> 00:27:08.900
Like, why did I do certain things?

00:27:09.380 --> 00:27:17.600
And, so if you see a PR right away, especially from me, wait 10 minutes or so before commenting on it.

00:27:17.600 --> 00:27:21.020
Cause I might, I might have answered your question before you get a chance to ask it.

00:27:21.020 --> 00:27:22.820
An exclamation might be coming.

00:27:22.820 --> 00:27:23.140
Yeah.

00:27:23.140 --> 00:27:23.660
Indeed.

00:27:23.660 --> 00:27:24.400
Anyway.

00:27:24.400 --> 00:27:25.860
Awesome.

00:27:25.860 --> 00:27:27.940
All right, Thomas, how are you?

00:27:27.940 --> 00:27:32.920
We're, about to head into controversy because there's been, there's been some discord.

00:27:32.920 --> 00:27:34.640
Are you going to bash on something?

00:27:34.640 --> 00:27:35.060
Come on.

00:27:35.180 --> 00:27:39.380
You're going to bash it over the head with a, like a caveman.

00:27:39.380 --> 00:27:40.260
Bash it with Python.

00:27:40.260 --> 00:27:48.200
Uh, so partly inspired on the continuation of last week's discussion, you had about running subprocesses from Python.

00:27:48.200 --> 00:27:58.100
And, Itamar Turner-Trowing wrote an article this week called, please, please, emphasis mine, stop writing shell scripts.

00:27:58.620 --> 00:28:05.900
Now this, as you might imagine, raised a bit of questions on the usual places like Reddit and Twitter.

00:28:05.900 --> 00:28:16.760
But if nothing else, controversy aside, the article is a very good and succinct summary of the most common gotchas and problems with bash.

00:28:17.140 --> 00:28:25.500
Which we can almost all summarize as that error handling is strange if you're used to other programming languages.

00:28:25.500 --> 00:28:29.480
Like bash is a kingdom unto its own when it comes to programming languages.

00:28:30.000 --> 00:28:37.620
So he also gives a great recommendation for if you really, really have to write in bash, what you might want to do.

00:28:37.620 --> 00:28:42.400
And that would be to use the unofficial bash strict mode.

00:28:43.120 --> 00:28:47.260
Which basically involves setting that bit of boilerplate on top of your bash.

00:28:47.260 --> 00:28:53.900
Uh, I'm not going to cover all the details, but basically the E and the U option will fail immediately on error.

00:28:53.900 --> 00:28:55.560
It will fail on unset variables.

00:28:55.560 --> 00:29:00.320
And if you add the pipe file option, errors won't pass between pipes.

00:29:00.320 --> 00:29:04.580
Uh, a pipe will actually fail immediately if there's an error process.

00:29:04.580 --> 00:29:05.820
Awesome.

00:29:05.820 --> 00:29:06.420
Like it should.

00:29:06.420 --> 00:29:07.900
Like it should indeed.

00:29:08.460 --> 00:29:14.360
But the point is there's, bash is an old technology and there's a lot of problems here.

00:29:14.360 --> 00:29:25.440
And let me add, although this article mostly aims at bash, I am very happy including born and SSH and fish and take your pick underneath the same dictum.

00:29:25.440 --> 00:29:33.000
Now he goes on to talk about the typical reasons we hear of why we should be using bash.

00:29:33.140 --> 00:29:43.400
Of which the top one is, well, it's the most common, you're guaranteed to have an SSH runtime, at least on any given machine that you're going to be using.

00:29:43.400 --> 00:29:55.280
But the point is not really because when we're doing code automation, almost by definition, the programming language you're coding in its runtime is on the server.

00:29:55.780 --> 00:30:05.220
So this argument that somehow it's good to go to the lowest common denominator, AKA SH or bash, when you already have Python on the machine is sort of, well, why?

00:30:05.220 --> 00:30:12.560
And especially when we're talking about Python, which is so great at automation, it just baffles the mind.

00:30:12.560 --> 00:30:13.600
That's a good point there.

00:30:13.600 --> 00:30:16.540
You don't have to set up a compiler or any of that kind of business.

00:30:16.540 --> 00:30:17.940
I'd say the same thing about Golang.

00:30:18.080 --> 00:30:21.920
I mean, by definition, when you're compiling Go, the Go compiler is right there.

00:30:21.920 --> 00:30:26.360
You might as well be writing a Go script or whichever your programming language is.

00:30:26.360 --> 00:30:34.700
I mean, maybe if you're starting to talk about like C or C++, there's maybe a different argument that we can have there.

00:30:35.540 --> 00:30:47.480
The second point he brings up is what I'm going to paraphrase as get good, which is this bash guru response, which we saw a bit of in the last week that you're just bad at bash.

00:30:47.480 --> 00:30:54.280
Like if you were better at bash, you wouldn't be complaining about these things, which is not a great reason.

00:30:54.280 --> 00:30:59.120
It's just because it's not better because it's hard, right?

00:30:59.120 --> 00:31:01.400
We have better tools available.

00:31:01.740 --> 00:31:22.060
We have tools that behave more responsibly and something that I think is very important in line with what you've been talking about, Brian, about building teams is very often your automation activities start becoming this specialized zone that only two or three people on the team can even look at because they're the bash gurus and everyone else is too afraid to touch it.

00:31:22.060 --> 00:31:29.180
Whereas if you keep your automation activities within the language you're coding in, suddenly everyone on the team can start carrying their weight, right?

00:31:30.180 --> 00:31:33.400
Yeah, I kind of relate to this a lot.

00:31:33.400 --> 00:31:40.380
I've been on projects where we've had a lot of our automation in bash and others that have been other languages.

00:31:40.380 --> 00:31:50.780
Right now, it was one of those things, especially if you're not on a Windows environment, bash isn't there automatically.

00:31:51.620 --> 00:31:55.840
So, and a lot of the team members might not be familiar with it.

00:31:55.840 --> 00:32:10.540
So, the thing that, I don't know if he addresses this, the thing that I was thinking about was, we all know Python, if we're programming Python, but we might not all know the automation parts of it.

00:32:10.540 --> 00:32:13.840
The way to do like file manipulation or...

00:32:13.840 --> 00:32:14.080
Right.

00:32:14.460 --> 00:32:14.960
Yeah.

00:32:14.960 --> 00:32:15.100
Yeah.

00:32:15.100 --> 00:32:15.400
Yeah.

00:32:15.400 --> 00:32:15.460
Yeah.

00:32:15.460 --> 00:32:24.540
It's stuff that we might be familiar with with bash because we, if we're using it all the time on the command line, I already know how to do it.

00:32:25.340 --> 00:32:30.920
But I might not know how to do that sort of stuff in Python because I'm not using Python like that.

00:32:30.920 --> 00:32:31.800
But anyway.

00:32:31.940 --> 00:32:44.940
Well, my response to that would be that whatever the thing is that you don't know how to do in Python, your chances of running into trouble with bash are, to my mind, a lot higher than they are with Python.

00:32:45.380 --> 00:32:58.400
Or at least when things misbehave in Python, your control of flow is better so that you probably will have a, especially as the scripts start getting bigger, you will have better control over where the issues might be.

00:32:58.400 --> 00:33:03.180
Or you would be better able to isolate those areas that you're not exactly sure of.

00:33:03.800 --> 00:33:10.800
I saw someone in chat last week raise the specter of make files that call shell scripts that call make files.

00:33:10.800 --> 00:33:13.780
And I mean, this is not uncommon.

00:33:13.780 --> 00:33:15.460
I'm sure we've all seen these things.

00:33:15.460 --> 00:33:21.720
And I'm actually very interested in the psychology around this because we're all coders, right?

00:33:21.720 --> 00:33:24.700
I assume we're here because we enjoy automating things.

00:33:24.700 --> 00:33:26.200
We enjoy solving problems.

00:33:26.200 --> 00:33:33.240
We probably, you know, have a certain problem solving sort of mindset that got us into this to begin with.

00:33:33.740 --> 00:33:40.920
Yet, it seems like we spend so much time automating our customers' business processes that we forget to automate our own coding processes.

00:33:40.920 --> 00:33:43.960
Or when we do, we deallocate the priority.

00:33:43.960 --> 00:33:45.260
We de-budget it.

00:33:45.260 --> 00:33:49.660
We end up focusing on all sorts of other things other than this essential housekeeping.

00:33:49.660 --> 00:33:50.700
Yeah.

00:33:50.700 --> 00:33:55.200
Or treat it like a throwaway code instead of code that needs to be carefully factored.

00:33:55.200 --> 00:33:56.220
Exactly right.

00:33:56.220 --> 00:33:58.300
And I would argue it's a bit like housekeeping.

00:33:58.300 --> 00:33:59.960
You know, no one likes doing it.

00:33:59.960 --> 00:34:02.600
But if you don't want to live in a pigsty, you've got to do it.

00:34:02.600 --> 00:34:03.380
You know, instead.

00:34:03.680 --> 00:34:04.120
Yeah.

00:34:04.640 --> 00:34:10.980
Well, also, to be honest, I was there once of like, I don't know how to do this automation stuff in Python.

00:34:10.980 --> 00:34:13.580
But it bugged me that I didn't know how.

00:34:13.580 --> 00:34:16.720
So I'm like, okay, well, what do I need to learn?

00:34:16.820 --> 00:34:23.800
Like, the few things like searching for stuff like I normally would have used Perl for Regex or something like that or said.

00:34:23.800 --> 00:34:25.920
All that stuff you can do with Python.

00:34:25.920 --> 00:34:27.780
And actually, there's tons of articles on it.

00:34:27.780 --> 00:34:32.780
It's really not that hard to go, okay, the pieces I'm missing, how do I do that?

00:34:32.780 --> 00:34:33.960
And just go learn it.

00:34:34.160 --> 00:34:38.200
And then it's not that hard to switch a lot of automation to Python.

00:34:38.200 --> 00:34:39.640
Yeah, definitely not.

00:34:39.640 --> 00:34:43.000
And I mean, so much other automation happens in Python anyway.

00:34:43.000 --> 00:34:48.980
I mean, in fact, kind of compiled programming languages will often use Python as an automation language.

00:34:49.100 --> 00:34:51.580
It's so handy for the automation process.

00:34:51.580 --> 00:35:04.020
There is another psychological thing which I find, or I think psychological thing, that I find quite curious here, which is this dealing with complex shell scripts almost becomes this like technocratic rite of passage.

00:35:04.660 --> 00:35:15.440
Where when you couple that with imposter syndrome, you know, it's very easy to be intimidated by the bash bros when they do these really clever one-liner bashisms that you can't make head or tail off.

00:35:15.440 --> 00:35:17.700
And it's like, yeah, look how clever this is.

00:35:17.700 --> 00:35:19.540
But it's very hard to maintain.

00:35:19.540 --> 00:35:23.880
You know, and it's almost hard to call that to account unless you're very sure of yourself.

00:35:23.880 --> 00:35:28.260
Because you almost have to justify yourself as to why you dislike it.

00:35:28.260 --> 00:35:29.880
Like, you first have to prove your bona fides.

00:35:31.340 --> 00:35:38.600
I think it's sort of the tech equivalent of, you know, back in my day, like, we didn't have X, you know, like, whatever X is.

00:35:38.600 --> 00:35:39.100
Yeah.

00:35:39.100 --> 00:35:42.720
Shoes or toilet paper or, like, whatever.

00:35:42.720 --> 00:35:48.280
Just because something used to be difficult doesn't mean it needs to be difficult forevermore, right?

00:35:48.280 --> 00:35:48.680
Yeah.

00:35:48.680 --> 00:35:51.700
Like, the extra difficulty doesn't make it better.

00:35:51.700 --> 00:35:54.360
It's not a video game like Elden Ring, you know?

00:35:54.360 --> 00:35:59.440
Like, the easier this is, the more quickly and effectively you can do the housekeeping,

00:35:59.660 --> 00:36:02.420
the more you can get up with the features that actually pay the bills.

00:36:02.420 --> 00:36:07.320
Which is to say, the shiny functional stuff that you can demo and put in front of customers.

00:36:07.320 --> 00:36:07.940
Yeah.

00:36:07.940 --> 00:36:08.760
Absolutely.

00:36:08.760 --> 00:36:12.200
I have some real-time feedback and also a comment for you.

00:36:12.200 --> 00:36:17.720
Alvaro says there's a VS Code plugin called Shellshock, if he's remembering it correctly.

00:36:17.720 --> 00:36:20.300
Tells me when I'm doing something wrong or might blow up.

00:36:20.300 --> 00:36:21.740
There's also a plugin for PyCharm.

00:36:21.740 --> 00:36:24.480
So if you're going to do it, you know, have those things for sure.

00:36:24.480 --> 00:36:24.840
Yeah.

00:36:24.840 --> 00:36:30.960
Funnily enough, we've got immediate feedback to that, which is the author of the original article mentions Shellshock,

00:36:30.960 --> 00:36:35.800
which is effectively, like the commenter mentioned, a linter for Bash.

00:36:35.800 --> 00:36:40.500
But the article also mentions that it doesn't actually catch all things either.

00:36:41.040 --> 00:36:49.080
So like all linteres, it can very easily lull you into a false sense of security, while it's not really necessarily addressing the underlying problems.

00:36:49.080 --> 00:36:57.860
And I almost feel like I don't even need to say this, because anyone who's ever tried to debug a long Bash script should know this.

00:36:57.860 --> 00:36:59.060
They're tricky.

00:36:59.660 --> 00:37:03.420
They fail in mysterious places, and it's very hard to figure out why and how.

00:37:03.420 --> 00:37:04.680
Yeah.

00:37:04.680 --> 00:37:12.920
But I do like this article pointing out how, if you have to, to set up those flags to make it, you know, fail quicker.

00:37:12.920 --> 00:37:13.120
Yeah.

00:37:13.120 --> 00:37:14.160
Because that helps a lot.

00:37:14.160 --> 00:37:15.520
So that's nice.

00:37:15.520 --> 00:37:16.040
Yeah.

00:37:16.040 --> 00:37:16.820
Yeah, for sure.

00:37:16.820 --> 00:37:21.100
And also just to give the author massive amounts of credit, this isn't clickbait.

00:37:21.720 --> 00:37:24.820
He didn't position this as never, ever use Bash.

00:37:24.820 --> 00:37:37.180
In fact, he explicitly says that, okay, if you're doing something super simplistic, like the typical sort of things that goes into a get hook, a pre-commit hook, where you're just running a command or two, then yeah, sure, of course, Shell script's fine.

00:37:37.180 --> 00:37:46.360
But I would say as soon as you're running loops, as soon as you're doing conditional branching, as soon as you're worried about retries, as soon as you're doing...

00:37:46.360 --> 00:37:47.360
Oh, yeah, definitely.

00:37:47.360 --> 00:37:48.380
Switch to Python.

00:37:48.380 --> 00:37:48.960
Absolutely.

00:37:48.960 --> 00:37:50.080
Yeah.

00:37:50.080 --> 00:37:50.620
Yeah.

00:37:50.880 --> 00:37:53.260
And then another quick question, just a quick follow-up.

00:37:53.260 --> 00:37:55.740
Have you considered Conch?

00:37:55.740 --> 00:37:57.320
I've not even heard of Conch.

00:37:57.320 --> 00:37:58.440
I never mind considered it.

00:37:58.440 --> 00:38:00.840
So it's...

00:38:00.840 --> 00:38:02.900
I haven't done much, but I've sort of looked at it.

00:38:02.900 --> 00:38:13.720
It is a shell, like a competitor to Bash or ZShell or something like that, where it's a proper Python environment directly in the shell.

00:38:13.720 --> 00:38:15.860
That's almost PowerShell-esque.

00:38:15.860 --> 00:38:20.600
Yeah, it's a little bit like PowerShell, where PowerShell is like kind of .NET, C Sharp.

00:38:20.600 --> 00:38:22.060
Like kind of, but not really.

00:38:22.060 --> 00:38:23.780
I suspect it's similar here.

00:38:23.780 --> 00:38:24.520
But...

00:38:24.520 --> 00:38:30.540
And I know it's supposed to be a pronounced Conch, but my brain says Zonch because it's funner to say.

00:38:30.540 --> 00:38:30.860
Zonch.

00:38:30.860 --> 00:38:31.020
Squanching.

00:38:31.020 --> 00:38:31.500
I know.

00:38:31.500 --> 00:38:32.480
But it has the shell.

00:38:32.480 --> 00:38:33.400
It has the Conch shell.

00:38:33.400 --> 00:38:34.720
So you know that's how you got to say it.

00:38:34.720 --> 00:38:35.360
Yeah.

00:38:35.360 --> 00:38:37.540
They even have the Asgard going on for the logo.

00:38:37.540 --> 00:38:38.380
That's nifty.

00:38:38.940 --> 00:38:39.960
They do indeed.

00:38:39.960 --> 00:38:40.540
They do indeed.

00:38:40.540 --> 00:38:41.940
All right.

00:38:41.940 --> 00:38:42.760
Well, cool, Thomas.

00:38:42.760 --> 00:38:43.660
That was a good conversation.

00:38:43.660 --> 00:38:43.900
It was good.

00:38:44.600 --> 00:38:46.160
So do we have any extras?

00:38:46.160 --> 00:38:48.060
Michael, do you have any extras?

00:38:48.060 --> 00:38:50.380
You know I got extras, right?

00:38:50.380 --> 00:38:55.240
I also, first, real quick follow-up, a real-time follow-up from Henry Shiner in the audience,

00:38:55.240 --> 00:38:59.560
that PEP663 was the PEP around Stringenum.

00:38:59.560 --> 00:39:00.040
Oh, okay.

00:39:00.280 --> 00:39:05.280
And he's not sure if removing the support for that PEP means removing Stringenum from the standard lib or not, though.

00:39:05.280 --> 00:39:10.780
Doesn't do all the other stuff like the casing and the various other things that that cool package I talked about does.

00:39:10.780 --> 00:39:16.480
So maybe that package is, no matter what, relevant still or inspiration for the next one or whatever, right?

00:39:16.480 --> 00:39:19.560
In terms of extras, I do have some extras.

00:39:19.560 --> 00:39:22.360
Let me see what order I wanted to cover them in.

00:39:22.360 --> 00:39:24.600
I had two, but then one got rescheduled.

00:39:24.940 --> 00:39:31.840
This is supposed to be the transformation from bugs.python.org over to GitHub, but that got pushed back a week.

00:39:31.840 --> 00:39:33.340
So I'm not going to talk about that.

00:39:33.340 --> 00:39:34.720
You just did.

00:39:34.720 --> 00:39:38.020
Well, I was going to say it's happening.

00:39:38.020 --> 00:39:39.620
It should have happened by the time you hear this.

00:39:39.620 --> 00:39:40.100
Go check it out.

00:39:40.100 --> 00:39:41.440
No, it's not true anymore.

00:39:41.440 --> 00:39:42.780
No, okay.

00:39:42.780 --> 00:39:49.260
Just if you're curious, supposedly it's moved to April 1st, but it's April Fool's Day, so I'm not sure if it's really going to happen or not.

00:39:49.260 --> 00:39:54.340
Maybe it's a long con where the joke is being set up for in advance.

00:39:55.200 --> 00:39:55.640
Exactly.

00:39:55.640 --> 00:39:57.020
Oh, we're actually never doing this.

00:39:57.020 --> 00:39:57.260
No.

00:39:57.260 --> 00:39:58.840
I'm looking forward to that happening.

00:39:58.840 --> 00:39:59.240
That's great.

00:39:59.240 --> 00:39:59.820
All right.

00:39:59.820 --> 00:40:06.940
I just have like a general theme of sort of stuff that's like, they're all together, kind of a changing of the guard, if you will.

00:40:06.940 --> 00:40:07.380
Okay.

00:40:07.380 --> 00:40:08.540
Let's see here.

00:40:08.540 --> 00:40:12.280
So I have been switching so much of my software stuff around.

00:40:12.280 --> 00:40:13.560
I've started using Vivaldi.

00:40:13.560 --> 00:40:18.900
Now I've been using Firefox for a long time, but I started using Vivaldi, which I think is a really neat take on a browser.

00:40:18.900 --> 00:40:22.440
So switched over to Vivaldi and started using that.

00:40:23.420 --> 00:40:24.820
There's a bunch of different things.

00:40:24.820 --> 00:40:28.740
Like Mozilla laid off 250 people recently.

00:40:28.740 --> 00:40:31.660
They're axing the developer tools team too, which is just tragic.

00:40:31.660 --> 00:40:31.920
Exactly.

00:40:31.920 --> 00:40:33.580
Cut the developer tools team.

00:40:34.100 --> 00:40:38.840
They cut the threat team, the team that looks for like a tactic.

00:40:38.840 --> 00:40:41.580
It's like, I don't know.

00:40:41.580 --> 00:40:42.920
It's starting to make me a little nervous.

00:40:42.920 --> 00:40:44.100
So I'm trying out Vivaldi.

00:40:44.100 --> 00:40:47.740
I've been doing that for like a month or so and I'm enjoying that.

00:40:47.740 --> 00:40:54.200
Mike, you said it's a different take on a browser or like, so it sounds like there's something conceptually different about it.

00:40:54.200 --> 00:40:56.160
It's just super customizable.

00:40:56.160 --> 00:40:57.380
I think that's the thing.

00:40:57.380 --> 00:40:59.640
It's like, there's just all sorts of stuff.

00:40:59.640 --> 00:41:01.980
It comes with a built-in ad blockers and tracker blockers.

00:41:02.080 --> 00:41:04.880
I know some of them do tracker blockers, but built-in ad blockers is nice.

00:41:04.880 --> 00:41:06.740
I mean, Brave is the other one that kind of does that.

00:41:06.740 --> 00:41:11.580
But Brave's like, well, let's just trade those ads for our cryptocurrency ads that we'll put in there for you.

00:41:11.580 --> 00:41:12.820
And you get a little bit of cryptocurrency.

00:41:12.820 --> 00:41:14.560
This is like, no, we'll just block the ads.

00:41:15.420 --> 00:41:27.380
So anyway, I switched over to that, partly motivated by just concern around this, but also just wanted to try some stuff out from Google Docs over to Zoho for other stuff and for like business email.

00:41:27.380 --> 00:41:29.000
There's so interesting stuff going on there.

00:41:29.000 --> 00:41:30.580
And then like also DuckDuckGo.

00:41:30.580 --> 00:41:33.660
I've been using that for a while and I tried that a while ago.

00:41:33.660 --> 00:41:35.840
It just, I didn't feel like you switched.

00:41:35.840 --> 00:41:41.840
To me now, there's just like almost no difference in the quality compared to Google these days.

00:41:41.840 --> 00:41:44.940
Where it used to be, I'd try and like, ah, I might have to go to Google for this.

00:41:45.320 --> 00:41:46.760
You know, several times a day.

00:41:46.760 --> 00:41:47.440
No, I don't really.

00:41:47.440 --> 00:41:51.580
If I get stuck here, usually I try to go to Google and get it and I get still stuck.

00:41:51.580 --> 00:41:53.560
So just got to deal with it.

00:41:53.560 --> 00:41:55.620
So that's it for all my items.

00:41:55.620 --> 00:41:56.900
I'm just down to telling a joke.

00:41:56.900 --> 00:42:00.080
Thomas, you got anything extra you want to share throughout the area of the world?

00:42:00.080 --> 00:42:01.000
Not particularly.

00:42:01.000 --> 00:42:02.500
I'm looking forward to your joke.

00:42:02.500 --> 00:42:03.700
Give a quick shout out to Piper real quick.

00:42:03.700 --> 00:42:04.060
Oh, yeah.

00:42:04.060 --> 00:42:06.140
Check out last week's episode.

00:42:06.140 --> 00:42:07.760
I know we covered it last week, but yeah.

00:42:07.760 --> 00:42:11.060
Michael actually did as good an introduction to Piper as I could give.

00:42:11.060 --> 00:42:13.440
So congratulations and well done.

00:42:13.440 --> 00:42:14.240
Thank you.

00:42:14.240 --> 00:42:15.200
If you do want to check it out.

00:42:15.220 --> 00:42:20.340
support open source software, do the usual share, like, subscribe, all the rest of it.

00:42:20.340 --> 00:42:21.540
You can check it out on GitHub.

00:42:21.540 --> 00:42:25.380
It is the Piper task runner, P-Y-P-Y-R.

00:42:25.380 --> 00:42:34.960
And incidentally, if you don't want to run bash scripts, then a task runner might be a good way of not doing so.

00:42:35.820 --> 00:42:36.220
Yeah.

00:42:36.220 --> 00:42:39.700
I was thinking about your project while you're doing so.

00:42:39.700 --> 00:42:41.440
I don't want to shill too horribly.

00:42:41.440 --> 00:42:44.540
So I try to keep that to the end.

00:42:44.540 --> 00:42:45.900
That's our job.

00:42:45.900 --> 00:42:46.480
We only shill.

00:42:46.480 --> 00:42:49.280
We basically just shill cool stuff all week.

00:42:49.280 --> 00:42:50.000
That's our podcast.

00:42:50.000 --> 00:42:51.160
Ryan, how about you?

00:42:51.160 --> 00:42:52.920
Got anything extra you want to shout out there?

00:42:53.280 --> 00:42:55.960
I've got some stuff, but there's nothing I can share right now.

00:42:55.960 --> 00:42:56.900
So, yeah.

00:42:56.900 --> 00:42:57.280
All right.

00:42:57.280 --> 00:42:58.620
Well, we'll be waiting.

00:42:58.620 --> 00:43:00.360
How about we share a joke then and wrap it up?

00:43:00.360 --> 00:43:00.780
Sounds good.

00:43:01.200 --> 00:43:10.400
So I feel like this is a missed opportunity because we had Ian on last week and he was all about cybersecurity and using notebooks to track threats and stuff.

00:43:10.400 --> 00:43:13.040
Well, has he considered this?

00:43:13.040 --> 00:43:19.160
That was in a James Bond movie, right?

00:43:19.160 --> 00:43:21.240
It's been several.

00:43:21.240 --> 00:43:22.540
It could have been.

00:43:22.540 --> 00:43:27.360
So here is like a big server rack with just, you know, like a hundred Ethernet cables.

00:43:27.580 --> 00:43:32.580
And in a big printed sign on it says, in case of cyber attack, break glass, pull cables.

00:43:32.580 --> 00:43:35.920
I'll also say what surprises me.

00:43:35.920 --> 00:43:44.700
The Internet is going soft in its old age because back in my day, the first comments would have been complaining that the cables aren't tidy enough.

00:43:44.700 --> 00:43:47.160
Wow.

00:43:47.160 --> 00:43:48.520
You got to get a good grip on it.

00:43:48.520 --> 00:43:48.760
Yeah, exactly.

00:43:48.760 --> 00:43:53.240
There's one zippy move with your arm and you give it a yank and all hundred come out.

00:43:53.240 --> 00:43:54.240
This is exactly what.

00:43:54.240 --> 00:43:55.440
There's a lot of cables.

00:43:55.440 --> 00:43:59.040
They should put like orange tags on the ones that are important to pull or something.

00:43:59.040 --> 00:44:00.840
Yeah, exactly.

00:44:00.840 --> 00:44:02.840
This is the sort of criticism that I would have expected.

00:44:02.840 --> 00:44:09.180
Like actually the entire the entire thing has a power switch just to power off the whole thing.

00:44:09.180 --> 00:44:10.620
You don't want to lose data.

00:44:10.620 --> 00:44:11.500
I mean, come on.

00:44:11.500 --> 00:44:12.040
No, just kidding.

00:44:12.040 --> 00:44:13.860
Also, where's the axe?

00:44:13.860 --> 00:44:15.360
How do you break the glass?

00:44:15.360 --> 00:44:16.440
Exactly.

00:44:16.440 --> 00:44:17.580
Oh, yeah.

00:44:17.580 --> 00:44:19.500
Or just open the door handle.

00:44:19.500 --> 00:44:21.860
Very not very thought through.

00:44:21.860 --> 00:44:25.860
It reminds me a little bit of that in case fire, get commit, get push, run.

00:44:25.860 --> 00:44:33.440
I mean, you know, also we're talking about IT people who generally probably aren't, you know, that much into the pushing regime.

00:44:33.440 --> 00:44:34.840
So, you know.

00:44:34.840 --> 00:44:36.300
Or lifting axes.

00:44:36.300 --> 00:44:38.680
You know, that might be a strain.

00:44:38.680 --> 00:44:40.400
Sorry.

00:44:40.400 --> 00:44:41.840
I'm going to get hate mail for that.

00:44:41.840 --> 00:44:42.340
Oh, we are.

00:44:43.560 --> 00:44:44.360
Yes, indeed.

00:44:44.360 --> 00:44:47.240
Well, I thought it was fun, Brian.

00:44:47.240 --> 00:44:52.220
So, well, thanks everybody for having a fun episode again.

00:44:52.220 --> 00:44:54.160
Thank you, Thomas, for showing up.

00:44:54.160 --> 00:44:54.960
Thanks, Michael.

00:44:54.960 --> 00:44:57.520
And thank you, everybody in the chat for showing up.

00:44:57.520 --> 00:44:58.920
So we'll see you all next week.

00:44:58.920 --> 00:44:59.680
Bye, everyone.

