WEBVTT

00:00:00.001 --> 00:00:03.560
Have you heard about HTMX? We've discussed it a time or two on the show.

00:00:03.560 --> 00:00:09.980
We're back with another episode on HTMX, this time with a real-world success story and lessons

00:00:09.980 --> 00:00:16.140
learned. We have Sheena O'Connell on to tell us how she moved from a React Django app to pure

00:00:16.140 --> 00:00:23.800
Django with HTMX. This is Talk Python to Me, episode 484, recorded October 29th, 2024.

00:00:23.800 --> 00:00:26.300
Are you ready for your host?

00:00:27.300 --> 00:00:32.260
You're listening to Michael Kennedy on Talk Python to Me. Live from Portland, Oregon,

00:00:32.260 --> 00:00:34.260
and this segment was made with Python.

00:00:34.260 --> 00:00:42.580
Welcome to Talk Python to Me, a weekly podcast on Python. This is your host, Michael Kennedy.

00:00:42.580 --> 00:00:47.920
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython,

00:00:47.920 --> 00:00:53.880
both accounts over at Fosstodon.org, and keep up with the show and listen to over nine years of

00:00:53.880 --> 00:00:59.620
episodes at talkpython.fm. If you want to be part of our live episodes, you can find the live streams

00:00:59.620 --> 00:01:05.420
over on YouTube. Subscribe to our YouTube channel over at talkpython.fm/youtube and get notified

00:01:05.420 --> 00:01:11.880
about upcoming shows. This episode is sponsored by Posit Connect from the makers of Shiny. Publish,

00:01:12.040 --> 00:01:17.020
share and deploy all of your data projects that you're creating using Python. Streamlit, Dash,

00:01:17.020 --> 00:01:24.540
Shiny, Bokeh, FastAPI, Flask, Quarto, Reports, Dashboards, and APIs. Posit Connect supports all of

00:01:24.540 --> 00:01:30.340
them. Try Posit Connect for free by going to talkpython.fm/Posit, P-O-S-I-T.

00:01:30.880 --> 00:01:36.600
And this episode is brought to you by Bluehost. Do you need a website fast? Get Bluehost. Their AI

00:01:36.600 --> 00:01:42.120
builds your WordPress site in minutes, and their built-in tools optimize your growth. Don't wait.

00:01:42.120 --> 00:01:48.660
Visit talkpython.fm/Bluehost to get started. Sheena, welcome to Talk Python to me.

00:01:48.660 --> 00:01:50.220
Thanks so much. Happy to be here.

00:01:50.220 --> 00:01:56.340
I'm happy to have you here. We've got an awesome topic queued up, one that I just, I don't know if

00:01:56.340 --> 00:02:01.340
I'll ever get tired of coming back to this because I'm just such a fan of simplicity and getting stuff

00:02:01.340 --> 00:02:07.080
done and not like, let's see how many layers of things we can pile on. And by that, I mean,

00:02:07.080 --> 00:02:14.200
HTMX as a success story for going from a whole bunch of front-end stuff, a bunch of different

00:02:14.200 --> 00:02:19.200
multi, multiple apps, you know, JavaScript front-end, Django back-end talking to each other,

00:02:19.200 --> 00:02:21.620
but kind of being separate as well. Oh, yeah.

00:02:21.620 --> 00:02:26.000
And just switching to HTMX. And you wrote up a really cool essay on this that we're going to dive into.

00:02:26.000 --> 00:02:27.880
So, and share your experience.

00:02:27.880 --> 00:02:33.680
Pretty fantastic experience overall. I was really surprised by HTMX when I came across it the first

00:02:33.680 --> 00:02:39.560
time because there are so many fashionable front-end libraries and frameworks. So when I heard about it,

00:02:39.560 --> 00:02:46.480
I was like, oh, it's another one of those, whatever. And then I went to a DjangoCon, I think it was 2022,

00:02:46.480 --> 00:02:52.300
and I saw a talk from Chris May, who's in the audience, and that's got me excited about it. And

00:02:52.720 --> 00:02:58.980
yeah, that's, that's kind of when my, my whole story started. What I had been doing before was

00:02:58.980 --> 00:03:04.580
working with, so I had this team and we were building a thing and we had a React front-end.

00:03:04.580 --> 00:03:09.980
So on the front, that's a normal thing. Like if you wanted a, like a modern front-end application,

00:03:09.980 --> 00:03:15.420
you'd use something like React or Vue or one of the many competitors. And then on the back end,

00:03:15.480 --> 00:03:21.620
we had Django. And I think that's like a fairly normal, fairly accepted way to do things, or it

00:03:21.620 --> 00:03:28.180
has been for a long time. But I think it's like, I think it's a little faulty. I think that front-end

00:03:28.180 --> 00:03:33.060
web development has been in a little bit of a complexity death spiral for the last little while.

00:03:33.540 --> 00:03:38.840
And like, sometimes it's useful. Sometimes it's really helpful, but like for some things you need

00:03:38.840 --> 00:03:43.860
certain tools in the front-end, I think. But yeah, I think it's, things have been going in,

00:03:43.860 --> 00:03:48.500
in the complexity for, or direction for a long time. And HTML solves a lot of problems.

00:03:48.500 --> 00:03:53.440
Right. Well, you think back, you know, think back to the jQuery days. How did you use jQuery?

00:03:53.680 --> 00:03:59.120
You included a CDN, or if you're wild, you might download it and include it in your own static

00:03:59.120 --> 00:04:04.700
content. And then you just started using it, right? And just layers and layers have just been

00:04:04.700 --> 00:04:11.700
building. And JavaScript of 2024 era looks nothing like 10 years ago, 15 years ago, JavaScript.

00:04:11.700 --> 00:04:12.200
Yeah.

00:04:12.200 --> 00:04:16.440
I would say it's one of the more complicated programming environments compared to something

00:04:16.440 --> 00:04:21.480
like C++, right? Because there's so many steps in there, so many implicit linkings and stuff.

00:04:21.480 --> 00:04:25.760
Yeah. There's a lot of dark magic under the hood. It's very hard to know what's going on. And

00:04:25.760 --> 00:04:31.040
I think like one of the challenges is that a lot of people used to get into web dev as their gateway

00:04:31.040 --> 00:04:36.000
drug to programming. Like they'd start off with web dev and then branch out from there. But now web dev

00:04:36.000 --> 00:04:42.620
is like this magic weird box with so many layers. And I think it's, it's sort of messed a lot of people

00:04:42.620 --> 00:04:47.360
up. It's a challenge to, to get started in the way that people used to get started. And it's like the

00:04:47.360 --> 00:04:51.460
barrier to, I don't know, entry level programmers used to need to be here. And now,

00:04:51.460 --> 00:04:57.820
it's here and does a lot of key things to the ecosystem as a whole. But yeah, like all the

00:04:57.820 --> 00:05:01.720
build steps, all the magic things that happen under the hood. And the fact that you have to like

00:05:01.720 --> 00:05:07.480
tasks switch between completely different applications and completely different like ways of thinking.

00:05:07.740 --> 00:05:12.700
So for me, I've always loved Django. It's so good. So with the thing that I was building,

00:05:12.700 --> 00:05:19.320
I wanted Django because I needed to build a thing really, really fast. And so my efficiency was

00:05:19.320 --> 00:05:24.680
important. And then it was like, I need a good front end and React was, was a clear choice at the time.

00:05:24.680 --> 00:05:30.000
But it means like switching, like, like for me to work on this thing, I need to keep holding the

00:05:30.000 --> 00:05:34.160
Django application and the React application in my head and how they talk. And it's not just React,

00:05:34.160 --> 00:05:39.480
it's like Redux and Saga and side effects and asynchronous goodies. And, and then on the

00:05:39.480 --> 00:05:44.620
Django side, it's all of that. And Django is, I think, much simpler to get your head around than

00:05:44.620 --> 00:05:47.020
React, actually. It's a tricky thing.

00:05:47.020 --> 00:05:51.360
It definitely is a tricky thing. And one thing I would just like to put out early before we get too

00:05:51.360 --> 00:05:55.940
much mail is this is not necessarily a hate on JavaScript.

00:05:55.940 --> 00:05:56.940
Oh, no, no.

00:05:56.940 --> 00:06:04.080
There are people in the node space that are super fans of HTMX. And I think what is not obvious

00:06:04.080 --> 00:06:08.460
about the benefits of HTMX, as we get into it, we'll, we'll talk about some of these things,

00:06:08.460 --> 00:06:12.460
but you were just touching on then, like you've got this React front end, it has its own state.

00:06:12.460 --> 00:06:17.160
It also has its own capability. So it's running on the client side. So it can't talk to file systems

00:06:17.160 --> 00:06:21.480
or the database. It can only talk to APIs. On the other hand, you've got the Django app,

00:06:21.480 --> 00:06:25.820
which probably is not talking to APIs, but talks to the database, talks to, you know,

00:06:25.820 --> 00:06:30.200
the server levels things. And you've got to, as you're working on this app, think, okay,

00:06:30.200 --> 00:06:34.600
I'm in this context. That means no database. I'm in this context. That means primarily just database.

00:06:34.600 --> 00:06:39.880
Right. And it's just, you have these two worlds. And if you could say, can I just write in one of

00:06:39.880 --> 00:06:40.080
them?

00:06:40.080 --> 00:06:40.540
Yes.

00:06:40.540 --> 00:06:44.520
And the JavaScript people might even pick, like, I just want to stay in JavaScript, but always node

00:06:44.520 --> 00:06:49.960
or always at least, you know, pick one of the styles of programming and not just constantly

00:06:49.960 --> 00:06:54.120
switch back and forth between these. You have browser capabilities, you have server capabilities,

00:06:54.120 --> 00:06:58.820
you have browser information, like just, that is just not productive. It's not the best.

00:06:58.820 --> 00:07:05.080
Right. And so as much as you can avoid that, and as we'll see, HTMX is super easy about keeping it

00:07:05.080 --> 00:07:09.540
in one place. Right. So that's, I think that's one of the big things that people should, should be

00:07:09.540 --> 00:07:11.660
honing in on as we talk about this. What do you think?

00:07:11.660 --> 00:07:16.220
If I came across as hating on JavaScript, I dig JavaScript and I use it a lot where it's needed.

00:07:16.580 --> 00:07:21.380
I think it is a fantastic tool in the toolbox that I'm on sides with you, that it's just the

00:07:21.380 --> 00:07:26.320
complexity of switching contexts all the time. It slows you down and it's a lot to keep in your head.

00:07:26.320 --> 00:07:31.260
And so it's like, for me, when I was working on this application and needing to switch contexts

00:07:31.260 --> 00:07:36.500
all the time, it's like, like, you can't just make a thing. Like you have to like do the dance

00:07:36.500 --> 00:07:38.500
to make the thing. And it's...

00:07:38.500 --> 00:07:43.940
Instead of four different chained file watchers to do their things and stuff, right?

00:07:43.940 --> 00:07:50.000
So it just like adds a little bit of a, like, you're slower than you would like to be. There's like more tedium

00:07:50.000 --> 00:07:54.900
than there should be. It'd be nice if you could just like build the thing quickly in a simple way and it just works

00:07:54.900 --> 00:08:01.380
and it's beautiful. And HTMLX kind of allows that along with other tools. Yeah. So for me, that context

00:08:01.380 --> 00:08:06.260
switching was like a painful, painful thing. And for the team I was working with as well, like I had a

00:08:06.260 --> 00:08:11.380
bunch of juniors on my team and it was so hard to get them productive because it was like, okay, do you

00:08:11.380 --> 00:08:15.380
want to be productive on the back end? Or do you want to be productive on the front end? And then on the

00:08:15.380 --> 00:08:20.980
front end, like that was complicated because of the, again, React, Redux, Redux saga. So,

00:08:20.980 --> 00:08:26.580
so they were all just like suffering. And then... To put real features into place,

00:08:26.580 --> 00:08:30.980
you've got to do a vertical slice, right? Which hits most, if not all, you know, you probably,

00:08:30.980 --> 00:08:36.820
you probably have to touch the React front end. Yeah. You probably need some new tiny bits of UI design.

00:08:36.820 --> 00:08:43.940
So CSS and maybe some SaaS build step there. And you know, like then you're doing the server side

00:08:43.940 --> 00:08:47.620
bits and then you're doing a database migration and it's just like, it's end to end, right?

00:08:47.620 --> 00:08:52.580
Yeah. And for some people, it's not even reasonable to expect them to have all of those skills,

00:08:52.580 --> 00:08:56.660
those end to end skills. And then it's like, you have to make your team complicated. You have to

00:08:56.660 --> 00:09:01.220
have a back end team and a front end team and they need to now integrate with each other. And so,

00:09:01.220 --> 00:09:04.660
like the team resembles the team stack. Yeah.

00:09:04.660 --> 00:09:08.820
Yeah. That's interesting. Yeah. We have a group for this later, a group for that later. And,

00:09:08.820 --> 00:09:12.500
you know, look, if you're a huge company, maybe that actually makes tons of sense. Maybe.

00:09:12.500 --> 00:09:16.260
I'm not, I'm not saying it does, but it may, but when you're a small company,

00:09:16.260 --> 00:09:17.380
it just doesn't. Right.

00:09:17.380 --> 00:09:21.060
When you're building something, you do need to think about the team that's going to be building

00:09:21.060 --> 00:09:24.420
it. Their skills right now, the skills that they're going to have in the future,

00:09:24.420 --> 00:09:28.500
the skills that you're going to need to pull into the team in the future. And so it's,

00:09:28.500 --> 00:09:33.460
I don't know if it makes sense to, to just, well, in my context, it didn't make sense to,

00:09:33.460 --> 00:09:38.180
to split up the team. If I had the tools to allow everybody to be in the same place from the

00:09:38.180 --> 00:09:41.940
beginning, that would have been freaking fantastic. Yeah, absolutely. That would be awesome.

00:09:41.940 --> 00:09:46.260
Let's talk a bit about HTML. So we, we said, Hey, we've been talking about this, but I,

00:09:46.260 --> 00:09:50.900
and it's sort of broad terms, but let's be a little bit specific and maybe you could tell us

00:09:50.900 --> 00:09:58.660
what is this HTML and why is it, why is it not just a different flavor of reactor view or something?

00:09:58.660 --> 00:10:00.580
And then maybe we could talk to you a few examples.

00:10:00.580 --> 00:10:08.100
The way I explain HTML to myself is that like, imagine looking at HTML, HTML is with us. It's,

00:10:08.100 --> 00:10:13.220
it's going to be with us forever, maybe not forever, but for a very long time. What, what if we like

00:10:13.220 --> 00:10:16.500
There've been many, there've been many attempts to replace it and they were all bad.

00:10:16.500 --> 00:10:21.700
Yeah. Yeah. So it's, it's probably going to stick around for the foreseeable future and it's everywhere.

00:10:22.100 --> 00:10:28.580
And what if we could just augment it slightly so that it could do what we needed it to do in the

00:10:28.580 --> 00:10:34.500
modern web? Like we, like since HTML got invented, like it's quite a simple tool, but now we need to

00:10:34.500 --> 00:10:40.820
do all this extra stuff because people expect all sorts of like interactivity in the user interfaces.

00:10:40.820 --> 00:10:47.700
They expect asynchronous workloads and things like that. And what if HTML could do that? And it can do that.

00:10:47.700 --> 00:10:52.500
And it's not actually that hard to make it do that. You just need to add a few extra attributes.

00:10:52.500 --> 00:11:00.020
And so what HTML is, is a really, really small JavaScript library. And you just include it as

00:11:00.020 --> 00:11:05.540
a script tag in your page and then it's there and it's available and it's installed just like the old,

00:11:05.540 --> 00:11:11.940
the good old days of jQuery. And yeah, you could just go back and throw it in a CDN if you wanted,

00:11:11.940 --> 00:11:13.860
couldn't you? That's right. I hadn't really thought about it.

00:11:13.860 --> 00:11:18.500
From there, you just have these extra attributes on your HTML tags that do different things.

00:11:18.500 --> 00:11:23.700
So for example, like so HTML has a lot of different stuff, but if you were to like 80,

00:11:23.700 --> 00:11:30.420
20 years and look at the parts that are the most used, then basically the stuff you'll use the most are

00:11:30.420 --> 00:11:37.140
like tying into events, like click event handlers or whatnot. And then when you click on the thing or

00:11:37.140 --> 00:11:44.500
whatever, it'll send in a request to a back end and the back end responds with an HTML fragment.

00:11:44.500 --> 00:11:51.700
And then you swap that fragment into your page somewhere. So if you were to look at the,

00:11:51.700 --> 00:11:57.780
the HTML documentation, the, the hello world of HTML is a button and the button says,

00:11:57.780 --> 00:12:02.740
has the attributes HX post clicked. So it's saying like, when you click on the button,

00:12:02.740 --> 00:12:08.660
then send a post request to a URL that's like forward slash click. So you can decide where,

00:12:08.660 --> 00:12:16.020
like what HTTP method you're using and where it's going and what event you're tying into. And then

00:12:16.020 --> 00:12:21.540
when the response arrives, then you do something with it. And the response is HTML. It's not a JSON

00:12:21.540 --> 00:12:28.500
response that you then need to like turn into HTML. It's, it's plain old normal HTML. So it's super

00:12:28.500 --> 00:12:33.860
simple to write. And then you, you take that HTML and you put it somewhere on the page. So maybe you

00:12:33.860 --> 00:12:38.820
swap the current button that you just clicked with, with the HTML that was returned, or maybe you take

00:12:38.820 --> 00:12:45.220
it and you put it like at the end of another element. You can, you could append stuff. You can pre-pend

00:12:45.220 --> 00:12:50.660
stuff. You can replace entire elements. You can replace the internals of elements. And that little

00:12:50.660 --> 00:12:55.700
pattern is actually really, really powerful. And you can tie into all sorts of different events. So there's

00:12:55.700 --> 00:13:00.660
like interacting with individual elements, like a click or a form submission, you can say like on

00:13:00.660 --> 00:13:07.140
load or like on scroll or all sorts of different things. So, so events. Yeah, absolutely. So one of

00:13:07.140 --> 00:13:14.500
the motivations that Carl Carson Gross puts there is why should a and forum only be able to make HTTP requests?

00:13:14.500 --> 00:13:20.740
Why should you only be able to click and have click and submit events, trigger them, right? And all these

00:13:20.740 --> 00:13:26.980
things, you know, so it's kind of like just extending some of these niche features. Like you can click a button,

00:13:26.980 --> 00:13:33.620
but not an image in HTML to, to all the pieces. And then like you said, exchanging fragments of HTML,

00:13:33.620 --> 00:13:38.980
right? Like just instead of sending JSON back and then having the client side, turn that into HTML, just

00:13:38.980 --> 00:13:43.940
do it on the server and stick it where it goes. Right? Basically that's it. It's, it's dead simple to code as well,

00:13:43.940 --> 00:13:50.260
which is, which is fantastic. So it's a simple, you're just server side rendering some HTML like we

00:13:50.260 --> 00:13:55.060
used to a long time ago. So it feels, it feels very familiar to people who got into web dev a long time

00:13:55.060 --> 00:14:00.420
ago. The code itself is very, very easy to write. Like initially you might like scratch your head. It's

00:14:00.420 --> 00:14:06.740
unfamiliar, but give yourself a couple of hours and it'll start to feel familiar. It's yeah,

00:14:06.740 --> 00:14:11.300
it's lovely to work in. Yeah. I would also encourage people that want to get started with this and play

00:14:11.300 --> 00:14:16.180
with this. The examples that they have on the website are pretty comprehensive, right? If you scroll

00:14:16.180 --> 00:14:20.740
through, I don't know how many there are, maybe 20 or so. Yeah. More than that. It's a lot. Yeah.

00:14:20.740 --> 00:14:25.940
There's a lot of them here. And then, so if you go into each one of them, it'll show you basically

00:14:25.940 --> 00:14:30.340
some interesting things. So if you go to the first one, the click to edit, it says, here's a

00:14:30.340 --> 00:14:36.580
bit of static HTML, like a label and a div and then a button that says click to edit. And all it has is

00:14:36.580 --> 00:14:42.580
HX get, and it says, edit this thing. Right. And when you go and click it, like there's a little

00:14:42.580 --> 00:14:48.100
example at the bottom, you click it, that's all fun. But if you open up the bottom, there's like a little

00:14:48.100 --> 00:14:54.180
history of interactions and like a, I don't know what you call it, but like a web history that shows

00:14:54.180 --> 00:14:58.820
what's transferred. So when you, you click edit, here's what the response was. And it shows the

00:14:58.820 --> 00:15:05.780
HTML fragment, which in itself is a, a new HX has HX events. And then when it saves it, it goes back

00:15:05.780 --> 00:15:10.580
to the static and so on. And I think it's a really pretty easy way to get a sense for what it is.

00:15:10.580 --> 00:15:14.660
What do you think? Yeah. Yeah. Yeah. I think so. I think so. Those examples are great.

00:15:14.660 --> 00:15:21.140
I think like one thing that I like to do is use HTML and the thing called Alpine JS together.

00:15:21.140 --> 00:15:26.020
So for me, HTML is great for when the data needs to be passed back and forth,

00:15:26.020 --> 00:15:30.580
but like for something like this, I'd probably use something like Alpine just to say like show and

00:15:30.580 --> 00:15:37.300
hide, hide the form. Yeah. It's also fantastic. So you don't like strictly need it, I suppose,

00:15:37.300 --> 00:15:43.060
but it does save on like some back and forth and it does make things a little bit more like in one

00:15:43.060 --> 00:15:49.380
place, a little bit more like locality of behaviors, a useful thing. So now we're looking at Alpine

00:15:49.380 --> 00:15:55.460
JS hello world. And this is cool because it also, it's, it's like HTMX in that it just adds a couple

00:15:55.460 --> 00:16:04.180
of extra attributes to your HTML tags. And the 80, 20 of this is that you can define variables and those

00:16:04.180 --> 00:16:12.100
variables are like this, like a state and they are defined within the scope of the place where you

00:16:12.100 --> 00:16:17.620
defined it. So if you, if you have like div x data equals open false as a JSON object, then it's like,

00:16:17.620 --> 00:16:22.500
within the scope of the stiv, we have this thing called open and its initial value is false.

00:16:22.500 --> 00:16:28.020
And then you can do things like click on a button to, to change open to true or to toggle,

00:16:28.020 --> 00:16:32.660
to toggle open. So you can have it like show form true or false. And then you can say,

00:16:32.660 --> 00:16:37.940
then you can like say, yeah, it says span extra equals open. So we only show that under certain

00:16:37.940 --> 00:16:43.460
circumstances. And you can also have like not open or you can have like, it speaks JavaScript. So you can do

00:16:43.460 --> 00:16:46.980
some interesting things in there as well. Yeah, this looks pretty interesting. This is,

00:16:46.980 --> 00:16:52.260
yeah, this is something I have not really used, but I do hear Alpine and HTMX mentioned together

00:16:52.260 --> 00:16:56.660
frequently. They do have a similar vibe. Yeah, yeah, they do. They do. Yeah. I've, I've enjoyed a lot.

00:16:56.660 --> 00:17:01.300
I tend to just use it for like small, simple things, but those small, simple things add up.

00:17:01.300 --> 00:17:05.940
So for example, if you have menus that open and close and things like that, you might,

00:17:05.940 --> 00:17:11.540
you might want to use something like this. Yeah. Or event, event handling. Like if you click this button,

00:17:11.540 --> 00:17:16.020
change the state to this, and then it triggers the binding to open and close sections and so on.

00:17:16.020 --> 00:17:17.860
Yeah. Yeah. Okay. Interesting.

00:17:17.860 --> 00:17:25.780
This portion of Talk Python to Me is brought to you by Posit, the makers of Shiny, formerly RStudio,

00:17:25.780 --> 00:17:31.860
and especially Shiny for Python. Let me ask you a question. Are you building awesome things? Of course

00:17:31.860 --> 00:17:37.380
you are. You're a developer or data scientist. That's what we do. And you should check out Posit Connect.

00:17:37.380 --> 00:17:43.060
Posit Connect is a way for you to publish, share, and deploy all the data products that you're building

00:17:43.060 --> 00:17:48.820
using Python. People ask me the same question all the time. Michael, I have some cool data science

00:17:48.820 --> 00:17:54.260
project or notebook that I built. How do I share it with my users, stakeholders, teammates? Do I need to

00:17:54.260 --> 00:18:01.620
learn FastAPI or Flask or maybe Vue or React.js? Hold on now. Those are cool technologies, and I'm sure you'd

00:18:01.620 --> 00:18:06.500
benefit from them, but maybe stay focused on the data project. Let Posit Connect handle that side of

00:18:06.500 --> 00:18:11.780
things. With Posit Connect, you can rapidly and securely deploy the things you build in Python.

00:18:11.780 --> 00:18:19.860
Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quarto, ports, dashboards, and APIs. Posit Connect supports all

00:18:19.860 --> 00:18:26.100
of them. And Posit Connect comes with all the bells and whistles to satisfy IT and other enterprise requirements.

00:18:26.100 --> 00:18:32.020
Make deployment the easiest step in your workflow with Posit Connect. For a limited time, you can try

00:18:32.020 --> 00:18:40.260
Posit Connect for free for three months by going to talkpython.fm/posit. That's talkpython.fm/posit.

00:18:40.260 --> 00:18:45.380
The link is in your podcast player show notes. Thank you to the team at Posit for supporting Talk Python.

00:18:47.700 --> 00:18:53.220
One example that I can give from over that stuff that I'm working on is I'm definitely using HTMX over

00:18:53.220 --> 00:18:58.660
at Talk Python training, right, for our courses. And I added this little tag cloud. It's not quite a cloud,

00:18:58.660 --> 00:19:02.820
but a bunch of different things you can explore. So when you load this page, actually, one of the

00:19:02.820 --> 00:19:07.940
things that's really challenging is it has the price in your local currency. So it figures out where your

00:19:07.940 --> 00:19:13.700
IP, where you live. In that currency, the prices of those things, you know, outside of the US change a

00:19:13.700 --> 00:19:18.340
lot. It's super, sometimes it can be really slow to figure out what the price of every course is,

00:19:18.340 --> 00:19:22.820
if there's sales and you're in this country and that applies in this way. So all these prices are

00:19:22.820 --> 00:19:28.500
all calculated with HTMX. So it loads normally without the prices, then probably by the time you

00:19:28.500 --> 00:19:34.340
get to it, the prices are already there automatically. And then as you click around, you get, this is all

00:19:34.340 --> 00:19:38.500
like, as you click these little tags up here, you can even click on the HTMX tag and see you have

00:19:38.500 --> 00:19:43.780
three HTMX courses, right? With last Django and one that's just kind of uses it. But all of this

00:19:43.780 --> 00:19:48.820
stuff, this is no JavaScript on this page, at least not doing any of that is all just HTMX, right?

00:19:48.820 --> 00:19:49.780
Yeah, that's great.

00:19:49.780 --> 00:19:55.460
It's beautifully good. It's so good. I've certainly enjoyed working with it. But let's talk a bit about

00:19:55.460 --> 00:20:00.260
your writer. Like, let's talk about, you know, spend the rest of time on your story, how you started

00:20:00.260 --> 00:20:06.100
using HTMX. I mean, you've given us some of the sense, but let's talk about the app that you were

00:20:06.100 --> 00:20:10.820
building, right? You had this team of fairly junior developers. What's the story?

00:20:10.820 --> 00:20:17.780
At the time I was working for a nonprofit training provider in South Africa, and we used to have

00:20:17.780 --> 00:20:23.460
everybody on premises in this place called JP's town, which is really a dodgy place. And it was great.

00:20:23.460 --> 00:20:27.780
It was, it was a lot of fun, but then COVID happened. And so we had to figure out how to support

00:20:27.780 --> 00:20:34.340
everybody remotely. And so it built an LMS. So initially we like looked around that LMS means

00:20:34.340 --> 00:20:39.060
learner management system. We had a whole lot of learners. We had, I think there were about 150 at

00:20:39.060 --> 00:20:44.180
the time. And we needed to figure out like how to support them from home. We couldn't just be like,

00:20:44.180 --> 00:20:49.140
come back next year because the, like partially we couldn't let them down. Partially the funding

00:20:49.140 --> 00:20:53.620
model wouldn't work and all sorts of things. So we need, it was an insane time. It's kind of normalized

00:20:53.620 --> 00:20:57.620
in our history because it's, we've moved past it, but we got to remember that's an

00:20:57.620 --> 00:20:59.140
experience. That was a disturbing time.

00:20:59.140 --> 00:21:04.740
So many people have horror stories from, from then I was like, this was hard. It was like super,

00:21:04.740 --> 00:21:11.380
super stressful, but in the end we ended up with this cool thing. So like a lot of LMSs exist. You

00:21:11.380 --> 00:21:16.900
can get one off the shelf and they're a lot like very clever textbooks that track learners over time.

00:21:16.900 --> 00:21:22.180
But for us, we're training, we are training software developers. And so we wanted something more

00:21:22.180 --> 00:21:27.060
than a textbook. We wanted to train professionals. And so we ended up building this thing from the

00:21:27.060 --> 00:21:31.860
learners perspective. It was a Kanban board and then they could move cards around on the board to

00:21:31.860 --> 00:21:36.100
do different things. They could like start a project and then we'd create a repo for them and

00:21:36.100 --> 00:21:41.380
make, add them as a collaborator and protect the main branch and all of that good stuff. And then we could

00:21:41.380 --> 00:21:44.580
get them to review each other and we could track all that and display it in the front end.

00:21:44.580 --> 00:21:49.060
Right. Try to teach them get and GitHub and PRs and all that. Yeah.

00:21:49.060 --> 00:21:53.700
Yeah. It was so cool. Like by the time they got to work, like they're always very nervous getting

00:21:53.700 --> 00:21:58.020
into their first job. And then they'd say like, this is familiar. Like we know how this, and that was

00:21:58.020 --> 00:21:58.660
really cool.

00:21:58.660 --> 00:22:00.660
I'm teaching people stuff here actually. That's weird.

00:22:00.660 --> 00:22:03.300
Yeah. It was great.

00:22:03.300 --> 00:22:04.180
Exactly. That's cool.

00:22:04.180 --> 00:22:10.820
Yeah. So I built this thing out and managed to keep training the people and it worked. And then it was like,

00:22:10.820 --> 00:22:15.300
okay, this thing is pretty rough around the edges because we built it in self-defense and

00:22:15.300 --> 00:22:24.820
like, I hope this works. So we needed to build more on it. And we were hiring a lot of junior

00:22:24.820 --> 00:22:31.300
developers because we were training like very, very beginner stuff. So if you want to teach a person

00:22:31.300 --> 00:22:35.460
what a return statement is or what a loop is or anything like that, then you don't need a senior

00:22:35.460 --> 00:22:40.740
developer or like a senior lecturer. You need somebody who understands what a loop is and what a return

00:22:40.740 --> 00:22:46.740
statement is. So we had like all these juniors running around, like helping out and they needed

00:22:46.740 --> 00:22:51.860
to build stuff for their own growth as well. And their own, like if they don't build stuff and then

00:22:51.860 --> 00:22:58.260
built and it's sad. So, so yeah, they were trying to get them productive on the stack, but it was

00:22:58.260 --> 00:23:03.220
very, very difficult. So for me, I'd been working on react applications and I've been working on Django.

00:23:03.220 --> 00:23:07.060
And so for me, it was fine. I could just like, I could keep the whole thing in my head,

00:23:07.780 --> 00:23:13.300
but yeah, it was just, it was just really tough for them. I think there is a little bit of an art to

00:23:13.300 --> 00:23:19.060
making a junior developer productive, but like, I just was not figuring it out. So I tried this for a

00:23:19.060 --> 00:23:25.140
while. And then one day went to a DjangoCon US and I saw Chris May's talk that spoke about

00:23:25.140 --> 00:23:30.500
HTMLX. And I was just like, maybe this is worth a try. I was like, okay, I'm just going to proof of

00:23:30.500 --> 00:23:35.220
concept it and see if I can build the weirdest parts of our application in HTMLX.

00:23:35.220 --> 00:23:40.980
If you're asking, will it work? You're like, this is the most crazy interactive bit. And if it can do

00:23:40.980 --> 00:23:46.260
this, the other stuff is easy. Like switching from logged in to log out or whatever. It's like,

00:23:46.260 --> 00:23:47.300
yeah, okay, that's nothing, right?

00:23:47.300 --> 00:23:51.700
Most of our functionality was around this Kanban board. So I was like, all right, let me just

00:23:51.700 --> 00:23:57.380
make some cards and make some columns and see if I can shift stuff around. And it all worked out

00:23:57.380 --> 00:24:03.620
really well and it wasn't super hard. Like I think one of the challenges with HTMLX is that it's very

00:24:03.620 --> 00:24:09.220
easy to build like spaghetti templates because you have like the main template and all these partials

00:24:09.220 --> 00:24:14.580
and you need to, and then all these URLs that are pointing to the partial. So it is possible to get

00:24:14.580 --> 00:24:20.020
yourself in a bit of a tangle there. So you need to arrange things nicely. But yeah, the process was so

00:24:20.020 --> 00:24:25.140
smooth that I was like, let me try this. So our application was this Django app on the back,

00:24:25.140 --> 00:24:31.940
exposing a bunch of APIs with Django REST framework. And so the idea was to just, instead of like,

00:24:31.940 --> 00:24:36.420
we'd leave the React app as is and would keep on working. Meanwhile, we'd, we just build out some

00:24:36.420 --> 00:24:42.660
like perfectly normal Django views to do the HTML stuff. And then we could move everybody over to the

00:24:42.660 --> 00:24:48.100
new, the new application. So the new front end was part of the original Django app. So we didn't,

00:24:48.100 --> 00:24:53.540
we didn't rebuild absolutely everything. We just rebuilt that part. And generally speaking,

00:24:53.540 --> 00:24:59.220
if somebody suggests rebuilding a thing, I worry, like, usually it's a bad idea. Usually it's like,

00:24:59.220 --> 00:25:05.940
yeah, a fool or something. Yes. I've had to stop myself many times.

00:25:05.940 --> 00:25:12.180
Do you know that David, Dylan BD it is? Yeah. Check. I'll put a link in here. He's got some,

00:25:12.180 --> 00:25:18.340
some amazing parodies and one's it's a six and a half minute parody of American Pie. We're going to do the

00:25:18.340 --> 00:25:23.700
big rewrite and it's, it's glorious. So I'll link it, but you should be afraid, right? This is

00:25:23.700 --> 00:25:27.780
something that like, we're going to rewrite it. And basically the song is here's the eight version,

00:25:27.780 --> 00:25:32.020
the eight different languages. This thing's previously been written in, you know, it's

00:25:32.020 --> 00:25:35.460
with some things working times, even if it's not perfect, you just.

00:25:35.460 --> 00:25:40.900
Yeah. And it was also like rewriting it in order to optimize for this team that was mostly juniors.

00:25:40.900 --> 00:25:45.380
And so I was like, is this like, is this me being crazy? Like there was a lot of,

00:25:45.380 --> 00:25:50.500
yeah, I was, I was very unsure. So I tried everything out and it, and it worked and it was

00:25:50.500 --> 00:25:55.780
fun and it was like, like straightforward to write for this like small thing. And then I was like,

00:25:55.780 --> 00:26:01.860
let me see how the team works on this. So I gave them a bunch of little tasks to do. I was like,

00:26:01.860 --> 00:26:05.460
implement this, try that, and everybody was productive.

00:26:05.460 --> 00:26:09.620
How did they receive it? When you, when you introduced this idea to them after they'd been

00:26:09.620 --> 00:26:14.900
living in react and redux and all these things, they were happy with it. I think at first a little

00:26:14.900 --> 00:26:20.900
bit skeptical, but then once I started going, like I did get feedback from them. I make a point of

00:26:20.900 --> 00:26:26.420
getting feedback from them and they were like, this HTMX thing is way better. So that's great.

00:26:26.420 --> 00:26:29.060
Like, wait, what's the trick? Why does this work?

00:26:29.060 --> 00:26:34.100
So they went with it, but, and then they succeeded and they were happy and productive,

00:26:34.100 --> 00:26:37.780
which is great. And like, even people who needed like way too much of my support,

00:26:37.780 --> 00:26:42.660
like people who I had to like really sit with and pair with, like just to do like anything,

00:26:42.660 --> 00:26:47.220
they were suddenly able to do stuff that was meaningful. So I think for me, that's one of

00:26:47.220 --> 00:26:52.260
the things that's so exciting about HTMX. It's like, I've been working and training for so long

00:26:52.260 --> 00:26:58.260
and I've been like fighting the fight of like getting junior developers job ready for so long that

00:26:59.300 --> 00:27:04.980
I'm aware of many problems in the tech education ecosystem and the junior hiring ecosystem. And

00:27:04.980 --> 00:27:12.580
like the fact that entry level positions are like too hard for people, like it's a problem. And now we

00:27:12.580 --> 00:27:18.500
have tools that make web developments approachable again. So like I'm singing this HTMX song because I

00:27:18.500 --> 00:27:23.460
think it's going to change the industry in, in some pretty big ways. I think it's already making waves,

00:27:23.460 --> 00:27:27.140
but I'd like them to happen faster and bigger. Yeah.

00:27:27.140 --> 00:27:33.620
I think it will as well. And you know, I think the current web frameworks are really good and work

00:27:33.620 --> 00:27:38.820
really well with it. But I wonder if I wouldn't be surprised to see kind of like FastAPI came along

00:27:38.820 --> 00:27:43.940
and just said, Pydantic is the essence of this thing. And Pydantic changed a lot of data exchange,

00:27:43.940 --> 00:27:47.780
a lot of data validation. I'd wonder if some framework comes along and just says,

00:27:47.780 --> 00:27:53.060
HTMX is just ground up part of this thing. All right. That'd be interesting to see what that looks

00:27:53.060 --> 00:27:57.620
like. It would be interesting. I think there are definitely useful patterns and how to,

00:27:57.620 --> 00:28:02.580
how to do different things. And people are building tools around it or tools that complement it in

00:28:02.580 --> 00:28:07.780
useful ways. So we spoke about Alpine JS. There's another thing called template partials from

00:28:07.780 --> 00:28:14.580
Carlton Gibson and he, and that's really, really great. Something like this is super needed to make

00:28:14.580 --> 00:28:18.900
the code go from like, all right, we can do this too. Oh, that's nice. Yeah. Yeah. Yeah.

00:28:18.900 --> 00:28:23.780
That's really unspaghetti fires it, which is fantastic. Like this is one of my favorites at

00:28:23.780 --> 00:28:30.580
the moment. I have a one that I created for a Jinja card Jinja Jinja partials and also a chameleon

00:28:30.580 --> 00:28:36.420
one. So since I'm, I wasn't using for that, that a course example, this is actually chameleon. So I

00:28:36.420 --> 00:28:41.700
use the chameleon partials, but something like this is required in, you know, Carlton does great work,

00:28:41.700 --> 00:28:46.420
right? Yeah. Known for it. So you're using this as part of, as part of your, your site. So not that

00:28:46.420 --> 00:28:53.780
original site. I only heard about this later on, but now I use it on everything. Yeah. On all of my

00:28:53.780 --> 00:28:58.900
HTMX things, I use this. Right. Tell the Django people, what does this do? Like why, why do you

00:28:58.900 --> 00:29:04.500
need Django template partials instead of just Django templates? So it's just about organizing your code

00:29:04.500 --> 00:29:08.980
in a way that's a bit cleaner. So if you think about how you would render templates from your different

00:29:08.980 --> 00:29:16.260
views. If you had like a main page and then that page had a bunch of HTMX things happening that

00:29:16.260 --> 00:29:21.700
made calls to the backend to different views and those different views use different templates,

00:29:21.700 --> 00:29:27.140
then even though all those templates are associated with the same page, it kind of ends up being a bit

00:29:27.140 --> 00:29:32.900
of a mess. You've got like a lot of different like partial templates. So you need a cool naming convention for

00:29:32.900 --> 00:29:38.100
that. Like, is this a page? Is this a template? And it gets just a little bit, a little bit messy.

00:29:38.100 --> 00:29:43.700
And you need to switch between files all the time to see, to see what things are associated with each

00:29:43.700 --> 00:29:48.500
other. Let's say you've got like five pages and each of them have like five different partials

00:29:48.500 --> 00:29:53.460
associated with them. Suddenly it's a lot of files and you need to organize things somehow.

00:29:53.460 --> 00:30:00.180
So what Django template partials does is it allows you to like, like say you've got like a main page

00:30:00.180 --> 00:30:07.860
file to-do list, right? You could define a partial template for a to-do item within that same file,

00:30:07.860 --> 00:30:12.900
and it won't get rendered until you say render this thing. So you can like, when you render your

00:30:12.900 --> 00:30:18.740
template for the first time, you can just say, okay, loop over the to-do items and use this partial in

00:30:18.740 --> 00:30:24.020
place and render the things. And that's great. But then the other thing that you can do is that you

00:30:24.020 --> 00:30:30.100
can like in a view, you can choose to render a template, but you can choose to render a partial

00:30:30.100 --> 00:30:35.780
within that template as well. And so let's say you've got a, like a little form that says,

00:30:35.780 --> 00:30:44.180
add a new to-do list item. Then you'd submit that form. And then the view would look for the partial

00:30:44.180 --> 00:30:48.980
to-do list item within the page that you care about and it'll render that. And so it just ends

00:30:48.980 --> 00:30:54.260
up being that like everything is tidy and together. And it makes sense because like the to-do list items

00:30:54.260 --> 00:30:57.940
are only used in this page and those items are only used in that page.

00:30:57.940 --> 00:31:04.740
One of the big challenges that you'll quickly run into with this style, this HTMX partial exchange

00:31:04.740 --> 00:31:10.100
style is when you show the page originally, you want just the server rendered version, which includes,

00:31:10.100 --> 00:31:15.620
let's say your to-do items. So you need the HTML for the to-do items in the main page. But then when

00:31:15.620 --> 00:31:22.340
you make changes to it, you need a little fragment of that same HTML to put a new to-do item in there

00:31:22.340 --> 00:31:27.700
or to edit one or something. And if you're not careful, well, then you have multiple copies of those

00:31:27.700 --> 00:31:33.060
laying around and somebody updates the design for one. And then it doesn't update the partial one that

00:31:33.060 --> 00:31:38.740
you wrote, which is a copy. It's not pretty. So finding a way for reuse like this Django templates

00:31:38.740 --> 00:31:44.260
partials, it's pretty required. I think if you're going to stay sane, it's like functions are required

00:31:44.260 --> 00:31:46.820
to write code. You know, it's pretty much like that. Right?

00:31:46.820 --> 00:31:52.340
I think so. Like you can get away with just using like lots of files and you could keep things dry with

00:31:52.340 --> 00:31:58.740
lots of files, but it gets like, it's very spaghetti unless you're, you put a lot of effort into organizing

00:31:58.740 --> 00:32:03.540
it and then keeping it organized because people will make PRs that do like all sorts of weird things.

00:32:03.540 --> 00:32:10.260
So yeah, it's, it's not good to have to like monitor that everything's organized. It would be better if

00:32:10.260 --> 00:32:14.820
it was just there done by default. Like the read next to the default behavior is correct. Yeah.

00:32:14.820 --> 00:32:17.860
Yeah. So, so grab, grab a file, a library for that.

00:32:17.860 --> 00:32:25.540
This portion of Talk Python to Me is brought to you by Bluehost. Got ideas, but no idea how to build a

00:32:25.540 --> 00:32:31.380
website. Get Bluehost with their AI design tool. You can quickly generate a high quality,

00:32:31.380 --> 00:32:36.980
fast loading WordPress site instantly. Once you've nailed the look, just hit enter and your site goes

00:32:36.980 --> 00:32:41.780
live. It's really that simple. And it doesn't matter whether you're a hobbyist entrepreneur or just

00:32:41.780 --> 00:32:47.380
starting your side hustle. Bluehost has you covered with built-in marketing and e-commerce tools to help

00:32:47.380 --> 00:32:52.020
you grow and scale your website for the long haul. Since you're listening to my show, you probably know

00:32:52.020 --> 00:32:57.060
Python, but sometimes it's better to focus on what you're creating rather than a custom built

00:32:57.060 --> 00:33:01.860
website and add another month till you launch your idea. When you upgrade to Bluehost cloud,

00:33:01.860 --> 00:33:07.780
you get a hundred percent uptime and 24 seven support to ensure your site stays online through

00:33:07.780 --> 00:33:13.540
heavy traffic. Bluehost really makes building your dream website easier than ever. So what's stopping you?

00:33:13.540 --> 00:33:20.580
You've already got the vision. Make it real. Visit talkpython.fm/bluehost right now and get started today.

00:33:20.580 --> 00:33:23.060
And thank you to Bluehost for supporting the show.

00:33:23.060 --> 00:33:31.060
Let's talk about the before and after stack. So before you talked about React, but tell us all the

00:33:31.060 --> 00:33:33.460
pieces involved and then what does it look like today?

00:33:33.460 --> 00:33:40.820
Redux was for state management and then I used Redux Saga mostly for data fetching stuff so that I could

00:33:40.820 --> 00:33:47.620
handle loading spinners and I could see the status of different requests over time and that kind of

00:33:47.620 --> 00:33:56.420
thing. Then I used Material UI because my front-end make pretty skills aren't the strongest. I wanted a

00:33:56.420 --> 00:34:02.500
component library that would just work and that was the chosen one. Then on the back end, it was Django.

00:34:02.500 --> 00:34:08.740
Django REST framework is fairly well known. Then I used a thing called Django Guardian because I needed

00:34:08.740 --> 00:34:14.180
object level permissions on the different model instances. So for example, we had this Kanban board

00:34:14.180 --> 00:34:18.980
and there were cards on this board that people could move around and different people would have

00:34:18.980 --> 00:34:24.500
different permission to different cards. So we had things like one learner would be working on a card

00:34:24.500 --> 00:34:30.340
and then they'd ask for a review and then another learner should be able to review that. But we wouldn't want

00:34:30.340 --> 00:34:36.180
to let just any learner look at their code because then it would cause all sorts of problems. So it's

00:34:36.180 --> 00:34:42.100
like, okay, this person has finished this project so we can add them as a reviewer on this card. And so we

00:34:42.100 --> 00:34:48.020
needed to be pretty particular about which of our users could see different things. It wasn't super

00:34:48.020 --> 00:34:54.100
straightforward in that this person can see this. It was like, this person can for these reasons. Django

00:34:54.100 --> 00:34:56.900
Guardian is really, really cool. And then Postgres.

00:34:56.900 --> 00:35:02.340
That's a cool library. Maybe people could find a nice use for that one. That's the one that's new

00:35:02.340 --> 00:35:02.820
to me. Yeah.

00:35:02.820 --> 00:35:08.020
That's really nice. And you can even do things like when you query a database and you say,

00:35:08.020 --> 00:35:13.780
fetch me all the cards, you can do something like, fetch me all the cards that Bob can see. And so

00:35:13.780 --> 00:35:19.140
long as it's configured well, then it can do that sort of thing, which is very, very helpful.

00:35:19.140 --> 00:35:23.460
Wow. That's really cool. So you don't have to go get all the cards and then,

00:35:23.460 --> 00:35:29.060
yeah, who have all these different permissions and then construct some query that comes up with it.

00:35:29.060 --> 00:35:30.500
Yeah. Very nice. I love it.

00:35:30.500 --> 00:35:37.300
And that plugs into DRF as well. So like your serializer or your view set, I haven't worked

00:35:37.300 --> 00:35:45.060
in it in a while, but the query that gets used when you access like a list API endpoint, you could just

00:35:45.060 --> 00:35:52.420
apply that automatically as well. So you don't need to build it in that case either. So it plugs into all

00:35:52.420 --> 00:35:56.260
of the things. It's a little bit weird at first to get used to, and then it's just fantastic.

00:35:56.260 --> 00:36:00.420
And now I'm guessing much of the front end stuff is probably not there.

00:36:00.420 --> 00:36:06.740
The old application still exists, but it's not, but it's like the HTMX based version would just

00:36:06.740 --> 00:36:10.740
be a drop in replacement. It's like, go to this URL instead kind of thing.

00:36:10.740 --> 00:36:11.140
Yeah.

00:36:11.140 --> 00:36:16.020
Now that it's done, you said you used to work there, but you don't work there anymore. Is that right?

00:36:16.020 --> 00:36:18.740
Oh yeah. Not anymore. As of a few months ago.

00:36:18.740 --> 00:36:22.660
I guess that's recent enough to say sort of, how is it going now? Right? How are,

00:36:22.660 --> 00:36:26.820
how's it being used? How are people, you know, is it still going strong as the technology?

00:36:26.820 --> 00:36:31.380
I hope that they're still building on it. There was some, some weird things happening

00:36:31.380 --> 00:36:36.820
at the organization before I left. So yeah, I expect, I hope that everything is still going

00:36:36.820 --> 00:36:38.660
smoothly, but I haven't been plugged in for a while.

00:36:38.660 --> 00:36:46.340
Let's give a, maybe a quick shout out to this video, this other Django con talk. Gosh, why is,

00:36:46.340 --> 00:36:53.220
I need to sign into my YouTube premium on this browser, but this real world SaaS product example

00:36:53.220 --> 00:36:59.060
from this guy in France, David Gilead. Yeah. That, that one you said was a pretty good example. If you

00:36:59.060 --> 00:37:00.660
need like a walkthrough case.

00:37:00.660 --> 00:37:05.860
Yeah. So that one, I didn't see it live. I saw a video of it after the fact, but it is

00:37:05.860 --> 00:37:11.940
like the ultimate HTMX demo. It shows this guy really makes it dance. It's, it's quite an amazing

00:37:11.940 --> 00:37:16.900
thing to see. So highly recommend that. Yeah. This guy, David goes through and says, you know,

00:37:16.900 --> 00:37:22.820
here's our complex SaaS product. And let me walk you through all the features. I feel like this would

00:37:22.820 --> 00:37:27.860
be a pretty good one. Your article as well. And then this video, if, if you want to say,

00:37:27.860 --> 00:37:33.140
make a case to your team, like, Hey everyone, can we consider doing this? And yeah, I'm sure

00:37:33.140 --> 00:37:37.860
right off the bat, you'll get some folks say, well, no, we have to use react because it's interactive.

00:37:37.860 --> 00:37:41.540
This, you interact with that part and it changes that part. How are we going to possibly pull that

00:37:41.540 --> 00:37:45.460
off? It's like, yeah, no, that's, that's totally possible. Yeah. I think the main arguments people have

00:37:45.460 --> 00:37:50.340
against it are like scale, but that argument doesn't make super a lot of sense to me. I think it might

00:37:50.340 --> 00:37:54.820
be complexity scale that they're concerned about, but I think things like template partials solve

00:37:54.820 --> 00:38:01.860
a lot of that problem. And then there's, can it do the things and this solves that problem. And then

00:38:01.860 --> 00:38:06.980
is it really, is it really so much better for the team is the other question. Is it just another

00:38:06.980 --> 00:38:11.060
fashion? Is it just another fad? And that's something that's sometimes hard to get across.

00:38:11.060 --> 00:38:17.700
I think that my article will do a good job of explaining why it's a good idea. Because I had to explain

00:38:17.700 --> 00:38:22.820
this to non-technical stakeholders. So I was like, okay, I I'm making this crazy decision and this is

00:38:22.820 --> 00:38:28.420
why. And so I think I've got the argument down. Go, go read that article if you need to convince someone.

00:38:28.420 --> 00:38:33.460
But I think the other thing to mention is the, the full stack that I've moved to in the end.

00:38:33.460 --> 00:38:38.100
Yeah. So HTMX, we spoke about Django. We spoke about an Alpine. We spoke about now,

00:38:38.100 --> 00:38:44.500
if you are running a, a react front end or whatever you would test the front end in a react way,

00:38:44.500 --> 00:38:48.580
like you would use tools that are appropriate for that. So, and so you need to think about

00:38:48.580 --> 00:38:49.620
different ways to, to test things.

00:38:49.620 --> 00:38:53.540
Would that be like Selenium or something? Or what are we talking?

00:38:53.540 --> 00:38:57.940
So I like Playwright quite a lot. So you could do it with Selenium, but that would be a,

00:38:57.940 --> 00:39:04.180
like, it would include some pain. Playwright is very, very lovely to, to work with. So it's like Selenium,

00:39:04.180 --> 00:39:11.460
only with all sorts of useful test goodies built in. So like, you can get it to take videos of your

00:39:11.460 --> 00:39:18.820
failed tests and it's got useful flags for like running your tests on different browsers and you

00:39:18.820 --> 00:39:24.500
can like keep a trace of things. It's got interesting debugging stuff built in and you can just run it

00:39:24.500 --> 00:39:27.460
with pytest. And so yeah, Playwright is a big part of it as well.

00:39:27.460 --> 00:39:31.700
Yeah. Playwright is really nice. You know, one thing that just occurred to me around the testing,

00:39:31.700 --> 00:39:36.740
if you've got a rich JavaScript front end sort of thing, you have to use something like Playwright

00:39:36.740 --> 00:39:42.740
or Selenium where it does a full browser request render of the page to interact with it. Right. And

00:39:42.740 --> 00:39:49.460
you can also do that with HTMLX, but a lot of these web frameworks, you can just in your, your web test

00:39:49.460 --> 00:39:56.180
code, you can say, create like a, a testing instance of my server. Right. And then make it do this request

00:39:56.180 --> 00:40:01.860
and then see what the response came back without nearly the same overhead. And because this stuff all happens

00:40:01.860 --> 00:40:08.580
on the server, I guess you could just write a unit test, like a web test against a fragment response. Right.

00:40:08.580 --> 00:40:13.060
Yeah, you can. So you can, you can write little unit tests that check different things like that.

00:40:13.060 --> 00:40:18.980
But since a lot of the interactivity is defined within the HTML tags, your unit tests won't,

00:40:18.980 --> 00:40:24.180
they won't be able to cover like if the unit clicks this and that happens. And so that's where,

00:40:24.180 --> 00:40:27.220
that's where something like Playwright will come in. Yeah. You'll still need that to,

00:40:27.220 --> 00:40:31.380
but maybe less Playwright is needed than otherwise is what I was thinking. Yeah.

00:40:31.380 --> 00:40:35.620
Definitely. I think one of the, the anti-patterns I've seen is too much Playwright where they're just

00:40:35.620 --> 00:40:39.620
like, why don't you use Playwright for everything? And then your tests are ridiculously slow. And it's

00:40:39.620 --> 00:40:44.020
like, you could have just, you don't even need to test the view. There was this function that you

00:40:44.020 --> 00:40:47.460
wanted to test. Exactly. You're not Shakespeare. You don't need that much Playwright. Come on.

00:40:47.460 --> 00:40:53.300
Yeah. Yeah. Playwright is a cool thing. I definitely recommend it. Yeah. Yeah. And it plugs into Django,

00:40:53.300 --> 00:40:58.260
really smoothly as well. So you don't actually, so Playwright, it spins up a browser and points it at

00:40:58.260 --> 00:41:05.060
a running instance of an application in order to like test the things. But with Django and pytest,

00:41:05.060 --> 00:41:10.900
you can use a fixture to spin up like a test version of your, of your application. It's kind of like

00:41:10.900 --> 00:41:16.820
run servers running there in your tests anyway. So it integrates very, very smoothly. Yeah. Makes it

00:41:16.820 --> 00:41:21.140
very convenient. Yeah, absolutely. You know, one of the things you wrote a lot about, and you,

00:41:21.140 --> 00:41:27.540
you mentioned this, but you kind of flew past it a little bit was you said, am I crazy for optimizing

00:41:27.540 --> 00:41:34.900
for junior developers? Right. On the other hand, optimizing for simplicity, even if you're,

00:41:34.900 --> 00:41:39.860
you're an expert, right? You don't just cause you can do all the steps and all the complexity doesn't

00:41:39.860 --> 00:41:44.420
mean you should constantly be doing those steps. Right. Yeah, definitely. I think there's a case for

00:41:44.420 --> 00:41:48.420
optimizing for simplicity here. What do you think? I completely agree. I mean, if you,

00:41:48.420 --> 00:41:54.100
if you can just like take the, the cognitive load of developing your app and then make it like simple,

00:41:54.100 --> 00:42:00.020
so you can focus on actually solving problems instead of wiring, I suppose, and life gets a lot,

00:42:00.020 --> 00:42:06.180
gets a lot easier. So yeah, simplicity rocks. It's fast to develop, but things like, like HTMX make

00:42:06.180 --> 00:42:11.620
your code way, way smaller than, than it would otherwise be. So it's not just simple. It's not just that

00:42:11.620 --> 00:42:16.420
it's less convoluted. There's also less of it. And so there's less to test. There's, there's less stuff

00:42:16.420 --> 00:42:23.300
that can, can cause bugs. And most of the like front end interactivity is handled by another library

00:42:23.300 --> 00:42:27.700
that's really well tested. And you're just doing these like tiny little things that are easy to reason

00:42:27.700 --> 00:42:36.260
about. And so it's just, it's robust and clean. So yeah, I do think it's worth optimizing for simplicity.

00:42:36.260 --> 00:42:41.380
I mean, it made it, it made everybody more productive, the juniors and me as well. So

00:42:41.380 --> 00:42:47.940
top notch. I'm constantly in pursuit of, of trying to keep things simple. You know,

00:42:47.940 --> 00:42:52.260
if you go over to the HTMX site, I don't know if you've, you've looked at this section, but they've

00:42:52.260 --> 00:42:58.020
got a, you know, Kirsten has this essay section, which, you know, it's not quite a blog, but it's

00:42:58.020 --> 00:43:03.220
kind of a blog, you know, it does. It's not, not in order. It's in sort of category, whatever.

00:43:03.220 --> 00:43:07.940
And these are all nice. One thing that's nice is he has a, on the other hand, here's a couple of

00:43:07.940 --> 00:43:12.900
examples why people didn't pick it. Right. But he's got a whole section on complexity. Very, very bad.

00:43:12.900 --> 00:43:18.180
Yeah. But if you keep going, there's a bunch of memes. The memes are so good, aren't they?

00:43:18.180 --> 00:43:19.380
They are fantastic.

00:43:19.380 --> 00:43:27.380
And one of these super definitely applies is, you know, there's one that says HTML plus a backend for

00:43:27.380 --> 00:43:31.380
like the, you know, it's got this bell curve for the beginners. Like, oh, this is what I want.

00:43:31.380 --> 00:43:35.780
That as you get a little bit better, you're like, oh, I need all this, all this complexity,

00:43:35.780 --> 00:43:40.020
all these layers. And then, you know, sort of the, the Jedi Knight at the end is yeah.

00:43:40.020 --> 00:43:44.660
HTML in the backend, right? Going, going through this path and like, you don't waste any.

00:43:44.660 --> 00:43:45.700
You do exactly.

00:43:45.700 --> 00:43:49.140
These two ends. Yeah. I don't necessarily want to characterize beginners to look like this,

00:43:49.140 --> 00:43:55.460
this character in this meme, but you know, I think the meme still speaks, speaks to this somewhat. Right?

00:43:55.460 --> 00:44:01.540
Yeah. Yeah, definitely. Definitely. Yeah. I think it's about like when I, when I teach people to code,

00:44:01.540 --> 00:44:06.900
when I teach people like the very basics of code and like something I see with very junior developers,

00:44:06.900 --> 00:44:11.620
is that they try to show off and be like, look how fancy I can make my code. I can do all of these

00:44:11.620 --> 00:44:16.660
complicated things. And then you get them to think more like Jedis and say, like, don't waste any moves.

00:44:16.660 --> 00:44:22.340
Like, like how you wouldn't be flailing about like, this is kind of like flailing.

00:44:22.340 --> 00:44:29.220
And HTML, HTML does that for you. It just lets you like move directly towards your goal instead of

00:44:29.220 --> 00:44:35.860
having to like move around it. Yeah. It's pretty glorious. So I know that you do a lot of teaching.

00:44:35.860 --> 00:44:42.180
Maybe you said you work for this local company that was, you did the Kanban board app for and so on.

00:44:42.180 --> 00:44:46.020
Now, what are you up to? Still teaching just differently. It was really cool working there.

00:44:46.020 --> 00:44:51.620
I was there for a long time, like five years in total, which is really long. And it was super

00:44:51.620 --> 00:44:58.820
successful. So like since 2020, basically everybody who passed our courses ended up getting good jobs,

00:44:58.820 --> 00:45:02.820
like very, very close to a hundred percent of the people who passed. And the people who didn't pass

00:45:02.820 --> 00:45:10.340
was like actually kind of small, like 7%. And then there's lots of reasons for that. But yeah, I learned a ton

00:45:10.340 --> 00:45:14.740
from being there. That was in person, but pre-COVID, right? Yeah. So post-COVID, we actually got way,

00:45:14.740 --> 00:45:19.460
way better because we had better monitoring of individuals and we could do things like track

00:45:19.460 --> 00:45:24.660
people's cards on their board, moving around. And then from that, you can say like, oh, this piece

00:45:24.660 --> 00:45:29.140
of content is dodgy. Like it would give us as educators, a lot of feedback about what we were

00:45:29.140 --> 00:45:34.260
doing. Because if a person was stuck and you're like, I explained this thing great. And then they're

00:45:34.260 --> 00:45:38.740
still stuck. You're like, I didn't explain this thing great. And so like the way that the teaching

00:45:38.740 --> 00:45:45.460
mechanism was built was like really good for the students. But like, if we as educators didn't do

00:45:45.460 --> 00:45:50.500
a good job on something, we'd know about it and we'd have to fix it. And I think that honed the craft

00:45:50.500 --> 00:45:56.900
quite a lot. So I learned a bunch there. Now what I'm doing is I want to spread those skills in different

00:45:56.900 --> 00:46:02.740
ways. So there's a whole lot to what I'm doing. One thing I want to do is help educators themselves.

00:46:02.740 --> 00:46:06.020
So I've got this thing called the Guild of Educators, because I always wanted to guilt.

00:46:06.020 --> 00:46:12.740
And it's got a whole lot of people in there who are like, it's a free community. Come and join.

00:46:12.740 --> 00:46:18.580
It's a bunch of education nerds who talk about education with each other. It's a support structure,

00:46:18.580 --> 00:46:25.540
because I think educators need support structures. And it's a place to share, share learnings and

00:46:25.540 --> 00:46:30.660
share resources and opportunities and things like that. So it's still very new, but that's one part of it.

00:46:31.940 --> 00:46:34.980
I want to offer teacher training and things like that. But I also...

00:46:34.980 --> 00:46:39.220
Just like we have junior developers, you have people got to start somewhere with teaching and

00:46:39.220 --> 00:46:40.980
teaching online is different, all that.

00:46:40.980 --> 00:46:45.220
It's hard because there aren't really good resources for tech educators. There's

00:46:45.220 --> 00:46:51.860
like, if you dig into the literature on how learning works and how teaching works, it's

00:46:51.860 --> 00:46:55.940
like, it's all either very academic. And so it's a little bit hard to pass and it's not

00:46:56.500 --> 00:47:01.780
like, it's just not packaged well for the people who need it, or it's packaged in the wrong way.

00:47:01.780 --> 00:47:06.260
So I came across a code school recently who I was like, how do you handle your teacher training? And

00:47:06.260 --> 00:47:10.820
they're like, we outsource it to these guys. And they showed me this other organization that does

00:47:10.820 --> 00:47:16.820
teacher training. And it's like, I dug through their courses and one of their selling points was like,

00:47:16.820 --> 00:47:22.020
our teacher training courses are so versatile that they can be used for florists and personal trainers.

00:47:22.020 --> 00:47:29.220
So I was like, yeah, maybe not appropriate for what we're up to here. But that's what people are relying

00:47:29.220 --> 00:47:35.300
on. And that's like the best that the industry has to offer. So I think there's a big hole in the

00:47:35.300 --> 00:47:40.660
education space and I want to work to fill that. Yeah. So that's part of what I'm doing. And the other

00:47:40.660 --> 00:47:47.460
part is offering technical training. And this is partially because you've got to practice the craft,

00:47:47.460 --> 00:47:53.700
partially because I want to create opportunities for educators to get good, partially because I

00:47:53.700 --> 00:48:00.500
really like teaching this stuff. So there's all different reasons why I'm teaching. So right now,

00:48:00.500 --> 00:48:05.700
I'm building out a bunch of small workshops that cover different skills and are fairly standalone.

00:48:05.700 --> 00:48:11.460
And those are Lego blocks that will combine into something much bigger in the future. But for now,

00:48:11.460 --> 00:48:18.260
the first workshop that I have on offer is all about Django and HTMX. So it's pretty exciting.

00:48:18.260 --> 00:48:23.300
So it talks about the stack that we just spoke about. And we didn't mention Tailwind, but Tailwind is great

00:48:23.300 --> 00:48:27.700
as well. It means that I can make front ends that look reasonable. So long as they're in-

00:48:27.700 --> 00:48:33.620
That's right. You said you had used Material UI previously to make it good-ish. And Tailwind is what used

00:48:33.620 --> 00:48:38.900
in the new version? Yeah, I'm really enjoying Tailwind. Yeah. So the idea with this little workshop,

00:48:38.900 --> 00:48:44.900
I ran it as part of DjangoCon US recently, it was super cool. I got, I don't know,

00:48:44.900 --> 00:48:50.180
there were way too many people there, which was great, but also it was a lot to solve. It was like,

00:48:50.180 --> 00:48:57.300
whoa, all of you. So that was super cool and went really well. The basic idea is that I want to show

00:48:57.300 --> 00:49:04.260
how to build a CRUD application using the stack of tools in a way that sets people up to be able to

00:49:04.260 --> 00:49:09.140
build their own stuff. And part of the workshop is in fact, taking these tools and building your own

00:49:09.140 --> 00:49:15.300
thing. And so for people who are kind of early on their career, in their career, they can get some,

00:49:15.300 --> 00:49:20.020
like the starts of decent portfolio projects out of it. People built all sorts of interesting things.

00:49:20.020 --> 00:49:25.140
So like the one person built this, their own personal learner management system for like their own

00:49:25.140 --> 00:49:31.540
learning, which was really lovely. Somebody built a music store. Somebody else built a, what was it?

00:49:31.540 --> 00:49:37.220
Like a chore manager for, for their family so that they don't fight so much. It was great.

00:49:37.220 --> 00:49:38.420
Oh, that's interesting. Yeah.

00:49:38.420 --> 00:49:44.180
Yeah. And all with Django, HTMLX and Alpine JS and the others. And the other thing that's cool about

00:49:44.180 --> 00:49:49.220
this is it's, it's a CRUD application. Like I'm, I'm teaching people the, the bits and pieces that

00:49:49.220 --> 00:49:55.300
build a CRUD app. And like most of the internet is CRUD applications because it's for the audience.

00:49:55.300 --> 00:49:59.380
Like if anybody hasn't heard of CRUD, it's create, read, update, delete. Like that's most of what you

00:49:59.380 --> 00:50:04.900
need to do on the internet. And so if you get the patterns down for like a simple CRUD app, then you

00:50:04.900 --> 00:50:11.300
can do some pretty hardcore things with it. So yeah, this is, so it's covering that. The workshop is small.

00:50:11.300 --> 00:50:18.260
So it's like, I'm, I'm keeping things very, very small intention intentionally because I believe in

00:50:18.260 --> 00:50:22.580
the power of teachers and I want to make sure that everybody gets attention and then gets the support

00:50:22.580 --> 00:50:27.220
that they need. And also because of the people who tend to come to these kinds of things have different

00:50:27.220 --> 00:50:31.060
backgrounds. So some people need help here. Some people need help there. And so you need to keep

00:50:31.060 --> 00:50:37.380
like a good ratio of teachers to students. So yeah, expert led, high support, small group,

00:50:37.380 --> 00:50:39.060
all of that good stuff. Quite exciting.

00:50:39.060 --> 00:50:42.980
That's very cool. I'll, I'll link to this workshop in the show notes. People want to check it out.

00:50:42.980 --> 00:50:49.460
And it's out of time, but it's remote. So people can attend from wherever, right? You don't have to be

00:50:49.460 --> 00:50:49.860
near you.

00:50:49.860 --> 00:50:54.580
Yeah. So you don't need to be in South Africa. In fact, I made it in US Eastern time because

00:50:55.140 --> 00:51:02.100
strangely enough, most of the people who read my blog are in the US. Like, so it's US and South

00:51:02.100 --> 00:51:08.340
Africa and it's, it shifts and changes around. But part of the reason I'm marketing it to the US

00:51:08.340 --> 00:51:15.540
is because I want to be able to fund training Africans and like there, there just isn't as much

00:51:15.540 --> 00:51:22.740
money on the side of the world. So yeah, I want to be able to make doing good in the tech education

00:51:22.740 --> 00:51:28.100
space into something that's financially sustainable. So that's why the US, and that is why it's,

00:51:28.100 --> 00:51:34.580
it's priced in dollars. Yeah. So you guys can have a discount code, talk Python, talk underscore

00:51:34.580 --> 00:51:36.980
Python. I think that was the one I said, let me just share.

00:51:36.980 --> 00:51:39.140
Yeah, I'll put it in show notes. People can find it there.

00:51:39.140 --> 00:51:46.420
Awesome. So you'll get 10% off. And then I also want to give like another 10% to something. So

00:51:47.060 --> 00:51:53.780
Foxley wanted me to give 10% from their discount code to, the DSF. So that's another code that's

00:51:53.780 --> 00:51:58.740
out there. So that's fantastic. I've, I've definitely benefited a lot from the DSF. So that's really,

00:51:58.740 --> 00:52:05.460
really cool. So since this is your podcast, should, should the further 10% go to the DSF or the PSF or

00:52:05.460 --> 00:52:08.580
the DjangoCon Africa event.

00:52:08.580 --> 00:52:10.580
I vote DjangoCon Africa.

00:52:10.580 --> 00:52:15.220
Fantastic. I was hoping that you'd say that. Yeah. I love DjangoCon Africa. It's so freaking cool.

00:52:15.220 --> 00:52:19.860
Speaking of a conference and talks and stuff, Kim out in the audience says,

00:52:19.860 --> 00:52:25.700
in a few weeks, a really good talk Sina gave at South Africa PyCon, a few weeks ago,

00:52:25.700 --> 00:52:30.420
should be online. Power to the people who teach people to code. So that's cool, right?

00:52:30.420 --> 00:52:36.820
Yes. That's the longest title I've had for a talk ever. Thanks, Kim. Yeah. So I did that talk at

00:52:36.820 --> 00:52:43.060
PyCon South Africa and I also did it, I did a longer version of it at DjangoCon US as, as a keynote. So I was

00:52:43.060 --> 00:52:48.100
super, super happy that I got that opportunity. It was so cool. But yeah, it just talks about

00:52:48.100 --> 00:52:54.740
kind of how I think about teaching and how I, that's how I think about teaching and the mechanisms that,

00:52:54.740 --> 00:53:00.420
that we set up. So, so like, how does mastery based learning work and how do you actually get,

00:53:00.420 --> 00:53:06.660
how do you engineer a education system so that it sets people up for success and not like either

00:53:06.660 --> 00:53:11.780
frustration or boredom? Because there's a lot of, a lot of things that are weird about the traditional

00:53:11.780 --> 00:53:18.020
systems. Yeah. So it talks about that, but then it also shares a bunch of lessons for individual

00:53:18.020 --> 00:53:21.860
educators on the ground. So, so that thing that I was talking about earlier about how

00:53:22.820 --> 00:53:27.860
we as educators in the system, we're getting like a ton of feedback about our, our own,

00:53:27.860 --> 00:53:33.860
the quality of our work that gave us space to, to figure out a lot of like hard hitting things.

00:53:33.860 --> 00:53:40.100
So it's, it's kind of the 80, 20 of what teachers or would be teachers should, should focus on.

00:53:40.100 --> 00:53:44.660
And I think it's powerful because a lot of like everybody teaches, I mean, you teach people,

00:53:44.660 --> 00:53:50.340
teach new team members, like there's a lot of volunteer teachers as well, which is great.

00:53:50.340 --> 00:53:54.100
I mean, there's stuff like, I think we, I think doing this kind of a, these presentations,

00:53:54.100 --> 00:53:58.260
this, this kind of teaching is a super cheat code for leveling up your own skills.

00:53:58.260 --> 00:54:02.980
Yeah, definitely. There's this thing called protégé effect, which is a well-studied thing.

00:54:02.980 --> 00:54:08.020
So when people say teaching is a great way to learn, it's, they're not just being squishy.

00:54:08.020 --> 00:54:15.220
Like it's legit. It's really, really legit. And there's, there are a lot of mechanisms behind it.

00:54:15.220 --> 00:54:21.140
It's like one of the simple ones is like teaching is spaced repetition and recall, and that helps you

00:54:21.140 --> 00:54:26.260
remember your stuff. Another one is like, people will ask you weird questions that you wouldn't

00:54:26.260 --> 00:54:30.500
expect. And so you look at your own knowledge from a different direction and you build better mental

00:54:30.500 --> 00:54:36.980
frameworks or more robust mental frameworks. Like some people are good at building mental frameworks

00:54:36.980 --> 00:54:42.100
frameworks and some people aren't as good. And a good way to like get a person to build good mental

00:54:42.100 --> 00:54:46.900
frameworks is to ask them weird, like left side questions about the stuff they know and get them

00:54:46.900 --> 00:54:50.980
to look at things from different angles. So you get that from, from the people you're teaching. It's,

00:54:50.980 --> 00:54:52.580
yeah, it's really, it's a beautiful thing.

00:54:52.580 --> 00:54:57.460
Yeah, it really is. It definitely rounds out your knowledge and makes you think deeply about some

00:54:57.460 --> 00:54:59.460
of these ideas that you just maybe glossed over.

00:54:59.460 --> 00:55:00.100
Yeah, yeah.

00:55:00.100 --> 00:55:04.180
This is probably a good place to leave it. Let's, I want to give out one more resource real quick for

00:55:04.180 --> 00:55:10.900
people is just awesome.htmx over on GitHub. I don't know if you poked around this, but it's got many,

00:55:10.900 --> 00:55:13.620
many examples of tools and libraries for

00:55:13.620 --> 00:55:18.820
htmx and Python, but also in a ton of other languages. So that's super cool.

00:55:18.820 --> 00:55:26.100
Apparently there's a flask htmx tailwind one and one for sockets or maybe htmx over web sockets.

00:55:26.100 --> 00:55:30.820
I don't know. These are all look pretty cool. So people can check them out, but yeah. And I

00:55:30.820 --> 00:55:36.740
definitely want to recommend people check out your essay and yeah, they could take these ideas and run

00:55:36.740 --> 00:55:41.300
with them. Yeah. Cool. Well, Gina, thanks for being on the show. It's been great to talk to you.

00:55:41.300 --> 00:55:43.460
Yeah, it's been great to talk to you too. This was a lot of fun.

00:55:43.460 --> 00:55:44.180
It was. Bye all.

00:55:44.180 --> 00:55:44.500
Cheers.

00:55:45.940 --> 00:55:51.220
This has been another episode of Talk Python to Me. Thank you to our sponsors. Be sure to check

00:55:51.220 --> 00:55:56.740
out what they're offering. It really helps support the show. This episode is sponsored by Posit Connect

00:55:56.740 --> 00:56:01.620
from the makers of Shiny. Publish, share, and deploy all of your data projects that you're creating

00:56:01.620 --> 00:56:08.980
using Python. Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quarto, Reports, Dashboards, and APIs.

00:56:09.620 --> 00:56:16.020
Posit Connect supports all of them. Try Posit Connect for free by going to talkpython.fm/posit.

00:56:16.020 --> 00:56:16.980
P-O-S-I-T.

00:56:16.980 --> 00:56:23.860
And this episode is brought to you by Bluehost. Do you need a website fast? Get Bluehost. Their AI builds

00:56:23.860 --> 00:56:29.620
your WordPress site in minutes and their built-in tools optimize your growth. Don't wait. Visit

00:56:29.620 --> 00:56:35.940
talkpython.fm/bluhost to get started. Want to level up your Python? We have one of the largest

00:56:35.940 --> 00:56:41.540
catalogs of Python video courses over at Talk Python. Our content ranges from true beginners to deeply

00:56:41.540 --> 00:56:46.820
advanced topics like memory and async. And best of all, there's not a subscription in sight. Check it

00:56:46.820 --> 00:56:52.180
out for yourself at training.talkpython.fm. Be sure to subscribe to the show, open your favorite

00:56:52.180 --> 00:56:57.460
podcast app, and search for Python. We should be right at the top. You can also find the iTunes feed

00:56:57.460 --> 00:57:03.700
at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on

00:57:03.700 --> 00:57:08.660
talkpython.fm. We're live streaming most of our recordings these days. If you want to be part of

00:57:08.660 --> 00:57:13.380
the show and have your comments featured on the air, be sure to subscribe to our YouTube channel at

00:57:13.380 --> 00:57:19.460
talkpython.fm/youtube. This is your host, Michael Kennedy. Thanks so much for listening. I really

00:57:19.460 --> 00:57:29.700
appreciate it. Now get out there and write some Python code.

00:57:29.700 --> 00:57:41.940
I'll see you next time.

00:57:41.940 --> 00:57:42.900
Bye.

