WEBVTT

00:00:00.000 --> 00:00:02.400
Getting started in Python is pretty easy.


00:00:02.400 --> 00:00:04.540
There's even a t-shirt that jokes about it.


00:00:04.540 --> 00:00:06.780
I learned Python, it was a good weekend.


00:00:06.780 --> 00:00:10.380
But to go from knowing how to create variables and writing loops,


00:00:10.380 --> 00:00:13.700
to building amazing things like FastAPI and Instagram,


00:00:13.700 --> 00:00:17.400
well, there's this little gap in between those two things, don't you think?


00:00:17.400 --> 00:00:20.680
On this episode, we welcome Eric Matthews to the show.


00:00:20.680 --> 00:00:23.420
He has thought a lot about teaching Python and comes to share


00:00:23.420 --> 00:00:26.940
his 10 tips for going from Python beginner to expert.


00:00:26.940 --> 00:00:33.940
This is Talk Python to Me, episode 427, recorded July 19th, 2023.


00:00:33.940 --> 00:00:45.940
[music]


00:00:45.940 --> 00:00:49.940
Welcome to Talk Python to Me, a weekly podcast on Python.


00:00:49.940 --> 00:00:51.940
This is your host, Michael Kennedy.


00:00:51.940 --> 00:00:58.820
on Mastodon where I'm @mkennedy and follow the podcast using @talkpython both on fosstodon.org.


00:00:58.820 --> 00:01:03.380
Be careful with impersonating accounts on other instances, there are many. Keep up with the show


00:01:03.380 --> 00:01:09.620
and listen to over seven years of past episodes at talkpython.fm. We've started streaming most of


00:01:09.620 --> 00:01:15.300
our episodes live on YouTube. Subscribe to our YouTube channel over at talkpython.fm/youtube


00:01:15.300 --> 00:01:21.860
to get notified about upcoming shows and be part of that episode. This episode is brought to you by


00:01:21.860 --> 00:01:23.660
by GlareDB.


00:01:23.660 --> 00:01:25.860
GlareDB is an open source database


00:01:25.860 --> 00:01:29.020
for querying distributed and disparate data.


00:01:29.020 --> 00:01:30.380
Connect your data sources


00:01:30.380 --> 00:01:32.580
and use the Python tools you already know


00:01:32.580 --> 00:01:36.400
to ask questions and integrate data across data sources.


00:01:36.400 --> 00:01:39.940
Get started today at talkbython.fm/glareDB.


00:01:39.940 --> 00:01:42.200
And it's brought to you by Sentry.


00:01:42.200 --> 00:01:44.240
Don't let those errors go unnoticed.


00:01:44.240 --> 00:01:45.280
Use Sentry.


00:01:45.280 --> 00:01:48.780
Get started at talkbython.fm/sentry.


00:01:48.780 --> 00:01:50.860
Eric, welcome to TalkBython to me.


00:01:50.860 --> 00:01:51.700
- Thank you.


00:01:51.700 --> 00:01:53.980
>> It is very nice to have you here.


00:01:53.980 --> 00:01:56.980
The last time we were sitting around talking was at


00:01:56.980 --> 00:02:03.160
a beautiful cocktail bar at the tail end of PyCon 2023 in Salt Lake City.


00:02:03.160 --> 00:02:04.540
Not a bad place to wrap that up.


00:02:04.540 --> 00:02:05.720
>> No, it was very nice.


00:02:05.720 --> 00:02:11.820
>> What a fun event. We're going to talk about how people go from being a beginner-ish,


00:02:11.820 --> 00:02:16.580
that's a pretty broad term of what a beginner is in Python and programming,


00:02:16.580 --> 00:02:20.820
and moving towards how do you take that journey,


00:02:20.820 --> 00:02:23.660
maybe with more deliberately, a little more quickly,


00:02:23.660 --> 00:02:27.220
to the expert side of the software developer spectrum.


00:02:27.220 --> 00:02:28.140
It's going to be a lot of fun.


00:02:28.140 --> 00:02:28.460
>> Yes.


00:02:28.460 --> 00:02:31.380
>> Yeah. Before we get into that though,


00:02:31.380 --> 00:02:33.100
let's just start with your story.


00:02:33.100 --> 00:02:35.340
How did you get into programming Python?


00:02:35.340 --> 00:02:37.580
How did you end up writing books? All those things.


00:02:37.580 --> 00:02:39.060
>> Oh boy. I had to be


00:02:39.060 --> 00:02:41.540
careful because it's a long story and I like telling it.


00:02:41.540 --> 00:02:43.660
I was fortunate in that my father was


00:02:43.660 --> 00:02:47.580
a software engineer in the '70s and '80s.


00:02:47.580 --> 00:02:49.260
When I was growing up,


00:02:49.260 --> 00:02:53.660
we had a kit computer in our basement before most people had home computers.


00:02:53.660 --> 00:02:57.900
So I got to write my first program as a basic number guessing game.


00:02:57.900 --> 00:02:59.660
>> Back when it was all about the go-to's.


00:02:59.660 --> 00:03:01.020
>> Yes, line 10.


00:03:01.020 --> 00:03:01.580
>> Go to 10.


00:03:01.580 --> 00:03:02.620
>> What is your number?


00:03:02.620 --> 00:03:03.260
>> Yeah.


00:03:03.260 --> 00:03:04.220
>> Yeah.


00:03:04.220 --> 00:03:05.740
>> I always had an interest in programming.


00:03:05.740 --> 00:03:11.420
So I got to watch in real time the development from basic to logo for teaching kids,


00:03:11.420 --> 00:03:16.540
to C, to Pascal, Fortran, and all that variety of languages that led up to Python.


00:03:16.540 --> 00:03:22.140
My journey into Python was I was using Java in the early 2000s,


00:03:22.140 --> 00:03:24.420
and I thought I'd be a Java programmer for life.


00:03:24.420 --> 00:03:26.100
A friend told me that, "Hey,


00:03:26.100 --> 00:03:27.060
you should check out Python.


00:03:27.060 --> 00:03:33.980
Your Java programs will be about a third as long as they are in Java."


00:03:33.980 --> 00:03:37.920
I couldn't really believe that because it's a pretty big claim.


00:03:37.920 --> 00:03:39.140
>> Yeah, that's a bold claim.


00:03:39.140 --> 00:03:41.720
>> Yeah, and it worked, and I was amazed.


00:03:41.720 --> 00:03:44.340
People talk about this, but it was just plain fun.


00:03:44.340 --> 00:03:48.840
there was something more fun for me about writing Python code than Java.


00:03:48.840 --> 00:03:50.800
And I have never really looked back.


00:03:50.800 --> 00:03:52.500
That's a bit of an exaggeration.


00:03:52.500 --> 00:03:54.680
I do keep my eye out for other languages.


00:03:54.680 --> 00:03:57.880
I don't always assume that Python is always going to be the best for me.


00:03:57.880 --> 00:04:00.380
And I certainly use other languages as appropriate.


00:04:00.380 --> 00:04:02.380
But my core, I need to do something.


00:04:02.380 --> 00:04:04.520
I don't have a particular reason to choose another language.


00:04:04.520 --> 00:04:05.560
I do everything in Python.


00:04:05.560 --> 00:04:08.680
Yeah, I'm very similar in a lot of ways, actually.


00:04:08.680 --> 00:04:13.100
My background was in C# and C++, not Java.


00:04:13.100 --> 00:04:16.700
So a little bit different, but more similar than different.


00:04:16.700 --> 00:04:20.160
I recall coming to Python thinking at first,


00:04:20.160 --> 00:04:22.160
it's a weird, interesting,


00:04:22.160 --> 00:04:24.600
but weird language, it's white space stuff.


00:04:24.600 --> 00:04:26.560
Curly braces are pretty tried and true,


00:04:26.560 --> 00:04:28.200
what are we doing with all this?


00:04:28.200 --> 00:04:32.920
Before I really became super comfortable with Python and just like,


00:04:32.920 --> 00:04:34.960
yeah, that looks at it, it feels great,


00:04:34.960 --> 00:04:38.320
it feels right from how I perceived programming should be.


00:04:38.320 --> 00:04:39.920
I worked with it for a while,


00:04:39.920 --> 00:04:43.920
went back and why are all these symbols on the page?


00:04:43.920 --> 00:04:46.360
It's just in the way of reading.


00:04:46.360 --> 00:04:49.640
I used to thought I had to have the parentheses on the if statement,


00:04:49.640 --> 00:04:50.840
but it turns out you don't.


00:04:50.840 --> 00:04:53.120
Why does this language make you write the parentheses?


00:04:53.120 --> 00:04:55.720
All those things, you're just like, "What a hassle."


00:04:55.720 --> 00:04:56.880
Not even the static typing,


00:04:56.880 --> 00:05:00.920
just the syntax is more syntaxy.


00:05:00.920 --> 00:05:04.480
I'm interested in how your experience with that was.


00:05:04.480 --> 00:05:06.600
>> Yeah. I'm going to save that for a little bit because it's going to


00:05:06.600 --> 00:05:09.120
come up in the points that we go over.


00:05:09.120 --> 00:05:09.640
>> Okay.


00:05:09.640 --> 00:05:11.320
I'll share though that for my background,


00:05:11.320 --> 00:05:14.320
there's one of the big piece that plays into all this.


00:05:14.320 --> 00:05:18.060
I went into college, into undergrad,


00:05:18.060 --> 00:05:19.880
focused on chemical engineering


00:05:19.880 --> 00:05:23.000
because I had a really good chemistry teacher in high school


00:05:23.000 --> 00:05:26.040
and I thought I wanted to apply what I knew about chemistry.


00:05:26.040 --> 00:05:27.840
In my intro chemical engineering classes,


00:05:27.840 --> 00:05:30.540
we were doing problems about running nuclear power plants.


00:05:30.540 --> 00:05:31.440
And I was like, gosh,


00:05:31.440 --> 00:05:33.720
I don't want to run a nuclear power plant.


00:05:33.720 --> 00:05:35.440
And I really enjoyed my physics classes


00:05:35.440 --> 00:05:37.000
because they were just playing about


00:05:37.000 --> 00:05:38.680
understanding how the world works.


00:05:38.680 --> 00:05:40.940
So I ended up doing an undergrad in physics,


00:05:40.940 --> 00:05:43.260
and I tutored throughout undergrad


00:05:43.260 --> 00:05:46.520
because so many people struggled with math and science,


00:05:46.520 --> 00:05:48.480
the two subjects that I loved the most.


00:05:48.480 --> 00:05:51.280
And I found that most people who struggled,


00:05:51.280 --> 00:05:52.920
it was because of how they were taught,


00:05:52.920 --> 00:05:54.680
not the subject material itself.


00:05:54.680 --> 00:05:57.100
And so I got a strong interest in teaching,


00:05:57.100 --> 00:05:58.800
and I wanted to be a particle physicist,


00:05:58.800 --> 00:06:00.480
but I didn't want to be a student forever.


00:06:00.480 --> 00:06:02.200
I could get on the PhD track right away.


00:06:02.200 --> 00:06:04.640
So I started teaching, and I loved teaching.


00:06:04.640 --> 00:06:07.160
I found that the challenge of reaching


00:06:07.160 --> 00:06:12.680
every person in a classroom was as hard and satisfying as hard science.


00:06:12.680 --> 00:06:14.200
And so I just stayed in teaching.


00:06:14.200 --> 00:06:19.040
So I taught public school, fifth grade through high school for about 20 years.


00:06:19.040 --> 00:06:22.040
And I was a hobbyist programmer throughout all of that.


00:06:22.040 --> 00:06:24.600
And so I taught intro programming classes whenever I could.


00:06:24.600 --> 00:06:28.440
And in the early 2010s-ish, I was looking for a Python book


00:06:28.440 --> 00:06:30.600
that I could give my more motivated students


00:06:30.600 --> 00:06:33.360
and just kind of stand on the sidelines and answer their questions


00:06:33.360 --> 00:06:34.840
and let them go at their own pace.


00:06:34.840 --> 00:06:37.620
but everything either made too many assumptions


00:06:37.620 --> 00:06:38.980
about what you already knew,


00:06:38.980 --> 00:06:42.220
or it was written for kids and kind of spoke down to you.


00:06:42.220 --> 00:06:44.180
And so that's how I ended up writing a book


00:06:44.180 --> 00:06:47.220
'cause the book I wished to teach from did not exist.


00:06:47.220 --> 00:06:48.220
- Sure know how that feels.


00:06:48.220 --> 00:06:49.060
- Yeah, yeah.


00:06:49.060 --> 00:06:49.900
- What's the title of the book?


00:06:49.900 --> 00:06:50.720
Share that with everyone.


00:06:50.720 --> 00:06:52.060
- That is "Python Crash Course."


00:06:52.060 --> 00:06:52.900
- No starch, right?


00:06:52.900 --> 00:06:54.500
- Yes, from no starch.


00:06:54.500 --> 00:06:57.220
And it's been the best-selling introduction,


00:06:57.220 --> 00:06:58.700
it's been the best-selling Python book


00:06:58.700 --> 00:07:01.900
for close to 10 years now, which is really satisfying


00:07:01.900 --> 00:07:04.420
'cause I kind of had a 10-year vision.


00:07:04.420 --> 00:07:06.460
I had the naive notion that I could write a book


00:07:06.460 --> 00:07:10.160
in the summertime and then revise it during the school year


00:07:10.160 --> 00:07:11.220
and it would be done.


00:07:11.220 --> 00:07:15.140
And it was two and a half years instead of that.


00:07:15.140 --> 00:07:16.500
So I had a 10-year vision.


00:07:16.500 --> 00:07:17.940
I thought if I'm gonna do all this work,


00:07:17.940 --> 00:07:21.140
then I should support the book for 10-year period.


00:07:21.140 --> 00:07:22.940
So it's been very satisfying to see it


00:07:22.940 --> 00:07:25.660
be meaningful to so many people over that time.


00:07:25.660 --> 00:07:26.660
- That's really awesome.


00:07:26.660 --> 00:07:29.140
So your book is in LTS, long-term support.


00:07:29.140 --> 00:07:29.980
- Say that again?


00:07:29.980 --> 00:07:33.060
- It's an LTS release of the book, a long-term support,


00:07:33.060 --> 00:07:35.620
not one of those off-brand releases.


00:07:35.620 --> 00:07:36.460
- Right, right.


00:07:36.460 --> 00:07:37.540
- No, that's really great.


00:07:37.540 --> 00:07:40.080
And it's cool to connect with so many people.


00:07:40.080 --> 00:07:42.620
You probably go to PyCon and other events


00:07:42.620 --> 00:07:44.600
and people are like, "Oh, I read your book."


00:07:44.600 --> 00:07:46.940
And they really probably have stories to tell you about it.


00:07:46.940 --> 00:07:48.340
- Yeah, it was amazing.


00:07:48.340 --> 00:07:50.540
You go to PyCon or any of these conferences


00:07:50.540 --> 00:07:51.940
and you see a bunch of booths


00:07:51.940 --> 00:07:53.940
with people hiring or selling something.


00:07:53.940 --> 00:07:55.060
And I used to go to those booths


00:07:55.060 --> 00:07:57.260
and just have conversations.


00:07:57.260 --> 00:08:00.460
And a year or two after the book came out,


00:08:00.460 --> 00:08:01.420
those people started telling me,


00:08:01.420 --> 00:08:03.360
"Oh, hey, I learned Python from your book."


00:08:03.360 --> 00:08:06.140
I was amazed at how quickly people could learn Python and


00:08:06.140 --> 00:08:08.880
then start to work at these companies and organizations.


00:08:08.880 --> 00:08:10.900
>> Yeah. It's interesting.


00:08:10.900 --> 00:08:12.840
So they learn Python through your book and now they're


00:08:12.840 --> 00:08:14.780
working at Bloomberg or whatever,


00:08:14.780 --> 00:08:16.340
and now they're talking to you through these booths.


00:08:16.340 --> 00:08:17.280
Interesting. Got it.


00:08:17.280 --> 00:08:17.660
>> Yeah.


00:08:17.660 --> 00:08:18.100
>> Right in the eye.


00:08:18.100 --> 00:08:18.820
>> As a teacher.


00:08:18.820 --> 00:08:20.940
>> This new says, "I'm glad to say I've


00:08:20.940 --> 00:08:23.500
read that book and learned a lot from it." Yeah. Very cool.


00:08:23.500 --> 00:08:25.060
>> Yeah. I'm glad I work for you.


00:08:25.060 --> 00:08:27.020
Yeah, I was going to say, as a teacher,


00:08:27.020 --> 00:08:29.260
yeah, I have always been happy for


00:08:29.260 --> 00:08:32.800
my students to end up better at whatever I introduce them to than I am.


00:08:32.800 --> 00:08:35.340
My focus has been on teaching for a long time,


00:08:35.340 --> 00:08:39.140
and so I learned my subject well enough to be able to do whatever I need to with them.


00:08:39.140 --> 00:08:41.860
But anybody who chooses to focus on one area


00:08:41.860 --> 00:08:44.520
over a lifetime is going to be better than I am at it.


00:08:44.520 --> 00:08:47.620
Meeting those people at the booths who are honestly now


00:08:47.620 --> 00:08:50.960
probably better programmers or certainly within their discipline than I am,


00:08:50.960 --> 00:08:51.820
it's a privilege.


00:08:51.820 --> 00:08:52.220
>> Yeah.


00:08:52.220 --> 00:08:54.700
>> So along this idea of how do you go from beginner,


00:08:54.700 --> 00:08:59.220
just starting Python to whatever we call intermediate or advanced or expert.


00:08:59.220 --> 00:09:01.540
It's an interesting topic,


00:09:01.540 --> 00:09:03.500
and I think it's one that really deserves some attention.


00:09:03.500 --> 00:09:07.120
>> I think it does too. I hear it for so many times from beginners,


00:09:07.120 --> 00:09:08.880
like I'm learning the language,


00:09:08.880 --> 00:09:10.820
I'm learning this, I'm learning that,


00:09:10.820 --> 00:09:15.780
and now I just don't really know what to do to keep making progress.


00:09:15.780 --> 00:09:21.500
You mentioned your situation where you are a hobbyist programmer to some degree,


00:09:21.500 --> 00:09:24.100
and you just compared it against people who are maybe


00:09:24.100 --> 00:09:28.060
scaling out some DevOps thing at a huge tech company.


00:09:28.060 --> 00:09:31.820
those are really different ways you spend your day, right?


00:09:31.820 --> 00:09:32.980
As a hobbyist programmer,


00:09:32.980 --> 00:09:34.420
you have something you're interested in,


00:09:34.420 --> 00:09:37.020
maybe you poke at it a little bit, you work at it,


00:09:37.020 --> 00:09:40.860
but you don't have the real demands of it's gotta work


00:09:40.860 --> 00:09:43.300
at this crazy scale, and also that it's something


00:09:43.300 --> 00:09:47.020
you can focus your entire effort on all day, right?


00:09:47.020 --> 00:09:49.820
'Cause you're teaching or you're doing other things


00:09:49.820 --> 00:09:51.780
besides that, right, as a hobbyist.


00:09:51.780 --> 00:09:55.660
- Yeah, and I think that when we label ourselves


00:09:55.660 --> 00:09:58.260
or others, beginner, intermediate, expert.


00:09:58.260 --> 00:10:01.120
Beginner is the one label that is objective,


00:10:01.120 --> 00:10:02.520
or I've never programmed before,


00:10:02.520 --> 00:10:04.620
I'm a beginner, or I have never used Python,


00:10:04.620 --> 00:10:05.940
so I'm a beginner at Python.


00:10:05.940 --> 00:10:08.140
Although even that, if you're experienced in another language,


00:10:08.140 --> 00:10:09.740
it's hard to call yourself a beginner again.


00:10:09.740 --> 00:10:10.580
>> Exactly.


00:10:10.580 --> 00:10:14.180
>> Then when I've looked at say intermediate resources,


00:10:14.180 --> 00:10:17.260
it's a hard world to classify and categorize,


00:10:17.260 --> 00:10:18.860
because what is intermediate?


00:10:18.860 --> 00:10:23.180
I think it's good to recognize that in the early days of a language,


00:10:23.180 --> 00:10:26.220
say like mid '90s to 2000 for Python,


00:10:26.220 --> 00:10:28.380
the language was small enough that somebody could


00:10:28.380 --> 00:10:30.500
call themselves an expert at some point.


00:10:30.500 --> 00:10:32.460
I know everything that there is in Python.


00:10:32.460 --> 00:10:35.660
The language is so big and the ecosystem is so huge and it covers


00:10:35.660 --> 00:10:37.940
so many domains that it's hard for anybody


00:10:37.940 --> 00:10:41.420
to objectively call themselves an expert in Python.


00:10:41.420 --> 00:10:43.700
What does that even mean? It really is about-


00:10:43.700 --> 00:10:44.660
>> Relative statement.


00:10:44.660 --> 00:10:46.220
>> How do you get out of those,


00:10:46.220 --> 00:10:48.980
I'm just learning the language and now I'm using it.


00:10:48.980 --> 00:10:50.660
That evaluation is interesting.


00:10:50.660 --> 00:10:52.900
>> Yeah, it is. I think one,


00:10:52.900 --> 00:10:55.820
it's a good point you bring up about when Python was smaller.


00:10:55.820 --> 00:10:57.620
There's this teacher that was a joke.


00:10:57.620 --> 00:10:58.940
It says, "I learned Python.


00:10:58.940 --> 00:11:03.860
It was a good weekend." There's a truth to that and it's also cute.


00:11:03.860 --> 00:11:05.020
But at the same time,


00:11:05.020 --> 00:11:09.420
I've been doing this for many years and I'm still learning Python all the time.


00:11:09.420 --> 00:11:11.380
How do you square those two things?


00:11:11.380 --> 00:11:13.180
How can those both be true?


00:11:13.180 --> 00:11:15.700
Part of what the difference is,


00:11:15.700 --> 00:11:17.820
that's not obvious I think to beginners,


00:11:17.820 --> 00:11:19.580
but it's obvious to you.


00:11:19.580 --> 00:11:22.060
When that person said, I learned Python, it was a good weekend.


00:11:22.060 --> 00:11:24.380
They meant they rocked the for loop.


00:11:24.380 --> 00:11:27.260
They can create a class and they can create a function.


00:11:27.260 --> 00:11:32.380
You know, that's, they can do if statements and they now write and instead of double ampersand.


00:11:32.380 --> 00:11:35.740
That is one interpretation of what Python is.


00:11:35.740 --> 00:11:41.100
But then you look at PyPI with its, I haven't read the numbers in a few weeks or something,


00:11:41.100 --> 00:11:43.180
but it's close to half a million packages.


00:11:43.180 --> 00:11:48.460
If you completely, truly learned a new package every day,


00:11:48.460 --> 00:11:50.700
you're still falling behind, right?


00:11:50.700 --> 00:11:51.300
>> Yes.


00:11:51.300 --> 00:11:52.780
>> Continuously, every day,


00:11:52.780 --> 00:11:54.140
just non-stop for the rest of your life,


00:11:54.140 --> 00:11:55.260
you're like, "Ah, Molly,


00:11:55.260 --> 00:11:59.020
I'm more behind than I started 20 years ago," in a sense.


00:11:59.020 --> 00:12:00.900
What is Python?


00:12:00.900 --> 00:12:03.100
I think when people say,


00:12:03.100 --> 00:12:04.460
"I want to be good at Python,


00:12:04.460 --> 00:12:05.460
I want to learn Python,


00:12:05.460 --> 00:12:07.080
I want to be an expert in Python,"


00:12:07.080 --> 00:12:08.720
you need to understand that there are


00:12:08.720 --> 00:12:13.160
these different layers or tiers of what that means.


00:12:13.160 --> 00:12:15.860
You can be focused on one or another,


00:12:15.860 --> 00:12:18.880
but when people are comparing,


00:12:18.880 --> 00:12:22.080
I've done this much and I'm an expert at Python.


00:12:22.080 --> 00:12:23.480
Well, are you an expert at the language?


00:12:23.480 --> 00:12:25.120
Are you an expert in FastAPI?


00:12:25.120 --> 00:12:27.240
What are you an expert in?


00:12:27.240 --> 00:12:30.080
I think just setting the stage with there's


00:12:30.080 --> 00:12:33.280
different meanings to what I'm good at Python is.


00:12:33.280 --> 00:12:37.780
>> Yeah. I'll say right now that I have a hard time classifying myself.


00:12:37.780 --> 00:12:39.240
I'm definitely not a beginner.


00:12:39.240 --> 00:12:41.680
I wouldn't necessarily call myself an expert,


00:12:41.680 --> 00:12:43.440
but I don't even know about intermediate.


00:12:43.440 --> 00:12:43.660
>> Yeah.


00:12:43.660 --> 00:12:46.420
>> Somewhere between intermediate and expert.


00:12:46.420 --> 00:12:49.760
I've been writing a weekly newsletter at mostly Python,


00:12:49.760 --> 00:12:51.100
it's on Substack.


00:12:51.100 --> 00:12:55.000
I started writing a newsletter because I wanted to get out of


00:12:55.000 --> 00:12:57.420
that LTS you're mentioning about the book,


00:12:57.420 --> 00:12:59.360
where all my writing is about a book.


00:12:59.360 --> 00:13:01.820
It's always about the same material.


00:13:01.820 --> 00:13:05.020
Writing a weekly newsletter forces me to pick a topic


00:13:05.020 --> 00:13:07.700
each week and then be able to explain that well.


00:13:07.700 --> 00:13:10.320
I think a lot of people think that somebody in


00:13:10.320 --> 00:13:14.140
my position just knows all this stuff and just write something up each week.


00:13:14.140 --> 00:13:17.040
Really, it's a whole bunch of research every time because there's


00:13:17.040 --> 00:13:19.220
nooks and crannies around every topic in Python


00:13:19.220 --> 00:13:22.420
that I didn't know about after 20 years in the language.


00:13:22.420 --> 00:13:24.440
But it's really enjoyable to fill out


00:13:24.440 --> 00:13:26.900
that understanding and then explain it well to other people.


00:13:26.900 --> 00:13:28.240
>> Yeah, it really is.


00:13:28.240 --> 00:13:29.920
Maybe final thought on this.


00:13:29.920 --> 00:13:30.380
>> Sure.


00:13:30.380 --> 00:13:32.120
>> Tony out there points out and says,


00:13:32.120 --> 00:13:33.340
adding on to what we were saying,


00:13:33.340 --> 00:13:35.540
And an expert in Python for data science


00:13:35.540 --> 00:13:38.700
doesn't necessarily look like an expert in Python for web.


00:13:38.700 --> 00:13:41.860
So I was going to add basically something similar,


00:13:41.860 --> 00:13:44.980
that I would consider myself an expert in web development,


00:13:44.980 --> 00:13:48.540
and API stuff, and those kind of things.


00:13:48.540 --> 00:13:52.140
I've been running production Python apps for a long time,


00:13:52.140 --> 00:13:53.700
and really just polishing them.


00:13:53.700 --> 00:13:57.620
But put me in front of some machine learning situation,


00:13:57.620 --> 00:14:01.500
or too much advanced pandas, and I'm like,


00:14:01.500 --> 00:14:03.540
"Well, I'm a beginner over here."


00:14:03.540 --> 00:14:05.740
Those are both also called Python.


00:14:05.740 --> 00:14:09.700
There's just all these different contexts and spheres


00:14:09.700 --> 00:14:13.420
of relevance that I think people got to keep in mind.


00:14:13.420 --> 00:14:15.260
Probably good to hear them say,


00:14:15.260 --> 00:14:16.740
"You're an expert in some things,"


00:14:16.740 --> 00:14:18.740
but it's not like you just know it all.


00:14:18.740 --> 00:14:20.780
>> Right. It's good to recognize that expertise in


00:14:20.780 --> 00:14:23.220
one area is oftentimes transferable.


00:14:23.220 --> 00:14:26.420
You aren't immediately an expert in the new domain,


00:14:26.420 --> 00:14:29.540
but what you've learned in one domain is


00:14:29.540 --> 00:14:32.240
oftentimes making it easier to gain expertise in another one.


00:14:32.240 --> 00:14:35.940
Absolutely. Like if the data science side, right, you're still good at Git.


00:14:35.940 --> 00:14:39.320
That's not a new thing for you, right? You're not like, wow, what is this source


00:14:39.320 --> 00:14:42.980
control thing? Like you can still completely rock that. But, but maybe


00:14:42.980 --> 00:14:47.140
you're not embracing the vectorization of style of programming and so on.


00:14:47.140 --> 00:14:52.780
This portion of talk Python to me is brought to you by glare DB. Glare DB is


00:14:52.780 --> 00:14:56.900
an open source database for querying distributed data. Here's how it works.


00:14:57.060 --> 00:14:58.820
First, you connect your data sources.


00:14:58.820 --> 00:15:01.260
GlareDB makes it easy to connect to your data,


00:15:01.260 --> 00:15:02.380
no matter where it's stored,


00:15:02.380 --> 00:15:05.180
with integrations into many popular databases,


00:15:05.180 --> 00:15:06.780
data warehouses, and more.


00:15:06.780 --> 00:15:10.060
This includes Snowflake, Postgres, MongoDB,


00:15:10.060 --> 00:15:12.460
BigQuery, and Object Storage.


00:15:12.460 --> 00:15:14.300
Now you can query everything.


00:15:14.300 --> 00:15:16.660
You use the full power of SQL to query your data


00:15:16.660 --> 00:15:19.080
across these many different data sources,


00:15:19.080 --> 00:15:21.140
join data across production databases


00:15:21.140 --> 00:15:24.040
and analytical warehouses without limits.


00:15:24.040 --> 00:15:27.200
Finally, you can use the tools you already know and love.


00:15:27.200 --> 00:15:30.120
Visualize and query your data using tools you know


00:15:30.120 --> 00:15:32.160
from Python's data science stack.


00:15:32.160 --> 00:15:33.560
With just a single import,


00:15:33.560 --> 00:15:36.040
you can query Pandas and Polars data frames


00:15:36.040 --> 00:15:37.640
using just SQL.


00:15:37.640 --> 00:15:40.240
You'll be asking questions, extracting insights,


00:15:40.240 --> 00:15:42.260
and driving decisions with your data


00:15:42.260 --> 00:15:45.580
without waiting for an ETL pipeline to move data around.


00:15:45.580 --> 00:15:48.580
So if you have distributed data and disparate data sources


00:15:48.580 --> 00:15:50.320
and you love open source,


00:15:50.320 --> 00:15:53.320
you owe it to yourself to give GlareDB a try.


00:15:53.320 --> 00:15:56.840
Visit talkpython.fm/glaredb to get started.


00:15:56.840 --> 00:15:59.200
The link is in your podcast player show notes,


00:15:59.200 --> 00:16:00.880
and please use the link to let them know


00:16:00.880 --> 00:16:02.800
that you came from us.


00:16:02.800 --> 00:16:05.700
Thank you to the team at Glare DB for sponsoring the show.


00:16:05.700 --> 00:16:10.400
Maybe this is a good time to start talking about the ideas.


00:16:10.400 --> 00:16:12.840
So what I did is I said, you know,


00:16:12.840 --> 00:16:14.280
Eric, you've got this cool book.


00:16:14.280 --> 00:16:17.640
How about you try to extract some ideas


00:16:17.640 --> 00:16:19.200
that you've learned from writing the book


00:16:19.200 --> 00:16:21.280
and working with people for this whole topic


00:16:21.280 --> 00:16:25.360
of transitioning from beginners towards the expert side of programming.


00:16:25.360 --> 00:16:27.280
So let's go through the list.


00:16:27.280 --> 00:16:27.800
Sure.


00:16:27.800 --> 00:16:29.520
I like, first of all, I like that structuring.


00:16:29.520 --> 00:16:32.840
I kind of forced me to think specifically about what I can say.


00:16:32.840 --> 00:16:35.240
I want to clarify this isn't a countdown.


00:16:35.240 --> 00:16:37.600
A lot of times lists are like, here's the top 10 things


00:16:37.600 --> 00:16:38.680
you should know about Python.


00:16:38.680 --> 00:16:43.920
So these are ideas for specific things that people can do to move away from


00:16:43.920 --> 00:16:47.640
wherever you were as a beginner and more into that intermediate and expert.


00:16:47.640 --> 00:16:49.760
And be comfortable with justifying that.


00:16:49.960 --> 00:16:54.400
So for this kind of list, I start with the most important things first,


00:16:54.400 --> 00:16:55.800
because everything else builds on that.


00:16:55.800 --> 00:16:59.720
And so when I think about what do people need to do to move away from


00:16:59.720 --> 00:17:03.940
beginner and towards being fluent and comfortable and competent, when able


00:17:03.940 --> 00:17:07.280
to solve a variety of problems, the first thing is when you're learning,


00:17:07.280 --> 00:17:09.640
know your goals, why are you learning a program?


00:17:09.640 --> 00:17:11.300
And so we see this all the time.


00:17:11.300 --> 00:17:14.360
If you follow conversations about learning Python, I want to learn Python.


00:17:14.360 --> 00:17:15.160
Okay.


00:17:15.160 --> 00:17:16.520
What should I focus on?


00:17:16.520 --> 00:17:17.840
Well, what are your goals?


00:17:17.840 --> 00:17:18.760
Why are you learning it?


00:17:18.760 --> 00:17:19.600
What do you want to do?


00:17:19.600 --> 00:17:22.640
I mean, I think the answers to that tend to be,


00:17:22.640 --> 00:17:25.120
I just like programming, I'm curious.


00:17:25.120 --> 00:17:27.200
For a lot of people, it is about money.


00:17:27.200 --> 00:17:30.560
People know that software development jobs can pay well,


00:17:30.560 --> 00:17:33.880
and I think it's quite appropriate and reasonable and


00:17:33.880 --> 00:17:36.640
important to name that if that is one of your goals,


00:17:36.640 --> 00:17:37.840
and there's nothing wrong with that.


00:17:37.840 --> 00:17:40.520
>> Right. It could be career but not money in


00:17:40.520 --> 00:17:43.240
the sense that I have a decent paying job now,


00:17:43.240 --> 00:17:44.360
but I don't like my job.


00:17:44.360 --> 00:17:46.040
If I could just have the same money,


00:17:46.040 --> 00:17:48.160
but actually work on programming all day,


00:17:48.160 --> 00:17:50.000
That would be awesome, right?


00:17:50.000 --> 00:17:53.480
>> Yes. The money thing comes up for me because I'll say,


00:17:53.480 --> 00:17:56.560
one of the things I'm proud of as an author is I've replied to


00:17:56.560 --> 00:17:58.440
pretty much every single e-mail anybody


00:17:58.440 --> 00:18:00.400
has ever written to me about the book.


00:18:00.400 --> 00:18:02.420
I think that's part of why the book has done well,


00:18:02.420 --> 00:18:05.360
because I look for patterns.


00:18:05.360 --> 00:18:07.120
If people start to write about the same thing,


00:18:07.120 --> 00:18:10.400
then I adjust the book a little bit to address that.


00:18:10.400 --> 00:18:12.620
It keeps my e-mail volume reasonable,


00:18:12.620 --> 00:18:15.560
but also means it's still meeting the needs of readers.


00:18:15.560 --> 00:18:17.760
But it also means I've had interactions


00:18:17.760 --> 00:18:19.080
with thousands of readers.


00:18:19.080 --> 00:18:20.860
And one of the things that comes up


00:18:20.860 --> 00:18:22.840
in anything that goes beyond a,


00:18:22.840 --> 00:18:24.680
can you help me fix this one problem?


00:18:24.680 --> 00:18:26.840
I oftentimes ask, what are you learning this for?


00:18:26.840 --> 00:18:28.680
What's your story?


00:18:28.680 --> 00:18:31.320
And a lot of those people are doing career transitions.


00:18:31.320 --> 00:18:33.560
It's a mix of people looking for better pay


00:18:33.560 --> 00:18:36.280
and oftentimes that's tied in with to support my family,


00:18:36.280 --> 00:18:38.840
those larger life decisions other than just,


00:18:38.840 --> 00:18:40.120
you know, it's never greed.


00:18:40.120 --> 00:18:41.480
It's never, I wanna be rich.


00:18:41.480 --> 00:18:44.360
It's always, I want to live a reasonable life.


00:18:44.360 --> 00:18:46.560
And what you say, people being tired


00:18:46.560 --> 00:18:48.480
a different line of work and looking for


00:18:48.480 --> 00:18:50.200
something where they can have more power,


00:18:50.200 --> 00:18:52.680
more independence, more control.


00:18:52.680 --> 00:18:54.120
When you say know your goals,


00:18:54.120 --> 00:18:57.040
for most people, their goals is not one goal.


00:18:57.040 --> 00:18:58.760
It's a balance of those and


00:18:58.760 --> 00:19:01.400
recognizing where your balance sits is really


00:19:01.400 --> 00:19:02.880
important because it guides


00:19:02.880 --> 00:19:04.880
the rest of your learning and what you do.


00:19:04.880 --> 00:19:06.280
>> Yeah, it absolutely does.


00:19:06.280 --> 00:19:08.560
>> Somebody who's just plain curious. Go ahead, sorry.


00:19:08.560 --> 00:19:12.280
>> Well, yeah. I think when we're talking about beginners,


00:19:12.280 --> 00:19:15.400
there's a lot of people who get pulled into Python


00:19:15.400 --> 00:19:19.440
without an explicit intent of becoming a software developer.


00:19:19.440 --> 00:19:21.920
In fact, they would maybe start out by saying,


00:19:21.920 --> 00:19:23.600
I don't want to be a software developer.


00:19:23.600 --> 00:19:26.040
I'm a biologist, I'm an economist,


00:19:26.040 --> 00:19:28.280
I'm a philosopher or whatever,


00:19:28.280 --> 00:19:30.720
but I need a little bit of programming because I


00:19:30.720 --> 00:19:33.520
learned that if I do these six lines of Python,


00:19:33.520 --> 00:19:35.600
magic happens way better than if I


00:19:35.600 --> 00:19:37.560
had to force it through Excel or something.


00:19:37.560 --> 00:19:41.000
I think a lot of the beginners are in that realm of,


00:19:41.000 --> 00:19:42.640
well, I'm here now.


00:19:42.640 --> 00:19:44.000
I'm still not a programmer.


00:19:44.000 --> 00:19:45.300
Don't call me one of those,


00:19:45.300 --> 00:19:48.280
but I use programming for my thing.


00:19:48.280 --> 00:19:50.960
That's also a pretty interesting angle, I think.


00:19:50.960 --> 00:19:52.460
>> Yeah, and I think that's a really,


00:19:52.460 --> 00:19:54.120
really good thing for people to recognize.


00:19:54.120 --> 00:19:55.780
It is interesting to have this conversation


00:19:55.780 --> 00:19:58.220
about labels and beginners and intermediate,


00:19:58.220 --> 00:20:01.020
because how do you know when you're no longer a beginner?


00:20:01.020 --> 00:20:03.620
One of the clearest signs is when you have


00:20:03.620 --> 00:20:07.540
used programming to solve a real problem that you have.


00:20:07.540 --> 00:20:11.700
You can throw in with a level of understanding rather than copy-pasting.


00:20:11.700 --> 00:20:12.860
>> But for a lot of people-


00:20:12.860 --> 00:20:15.020
>> Or now, ChatGPTing also.


00:20:15.020 --> 00:20:19.240
>> Yeah. That's a super interesting dynamic to throw into all of this.


00:20:19.240 --> 00:20:20.780
But that is the end goal.


00:20:20.780 --> 00:20:22.380
It should be the end goal for most people.


00:20:22.380 --> 00:20:24.780
Not just to know how programming works,


00:20:24.780 --> 00:20:29.700
but to use it to solve a real world problem that you or somebody else has.


00:20:29.700 --> 00:20:31.780
As soon as you're doing that, you can start to


00:20:31.780 --> 00:20:34.380
consider yourself moving out of the beginner place.


00:20:34.380 --> 00:20:37.060
>> Yeah. You might still feel awkward, but you're doing it.


00:20:37.060 --> 00:20:39.980
Really interesting comment that I think is worth highlighting.


00:20:39.980 --> 00:20:42.820
Foxo says, "I'm an anesthesiologist.


00:20:42.820 --> 00:20:45.700
You cannot imagine how much Python has helped me with different tasks."


00:20:45.700 --> 00:20:47.780
Amazing. That's really cool.


00:20:47.780 --> 00:20:48.060
>> Yeah.


00:20:48.060 --> 00:20:48.660
>> Thank you for sharing that.


00:20:48.660 --> 00:20:48.900
>> Yeah.


00:20:48.900 --> 00:20:49.780
>> Yeah.


00:20:49.780 --> 00:20:53.340
>> Okay. So tip number one, know your goals.


00:20:53.340 --> 00:20:56.980
Why are you here? Because that'll help guide you somewhat. Yes?


00:20:56.980 --> 00:21:01.380
>> Yes. I'm taking a few notes about throwing things in there later in the list.


00:21:01.380 --> 00:21:02.820
>> Beautiful. All right. I agree.


00:21:02.820 --> 00:21:04.420
I think it's important to know your goals


00:21:04.420 --> 00:21:08.580
and there's a lot of reasons why people get into programming.


00:21:08.580 --> 00:21:10.520
>> Yeah, the last thing on that is,


00:21:10.520 --> 00:21:12.480
if somebody is just plain curious,


00:21:12.480 --> 00:21:13.800
as far as teaching and learning,


00:21:13.800 --> 00:21:16.160
if somebody is just plain curious, that's their main goal,


00:21:16.160 --> 00:21:19.360
you have a lot more flexibility in the examples you present to


00:21:19.360 --> 00:21:22.440
them and the pace at which you present material as opposed to


00:21:22.440 --> 00:21:24.080
somebody who says, "I really want to do


00:21:24.080 --> 00:21:26.160
a career transition as soon as possible."


00:21:26.160 --> 00:21:28.140
That person needs a much more grounded


00:21:28.140 --> 00:21:30.160
and practical and timely approach.


00:21:30.160 --> 00:21:31.960
>> Well, and you also might look out and say,


00:21:31.960 --> 00:21:34.520
"Okay, what framework do I need to choose?


00:21:34.520 --> 00:21:36.980
What database experience do I need to get?"


00:21:36.980 --> 00:21:39.980
because I'm looking at Indeed job listings,


00:21:39.980 --> 00:21:42.540
and I'm trying to hit the largest set of those


00:21:42.540 --> 00:21:45.220
rather than what project am I trying to work on,


00:21:45.220 --> 00:21:46.340
or what am I curious about?


00:21:46.340 --> 00:21:48.500
You're like, I need to start checking the big boxes.


00:21:48.500 --> 00:21:50.980
Let's check those boxes so I can get a job in six weeks.


00:21:50.980 --> 00:21:52.420
>> Yeah. All right. Tip number 2.


00:21:52.420 --> 00:21:53.940
>> Yeah. Tip number 2. What do you got?


00:21:53.940 --> 00:21:55.740
>> Have a project in mind.


00:21:55.740 --> 00:21:57.380
Whatever your goals are,


00:21:57.380 --> 00:21:59.580
having a specific project in mind,


00:21:59.580 --> 00:22:01.620
helps put everything else in context.


00:22:01.620 --> 00:22:05.780
If you are learning about a for loop and you have a project,


00:22:05.780 --> 00:22:08.460
I'm going to name one of the projects that I've worked on.


00:22:08.460 --> 00:22:09.980
I live in Southeast Alaska.


00:22:09.980 --> 00:22:11.820
And one of the impacts of climate change


00:22:11.820 --> 00:22:15.940
here is an increasing frequency and severity of landslides.


00:22:15.940 --> 00:22:18.740
And so Southeast Alaska is a rainforest.


00:22:18.740 --> 00:22:20.540
For anybody who isn't aware of that,


00:22:20.540 --> 00:22:22.340
it's not all snow in Southeast because we're


00:22:22.340 --> 00:22:23.420
right next to the ocean.


00:22:23.420 --> 00:22:26.460
And so we're still getting as much rain as we always have.


00:22:26.460 --> 00:22:28.180
But it's coming-- instead of light rain


00:22:28.180 --> 00:22:30.340
throughout the year with some periods of heavy rain,


00:22:30.340 --> 00:22:32.260
we're getting a lot more nice weather.


00:22:32.260 --> 00:22:35.060
We just had two or three weeks of no rain, which


00:22:35.060 --> 00:22:36.700
was really unusual here.


00:22:36.700 --> 00:22:38.700
But we'll get heavier fall storms


00:22:38.700 --> 00:22:41.100
that can lead to landslides.


00:22:41.100 --> 00:22:46.060
And so I had a project that monitored a local river's level


00:22:46.060 --> 00:22:47.980
to correlate that with landslide risk


00:22:47.980 --> 00:22:51.100
and helped develop a warning system.


00:22:51.100 --> 00:22:55.820
And so a project like that in mind, that's a big project.


00:22:55.820 --> 00:22:57.700
And so if somebody is just learning Python,


00:22:57.700 --> 00:22:59.700
that's hard to say, like, here's everything you need to know


00:22:59.700 --> 00:23:01.080
to build that project.


00:23:01.080 --> 00:23:02.340
But if you're teaching a for loop


00:23:02.340 --> 00:23:06.960
and you know that somebody is interested in a project about monitoring climate,


00:23:06.960 --> 00:23:09.560
then you can make your for loops about processing data


00:23:09.560 --> 00:23:12.720
related to rainfall, river levels, things like that.


00:23:12.720 --> 00:23:19.180
>> Yeah, absolutely. Python is really interesting in that it's pretty good at the IoT thing as well,


00:23:19.180 --> 00:23:21.000
which opens up a lot of,


00:23:21.000 --> 00:23:25.200
we've got CircuitPython and Adafruit and all those areas to play with as well,


00:23:25.200 --> 00:23:26.920
which is a whole different kind of project.


00:23:26.920 --> 00:23:30.400
>> Yeah. There's an infinite number of projects.


00:23:30.400 --> 00:23:32.740
If you have a project in mind,


00:23:32.740 --> 00:23:34.700
being clear about that with yourself and with


00:23:34.700 --> 00:23:37.640
any way that you're learning with or from is really helpful


00:23:37.640 --> 00:23:41.220
as far as tailoring what you're learning to your purposes.


00:23:41.220 --> 00:23:42.060
>> I'm curious.


00:23:42.060 --> 00:23:43.940
>> It's always easier to teach somebody who has


00:23:43.940 --> 00:23:46.840
a specific goal in mind than somebody who is just vague.


00:23:46.840 --> 00:23:47.760
Just teach me something.


00:23:47.760 --> 00:23:49.260
>> Yeah. Well, because it's focused.


00:23:49.260 --> 00:23:49.440
>> Yeah.


00:23:49.440 --> 00:23:52.360
>> Right? I find a lot of people try to boil the ocean


00:23:52.360 --> 00:23:54.940
metaphorically when they're trying to learn these things.


00:23:54.940 --> 00:23:56.540
Like, well, I saw somebody saying,


00:23:56.540 --> 00:23:59.140
"Well, all these CS topics are really hard for me.


00:23:59.140 --> 00:24:01.860
People keep telling me all these CS things I need to know,


00:24:01.860 --> 00:24:03.360
and do I really need to know them?


00:24:03.360 --> 00:24:07.180
Well, maybe eventually, but not all at once.


00:24:07.180 --> 00:24:09.460
What are you doing now?


00:24:09.460 --> 00:24:11.180
How big is your program?


00:24:11.180 --> 00:24:12.620
You really need testing.


00:24:12.620 --> 00:24:13.700
Maybe you do, maybe you don't.


00:24:13.700 --> 00:24:14.860
Do you really need classes?


00:24:14.860 --> 00:24:16.060
Maybe you do, maybe you don't.


00:24:16.060 --> 00:24:17.860
Do you need generators? Do you need anything?


00:24:17.860 --> 00:24:19.920
There's all these things that you probably could say,


00:24:19.920 --> 00:24:22.340
don't need them now, maybe in a year or two,


00:24:22.340 --> 00:24:25.700
I will need them, then I'll be motivated to learn them.


00:24:25.700 --> 00:24:27.380
When you have these projects,


00:24:27.380 --> 00:24:30.500
You could say, I need these five things or I need these four things.


00:24:30.500 --> 00:24:34.100
I need to know them and then my project is working,


00:24:34.100 --> 00:24:35.620
instead of trying to say,


00:24:35.620 --> 00:24:36.940
well, what do I start with even?


00:24:36.940 --> 00:24:39.980
>> Yeah. One of the criticisms of many learning resources,


00:24:39.980 --> 00:24:42.860
and I'm a little sensitive to this because I've written many of


00:24:42.860 --> 00:24:45.820
these examples is when people do a for loop and


00:24:45.820 --> 00:24:48.500
the for loop is about kinds of pizza or something,


00:24:48.500 --> 00:24:49.840
or toppings of pizza,


00:24:49.840 --> 00:24:51.900
and people look at that and say, "Why do I need this?


00:24:51.900 --> 00:24:53.860
I don't care about pizza toppings."


00:24:53.860 --> 00:24:56.140
You need that because the person creating


00:24:56.140 --> 00:24:59.540
the resource has to have some kind of context for the example.


00:24:59.540 --> 00:25:01.620
When I'm teaching a class in person,


00:25:01.620 --> 00:25:02.900
I don't come up with,


00:25:02.900 --> 00:25:04.540
"All right, we're going to do pizza toppings."


00:25:04.540 --> 00:25:05.720
I ask people in the class,


00:25:05.720 --> 00:25:06.780
"Hey, what are you interested in?"


00:25:06.780 --> 00:25:10.100
Then we pick something that somebody in the class that day


00:25:10.100 --> 00:25:13.700
mentions and then there's relevance right there.


00:25:13.700 --> 00:25:16.420
You don't have that if you're learning on your own,


00:25:16.420 --> 00:25:19.320
but what you can do if you do know your own project,


00:25:19.320 --> 00:25:21.460
you work through the example about pizza toppings,


00:25:21.460 --> 00:25:23.060
but then you write a loop that relates


00:25:23.060 --> 00:25:25.380
to the project that you want to work on.


00:25:25.380 --> 00:25:30.100
So knowing that project is really helpful regardless of how you're learning.


00:25:30.100 --> 00:25:31.740
>> Yeah. Let me pull up another comment.


00:25:31.740 --> 00:25:33.660
I think this is worth covering for people as well.


00:25:33.660 --> 00:25:35.020
So Bishnyadar says, "For me,


00:25:35.020 --> 00:25:38.060
it was all good while I was learning programming Python.


00:25:38.060 --> 00:25:42.260
But as soon as I was out there in real life looking for jobs and looking at the requirements,


00:25:42.260 --> 00:25:43.940
it drained a lot of energy out of me.


00:25:43.940 --> 00:25:45.860
Suggestions. What do you think?"


00:25:45.860 --> 00:25:48.700
>> Oh boy. I don't think there's an easy answer to that.


00:25:48.700 --> 00:25:50.820
I think it's important to be honest about that.


00:25:50.820 --> 00:25:55.260
Personally, I have never worked as a full-time programmer.


00:25:55.260 --> 00:25:56.960
That puts me in a weird spot for


00:25:56.960 --> 00:25:59.040
talking about things like career transitions.


00:25:59.040 --> 00:26:02.700
I've helped thousands of people make career transitions,


00:26:02.700 --> 00:26:05.620
but I don't sit in the interviewee chair.


00:26:05.620 --> 00:26:06.680
>> Yes, I hear you.


00:26:06.680 --> 00:26:09.700
>> Not very often. Having spent a good part of my life as a teacher,


00:26:09.700 --> 00:26:12.100
teacher hiring and teacher,


00:26:12.100 --> 00:26:13.980
the structure of employment for teachers is


00:26:13.980 --> 00:26:16.220
so vastly different than programming.


00:26:16.220 --> 00:26:19.740
>> Yeah. The time frame of teaching jobs is so weird.


00:26:19.740 --> 00:26:23.300
It's like there's a time once a year often


00:26:23.300 --> 00:26:26.420
that you can apply or change jobs and otherwise you can't.


00:26:26.420 --> 00:26:28.220
It's not exactly true, but generally true.


00:26:28.220 --> 00:26:30.080
>> Yeah. I'm in an interesting position now


00:26:30.080 --> 00:26:32.840
where I'd like to work as a professional programmer.


00:26:32.840 --> 00:26:35.780
But honestly, I have to spend 10-20 hours a week


00:26:35.780 --> 00:26:39.620
supporting the book that LTS stuff is hard-coding.


00:26:39.620 --> 00:26:41.860
>> I know. I got a bunch of courses and stuff.


00:26:41.860 --> 00:26:43.860
I know. I was just redoing


00:26:43.860 --> 00:26:46.820
some videos that had a mistake and then somebody noticed.


00:26:46.820 --> 00:26:49.020
>> Anything I do is on top of that work.


00:26:49.020 --> 00:26:51.460
I can really only consider part-time work


00:26:51.460 --> 00:26:53.980
and then it becomes a, is this worth it?


00:26:53.980 --> 00:26:55.460
So to be more direct,


00:26:55.460 --> 00:26:57.800
I don't think there's an easy answer


00:26:57.800 --> 00:27:00.860
to the grind of looking for work.


00:27:00.860 --> 00:27:03.080
And as that network thing of once you have a job,


00:27:03.080 --> 00:27:04.940
it can be easier to find the next job.


00:27:04.940 --> 00:27:06.980
The couple of things I'll share for people is,


00:27:06.980 --> 00:27:10.240
if you, so we talked about solving real world problems.


00:27:10.240 --> 00:27:12.160
If you have a story that you can tell


00:27:12.160 --> 00:27:16.300
about how you have made something better through programming


00:27:16.300 --> 00:27:17.820
what employers are looking for is that,


00:27:17.820 --> 00:27:20.540
yes, you have capability for programming.


00:27:20.540 --> 00:27:24.660
You can pass whatever LeetCode tests or screenings are necessary,


00:27:24.660 --> 00:27:28.500
but also have you used what you've learned about programming to solve something.


00:27:28.500 --> 00:27:33.340
And so the stories I always come back to are people who are working non-programming jobs


00:27:33.340 --> 00:27:37.880
and start to learn programming and then use that to solve something in their work


00:27:37.880 --> 00:27:39.460
that they weren't expected to solve.


00:27:39.460 --> 00:27:42.180
And that becomes a huge selling point in interviews.


00:27:42.180 --> 00:27:45.480
My favorite story is a guy who was working for, I believe it was UPS,


00:27:45.480 --> 00:27:46.860
and this was quite a while ago,


00:27:46.860 --> 00:27:49.560
and I feel comfortable telling that story, partly based on time.


00:27:49.560 --> 00:27:51.800
They were working for one of these large delivery companies,


00:27:51.800 --> 00:27:56.080
and they were aware of people getting fired in warehouses for


00:27:56.080 --> 00:27:58.760
damage to the goods that were supposed to be delivered.


00:27:58.760 --> 00:28:02.520
The person was learning Python and they wrote some data analysis,


00:28:02.520 --> 00:28:06.720
and they were able to pinpoint that the damage was coming from


00:28:06.720 --> 00:28:09.160
a manager or management group that was not


00:28:09.160 --> 00:28:12.560
training end-line employees well enough.


00:28:12.560 --> 00:28:14.800
That was really interesting story because


00:28:14.800 --> 00:28:18.600
the people being fired were not the people who are causing the damage.


00:28:18.600 --> 00:28:20.280
They caused a physical damage, but it was-


00:28:20.280 --> 00:28:23.040
>> Right, but it was more systemic.


00:28:23.040 --> 00:28:25.240
>> Yeah. That person save their company millions of


00:28:25.240 --> 00:28:28.240
dollars and they got a $5,000 a year raise.


00:28:28.240 --> 00:28:32.320
What they really did was they used that story in interviews


00:28:32.320 --> 00:28:37.320
to gain an actual programming position at a different company.


00:28:37.320 --> 00:28:40.560
It's hard when you're starting out.


00:28:40.560 --> 00:28:44.040
All I can say is look for the selling point for yourself,


00:28:44.040 --> 00:28:46.200
and know that once you do get your first break,


00:28:46.200 --> 00:28:49.520
It becomes easier to stay on that path.


00:28:49.520 --> 00:28:50.880
>> I have one more thing to add.


00:28:50.880 --> 00:28:54.160
A lot of times when people are looking for their first programming job,


00:28:54.160 --> 00:28:55.480
they have experience somewhere else.


00:28:55.480 --> 00:28:57.440
I realized some people are young,


00:28:57.440 --> 00:29:01.260
they learn programming and that's their totality of work experience.


00:29:01.260 --> 00:29:04.280
But a lot of people maybe studied something else and became a programmer,


00:29:04.280 --> 00:29:06.720
like you studied physics, embrace that.


00:29:06.720 --> 00:29:10.240
So imagine you studied logistics.


00:29:10.240 --> 00:29:13.560
Instead of trying to look for a programming job because you don't want to do logistics,


00:29:13.560 --> 00:29:16.060
Look for a programming job at a logistics company.


00:29:16.060 --> 00:29:17.160
Because then you can say,


00:29:17.160 --> 00:29:22.360
I have programming skills plus I have an expertise in your area of specialization.


00:29:22.360 --> 00:29:24.380
Once you intersect those things,


00:29:24.380 --> 00:29:27.400
you earn a much smaller set of editors.


00:29:27.400 --> 00:29:29.100
I'm looking for a biology job,


00:29:29.100 --> 00:29:30.500
there's a ton of people doing biology.


00:29:30.500 --> 00:29:31.920
If I'm looking for a programming job,


00:29:31.920 --> 00:29:33.480
there's a ton of people doing programming.


00:29:33.480 --> 00:29:35.960
How many are doing biology and programming,


00:29:35.960 --> 00:29:40.560
maybe in the specific area that you're focused in?


00:29:40.560 --> 00:29:42.760
That all of a sudden gives you an opportunity,


00:29:42.760 --> 00:29:46.280
But it also means you need to look somewhat differently for jobs, right?


00:29:46.280 --> 00:29:51.080
You don't go apply to FANG the same way that everyone else thinks they should apply to FANG.


00:29:51.080 --> 00:29:54.480
Look for these small companies because not only will they appreciate it more,


00:29:54.480 --> 00:29:56.480
you'll get a better chance to grow because you'll get


00:29:56.480 --> 00:30:00.080
a bigger responsibility to write more broad software.


00:30:00.080 --> 00:30:03.160
The interviewing process is not nearly as terrible,


00:30:03.160 --> 00:30:05.080
I think, for small companies, right?


00:30:05.080 --> 00:30:08.000
It's a chat with a couple of people and they're like,


00:30:08.000 --> 00:30:10.300
"We think you can do it. Give it a try for a week."


00:30:10.300 --> 00:30:14.180
Whereas places like the large tech companies,


00:30:14.180 --> 00:30:16.700
they've got these pretty horrible.


00:30:16.700 --> 00:30:18.880
Here's your take-home exercise, write it.


00:30:18.880 --> 00:30:20.900
We'll consider it if it works out well,


00:30:20.900 --> 00:30:22.700
maybe amongst the other thousands.


00:30:22.700 --> 00:30:24.420
It's like a really different experience.


00:30:24.420 --> 00:30:26.140
I think that first step in the door,


00:30:26.140 --> 00:30:28.460
that first job is the one that is hard to get.


00:30:28.460 --> 00:30:31.420
>> Yeah. I'll throw one more piece in there and it's a quick thought,


00:30:31.420 --> 00:30:32.900
and that is contributing to


00:30:32.900 --> 00:30:35.660
open-source projects is something we need to be careful about,


00:30:35.660 --> 00:30:37.900
because oftentimes it's privileged work.


00:30:37.900 --> 00:30:40.300
You have some extra time and you can do that.


00:30:40.300 --> 00:30:43.260
But one of the real benefits of making


00:30:43.260 --> 00:30:46.820
meaningful contributions to establish open-source projects is it


00:30:46.820 --> 00:30:50.740
throws you all the way into professional workflows of managing,


00:30:50.740 --> 00:30:52.900
using source control and


00:30:52.900 --> 00:30:56.060
just the bigger piece communicating with a larger team.


00:30:56.060 --> 00:30:56.660
>> Yeah.


00:30:56.660 --> 00:30:59.820
>> As I've gotten more into open-source,


00:30:59.820 --> 00:31:02.340
for me that scratches that itch of


00:31:02.340 --> 00:31:04.300
wanting to work as a professional programmer.


00:31:04.300 --> 00:31:04.700
>> Sure.


00:31:04.700 --> 00:31:05.520
>> I can clearly see.


00:31:05.520 --> 00:31:06.740
>> It's hard to simulate.


00:31:06.740 --> 00:31:13.820
Yeah, it's hard to simulate proper CI/CD merge conflict, PR discussions on your own little


00:31:13.820 --> 00:31:17.300
hobby project, that's for sure.


00:31:17.300 --> 00:31:20.380
This portion of Talk Python to Me is brought to you by Sentry.


00:31:20.380 --> 00:31:24.420
You know Sentry for their error tracking service, but did you know you can take that all the


00:31:24.420 --> 00:31:29.860
way through your multi-tiered and distributed app with their distributed tracing feature?


00:31:29.860 --> 00:31:34.540
Distributed tracing is a debugging technique that involves tracking requests of your system


00:31:34.540 --> 00:31:37.180
starting from the very beginning like a user action,


00:31:37.180 --> 00:31:38.900
all the way to the backend, database,


00:31:38.900 --> 00:31:40.700
and third-party services.


00:31:40.700 --> 00:31:42.820
This can help you identify if the cause of an error


00:31:42.820 --> 00:31:45.820
in one project is due to the error in another.


00:31:45.820 --> 00:31:48.220
Every system can benefit from distributed tracing,


00:31:48.220 --> 00:31:50.980
but they're especially useful for microservices.


00:31:50.980 --> 00:31:53.980
In this architecture, logs won't give you the full picture,


00:31:53.980 --> 00:31:56.220
so you can't debug every request in full


00:31:56.220 --> 00:31:57.660
just by reading the logs.


00:31:57.660 --> 00:32:00.100
Distributed tracing with a platform like Sentry


00:32:00.100 --> 00:32:03.100
gives you a visual overview about which services


00:32:03.100 --> 00:32:06.060
or called during the execution of certain requests.


00:32:06.060 --> 00:32:08.960
Aside from debugging and visualizing your architecture,


00:32:08.960 --> 00:32:11.420
distributed tracing also helps you identify


00:32:11.420 --> 00:32:12.980
performance bottlenecks.


00:32:12.980 --> 00:32:14.860
Through a visual like a Gantt chart,


00:32:14.860 --> 00:32:16.980
you can see if a particular span in your stack


00:32:16.980 --> 00:32:18.300
took longer than expected


00:32:18.300 --> 00:32:20.220
and how it could be causing slowdowns


00:32:20.220 --> 00:32:21.820
in other parts of your app.


00:32:21.820 --> 00:32:24.540
Learn more and see some examples in the tracing section


00:32:24.540 --> 00:32:26.700
at docs.sentry.io.


00:32:26.700 --> 00:32:28.500
To take advantage of all the features


00:32:28.500 --> 00:32:29.620
of the Sentry platform,


00:32:29.620 --> 00:32:31.440
just create your free account.


00:32:31.440 --> 00:32:35.880
And for all of you, talk, Python listeners use the code talk, Python, all one word,


00:32:35.880 --> 00:32:39.660
and you'll activate a free month of their premium paid features.


00:32:39.660 --> 00:32:44.280
Get started today at talk, python.fm/century-trace.


00:32:44.280 --> 00:32:47.320
That link is in your podcast player show notes and the episode page.


00:32:47.320 --> 00:32:50.600
Thank you to Century for supporting talk, Python to me.


00:32:50.600 --> 00:32:55.800
So we're number two, we'll cover, get a project.


00:32:55.800 --> 00:32:57.640
Yeah, we can go through some of these a little faster.


00:32:57.640 --> 00:32:58.920
Yeah, no, of course we can.


00:32:58.920 --> 00:32:59.880
I got what's number three.


00:32:59.920 --> 00:33:02.840
Number three is don't limit your learning to what's needed for your project.


00:33:02.840 --> 00:33:07.400
So it's important to have a specific project in mind to give context for what


00:33:07.400 --> 00:33:12.260
you're learning and give purpose and steer you towards feeling success and


00:33:12.260 --> 00:33:17.000
knowing like what's good enough, but always be ready to expand your toolbox


00:33:17.000 --> 00:33:20.360
and your understanding and it'll serve all your projects in the end.


00:33:20.360 --> 00:33:21.400
And learning is fun.


00:33:21.400 --> 00:33:22.960
Learning in good ways is fun.


00:33:22.960 --> 00:33:25.360
Learning with good resources, with good people.


00:33:25.360 --> 00:33:27.360
You want to learn, you want to learn FastAPI.


00:33:27.360 --> 00:33:28.840
Here's your FastAPI worksheet.


00:33:28.840 --> 00:33:29.800
The answers are in the back.


00:33:29.840 --> 00:33:30.840
Yay.


00:33:30.840 --> 00:33:31.840
Jeez.


00:33:31.840 --> 00:33:36.280
I have a kid in middle school, so we shouldn't talk about worksheets.


00:33:36.280 --> 00:33:41.040
But a quick example is I'm working on a project called Django Simple Deploy that automates


00:33:41.040 --> 00:33:43.480
deployment for projects in Django.


00:33:43.480 --> 00:33:45.160
It's not just for beginners.


00:33:45.160 --> 00:33:49.840
When Heroku collapsed its free tier a couple years ago, we saw a bunch of very experienced


00:33:49.840 --> 00:33:54.040
Python web people en masse go look at other platforms.


00:33:54.040 --> 00:34:00.120
And we saw them talking about how difficult it is to go through each platform's documentation


00:34:00.120 --> 00:34:03.440
and get a simple app deployed just to see the process.


00:34:03.440 --> 00:34:09.400
And so this tool is a core command, manage.py simple deploy, and then you name the platform


00:34:09.400 --> 00:34:14.360
and it configures your project for that platform, and then you can push it.


00:34:14.360 --> 00:34:20.520
And so it's set up as a core command that then calls out to a platform-specific command


00:34:20.520 --> 00:34:23.000
and configures your project for those commands.


00:34:23.000 --> 00:34:26.260
So when I first wrote it, my first pass was just a bunch of classes that they


00:34:26.260 --> 00:34:30.420
worked together because I wrote them and they're all nice, but I had learned


00:34:30.420 --> 00:34:33.460
about abstract base classes, but never had a purpose for using one.


00:34:33.460 --> 00:34:37.540
And so when this project is becoming, as this project is becoming more refined,


00:34:37.540 --> 00:34:42.780
I need to enforce a structure so that the platform specific code works


00:34:42.780 --> 00:34:44.300
with the platform agnostic code.


00:34:44.300 --> 00:34:50.580
And so if I hadn't, or I should say this the positive way, because I had done


00:34:50.580 --> 00:34:54.940
some general learning about more advanced object-oriented principles,


00:34:54.940 --> 00:34:59.500
I have some sense of how to enforce that structure as the need arises.


00:34:59.500 --> 00:35:01.220
So it's good to have a project in mind,


00:35:01.220 --> 00:35:03.540
but don't limit what you're learning just to that project


00:35:03.540 --> 00:35:06.660
because you'll become a better programmer and you'll do your projects better.


00:35:06.660 --> 00:35:13.020
>> Sure. One of the ideas I think is really powerful is that inspiration is perishable.


00:35:13.020 --> 00:35:15.340
If you are inspired about something,


00:35:15.340 --> 00:35:18.020
you might not be that inspired in a couple of weeks.


00:35:18.020 --> 00:35:19.460
That doesn't mean it's not cool anymore,


00:35:19.460 --> 00:35:22.580
that just means you moved on,


00:35:22.580 --> 00:35:24.660
your focus is elsewhere or whatever.


00:35:24.660 --> 00:35:27.340
Yeah, sure, you need to learn the things you need to learn to do


00:35:27.340 --> 00:35:30.080
your project or to check some boxes.


00:35:30.080 --> 00:35:31.840
But if you find something like,


00:35:31.840 --> 00:35:34.900
I am really interested in that,


00:35:34.900 --> 00:35:36.940
leverage that inspiration.


00:35:36.940 --> 00:35:38.540
I don't know about other people,


00:35:38.540 --> 00:35:41.140
but for me, I'm two or three times more


00:35:41.140 --> 00:35:44.380
productive in learning and writing code and all sorts of things,


00:35:44.380 --> 00:35:47.220
if I'm really on fire about something versus like,


00:35:47.220 --> 00:35:53.780
guess I'll get in there and like fix that bug and like something that I'm not inspired about as MailChimp just changed their API and


00:35:53.780 --> 00:36:17.140
deprecated their, you know, shut off their old one. So now I have people on my mailing list, I got to go rewrite that. There's no, I, what I get in the end is I get to just keep having them on my mailing list. There's zero inspiration there. But if I ran across like, oh, there's this new feature in Python 3.12, or there's this new package that I found on PyPI, that's awesome. Like, I just really want to like, leverage that, right. But while it's, while it's there,


00:36:17.140 --> 00:36:18.020
Take advantage of it.


00:36:18.020 --> 00:36:19.700
>> All right. Number 4.


00:36:19.700 --> 00:36:21.060
>> Yeah, number 4. What do we got?


00:36:21.060 --> 00:36:22.500
>> Read good code.


00:36:22.500 --> 00:36:25.460
This is one of those things that I wish I had been


00:36:25.460 --> 00:36:29.220
told a lot earlier in my programming career than I was.


00:36:29.220 --> 00:36:32.540
I went a long time, decades,


00:36:32.540 --> 00:36:36.220
just looking at code that was presented in the classes and books I read,


00:36:36.220 --> 00:36:37.460
and then writing my own code,


00:36:37.460 --> 00:36:41.220
and then only reading what I needed to in order to do my projects.


00:36:41.220 --> 00:36:45.560
Then at some point, I forget if I saw a suggestion to do this,


00:36:45.560 --> 00:36:48.120
or if I just started to do it out of curiosity.


00:36:48.120 --> 00:36:50.680
I think it's probably around the time when a lot of


00:36:50.680 --> 00:36:53.800
code became very visible through platforms like GitHub.


00:36:53.800 --> 00:36:55.760
But if you're using a library like say,


00:36:55.760 --> 00:36:58.120
pandas, that is out in the open.


00:36:58.120 --> 00:37:01.360
Rather than just using pandas functions,


00:37:01.360 --> 00:37:06.160
you can go look at the code that runs that function.


00:37:06.160 --> 00:37:09.240
I shouldn't say pandas because I'm just


00:37:09.240 --> 00:37:11.760
starting to get more fluent with that, more comfortable.


00:37:11.760 --> 00:37:13.440
I'll say like Matplotlib.


00:37:13.440 --> 00:37:17.280
So if you're making a scatter plot, fig.scatter or something like that, you can go look at


00:37:17.280 --> 00:37:19.960
that scatter function and see what it does.


00:37:19.960 --> 00:37:22.160
You see the full set of arguments that it can take.


00:37:22.160 --> 00:37:24.040
You see all of its capabilities.


00:37:24.040 --> 00:37:28.840
And you see how the people writing and maintaining matplotlib take your information and turn


00:37:28.840 --> 00:37:30.680
it into a plot.


00:37:30.680 --> 00:37:34.840
And when you look at that code, you're seeing professional quality code.


00:37:34.840 --> 00:37:35.840
It can be overwhelming.


00:37:35.840 --> 00:37:39.320
There's probably going to be parts that you understand and parts that you don't.


00:37:39.320 --> 00:37:42.320
But the more you look at it, the more you understand and you start, your code becomes


00:37:42.320 --> 00:37:44.920
better because you're seeing high quality code.


00:37:44.920 --> 00:37:47.780
It's good to recognize that those people writing that did not write


00:37:47.780 --> 00:37:51.080
that polished code the first time they wrote the scatter function.


00:37:51.080 --> 00:37:55.360
So don't think I'm a bad programmer because my code doesn't look like this.


00:37:55.360 --> 00:37:57.040
The polished code that we look at from


00:37:57.040 --> 00:38:01.000
large popular well-established frameworks has been well-refined.


00:38:01.000 --> 00:38:02.840
So it's something to aim for.


00:38:02.840 --> 00:38:04.160
>> Yeah, it totally is.


00:38:04.160 --> 00:38:08.320
It's one of those things that's hard to get experience with if you're


00:38:08.320 --> 00:38:11.920
not yet working as a professional developer or even if you are,


00:38:11.920 --> 00:38:16.320
but you're a one to two person shop or you don't collaborate a lot.


00:38:16.320 --> 00:38:17.160
>> Right.


00:38:17.160 --> 00:38:20.720
>> It doesn't have to be that you're not working as a pro,


00:38:20.720 --> 00:38:23.360
working as part of your job in that.


00:38:23.360 --> 00:38:27.080
It could be that you just don't have enough collaboration or enough people.


00:38:27.080 --> 00:38:27.640
>> Yeah.


00:38:27.640 --> 00:38:27.920
>> Yeah.


00:38:27.920 --> 00:38:28.480
>> A good thing.


00:38:28.480 --> 00:38:29.280
>> So good advice.


00:38:29.280 --> 00:38:30.960
>> It could be hard to know where to look.


00:38:30.960 --> 00:38:32.880
All right. So if I look at the Python source code,


00:38:32.880 --> 00:38:34.560
giant, I have no idea where to look.


00:38:34.560 --> 00:38:35.920
Look at the most recent commits.


00:38:35.920 --> 00:38:37.360
So just pick a commit,


00:38:37.360 --> 00:38:40.160
look at the files that were changed and get some sense of what people


00:38:40.160 --> 00:38:44.880
are doing to modify the language and these larger libraries.


00:38:44.880 --> 00:38:46.120
Look at the newest issues,


00:38:46.120 --> 00:38:48.520
what are people discussing about what they're trying to work


00:38:48.520 --> 00:38:50.780
on and how they're trying to solve that,


00:38:50.780 --> 00:38:53.080
and maybe look at some of the longest open issues.


00:38:53.080 --> 00:38:55.280
What are the hardest problems that people are wrestling


00:38:55.280 --> 00:38:58.240
within in some of these projects that we all use?


00:38:58.240 --> 00:39:00.680
>> All good advice. I would say the larger


00:39:00.680 --> 00:39:02.920
the open-source project and the more popular,


00:39:02.920 --> 00:39:08.000
maybe harder it is to read because it has to be more polished,


00:39:08.000 --> 00:39:10.000
and more optimized and more,


00:39:10.000 --> 00:39:13.660
it's got that extra layer of,


00:39:13.660 --> 00:39:15.560
well, it's going to make it harder to read,


00:39:15.560 --> 00:39:17.480
but it'll make it 2 percent faster,


00:39:17.480 --> 00:39:18.920
and people will appreciate that.


00:39:18.920 --> 00:39:20.000
We're going to do that.


00:39:20.000 --> 00:39:22.560
Whereas, there's a tier below that of


00:39:22.560 --> 00:39:25.320
open-source things that are professional level,


00:39:25.320 --> 00:39:27.960
but not yet beyond approachable.


00:39:27.960 --> 00:39:31.360
>> Yeah. I did two newsletter posts recently about


00:39:31.360 --> 00:39:35.640
exploring recent Python repositories to get at this exact issue.


00:39:35.640 --> 00:39:37.880
The idea if you're looking at contributing to Django,


00:39:37.880 --> 00:39:40.880
it's hard. Django community is doing a lot of work to make it


00:39:40.880 --> 00:39:43.720
more approachable for people wanting to contribute. But it's


00:39:43.720 --> 00:39:47.160
absolutely true that it's hard to contribute to and get into


00:39:47.160 --> 00:39:51.120
larger well established code bases. So I use the GitHub API


00:39:51.120 --> 00:39:54.600
to find, say, all the Python projects that have pushed to


00:39:54.600 --> 00:39:58.840
GitHub in the last three weeks that have at least 10 stars. And


00:39:58.840 --> 00:40:00.920
those are the fresh projects that are getting attention.


00:40:00.920 --> 00:40:04.240
Yeah, don't have all this, this long term stuff. And so I ended


00:40:04.240 --> 00:40:07.160
up actually contributing to one of those projects, because it's


00:40:07.160 --> 00:40:08.540
just what you described earlier,


00:40:08.540 --> 00:40:10.220
just pulled me in and fascinated me.


00:40:10.220 --> 00:40:12.460
It's so nice to have some concrete contributions


00:40:12.460 --> 00:40:14.940
to a project that is in that fresh stage.


00:40:14.940 --> 00:40:17.060
>> Yeah, that's fantastic. All right, what's the next one?


00:40:17.060 --> 00:40:19.020
>> Know your tools.


00:40:19.020 --> 00:40:22.740
I laugh at this one because I think about,


00:40:22.740 --> 00:40:25.580
this is one of the reasons I transitioned into


00:40:25.580 --> 00:40:28.820
an equal focus between programming and teaching.


00:40:28.820 --> 00:40:33.140
I used to, my priority was 98 percent teaching and 2 percent programming,


00:40:33.140 --> 00:40:35.720
Now I'm probably 60 percent program,


00:40:35.720 --> 00:40:37.460
40 percent teaching.


00:40:37.460 --> 00:40:39.600
Tools for teachers are terrible.


00:40:39.600 --> 00:40:41.880
Teachers, public school teachers still


00:40:41.880 --> 00:40:44.300
write most of their lesson plans in Microsoft Word.


00:40:44.300 --> 00:40:46.300
That sounds like, oh gosh,


00:40:46.300 --> 00:40:48.940
they just have to write out onto a blank page.


00:40:48.940 --> 00:40:51.300
But what it really means is we as


00:40:51.300 --> 00:40:53.820
programmers are used to working with structured data.


00:40:53.820 --> 00:40:56.860
If we have a workflow and we're writing something,


00:40:56.860 --> 00:40:59.800
and then we update the structure of our information,


00:40:59.800 --> 00:41:02.020
we don't have to go back and rewrite everything.


00:41:02.020 --> 00:41:05.300
We have tools that manage restructuring projects.


00:41:05.300 --> 00:41:08.060
If you write three years of lesson plans in Word,


00:41:08.060 --> 00:41:09.520
and then you figure out how to teach better,


00:41:09.520 --> 00:41:11.460
and you want to restructure all your lessons,


00:41:11.460 --> 00:41:14.260
there's no automated way to do that. It's a mess.


00:41:14.260 --> 00:41:18.040
I'm grateful as a programmer to have things like IDEs,


00:41:18.040 --> 00:41:20.000
formatters, linters, Git,


00:41:20.000 --> 00:41:24.020
any version control system, GitHub, hosting platforms.


00:41:24.020 --> 00:41:27.100
My core advice here is to,


00:41:27.100 --> 00:41:30.700
as you're becoming more established as a programmer and as a Python programmer,


00:41:30.700 --> 00:41:35.100
start to recognize what are the tools that you personally find value in,


00:41:35.100 --> 00:41:38.220
what is your favorite IDE, what is your preferred formatter,


00:41:38.220 --> 00:41:41.100
what's your preferred linter version control system,


00:41:41.100 --> 00:41:44.780
and then just take a little time to focus on that tool itself.


00:41:44.780 --> 00:41:47.260
So if you've been using VS Code for six months,


00:41:47.260 --> 00:41:50.460
spend three days and just read about configuring VS Code.


00:41:50.460 --> 00:41:54.620
You'll almost certainly come up with some things that make your day-to-day work


00:41:54.620 --> 00:41:57.180
more efficient, more effective, more enjoyable.


00:41:57.180 --> 00:42:00.460
Every time I've taken time to do this, I've come out better for it.


00:42:00.460 --> 00:42:02.380
>> Yeah, whether it's VS Code or PyCharm,


00:42:02.380 --> 00:42:06.420
they both have a ton of options that you can pick from.


00:42:06.420 --> 00:42:09.460
They're discoverable or less discoverable in different ways.


00:42:09.460 --> 00:42:12.780
PyCharm makes it obvious what all the things it can do,


00:42:12.780 --> 00:42:14.600
but there's so many things that people are like,


00:42:14.600 --> 00:42:17.500
"Well, I'm just going to stick to my lane,


00:42:17.500 --> 00:42:18.960
just stay over here and do the thing."


00:42:18.960 --> 00:42:21.380
VS Code is a little less discoverable,


00:42:21.380 --> 00:42:24.380
but maybe it makes it even harder to take full advantage of it


00:42:24.380 --> 00:42:27.320
because it's like the Command-Shift-P to pull up the palette and then like,


00:42:27.320 --> 00:42:29.180
"Well, it's a huge list. What I do with this?"


00:42:29.180 --> 00:42:30.060
>> Yes.


00:42:30.060 --> 00:42:33.580
But they're being really good with your editor.


00:42:33.580 --> 00:42:36.380
I know some of the things that are coming as well in your list,


00:42:36.380 --> 00:42:38.140
this adds on top of it,


00:42:38.140 --> 00:42:39.820
but it makes a huge difference.


00:42:39.820 --> 00:42:43.380
It makes things like being comfortable navigating your code,


00:42:43.380 --> 00:42:45.140
feel better, testing your code,


00:42:45.140 --> 00:42:48.500
changing your code, doing some of these workflows you talked about,


00:42:48.500 --> 00:42:51.620
like Git and PRs, all of that stuff.


00:42:51.620 --> 00:42:54.980
All of those things are in those tools plus way more.


00:42:54.980 --> 00:42:58.780
That's not even talking about the extensions or plugins that you might go after.


00:42:58.780 --> 00:43:01.100
But it's easy to see,


00:43:01.100 --> 00:43:04.380
well, I've fired it up and now it's an editor.


00:43:04.380 --> 00:43:06.820
It's a thing and it has cool autocomplete,


00:43:06.820 --> 00:43:08.540
and then just forget about


00:43:08.540 --> 00:43:10.620
the 100 other things that it can help you with.


00:43:10.620 --> 00:43:12.340
>> Yeah. Particularly with IDEs,


00:43:12.340 --> 00:43:13.780
they do a lot for us.


00:43:13.780 --> 00:43:16.640
That can be a good thing and it can be a bad thing.


00:43:16.640 --> 00:43:19.820
I have steered a lot of people back towards simpler editors like


00:43:19.820 --> 00:43:22.140
Sublime Text and even Genie is


00:43:22.140 --> 00:43:24.540
a fantastic one that a lot of people don't know about.


00:43:24.540 --> 00:43:27.700
Because the tools like VS Code,


00:43:27.700 --> 00:43:29.860
PyCharm and whatnot, when everything's working,


00:43:29.860 --> 00:43:31.620
what they do for us is fantastic.


00:43:31.620 --> 00:43:34.940
When things stop working, if you don't know what it's trying to do for you,


00:43:34.940 --> 00:43:37.060
it can just make things much more confusing.


00:43:37.060 --> 00:43:39.820
Particularly, that comes down to things like tools that


00:43:39.820 --> 00:43:42.780
build virtual environment for a new project for you.


00:43:42.780 --> 00:43:44.780
If you understand what that's doing,


00:43:44.780 --> 00:43:46.860
and it stops working, you can go troubleshoot it.


00:43:46.860 --> 00:43:49.020
But if you don't know what it did for you and now


00:43:49.020 --> 00:43:53.260
it says this module is not found, it can be a mess.


00:43:53.260 --> 00:43:56.100
>> Virtual environment seems to be just like,


00:43:56.100 --> 00:43:58.620
>> They just go wrong so often.


00:43:58.620 --> 00:43:59.020
>> Yeah.


00:43:59.020 --> 00:44:00.940
>> I'm not in the pure,


00:44:00.940 --> 00:44:04.380
I've created one on the terminal and I've acted, that's solid.


00:44:04.380 --> 00:44:05.020
>> Yeah.


00:44:05.020 --> 00:44:07.820
>> In the tooling, it's like sometimes it finds it,


00:44:07.820 --> 00:44:11.220
sometimes it doesn't, sometimes it really doesn't want to find it.


00:44:11.220 --> 00:44:12.700
It's nuts.


00:44:12.700 --> 00:44:14.380
>> Yeah. I'm glad you brought that up.


00:44:14.380 --> 00:44:16.900
The core advice there for me has always been,


00:44:16.900 --> 00:44:19.220
people have a tendency to want to go find


00:44:19.220 --> 00:44:22.300
another editor or IDE that's going to manage that better.


00:44:22.300 --> 00:44:23.520
When I tell them, it's no,


00:44:23.520 --> 00:44:25.380
it's going to manage it differently and you're going to run it to


00:44:25.380 --> 00:44:27.640
the same issue and then you're going to need to solve it.


00:44:27.640 --> 00:44:29.300
When that stuff happens,


00:44:29.300 --> 00:44:33.120
taking the time to learn what your editor is doing for you,


00:44:33.120 --> 00:44:34.560
and then be able to troubleshoot that,


00:44:34.560 --> 00:44:36.580
that's going to serve you well in the long run.


00:44:36.580 --> 00:44:37.940
>> All right. What's next?


00:44:37.940 --> 00:44:39.860
>> Learn how to test your code.


00:44:39.860 --> 00:44:41.940
I wrote here, you won't sleep more,


00:44:41.940 --> 00:44:44.000
but your sleep will be more restful.


00:44:44.000 --> 00:44:48.260
I went probably 20 years programming without ever writing a test.


00:44:48.260 --> 00:44:50.300
I always had this notion that it was difficult,


00:44:50.300 --> 00:44:52.140
it was separate from programming.


00:44:52.140 --> 00:44:53.620
The first time I wrote a test,


00:44:53.620 --> 00:44:56.300
It was so much easier than I thought and so cool to see


00:44:56.300 --> 00:45:00.400
my program run automatically and had the output validated.


00:45:00.400 --> 00:45:01.560
I love testing.


00:45:01.560 --> 00:45:03.800
It's probably my biggest interest these days


00:45:03.800 --> 00:45:06.100
beyond deploying Django projects.


00:45:06.100 --> 00:45:09.760
I love it because when we write code, we want it to work.


00:45:09.760 --> 00:45:11.360
When we have a project,


00:45:11.360 --> 00:45:14.180
we want our project to be successful.


00:45:14.180 --> 00:45:16.120
Testing validates that.


00:45:16.120 --> 00:45:20.360
Testing gives you confidence that your project is working correctly,


00:45:20.360 --> 00:45:22.840
and if you fix a bug, you just fix it once.


00:45:22.840 --> 00:45:26.480
So testing is its own podcast for some people.


00:45:26.480 --> 00:45:29.560
So I'll just say that testing is easier than a lot of people think it is.


00:45:29.560 --> 00:45:30.560
Go use pytest.


00:45:30.560 --> 00:45:34.520
I used to teach unit tests because it's in the standard library, but pytest has become


00:45:34.520 --> 00:45:36.600
well-established enough.


00:45:36.600 --> 00:45:42.000
It's one of my favorite Python packages of all because it's one of those few that serves


00:45:42.000 --> 00:45:44.960
pure beginners and experts equally well.


00:45:44.960 --> 00:45:48.920
It's the best way to be introduced to testing, and if you're testing professionally, there's


00:45:48.920 --> 00:45:51.080
no tool better than that.


00:45:51.080 --> 00:45:55.920
the zen of Python, right? That it's really serves beginners well, but also experts well.


00:45:55.920 --> 00:45:58.080
I think that's one of its special capabilities.


00:45:58.080 --> 00:46:03.280
Yeah, I will encourage people and Michael, I'd be curious if you agree with this or not.


00:46:03.280 --> 00:46:08.200
I'd encourage people to not necessarily look at unit tests right away, because unit tests


00:46:08.200 --> 00:46:12.720
are brittle for newer projects. I really like end to end testing. And that is where you


00:46:12.720 --> 00:46:16.960
run your project, you get some output, and then you run tests against that output. And


00:46:16.960 --> 00:46:20.200
That is not testing the implementation of your project.


00:46:20.200 --> 00:46:22.360
That's just saying, does your project work?


00:46:22.360 --> 00:46:23.960
And so the project I've been pulled into recently


00:46:23.960 --> 00:46:27.140
is one called git sim, git hyphen sim,


00:46:27.140 --> 00:46:29.680
and you run it against your own project


00:46:29.680 --> 00:46:32.120
and it gives you a visualization of all your commits.


00:46:32.120 --> 00:46:34.320
And so for people trying to understand how git works


00:46:34.320 --> 00:46:36.520
or how git is working for their particular project,


00:46:36.520 --> 00:46:39.800
you run git sim merge and it shows you


00:46:39.800 --> 00:46:42.280
visualization of what that merge would look like.


00:46:42.280 --> 00:46:44.680
And so that project is newer and it had no tests.


00:46:44.680 --> 00:46:47.240
And so I helped write the initial test suite.


00:46:47.240 --> 00:46:49.620
And I said to the person,


00:46:49.620 --> 00:46:51.520
like we shouldn't test your implementation


00:46:51.520 --> 00:46:53.500
'cause you should be free to change


00:46:53.500 --> 00:46:55.580
how you're building this new project,


00:46:55.580 --> 00:46:57.580
but we should actually start to test


00:46:57.580 --> 00:46:59.040
the images that you're generating


00:46:59.040 --> 00:47:01.500
so that when you do change your implementation,


00:47:01.500 --> 00:47:04.660
you know whether the images that your users are gonna see


00:47:04.660 --> 00:47:06.700
are the ones that you think that you've been seeing


00:47:06.700 --> 00:47:08.300
and you think they're gonna see.


00:47:08.300 --> 00:47:10.800
And so that's really nice because you can,


00:47:10.800 --> 00:47:14.260
you don't have to aim for 100% coverage of your code.


00:47:14.260 --> 00:47:16.460
you just start to get that big picture.


00:47:16.460 --> 00:47:18.860
Yes, my project is still doing what I think it's doing.


00:47:18.860 --> 00:47:21.540
That makes for better sleep and all of your non-computer activities


00:47:21.540 --> 00:47:25.380
are more enjoyable because you have more confidence that things keep working.


00:47:25.380 --> 00:47:29.780
>> Yeah. I'm with you on not going too far down the unit test side.


00:47:29.780 --> 00:47:34.600
I used to write tons and tons of very low-level focus unit tests.


00:47:34.600 --> 00:47:36.520
When I was on a team,


00:47:36.520 --> 00:47:39.620
I always had a hard time having everybody have buy-in.


00:47:39.620 --> 00:47:41.820
Some people would, some people wouldn't.


00:47:41.820 --> 00:47:43.980
They'd go do something that would break the test.


00:47:43.980 --> 00:47:45.520
You know, like you broke the bill.


00:47:45.520 --> 00:47:47.880
They're like, Oh yeah, I guess, I guess I did.


00:47:47.880 --> 00:47:51.320
You're like, you realize that we don't all participate in this.


00:47:51.320 --> 00:47:56.680
It just becomes a hassle for me, like chasing after trying to like patch up


00:47:56.680 --> 00:47:58.640
the tests as you, you make these changes.


00:47:58.640 --> 00:48:02.640
And as you're more focused, as you're like lower level in the world, that's


00:48:02.640 --> 00:48:04.960
just a more constant problem.


00:48:04.960 --> 00:48:07.240
And it also requires more effort, right?


00:48:07.240 --> 00:48:10.860
So maybe that effort is worthwhile, but if, if you're new, maybe it's not.


00:48:10.880 --> 00:48:13.680
And so I'm a little bit more on board with just like,


00:48:13.680 --> 00:48:17.360
let's do the main things at like kind of top to bottom in the app.


00:48:17.360 --> 00:48:19.420
And if that stuff hangs on,


00:48:19.420 --> 00:48:21.140
we got a real good chance.


00:48:21.140 --> 00:48:24.560
And over time, my experience has been for the most part,


00:48:24.560 --> 00:48:26.580
it's things blow up hard.


00:48:26.580 --> 00:48:28.120
They don't just like, oh,


00:48:28.120 --> 00:48:29.560
there's some little subtle problem.


00:48:29.560 --> 00:48:30.800
Generally, not always true,


00:48:30.800 --> 00:48:33.440
but generally, like if I screw something up,


00:48:33.440 --> 00:48:35.440
a lot of tests start failing even when they're


00:48:35.440 --> 00:48:38.800
these high-level things because something's pretty, pretty messed up.


00:48:38.800 --> 00:48:42.880
And in that regard, that other person probably didn't intend to change the output


00:48:42.880 --> 00:48:47.080
or the overall behavior of the app in well-known ways.


00:48:47.080 --> 00:48:49.780
They just changed some implementation detail and they weren't


00:48:49.780 --> 00:48:54.480
being sufficiently rigorous with their software lifecycle.


00:48:54.480 --> 00:48:56.080
So yes, I'm on board.


00:48:56.080 --> 00:49:00.080
The web equivalent, the easiest web equivalent that I can think of


00:49:00.080 --> 00:49:03.080
is if you've got a website and it has a sitemap,


00:49:03.080 --> 00:49:06.680
your website should have a sitemap for all of your data-driven pages.


00:49:06.680 --> 00:49:09.340
just go get the sitemap and request every page.


00:49:09.340 --> 00:49:12.780
Does it give you a 200 or does it give you a 500 or a 404?


00:49:12.780 --> 00:49:16.600
As 404s and 500s should not be found in your sitemap.


00:49:16.600 --> 00:49:19.040
But that's a really easy test.


00:49:19.040 --> 00:49:21.400
Loop over that, call every one of those with


00:49:21.400 --> 00:49:24.560
your self.client.get or whatever


00:49:24.560 --> 00:49:27.680
your HTTP test thing looks like and just call all of them.


00:49:27.680 --> 00:49:30.000
That's one thing you could do that's in that category.


00:49:30.000 --> 00:49:31.920
>> As an author, I wrote tests


00:49:31.920 --> 00:49:34.520
for most of the code in Python Crash Course.


00:49:34.520 --> 00:49:38.440
And so Python Crash Course was first written, I think, on Python 3.5.


00:49:38.440 --> 00:49:41.800
And so it's been through, like, what, six or seven iterations of Python


00:49:41.800 --> 00:49:45.240
and all kinds of iterations of the libraries that the projects use.


00:49:45.240 --> 00:49:49.000
And so whenever a new issue comes out, or new, sorry, version comes out,


00:49:49.000 --> 00:49:51.320
I just run tests on most of the code in the book.


00:49:51.320 --> 00:49:56.200
And it pulls the test, pulls the code from the GitHub repository for the book,


00:49:56.200 --> 00:49:57.800
and just runs it with the new versions.


00:49:57.800 --> 00:50:00.360
And that's been part of how I've been able to maintain


00:50:00.360 --> 00:50:05.080
into the upkeep and maintenance on a 500-page book


00:50:05.080 --> 00:50:05.920
that covers a lot.


00:50:05.920 --> 00:50:07.400
- Yeah, yeah, that's awesome.


00:50:07.400 --> 00:50:08.240
- Yep.


00:50:08.240 --> 00:50:09.060
- Let's keep going.


00:50:09.060 --> 00:50:10.500
There's a couple of good comments and questions


00:50:10.500 --> 00:50:13.760
in the audience, but I think we're on a schedule,


00:50:13.760 --> 00:50:14.680
so let's keep going.


00:50:14.680 --> 00:50:15.520
- Yeah, yeah.


00:50:15.520 --> 00:50:16.560
Last comment about testing.


00:50:16.560 --> 00:50:19.080
I love it because I think that when you test your code,


00:50:19.080 --> 00:50:20.160
you learn things about your code


00:50:20.160 --> 00:50:22.240
that makes development better as well.


00:50:22.240 --> 00:50:23.960
So it's not just does it work?


00:50:23.960 --> 00:50:27.800
It also gives you insight into how your code is working.


00:50:27.800 --> 00:50:29.600
I'm looking forward to exploring more.


00:50:29.600 --> 00:50:31.700
All right, next point, know what's good enough


00:50:31.700 --> 00:50:33.040
for any given project.


00:50:33.040 --> 00:50:35.480
As a teacher, students would say like,


00:50:35.480 --> 00:50:37.380
am I done, am I done, is this good enough?


00:50:37.380 --> 00:50:39.780
And I watch other teachers say,


00:50:39.780 --> 00:50:42.400
like, don't ask me that, always work harder.


00:50:42.400 --> 00:50:44.820
And I always tell the students, that's a great question.


00:50:44.820 --> 00:50:46.040
What is good enough?


00:50:46.040 --> 00:50:47.680
And so whatever your project is,


00:50:47.680 --> 00:50:49.600
knowing your benchmark for what's good enough


00:50:49.600 --> 00:50:52.240
and when it's done, when you can move on to the next thing


00:50:52.240 --> 00:50:53.320
is really helpful.


00:50:53.320 --> 00:50:54.880
'Cause you'll never write perfect code,


00:50:54.880 --> 00:50:56.960
but you can certainly write good enough code.


00:50:56.960 --> 00:51:00.400
- Yeah, there was a really popular article,


00:51:00.400 --> 00:51:01.640
blog post, something like that,


00:51:01.640 --> 00:51:05.080
that was, you're not Facebook, you're not Google,


00:51:05.080 --> 00:51:07.040
you're not Microsoft, you're not LinkedIn.


00:51:07.040 --> 00:51:08.880
So it was something along those lines, right?


00:51:08.880 --> 00:51:12.420
And the admonishment or the advice there was,


00:51:12.420 --> 00:51:15.160
you might read about how somebody like Google


00:51:15.160 --> 00:51:18.680
has all these containers doing all this scale out


00:51:18.680 --> 00:51:21.820
and failover and geo location.


00:51:21.820 --> 00:51:25.840
Your app that manages reporting for managers


00:51:25.840 --> 00:51:27.740
that you're at your company,


00:51:27.740 --> 00:51:29.800
there's five managers and they do it once a week.


00:51:29.800 --> 00:51:32.920
You don't need global scale out techniques.


00:51:32.920 --> 00:51:36.420
You don't need the zero downtime that containers offer.


00:51:36.420 --> 00:51:38.560
You don't need load balancers.


00:51:38.560 --> 00:51:40.620
Like none of that stuff applies to you.


00:51:40.620 --> 00:51:42.440
And so in fact, I would say,


00:51:42.440 --> 00:51:44.320
if you start applying those things to it,


00:51:44.320 --> 00:51:47.080
you make your application harder to deploy.


00:51:47.080 --> 00:51:49.500
You make it harder for other people


00:51:49.500 --> 00:51:51.040
and your team to work on.


00:51:51.040 --> 00:51:53.900
You make it less good for that situation.


00:51:53.900 --> 00:51:57.140
But at Google scale, the opposite is true.


00:51:57.140 --> 00:51:59.480
It's less good if it doesn't have those things.


00:51:59.480 --> 00:52:03.160
And so it's not just, well, this is a crappy project,


00:52:03.160 --> 00:52:06.160
so it gets crappy level CS attention.


00:52:06.160 --> 00:52:10.720
It's a small project, so it can be written and managed


00:52:10.720 --> 00:52:13.780
and worked on in a way that allows for,


00:52:13.780 --> 00:52:16.360
you know, optimizes for small teams,


00:52:16.360 --> 00:52:18.760
not worry, not optimize it for uptime


00:52:18.760 --> 00:52:20.240
and all those kinds of things,


00:52:20.240 --> 00:52:23.160
so that you can make it work better in that situation.


00:52:23.160 --> 00:52:26.440
And so I totally agree, knowing what is good enough


00:52:26.440 --> 00:52:29.220
is super important, but what is good enough,


00:52:29.220 --> 00:52:30.380
it's not like a spectrum.


00:52:30.380 --> 00:52:31.740
Like I'm at the really good level.


00:52:31.740 --> 00:52:34.100
It's like, you've got a, it's a multidimensional thing.


00:52:34.100 --> 00:52:36.860
Like you're at a good level for the context that you're in,


00:52:36.860 --> 00:52:37.900
the situation you're in.


00:52:37.900 --> 00:52:39.880
- Hey, you're walking right into bullet point,


00:52:39.880 --> 00:52:42.340
or tip number eight, I think it is.


00:52:42.340 --> 00:52:43.180
- We are.


00:52:43.180 --> 00:52:44.900
- Yeah, and that's embrace refactoring.


00:52:44.900 --> 00:52:47.060
And so my notes about this was that


00:52:47.060 --> 00:52:48.780
good enough is situational.


00:52:48.780 --> 00:52:50.260
So when a project proves it's worth,


00:52:50.260 --> 00:52:52.380
like say you have an idea for a project,


00:52:52.380 --> 00:52:55.200
you build it out, you get an MVP functional,


00:52:55.200 --> 00:52:56.940
and you've reached your good enough


00:52:56.940 --> 00:52:59.100
to see whether the idea works.


00:52:59.100 --> 00:53:02.460
If nobody ever uses it, it doesn't catch on, it worked,


00:53:02.460 --> 00:53:04.580
it was interesting, but it's just not catching on,


00:53:04.580 --> 00:53:06.260
you move on, move on to something else.


00:53:06.260 --> 00:53:09.660
But if that product has started to gain interest,


00:53:09.660 --> 00:53:11.540
now good enough moves.


00:53:11.540 --> 00:53:13.600
And so maybe it needs to be more efficient.


00:53:13.600 --> 00:53:15.040
Maybe it needs more testing.


00:53:15.040 --> 00:53:16.960
Maybe it needs to be deployed in a different way.


00:53:16.960 --> 00:53:20.140
And so refactoring tied in with that idea


00:53:20.140 --> 00:53:23.220
what is good enough is the road for evolving a project.


00:53:23.220 --> 00:53:25.060
All of these projects that we're talking about,


00:53:25.060 --> 00:53:27.400
the well-established ones, the Googles, the Fangs,


00:53:27.400 --> 00:53:31.340
those projects are constantly shifting bars of what is good enough,


00:53:31.340 --> 00:53:36.060
and they're constantly being refactored in very careful ways to reach those new goals.


00:53:36.060 --> 00:53:36.460
>> Yeah, I'll say that.


00:53:36.460 --> 00:53:36.900
>> I love refactoring.


00:53:36.900 --> 00:53:37.820
>> I love refactoring your tools.


00:53:37.820 --> 00:53:40.060
>> Yeah, I do too. I think it's fantastic.


00:53:40.060 --> 00:53:43.740
So many people who are getting started will tell me things like,


00:53:43.740 --> 00:53:45.920
"I'm not sure how to get started.


00:53:45.920 --> 00:53:47.980
I don't know what the best way to do this is.


00:53:47.980 --> 00:53:49.840
I'm thinking about it and I've tried something,


00:53:49.840 --> 00:53:53.480
but I wasn't sure so I went back to thinking.


00:53:53.480 --> 00:53:56.280
The best way to get started is just give it a shot,


00:53:56.280 --> 00:53:57.640
just create something.


00:53:57.640 --> 00:54:01.000
You'll learn what of that is working and what is not ideal.


00:54:01.000 --> 00:54:04.840
More importantly, something that's awesome about software is it's plastic.


00:54:04.840 --> 00:54:07.560
You can change it, plastic in the soft plastic way.


00:54:07.560 --> 00:54:10.720
You can evolve it as you learn more about it.


00:54:10.720 --> 00:54:13.640
I go, I thought that should have been separate module,


00:54:13.640 --> 00:54:15.160
but this should be just part of that class.


00:54:15.160 --> 00:54:18.680
We're just going to move that in through refactoring and not


00:54:18.680 --> 00:54:23.480
feeling like you have to have a full visibility of what you're working on to get started.


00:54:23.480 --> 00:54:26.040
I think that's maybe it sounds counterintuitive,


00:54:26.040 --> 00:54:28.140
but I feel like that's an expert perspective.


00:54:28.140 --> 00:54:30.000
It's like, I think I need to go that way.


00:54:30.000 --> 00:54:32.520
We're going to start down the path that way and we're going to


00:54:32.520 --> 00:54:38.480
evolve and course-correct as we go rather than completely stressing about,


00:54:38.480 --> 00:54:42.280
how do I get started? How do I see the whole end line before I start writing it?


00:54:42.280 --> 00:54:44.560
>> This is part of why this is not a countdown.


00:54:44.560 --> 00:54:48.200
Because for example, if you have even a small set of tests,


00:54:48.200 --> 00:54:49.820
the test your final output.


00:54:49.820 --> 00:54:51.640
Refactoring is easy.


00:54:51.640 --> 00:54:54.760
It's fun because if your test break and you don't like the idea,


00:54:54.760 --> 00:54:56.120
you can go back to where you started.


00:54:56.120 --> 00:55:00.240
>> Another fun thing about refactoring is the whole concept of code smells.


00:55:00.240 --> 00:55:02.240
I think becoming an expert,


00:55:02.240 --> 00:55:04.960
there's a lot to be learned from the code smells.


00:55:04.960 --> 00:55:07.440
The idea of the code smells is the code works,


00:55:07.440 --> 00:55:09.000
but there's something a little bit off.


00:55:09.000 --> 00:55:10.200
It makes your nose turn up.


00:55:10.200 --> 00:55:12.420
You're like, "Oh, okay.


00:55:12.420 --> 00:55:14.640
Yeah, I guess it works, but oh, right."


00:55:14.640 --> 00:55:17.240
It's just an ooh.


00:55:17.240 --> 00:55:21.380
there's a lot of lessons of how things get out of control


00:55:21.380 --> 00:55:23.660
and they get into a bad state and how do you fix them.


00:55:23.660 --> 00:55:26.140
And having that intuition, I think is great.


00:55:26.140 --> 00:55:29.180
So some of the code smells are like long method,


00:55:29.180 --> 00:55:31.180
method with too many arguments.


00:55:31.180 --> 00:55:33.520
One, probably my favorite is code comments


00:55:33.520 --> 00:55:36.260
because you hear you should comment code all the time


00:55:36.260 --> 00:55:38.540
and there should be places that need a comment,


00:55:38.540 --> 00:55:42.340
there should be comments or help strings, whatever.


00:55:42.340 --> 00:55:43.940
But a lot of times,


00:55:43.940 --> 00:55:48.020
Code comments are deodorant for these code smells, right?


00:55:48.020 --> 00:55:50.460
It's like, oh, this is kind of gross.


00:55:50.460 --> 00:55:52.740
Let me make a comment about why it's gross.


00:55:52.740 --> 00:55:54.100
Or this is poorly named.


00:55:54.100 --> 00:55:55.460
People won't know what this is.


00:55:55.460 --> 00:55:57.900
So let me make a comment about what it is.


00:55:57.900 --> 00:55:59.580
And like halfway through that comment,


00:55:59.580 --> 00:56:01.980
you should realize like, oh, what if I just named it?


00:56:01.980 --> 00:56:05.060
The thing I'm trying to tell people it kind of does.


00:56:05.060 --> 00:56:06.360
Then I don't even need a comment


00:56:06.360 --> 00:56:09.460
'cause it has a really good name that is its own thing, right?


00:56:09.460 --> 00:56:12.340
And so poor names, too many parameters,


00:56:12.340 --> 00:56:14.740
all these things are deodorant,


00:56:14.740 --> 00:56:17.500
and you're trying to justify how gross


00:56:17.500 --> 00:56:18.860
this part of your code is,


00:56:18.860 --> 00:56:20.460
maybe you could just apply some of these


00:56:20.460 --> 00:56:22.820
refactoring techniques to make them better.


00:56:22.820 --> 00:56:24.620
Not going into a whole refactoring detail,


00:56:24.620 --> 00:56:27.140
but I really, really like this idea.


00:56:27.140 --> 00:56:29.940
- Yeah, I write a lot of exploratory code,


00:56:29.940 --> 00:56:31.540
so you're describing a lot of my work.


00:56:31.540 --> 00:56:34.140
But because I'm fine with refactoring and enjoy it,


00:56:34.140 --> 00:56:36.040
and I'm comfortable with tests,


00:56:36.040 --> 00:56:36.900
that workflow works,


00:56:36.900 --> 00:56:38.340
and I think it can work for a lot of people.


00:56:38.340 --> 00:56:39.620
- Yeah, sure, sure.


00:56:39.620 --> 00:56:41.420
Well, and those things don't necessarily


00:56:41.420 --> 00:56:42.260
start out that way.


00:56:42.260 --> 00:56:44.680
long method didn't necessarily start out long.


00:56:44.680 --> 00:56:45.520
- Mm-hmm.


00:56:45.520 --> 00:56:47.420
- Grew and grew until it was a monster.


00:56:47.420 --> 00:56:49.260
Same thing with too many arguments.


00:56:49.260 --> 00:56:50.780
It probably started out with one or two,


00:56:50.780 --> 00:56:52.460
but then now we need this other one.


00:56:52.460 --> 00:56:53.300
And what about that?


00:56:53.300 --> 00:56:55.460
And then all of a sudden it's like, again, a monster.


00:56:55.460 --> 00:56:57.460
Right, and so it's an evolution.


00:56:57.460 --> 00:56:58.760
- And it's long because it works.


00:56:58.760 --> 00:57:01.360
And so at some point you pause and cleaned it up,


00:57:01.360 --> 00:57:02.560
make sure it still works.


00:57:02.560 --> 00:57:04.680
All right, number nine, write things down.


00:57:04.680 --> 00:57:05.520
- Yeah.


00:57:05.520 --> 00:57:06.340
- Write things down.


00:57:06.340 --> 00:57:07.680
And I don't say that as a writer.


00:57:07.680 --> 00:57:10.540
Writing for me, I started writing when I was young


00:57:10.540 --> 00:57:12.060
because I saw somebody else write a journal


00:57:12.060 --> 00:57:13.860
and it's like, oh, I'm going to try writing.


00:57:13.860 --> 00:57:16.860
And so I've just written things all my life,


00:57:16.860 --> 00:57:18.980
and most of it is messy, and some of it,


00:57:18.980 --> 00:57:21.540
very small amount of what I've written has been polished


00:57:21.540 --> 00:57:23.400
and put out in the public world.


00:57:23.400 --> 00:57:26.220
But I have found that almost everybody I talk to


00:57:26.220 --> 00:57:28.880
who writes in some way, not for public,


00:57:28.880 --> 00:57:30.140
but writes in some way,


00:57:30.140 --> 00:57:32.460
enjoys their work a little more and does a little better.


00:57:32.460 --> 00:57:35.100
My suggestions are things like keep an ideas notebook.


00:57:35.100 --> 00:57:38.340
Those are, once you know how to build things,


00:57:38.340 --> 00:57:39.420
ideas come to you and you're like,


00:57:39.420 --> 00:57:40.900
oh, I could make that at some point.


00:57:40.900 --> 00:57:43.140
If you have a place to record those ideas,


00:57:43.140 --> 00:57:45.100
when you're not sure what to do, you can go back to it.


00:57:45.100 --> 00:57:47.600
Write comments, despite what Michael said.


00:57:47.600 --> 00:57:50.080
Comments in a professional,


00:57:50.080 --> 00:57:52.860
well-established project with many collaborators


00:57:52.860 --> 00:57:55.900
are different than comments for your own new projects.


00:57:55.900 --> 00:57:58.000
Whatever you're doing, write comments.


00:57:58.000 --> 00:58:01.160
Do put the information in that needs to be in there to work,


00:58:01.160 --> 00:58:02.140
let them be cleaned up.


00:58:02.140 --> 00:58:04.380
>> Yeah. I don't mean to say you shouldn't write comments.


00:58:04.380 --> 00:58:07.620
There's a lot of times where the point of the comment is to-


00:58:07.620 --> 00:58:08.020
>> Yes.


00:58:08.020 --> 00:58:10.260
>> -justify why something's bad.


00:58:10.260 --> 00:58:13.140
If that's the case, it probably doesn't need to be bad.


00:58:13.140 --> 00:58:15.540
But if it's help docs, if it's like, well,


00:58:15.540 --> 00:58:18.900
here's the different stuff that you can pass and these are what we expect,


00:58:18.900 --> 00:58:20.620
there's certainly valid comments, no doubt.


00:58:20.620 --> 00:58:22.540
>> Write comments to yourself and others,


00:58:22.540 --> 00:58:24.300
and even if nobody else is using your project,


00:58:24.300 --> 00:58:26.900
if it's something that might be shared at some point, those are good.


00:58:26.900 --> 00:58:28.340
Learn to write documentation.


00:58:28.340 --> 00:58:29.740
If you write an ideas notebook,


00:58:29.740 --> 00:58:30.860
if you write comments,


00:58:30.860 --> 00:58:32.820
documentation flows out of that.


00:58:32.820 --> 00:58:35.380
It just becomes a more polished version of what you're writing.


00:58:35.380 --> 00:58:37.740
Write questions down when you're not sure about something.


00:58:37.740 --> 00:58:39.660
GitHub issues are amazing.


00:58:39.660 --> 00:58:44.820
I haven't used project management software because GitHub issues are so useful.


00:58:44.820 --> 00:58:48.500
>> No Gantt chart, no Microsoft project.


00:58:48.500 --> 00:58:52.380
>> Yeah. Even if you don't ever plan to write anything public,


00:58:52.380 --> 00:58:56.620
write about the code that you're working on and write for yourself,


00:58:56.620 --> 00:58:59.100
and it will almost certainly benefit the work that you do.


00:58:59.100 --> 00:59:01.500
>> Writing helps you crystallize your thoughts and make


00:59:01.500 --> 00:59:03.780
sure you have them all coherent, right?


00:59:03.780 --> 00:59:06.180
>> Right. Last one, big tip,


00:59:06.180 --> 00:59:08.620
and this is a fun one to close on, go meet people.


00:59:08.620 --> 00:59:11.260
It has long been said that I, about Python,


00:59:11.260 --> 00:59:13.820
that I came for the language and stayed for the community.


00:59:13.820 --> 00:59:16.940
People have talked about that for years because it's still true.


00:59:16.940 --> 00:59:19.740
Join online communities, go to local, regional,


00:59:19.740 --> 00:59:22.300
national, international conferences when you can,


00:59:22.300 --> 00:59:25.300
go to coffee shops, ask questions, tell stories.


00:59:25.300 --> 00:59:27.820
You will meet good people like Michael.


00:59:27.820 --> 00:59:30.220
>> And you, as we met at PyCon.


00:59:30.220 --> 00:59:32.380
So I think this is really good advice.


00:59:32.380 --> 00:59:34.460
I was thinking as I looked at your list,


00:59:34.460 --> 00:59:36.180
that you are somebody who is not


00:59:36.180 --> 00:59:41.260
>> Particularly metropolitan in terms of tons of user groups and meetups,


00:59:41.260 --> 00:59:42.700
I'm guessing where you live,


00:59:42.700 --> 00:59:45.700
it's probably a little bit of an extra challenge being in Alaska, right?


00:59:45.700 --> 00:59:50.020
>> Yeah. I lived in New York City for seven years before I moved here.


00:59:50.020 --> 00:59:51.700
>> Right. As a contrast, right?


00:59:51.700 --> 00:59:55.460
>> Yes. But most of my programming work,


00:59:55.460 --> 00:59:58.060
serious programming work has been done while I've lived here.


00:59:58.060 --> 01:00:00.940
Yet, I don't know anybody else here who programs.


01:00:00.940 --> 01:00:02.860
For me going to conferences,


01:00:02.860 --> 01:00:05.540
I talk about programming the entire time at conferences because I


01:00:05.540 --> 01:00:07.060
never get to in regular life.


01:00:07.060 --> 01:00:08.580
>> Honestly, that's true for me as well.


01:00:08.580 --> 01:00:11.540
Even though I'm here in Portland and we have user groups


01:00:11.540 --> 01:00:13.620
and there are plenty of people who do programming,


01:00:13.620 --> 01:00:15.180
it's not that different for me.


01:00:15.180 --> 01:00:19.700
Because I don't go to a company where I have a team of developers.


01:00:19.700 --> 01:00:23.780
The people I work with, it's as real as this meeting with you and me


01:00:23.780 --> 01:00:26.900
here on a video screen share sort of thing.


01:00:26.900 --> 01:00:29.820
I think this is the story of more people than


01:00:29.820 --> 01:00:33.100
just if you live outside of some big metropolis.


01:00:33.100 --> 01:00:36.460
Yeah, yeah. Quick story. First time I went to PyCon, I was intimidated


01:00:36.460 --> 01:00:39.000
because I was a teacher and not a programmer.


01:00:39.000 --> 01:00:41.700
And so I thought I would not find my place.


01:00:41.700 --> 01:00:43.700
And I walked into the hotel the first night


01:00:43.700 --> 01:00:47.300
and people pulled me right into conversation.


01:00:47.300 --> 01:00:50.760
And what I found was that roughly half the people who go to PyCon


01:00:50.760 --> 01:00:53.400
are primarily programmers looking for what to work on.


01:00:53.400 --> 01:00:57.600
And roughly half the people are people who care about some other domain than programming.


01:00:57.600 --> 01:01:00.660
And they're looking to use Python and programming to


01:01:00.660 --> 01:01:02.660
solve the problems they care about in their domain.


01:01:02.660 --> 01:01:05.860
It's true, everybody has a place in the Python world,


01:01:05.860 --> 01:01:08.660
if you are respectful and appropriate to other people.


01:01:08.660 --> 01:01:12.860
If you're shy or intimidated about going out to meet people


01:01:12.860 --> 01:01:15.080
because you're not sure of your place,


01:01:15.080 --> 01:01:18.820
just go meet people and you'll find your place, and it's magic.


01:01:18.820 --> 01:01:20.660
>> Yeah. I think,


01:01:20.660 --> 01:01:22.700
hopefully I'm not misremembering this.


01:01:22.700 --> 01:01:24.380
I think almost half the people at


01:01:24.380 --> 01:01:26.740
PyCon this year were first-time attendees.


01:01:26.740 --> 01:01:28.460
If you're thinking, "No, I shouldn't go."


01:01:28.460 --> 01:01:29.700
>> No, it was like 70.


01:01:29.700 --> 01:01:30.620
>> It was over half.


01:01:30.620 --> 01:01:31.760
>> It was like 80 percent.


01:01:31.760 --> 01:01:33.420
>> Yeah. I was amazed.


01:01:33.420 --> 01:01:37.220
>> Yeah. I'm not sure how much of that's a COVID hangover sort of thing


01:01:37.220 --> 01:01:43.020
because there were not as many people who came as say in 2019.


01:01:43.020 --> 01:01:45.900
So maybe they were more icon curious folks


01:01:45.900 --> 01:01:48.600
than say the people who had been there for the last 10 years.


01:01:48.600 --> 01:01:50.420
Like I still want to skip this one.


01:01:50.420 --> 01:01:51.900
I will see where it shapes up,


01:01:51.900 --> 01:01:53.300
but there's a really high number,


01:01:53.300 --> 01:01:56.980
whatever that number turned out to be in the equilibrium,


01:01:56.980 --> 01:02:00.900
is that there's a ton of people at these types of events who are like,


01:02:00.900 --> 01:02:01.900
This is my first time here.


01:02:01.900 --> 01:02:04.260
So if you're concerned about going to these events


01:02:04.260 --> 01:02:06.820
and feeling like, oh, I'm going to be the one newbie


01:02:06.820 --> 01:02:09.660
and feel out of place, like probably the opposite.


01:02:09.660 --> 01:02:10.500
- Yeah.


01:02:10.500 --> 01:02:11.320
- You know?


01:02:11.320 --> 01:02:13.020
- Yeah, you end up with lifelong friends.


01:02:13.020 --> 01:02:13.860
- Absolutely.


01:02:13.860 --> 01:02:14.900
People are in a great mood.


01:02:14.900 --> 01:02:16.260
They're on their geek holiday.


01:02:16.260 --> 01:02:17.080
It's all good.


01:02:17.080 --> 01:02:17.920
- Yes.


01:02:17.920 --> 01:02:19.460
- It's pretty easy to make friends


01:02:19.460 --> 01:02:20.500
and have a good time there.


01:02:20.500 --> 01:02:24.700
So that could be PyCon or EuroPython or something like that.


01:02:24.700 --> 01:02:26.060
Or it could just be a local.


01:02:26.060 --> 01:02:27.780
There's a lot of regional Python meetups


01:02:27.780 --> 01:02:30.700
like PyCascades here in the Pacific Northwest,


01:02:30.700 --> 01:02:33.500
PyTexas, PyOhio, all these things.


01:02:33.500 --> 01:02:35.600
And none of those work for you.


01:02:35.600 --> 01:02:38.220
You know, there's forums like this, to be honest.


01:02:38.220 --> 01:02:39.880
Like, part of the reason I created the podcast


01:02:39.880 --> 01:02:42.760
was to get to know people better in a way


01:02:42.760 --> 01:02:46.380
that I knew wouldn't be possible for me, right?


01:02:46.380 --> 01:02:48.940
My goal was, where do I go find the podcast


01:02:48.940 --> 01:02:50.080
to listen to to do this?


01:02:50.080 --> 01:02:50.920
And then there was none.


01:02:50.920 --> 01:02:52.560
So I was like, all right, fine, I'll create the podcast


01:02:52.560 --> 01:02:53.400
so we can do this.


01:02:53.400 --> 01:02:56.100
But my intent was just to listen to a podcast


01:02:56.100 --> 01:02:57.820
to kind of get to know people like this.


01:02:57.820 --> 01:03:01.180
it's a pretty one-way conversation as a podcast listener,


01:03:01.180 --> 01:03:03.260
not 100% as people have seen in the audience,


01:03:03.260 --> 01:03:07.260
but it's still valuable to like eavesdrop in a sense


01:03:07.260 --> 01:03:09.540
on these conversations if you're a new person.


01:03:09.540 --> 01:03:11.020
- Right, absolutely.


01:03:11.020 --> 01:03:11.860
- Yeah.


01:03:11.860 --> 01:03:12.680
All right, Eric.


01:03:12.680 --> 01:03:13.980
Well, what a fun conversation.


01:03:13.980 --> 01:03:16.420
Thank you for the awesome list.


01:03:16.420 --> 01:03:19.820
And hopefully you've inspired a lot of people out there


01:03:19.820 --> 01:03:23.580
to make forward progress on this journey that they're on.


01:03:23.580 --> 01:03:24.400
- Well, thank you for having me.


01:03:24.400 --> 01:03:25.700
I've listened to you for a long time


01:03:25.700 --> 01:03:26.740
and really enjoyed your work


01:03:26.740 --> 01:03:28.140
and very happy to connect.


01:03:28.140 --> 01:03:29.100
- Yeah, same here.


01:03:29.100 --> 01:03:30.700
So final call to action.


01:03:30.700 --> 01:03:32.300
People are interested, you know,


01:03:32.300 --> 01:03:33.880
maybe tell them how to check out your book,


01:03:33.880 --> 01:03:36.660
tell them how to put some of these ideas into action.


01:03:36.660 --> 01:03:39.180
- My book is "Python Crash Course" from NoStarchPress.


01:03:39.180 --> 01:03:40.820
Third edition came out this year,


01:03:40.820 --> 01:03:41.980
and so everything works.


01:03:41.980 --> 01:03:43.780
It's good, I keep it updated.


01:03:43.780 --> 01:03:46.640
If you buy it, you get a copy with the newest updates.


01:03:46.640 --> 01:03:47.480
Yes.


01:03:47.480 --> 01:03:50.180
I also write weekly at MostlyPython,


01:03:50.180 --> 01:03:52.220
and that's mostlypython.substack.


01:03:52.220 --> 01:03:53.180
There are paid subscriptions,


01:03:53.180 --> 01:03:54.780
but there are also free subscriptions.


01:03:54.780 --> 01:04:00.660
And so the only advantage for paid subscriptions is that some posts are locked for six weeks.


01:04:00.660 --> 01:04:03.600
Everything I write, I want to be available to everyone.


01:04:03.600 --> 01:04:08.540
And so if you're curious about what I'm thinking about on a weekly basis, mostly Python.


01:04:08.540 --> 01:04:09.540
Excellent.


01:04:09.540 --> 01:04:10.540
All right.


01:04:10.540 --> 01:04:11.540
Well, thanks again for being here.


01:04:11.540 --> 01:04:12.540
See you later.


01:04:12.540 --> 01:04:13.540
Thanks everyone for listening.


01:04:13.540 --> 01:04:14.540
Yes.


01:04:14.540 --> 01:04:15.540
Thank you.


01:04:15.540 --> 01:04:18.540
This has been another episode of Talk Python to Me.


01:04:18.540 --> 01:04:19.540
Thank you to our sponsors.


01:04:19.540 --> 01:04:21.220
Be sure to check out what they're offering.


01:04:21.220 --> 01:04:23.340
It really helps support the show.


01:04:23.340 --> 01:04:28.860
GlareDB is an open source database for querying distributed and disparate data.


01:04:28.860 --> 01:04:33.960
Connect your data sources and use the Python tools you already know to ask questions and


01:04:33.960 --> 01:04:36.040
integrate data across data sources.


01:04:36.040 --> 01:04:40.020
Get started today at talkpython.fm/glaredb.


01:04:40.020 --> 01:04:41.760
Take some stress out of your life.


01:04:41.760 --> 01:04:46.500
Get notified immediately about errors and performance issues in your web or mobile applications


01:04:46.500 --> 01:04:47.800
with Sentry.


01:04:47.800 --> 01:04:52.640
Just visit talkpython.fm/sentry and get started for free.


01:04:52.640 --> 01:04:56.180
Be sure to use the promo code Talk Python, all one word.


01:04:56.180 --> 01:04:57.500
Want to level up your Python?


01:04:57.500 --> 01:04:59.260
We have one of the largest catalogs


01:04:59.260 --> 01:05:01.620
of Python video courses over at Talk Python.


01:05:01.620 --> 01:05:03.700
Our content ranges from true beginners


01:05:03.700 --> 01:05:06.660
to deeply advanced topics like memory and async.


01:05:06.660 --> 01:05:09.340
And best of all, there's not a subscription in sight.


01:05:09.340 --> 01:05:12.360
Check it out for yourself at training.talkpython.fm.


01:05:12.360 --> 01:05:13.980
Be sure to subscribe to the show,


01:05:13.980 --> 01:05:16.980
open your favorite podcast app, and search for Python.


01:05:16.980 --> 01:05:18.340
We should be right at the top.


01:05:18.340 --> 01:05:21.220
You can also find the iTunes feed at /itunes,


01:05:21.220 --> 01:05:23.420
the Google Play feed at /play,


01:05:23.420 --> 01:05:27.420
and the Direct RSS feed at /rss on talkpython.fm.


01:05:27.420 --> 01:05:30.940
We're live streaming most of our recordings these days.


01:05:30.940 --> 01:05:32.100
If you want to be part of the show


01:05:32.100 --> 01:05:34.380
and have your comments featured on the air,


01:05:34.380 --> 01:05:36.220
be sure to subscribe to our YouTube channel


01:05:36.220 --> 01:05:39.220
at talkpython.fm/youtube.


01:05:39.220 --> 01:05:40.640
This is your host, Michael Kennedy.


01:05:40.640 --> 01:05:41.800
Thanks so much for listening.


01:05:41.800 --> 01:05:43.040
I really appreciate it.


01:05:43.040 --> 01:05:45.260
Now get out there and write some Python code.


01:05:45.260 --> 01:05:47.840
(upbeat music)


01:05:47.840 --> 01:06:02.840
[Music]


01:06:02.840 --> 01:06:05.420
(upbeat music)


01:06:05.420 --> 01:06:15.420
[BLANK_AUDIO]

