WEBVTT

00:00:00.000 --> 00:00:04.480
Jupyter Notebooks and JupyterLab have to be one of the most important parts of Python


00:00:04.480 --> 00:00:08.320
when it comes to bringing new users into the Python ecosystem.


00:00:08.320 --> 00:00:12.720
And certainly for the day-to-day work of data scientists and scientists in general who have


00:00:12.720 --> 00:00:16.120
made some of the biggest discoveries of recent times.


00:00:16.120 --> 00:00:21.460
The Jupyter platform has recently gotten a major upgrade with JupyterLab 4 released and


00:00:21.460 --> 00:00:26.840
Jupyter Notebook 7 being significantly reworked to be based on the changes from JupyterLab


00:00:26.840 --> 00:00:27.840
as well.


00:00:27.840 --> 00:00:32.920
We have an excellent panel of guests, Sylvain Corlay, Frederik Kallenvall, Jeremy Tolop,


00:00:32.920 --> 00:00:37.560
and Afshin Daryan here to tell us about what's new with these and other parts of the Jupyter


00:00:37.560 --> 00:00:38.800
ecosystem.


00:00:38.800 --> 00:00:43.640
This is Talk Python To Me, episode 438, recorded October 16th, 2023.


00:00:43.640 --> 00:01:01.320
Welcome to Talk Python To Me, a weekly podcast on Python.


00:01:01.320 --> 00:01:03.180
This is your host, Michael Kennedy.


00:01:03.180 --> 00:01:08.080
Follow me on Mastodon, where I'm@mkennedy, and follow the podcast @talkpython,


00:01:08.080 --> 00:01:10.720
both on fosstodon.org.


00:01:10.720 --> 00:01:15.960
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.


00:01:15.960 --> 00:01:19.440
We've started streaming most of our episodes live on YouTube.


00:01:19.440 --> 00:01:24.720
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming


00:01:24.720 --> 00:01:27.720
shows and be part of that episode.


00:01:27.720 --> 00:01:30.040
This episode is brought to you by Phylum.


00:01:30.040 --> 00:01:32.800
Developers and data scientists are the new high-value targets.


00:01:32.800 --> 00:01:33.800
That's you.


00:01:33.800 --> 00:01:36.680
And yet this group remains severely underprotected.


00:01:36.680 --> 00:01:40.000
Phylum detects, reports, and blocks malicious packages.


00:01:40.000 --> 00:01:45.440
Get their research and join their community at talkpython.fm/phylum-research.


00:01:45.440 --> 00:01:48.280
And it's brought to you by Python Tutor.


00:01:48.280 --> 00:01:52.520
Visualize your Python code step-by-step to understand just what's happening with your


00:01:52.520 --> 00:01:53.520
code.


00:01:53.520 --> 00:01:57.760
Try it for free and anonymously at talkpython.fm/Python-Tutor.


00:01:57.760 --> 00:02:04.480
Hey, Darian, Jeremy, Sylvan, and Frederic, welcome to all of you to Talk Python and me.


00:02:04.480 --> 00:02:05.480
It's great to have you here.


00:02:05.480 --> 00:02:06.480
Thanks, Jeremy.


00:02:06.480 --> 00:02:07.480
Yeah, thanks.


00:02:07.480 --> 00:02:08.480
Thanks, Michael.


00:02:08.480 --> 00:02:09.480
Yeah, you bet.


00:02:09.480 --> 00:02:15.200
And so many Jupyter team members, people around here, and all the work you've done on the


00:02:15.200 --> 00:02:21.240
different parts of Jupyter Notebook, JupyterLab, JupyterLite, all the things is really fantastic.


00:02:21.240 --> 00:02:24.400
So I'm looking forward to celebrating the new releases.


00:02:24.400 --> 00:02:27.200
They're not quite as new as when we first started talking about this.


00:02:27.200 --> 00:02:31.720
It took us a while to put this many people together on for an hour, but yeah, it's still,


00:02:31.720 --> 00:02:32.720
it's going to be great, right?


00:02:32.720 --> 00:02:33.720
Sounds good.


00:02:33.720 --> 00:02:34.720
Yeah, for sure.


00:02:34.720 --> 00:02:39.640
So before we get into the topics, maybe just a quick introduction for each of you here,


00:02:39.640 --> 00:02:42.680
and we'll go around the Brady Bunch circles in the video.


00:02:42.680 --> 00:02:44.160
Darian, we'll start with you.


00:02:44.160 --> 00:02:45.160
Sure.


00:02:45.160 --> 00:02:46.240
Hi, so I'm Darian.


00:02:46.240 --> 00:02:52.840
I work at QuantStack along with everyone else on this call.


00:02:52.840 --> 00:03:01.160
And I have been working on the JupyterStack for about eight years now.


00:03:01.160 --> 00:03:08.040
And I originally started working on what became JupyterLab.


00:03:08.040 --> 00:03:14.320
And nowadays, in addition to that aspect of things, I'm also part of the Jupyter Executive


00:03:14.320 --> 00:03:17.760
Council, which is one of the governing bodies of the project.


00:03:17.760 --> 00:03:21.520
As of this year, we actually changed our governance structure.


00:03:21.520 --> 00:03:27.960
And so each year, there are elections and we have this new set of governing institutions


00:03:27.960 --> 00:03:28.960
that I've been a part of.


00:03:28.960 --> 00:03:29.960
That's really fantastic.


00:03:29.960 --> 00:03:35.760
So there's a lot of projects where there's one maintainer who is primarily the maintainer.


00:03:35.760 --> 00:03:40.800
Then there's projects that get put under an organization, you know, like Flask with Palettes.


00:03:40.800 --> 00:03:45.200
There's not very many open source projects like this that have governing bodies.


00:03:45.200 --> 00:03:48.880
You know, Python itself comes to mind, Django.


00:03:48.880 --> 00:03:49.880
That's awesome.


00:03:49.880 --> 00:03:52.120
I think, you know, Jupyter is such a vibrant ecosystem.


00:03:52.120 --> 00:03:54.280
It's an exciting space, for sure.


00:03:54.280 --> 00:03:55.280
Yeah, absolutely.


00:03:55.280 --> 00:03:57.160
All right, Jeremy, quick background on you.


00:03:57.160 --> 00:04:02.760
I'm Jeremy and I've also been working on the JupyterStack for a couple of years, I think


00:04:02.760 --> 00:04:04.840
something around five or six years.


00:04:04.840 --> 00:04:10.360
I started a bit like on my own first, like a spare time thing, you know, contributing


00:04:10.360 --> 00:04:14.400
to projects on GitHub before joining CronStack.


00:04:14.400 --> 00:04:19.760
And currently, I'm mostly involved in the JupyterLab project, also the Jupyter Notebook


00:04:19.760 --> 00:04:26.720
7, Voila dashboards, also a bit of IPy widgets, and most recently on the JupyterLite.


00:04:26.720 --> 00:04:27.720
Nice.


00:04:27.720 --> 00:04:28.720
Sylvain.


00:04:28.720 --> 00:04:29.720
Hi, everyone.


00:04:29.720 --> 00:04:30.720
So yes, I'm Sylvain.


00:04:30.720 --> 00:04:33.960
I'm the CEO of CronStack, which I founded in 2016.


00:04:33.960 --> 00:04:37.960
I've been working on the JupyterStack for about 10 years now.


00:04:37.960 --> 00:04:39.040
So yeah, it's been a while.


00:04:39.040 --> 00:04:42.040
I think it's almost the anniversary right now.


00:04:42.040 --> 00:04:48.360
And in the Jupyter ecosystem, I mostly worked on kernels, widgets, the Jupyter server, and


00:04:48.360 --> 00:04:51.920
a tiny bit on the front end pieces as well.


00:04:51.920 --> 00:04:52.920
Excellent.


00:04:52.920 --> 00:04:56.040
So it's a Jupyter space over there at CronStack.


00:04:56.040 --> 00:04:57.040
Top to bottom, right?


00:04:57.040 --> 00:04:58.040
That's right.


00:04:58.040 --> 00:04:59.040
Awesome.


00:04:59.040 --> 00:05:00.040
Hey, Frederic.


00:05:00.040 --> 00:05:01.040
Welcome.


00:05:01.040 --> 00:05:02.040
Hey, everybody.


00:05:02.040 --> 00:05:03.040
So I'm Frederic.


00:05:03.040 --> 00:05:06.440
I'm working at CronStack as everybody else.


00:05:06.440 --> 00:05:09.320
And I'm working mainly on JupyterLab.


00:05:09.320 --> 00:05:15.120
I'm actually the representative to the software steering council of Jupyter for that sub project


00:05:15.120 --> 00:05:16.120
mainly.


00:05:16.120 --> 00:05:21.800
And I started contributing like a bit like Jeremy five to six years ago, trying to convince


00:05:21.800 --> 00:05:27.680
colleagues in my aeronautics company back then to use Python and Jupyter instead of


00:05:27.680 --> 00:05:30.320
Excel.


00:05:30.320 --> 00:05:31.480
You're fighting the good fight.


00:05:31.480 --> 00:05:32.480
That's awesome.


00:05:32.480 --> 00:05:36.040
Maybe I could ask you all a quick question since it might give people an interesting


00:05:36.040 --> 00:05:37.960
view into the world of Jupyter.


00:05:37.960 --> 00:05:42.260
It's just, you know, there's a lot of reasons people get into programming, but what attracted


00:05:42.260 --> 00:05:46.760
you all individually to the Jupyter ecosystem itself?


00:05:46.760 --> 00:05:48.400
Darian, how about you?


00:05:48.400 --> 00:05:49.920
So I got lucky.


00:05:49.920 --> 00:05:54.160
I liked the idea of working on open source software.


00:05:54.160 --> 00:06:00.120
And I'd worked at a few startups that released open source software, but they were startup


00:06:00.120 --> 00:06:03.780
projects that were driven primarily by one company.


00:06:03.780 --> 00:06:07.320
And some of them had community in the sense that there were lots of users and there'd


00:06:07.320 --> 00:06:12.640
be a lot of traffic, say on forums and stuff, but not community in the sense of a public


00:06:12.640 --> 00:06:15.680
minded group runs this thing and makes decision.


00:06:15.680 --> 00:06:18.760
It was the decision was at my employers.


00:06:18.760 --> 00:06:21.480
And nonetheless, I liked it.


00:06:21.480 --> 00:06:29.120
And I just sort of accidentally happened on working with the team that was building a


00:06:29.120 --> 00:06:34.200
new front end for Jupyter because I liked JavaScript and other people in the Jupyter


00:06:34.200 --> 00:06:35.480
community did not.


00:06:35.480 --> 00:06:40.600
So they had to bring from outside the Jupyter community in because Python people at the


00:06:40.600 --> 00:06:42.960
time tended to sort of hate JavaScript.


00:06:42.960 --> 00:06:44.940
Now I think that's still the same.


00:06:44.940 --> 00:06:52.240
So I got into Jupyter because I like JavaScript, but I stayed in Jupyter because I liked a


00:06:52.240 --> 00:06:57.160
community open source project that was doing something that I didn't really know you could


00:06:57.160 --> 00:07:05.840
do, which is to mix your research and your results and the pros that you write and the


00:07:05.840 --> 00:07:10.160
output of the analysis that you do all in one document and share it with people and


00:07:10.160 --> 00:07:13.220
they can reproduce it and they can run your code and they can tweak it and they can do


00:07:13.220 --> 00:07:19.040
all those things without ever going through what I thought were the necessary prerequisites


00:07:19.040 --> 00:07:20.040
to writing code.


00:07:20.040 --> 00:07:21.920
It turns out none of those were necessary.


00:07:21.920 --> 00:07:23.500
You could make it way easier for people.


00:07:23.500 --> 00:07:24.840
So I liked working on that.


00:07:24.840 --> 00:07:25.840
I liked the community.


00:07:25.840 --> 00:07:28.720
I like the people and that's why I'm still here.


00:07:28.720 --> 00:07:29.720
Yeah.


00:07:29.720 --> 00:07:30.720
Excellent.


00:07:30.720 --> 00:07:34.120
It is pretty unique of an idea to say we're going to have kind of a document, we're going


00:07:34.120 --> 00:07:37.040
to have results and we're going to have code and it's going to be live.


00:07:37.040 --> 00:07:38.040
And that's very special.


00:07:38.040 --> 00:07:39.040
Jeremy, how'd you get into Jupyter?


00:07:39.040 --> 00:07:49.000
Yeah, I started as a user, I think back in the days when it was still the IPython notebook,


00:07:49.000 --> 00:07:53.020
like altogether just Python, the programming language.


00:07:53.020 --> 00:08:00.100
I think that was really this idea of being able to write normal text alongside code and


00:08:00.100 --> 00:08:06.860
have this kind of narrative with charts, interactive graphs and so on and share that with people.


00:08:06.860 --> 00:08:08.780
So I used it on my own.


00:08:08.780 --> 00:08:14.500
For personal projects, but also different companies to share reports, then communicate


00:08:14.500 --> 00:08:16.000
results more easily.


00:08:16.000 --> 00:08:20.820
And after a while, when you start using a tool, you want to make fixes to it or improve


00:08:20.820 --> 00:08:21.820
it.


00:08:21.820 --> 00:08:27.860
So that's how you can go to the side of the contributor side, start submitting pull requests


00:08:27.860 --> 00:08:29.860
and getting in touch with the community.


00:08:29.860 --> 00:08:30.860
Excellent.


00:08:30.860 --> 00:08:31.860
Sylvain, I'm going to come back to you.


00:08:31.860 --> 00:08:33.820
Frederic, let's have your story.


00:08:33.820 --> 00:08:35.300
So that's a bit like Jeremy.


00:08:35.300 --> 00:08:41.180
So as I said, I try to convince people that something better than Excel exists out there.


00:08:41.180 --> 00:08:43.580
And that's when I discovered Jupyter.


00:08:43.580 --> 00:08:50.380
And what was really interesting was the ability to, like, as I've said, mixing very nice and


00:08:50.380 --> 00:08:55.900
advanced visualization with text and being able to do that interactively so that in a


00:08:55.900 --> 00:09:02.540
meeting you don't have to remember which tab in your Excel is the right result.


00:09:02.540 --> 00:09:08.220
It's like, yeah, you just type two lines of Python code and you get a nice graph to display


00:09:08.220 --> 00:09:10.220
the points you try to make from the data.


00:09:10.220 --> 00:09:11.860
And that was it.


00:09:11.860 --> 00:09:16.700
And as Jeremy, then at some point you say, hey, I can do some stuff better and I can


00:09:16.700 --> 00:09:18.260
contribute because it's open source.


00:09:18.260 --> 00:09:23.620
So I put my finger in that and now all my body is in it.


00:09:23.620 --> 00:09:24.700
Awesome.


00:09:24.700 --> 00:09:29.900
I think one of the ironies is, and you know, Darian touched on this actually, that to use


00:09:29.900 --> 00:09:35.980
Jupyter often is to write Python, but to contribute Jupyter is often to write JavaScript, TypeScript.


00:09:35.980 --> 00:09:40.180
Like it's, you're kind of taking one for the team doing the JavaScript that no one else


00:09:40.180 --> 00:09:41.180
has to do.


00:09:41.180 --> 00:09:42.180
Right.


00:09:42.180 --> 00:09:43.180
And that's a little bit different, isn't it?


00:09:43.180 --> 00:09:53.140
I think nowadays with the maturity of TypeScript as something that serious, large projects


00:09:53.140 --> 00:09:59.420
can use, it's a little bit better, but you know, it wasn't obvious to us as a foregone


00:09:59.420 --> 00:10:03.820
conclusion that we should use TypeScript back in 2015.


00:10:03.820 --> 00:10:11.180
So I think over time that problem has somewhat attenuated, but it's not, we're not in the


00:10:11.180 --> 00:10:12.180
clear.


00:10:12.180 --> 00:10:19.500
We do definitely have a lot more people who would like to hack Python than would want


00:10:19.500 --> 00:10:25.420
to contribute to a gigantic TypeScript plugin based, you know, front end application.


00:10:25.420 --> 00:10:26.860
Yeah, exactly.


00:10:26.860 --> 00:10:28.940
They come to Jupyter cause they're like doing Python.


00:10:28.940 --> 00:10:29.940
They get really excited.


00:10:29.940 --> 00:10:30.940
Like I want to be part of this.


00:10:30.940 --> 00:10:31.940
I want to help.


00:10:31.940 --> 00:10:32.940
Oh wait, hold on.


00:10:32.940 --> 00:10:36.060
It's a bit of a, an irony or maybe even WebAssembly as we'll talk about Jeremy.


00:10:36.060 --> 00:10:37.420
All right, Sylvain, back to you.


00:10:37.420 --> 00:10:41.300
So I wanted to change the question a little bit for you and just maybe have you talk about


00:10:41.300 --> 00:10:46.780
like what are the benefits of having QuantSite, like the whole company being so in on Jupyter,


00:10:46.780 --> 00:10:48.020
like how's that affected you all?


00:10:48.020 --> 00:10:49.340
Is that for your business?


00:10:49.340 --> 00:10:50.900
This is really how it started actually.


00:10:50.900 --> 00:10:59.060
So I was a Jupyter contributor back in a previous job before I founded QuantStack and I really,


00:10:59.060 --> 00:11:05.500
QuantStack is almost an accidental startup in that I started the company as a means to


00:11:05.500 --> 00:11:10.820
continue working on the project being paid by, as I was a core contributor already being


00:11:10.820 --> 00:11:17.180
paid by clients on consulting contracts and whatnot to, to continue working on this.


00:11:17.180 --> 00:11:23.540
And very quickly we had enough business that I could hire one other person and then another


00:11:23.540 --> 00:11:24.820
and then another.


00:11:24.820 --> 00:11:27.060
So we bootstrapped from day one.


00:11:27.060 --> 00:11:33.020
So our success, I would say is really bound to the success of the project.


00:11:33.020 --> 00:11:36.260
And I think it's been a positive feedback loop since the very beginning.


00:11:36.260 --> 00:11:37.260
Excellent.


00:11:37.260 --> 00:11:38.260
Yeah.


00:11:38.260 --> 00:11:41.660
It's, I'm sure it brings a real advantage when people come to you to look and sort of


00:11:41.660 --> 00:11:46.300
see like, yeah, this is the company to help me with, you know, Jupyter type of change,


00:11:46.300 --> 00:11:50.420
maybe adopting Jupyter or some advanced deployment problem solving.


00:11:50.420 --> 00:11:53.820
Yeah, this, I mean, we're not trying to be the Jupyter company.


00:11:53.820 --> 00:11:59.860
There are other groups and we really have a consulting business model in that people


00:11:59.860 --> 00:12:04.300
can really come to us for our skills and expertise.


00:12:04.300 --> 00:12:09.100
And it turns out that so far we've been able to contribute back everything that we've done


00:12:09.100 --> 00:12:10.100
or nearly everything.


00:12:10.100 --> 00:12:15.220
In some occasions we have to do something that's very ad hoc to a client and, you know,


00:12:15.220 --> 00:12:18.500
some development that requires using some of their internal APIs or whatever.


00:12:18.500 --> 00:12:22.060
But like I would say that 99% of our work is out there.


00:12:22.060 --> 00:12:23.060
So yeah.


00:12:23.060 --> 00:12:24.060
Excellent.


00:12:24.060 --> 00:12:25.060
Awesome.


00:12:25.060 --> 00:12:26.700
Let's start talking about just a recent event here.


00:12:26.700 --> 00:12:30.020
A couple of months ago, it was JupyterCon.


00:12:30.020 --> 00:12:32.420
I think the videos, now the videos have been up for two months.


00:12:32.420 --> 00:12:35.700
So a little, it's been around for a little while, but multiple of you, I don't know if


00:12:35.700 --> 00:12:40.140
all of you, I haven't gone through all of the videos here, but you know, there's 86


00:12:40.140 --> 00:12:43.380
sessions posted for JupyterCon 2023.


00:12:43.380 --> 00:12:45.260
There's a ton of good stuff.


00:12:45.260 --> 00:12:50.180
Maybe you all could just speak to the talks that you gave there or some of the real interesting


00:12:50.180 --> 00:12:55.260
things that you want people should maybe check out, because if you just get into Jupyter,


00:12:55.260 --> 00:12:57.740
you can learn a lot by watching some of these talks, I think.


00:12:57.740 --> 00:13:05.080
Our recommendation, Jupyter Notebook 7 was talk where Jeremy and a few other contributors


00:13:05.080 --> 00:13:10.100
to the project introduced the new version of Jupyter Notebook.


00:13:10.100 --> 00:13:15.100
And usually when you go from version six to seven of a software package, it's, you know,


00:13:15.100 --> 00:13:19.940
an iteration, but in this particular case, it's a whole new application with a whole


00:13:19.940 --> 00:13:27.100
new architecture that has the same experience of the Jupyter Notebook as version six, but


00:13:27.100 --> 00:13:30.860
has all new architecture and can use the same plugins as lab.


00:13:30.860 --> 00:13:32.060
And it's pretty exciting.


00:13:32.060 --> 00:13:35.460
So I would recommend checking out that talk.


00:13:35.460 --> 00:13:36.460
Absolutely.


00:13:36.460 --> 00:13:37.460
That was a good one.


00:13:37.460 --> 00:13:41.460
I think that's something that's main topic of the show is sort of this interplay between


00:13:41.460 --> 00:13:46.940
JupyterLab and Jupyter Notebook and both of the big new releases, which is, yeah, it's


00:13:46.940 --> 00:13:48.060
a big change, isn't it?


00:13:48.060 --> 00:13:50.220
Bigger than just the six to seven would indicate.


00:13:50.220 --> 00:13:51.220
Yeah.


00:13:51.220 --> 00:13:52.960
There are also plenty of other videos.


00:13:52.960 --> 00:13:58.460
So there are quite a few, let's say technical videos or more like product updates as we


00:13:58.460 --> 00:13:59.460
call them.


00:13:59.460 --> 00:14:05.780
Like each sub project has a talk where they discuss and present their new features or


00:14:05.780 --> 00:14:09.100
what they've been to the past few months.


00:14:09.100 --> 00:14:15.780
But there are also quite a lot of interesting talks on use cases so that we can learn how


00:14:15.780 --> 00:14:20.700
people use Jupyter in the wild, like at companies, also in education.


00:14:20.700 --> 00:14:22.380
And those are very inspiring.


00:14:22.380 --> 00:14:28.300
So because they also give people ideas on what they could do with Jupyter in general.


00:14:28.300 --> 00:14:30.820
Well, yeah, well, I certainly recommend people check this out.


00:14:30.820 --> 00:14:36.580
And then there was a talk that you, Darian and Martha gave introducing JupyterLab 4,


00:14:36.580 --> 00:14:37.580
right?


00:14:37.580 --> 00:14:38.580
Yes, that's right.


00:14:38.580 --> 00:14:47.580
JupyterLab 4 is also the first time we did one of our keynote product launch talks with


00:14:47.580 --> 00:14:54.980
the desktop version of the application, just kind of to expose people to this new way to


00:14:54.980 --> 00:14:59.860
use JupyterLab, which isn't super new, but I think is new to most people.


00:14:59.860 --> 00:15:04.140
So we thought that would be a good opportunity not just to show the new JupyterLab 4 UI and


00:15:04.140 --> 00:15:08.300
its new features, but also to show you can download it onto your desktop, double click


00:15:08.300 --> 00:15:11.940
a notebook and open it up in JupyterLab.


00:15:11.940 --> 00:15:16.220
This portion of Talk Python to Me is brought to you by Phylum, your Python developer security


00:15:16.220 --> 00:15:17.420
partner.


00:15:17.420 --> 00:15:20.500
Developers and data scientists are the new high value targets.


00:15:20.500 --> 00:15:21.500
That's you.


00:15:21.500 --> 00:15:24.780
Yet, this group remains severely underprotected.


00:15:24.780 --> 00:15:30.820
Hackers know that developers control the keys to the kingdom, SSH, GPG and signing keys,


00:15:30.820 --> 00:15:34.740
API tokens, infrastructure secrets and proprietary source code.


00:15:34.740 --> 00:15:37.500
Do you use open source dependencies in your code?


00:15:37.500 --> 00:15:38.500
Of course you do.


00:15:38.500 --> 00:15:39.500
We all do.


00:15:39.500 --> 00:15:44.300
Vulnerability exploits in open source code are rare, but software supply chain attacks


00:15:44.300 --> 00:15:48.420
via malicious dependencies are unfortunately kind of common now.


00:15:48.420 --> 00:15:52.180
And these attacks can compromise developers and organizations.


00:15:52.180 --> 00:15:56.540
Phylum detects, reports and blocks malicious packages, while other solutions you may have


00:15:56.540 --> 00:15:59.380
heard of merely look for known vulnerabilities.


00:15:59.380 --> 00:16:04.100
Of course, Phylum also reports on vulnerabilities as well as author, engineering and license


00:16:04.100 --> 00:16:05.100
risks.


00:16:05.100 --> 00:16:10.140
But critically, Phylum doesn't wait for a CVE to be published before alerting on bad


00:16:10.140 --> 00:16:11.140
packages.


00:16:11.140 --> 00:16:16.020
Phylum provides integrations to protect developers where they live, guarding PRs and CI environments


00:16:16.020 --> 00:16:20.220
and with CLI and pre-commit hooks for local development work.


00:16:20.220 --> 00:16:24.060
Help you and your organization's Python security game with Phylum.


00:16:24.060 --> 00:16:25.060
Get started today.


00:16:25.060 --> 00:16:29.260
Subscribe to their newsletter to get Phylum's research sent directly to you or even sign


00:16:29.260 --> 00:16:31.060
up for their service for free.


00:16:31.060 --> 00:16:37.100
Visit talkpython.fm/phylum-research and enter your email in the subscribe to our


00:16:37.100 --> 00:16:41.420
research field in the middle of the page or create your free account by clicking the sign


00:16:41.420 --> 00:16:43.380
up button in the nav bar.


00:16:43.380 --> 00:16:44.660
Stay safe out there.


00:16:44.660 --> 00:16:47.980
Visit talkpython.fm/phylum-research.


00:16:47.980 --> 00:16:51.660
That's P-H-Y-L-U-M-dash research.


00:16:51.660 --> 00:16:55.660
Thank you to Phylum for supporting the show.


00:16:55.660 --> 00:17:00.940
Let's set the stage about just what, you know, people maybe they've heard the word Jupyter,


00:17:00.940 --> 00:17:05.840
have heard the word notebooks, plural, you know, but they might not know the difference


00:17:05.840 --> 00:17:08.660
between JupyterLab, Jupyter notebook.


00:17:08.660 --> 00:17:12.020
Maybe you all could like sort of position those two side by side.


00:17:12.020 --> 00:17:13.220
What are these two different things?


00:17:13.220 --> 00:17:14.220
Are they the same?


00:17:14.220 --> 00:17:15.220
Are they different?


00:17:15.220 --> 00:17:16.220
Are they synonyms?


00:17:16.220 --> 00:17:17.220
Okay.


00:17:17.220 --> 00:17:25.100
There is a file format that you will see with the extension dot IPYMB because historically


00:17:25.100 --> 00:17:27.460
was the IPython notebook file format.


00:17:27.460 --> 00:17:28.740
And we've kept that.


00:17:28.740 --> 00:17:30.660
And those are called Jupyter notebooks.


00:17:30.660 --> 00:17:34.140
Commonly, it's a generic term for that kind of file.


00:17:34.140 --> 00:17:41.340
And then there is a browser based application that millions of people use for rendering


00:17:41.340 --> 00:17:44.060
those notebooks and writing them and authoring them.


00:17:44.060 --> 00:17:46.780
And that application is called Jupyter notebook.


00:17:46.780 --> 00:17:49.780
And we just released version seven of that.


00:17:49.780 --> 00:17:58.220
And there is a data environment that features notebooks, but also has lots of other functionality


00:17:58.220 --> 00:18:00.940
that we call the other front end.


00:18:00.940 --> 00:18:03.260
And that's JupyterLab, right?


00:18:03.260 --> 00:18:09.540
And JupyterLab has a notebook renderer in it, among other things for Jupyter notebooks.


00:18:09.540 --> 00:18:16.780
And that same notebook renderer is what powers the application called Jupyter notebook.


00:18:16.780 --> 00:18:19.380
I think if I keep saying these words, you'll get more confused.


00:18:19.380 --> 00:18:21.100
So I'm stopping here.


00:18:21.100 --> 00:18:27.900
In my mind, I sort of think of Jupyter notebook as, you know, which is the single page, the


00:18:27.900 --> 00:18:30.140
single file view type of thing.


00:18:30.140 --> 00:18:34.020
The little bit, not quite the right analogy, but a little bit like the Vim or the Emacs


00:18:34.020 --> 00:18:38.420
user who likes just to have like a single file totally open and just focused on that.


00:18:38.420 --> 00:18:41.220
Whereas JupyterLab is more like the IDE style.


00:18:41.220 --> 00:18:43.220
I want all the tools and the extras.


00:18:43.220 --> 00:18:46.580
I want to be able to get to my, browse my file system, go to the terminal, do all the


00:18:46.580 --> 00:18:51.140
different things and have like multiple files open and work between them.


00:18:51.140 --> 00:18:54.620
Is that a good mental model or am I not quite there yet?


00:18:54.620 --> 00:18:56.100
No, I think that's right.


00:18:56.100 --> 00:19:00.140
Jupyter notebook is a single document interface.


00:19:00.140 --> 00:19:05.420
It is, I mean, even like Vim, it has a command mode and you know, an edit mode and all those.


00:19:05.420 --> 00:19:07.140
So it's not about analogy at all.


00:19:07.140 --> 00:19:15.420
JupyterLab is just a really flexible environment to do a lot of different activities in your


00:19:15.420 --> 00:19:17.860
analysis of any particular data.


00:19:17.860 --> 00:19:22.220
It is a much more sort of multi-tool for that.


00:19:22.220 --> 00:19:23.220
Okay, excellent.


00:19:23.220 --> 00:19:25.260
Anyone else want to add more to that?


00:19:25.260 --> 00:19:26.860
Those comparisons or the derringer?


00:19:26.860 --> 00:19:32.060
Yeah, I mean, for the genesis of this, of JupyterLab, I mean, the first tool that everybody


00:19:32.060 --> 00:19:37.460
saw and the whole world saw in the beginning in 2014 was the notebook, right?


00:19:37.460 --> 00:19:43.540
And got a lot of people excited, but there was a, like a very recurrent request for bringing


00:19:43.540 --> 00:19:49.500
together in the same page, the text editor, the terminals, the having a console as well


00:19:49.500 --> 00:19:54.420
as regular Python console alongside the notebook in the same, on the same page.


00:19:54.420 --> 00:19:57.420
And so this is what we delivered with JupyterLab.


00:19:57.420 --> 00:20:02.900
And even though it was a very popular, like common demand from the community, a lot of


00:20:02.900 --> 00:20:11.660
people really loved this more rigid full page notebook UI and kept using the notebook.


00:20:11.660 --> 00:20:20.260
So this is where we were about two years ago when we started the discussion about notebook


00:20:20.260 --> 00:20:24.620
seven and modernizing the classic notebook user interface.


00:20:24.620 --> 00:20:30.100
Was there ever a time where people were thinking to have JupyterLab be the next version of


00:20:30.100 --> 00:20:32.740
a Jupyter notebook and kind of replace it?


00:20:32.740 --> 00:20:36.100
And then the people are like, you know what, maybe please don't take that away.


00:20:36.100 --> 00:20:44.060
No, it was definitely at some point our strategy to deprecate the notebook eventually.


00:20:44.060 --> 00:20:49.060
And we had a large public conversation about this.


00:20:49.060 --> 00:20:54.300
And it just, I think is clear that people like having that choice.


00:20:54.300 --> 00:20:59.260
People like having what is just a simple editor for notebooks.


00:20:59.260 --> 00:21:04.540
And people also like having the Swiss army knife, and they're not always the same people,


00:21:04.540 --> 00:21:12.380
but we want everyone who is using these things to be able to get both the benefit of the


00:21:12.380 --> 00:21:16.660
modern architecture and the updates and also the user experience they want.


00:21:16.660 --> 00:21:17.660
Right.


00:21:17.660 --> 00:21:22.220
Because most of the plugins that come out lately are for JupyterLab, and you're feeling


00:21:22.220 --> 00:21:23.220
more and more left behind.


00:21:23.220 --> 00:21:24.780
That's not a great experience.


00:21:24.780 --> 00:21:29.340
And so deprecating that tool you're using and saying you must use this other one, it


00:21:29.340 --> 00:21:32.500
just isn't what our community needed.


00:21:32.500 --> 00:21:38.220
So now we I think have an architecture that we can sustainably maintain, because it's


00:21:38.220 --> 00:21:40.340
effectively the same code base.


00:21:40.340 --> 00:21:46.220
But we also can give users what they want, because there are different contexts.


00:21:46.220 --> 00:21:50.100
And it is the case that we would have left some people behind and it's better not to.


00:21:50.100 --> 00:21:55.540
I can imagine in different scenarios, different user bases, it might make a lot of sense to


00:21:55.540 --> 00:21:57.220
have one or the other, right?


00:21:57.220 --> 00:22:03.260
If I'm a data scientist working on complicated projects, maybe JupyterLab is the right place.


00:22:03.260 --> 00:22:08.180
But if I'm trying to teach a little bit of computation for a psychology class, and I


00:22:08.180 --> 00:22:13.660
just want them to do three plots and pull in some data, you don't want to drop non developers


00:22:13.660 --> 00:22:15.980
into something that looks kind of complicated.


00:22:15.980 --> 00:22:17.540
Like, where do I go?


00:22:17.540 --> 00:22:22.020
Here's your page, you type in these cells, you see the picture, you get the graph for


00:22:22.020 --> 00:22:24.100
the study we're talking about or something, right?


00:22:24.100 --> 00:22:26.380
Yeah, that's exactly the idea.


00:22:26.380 --> 00:22:27.380
Interesting.


00:22:27.380 --> 00:22:32.300
So you touched on something interesting there that Jupyter notebook, the single page or


00:22:32.300 --> 00:22:36.300
the single view version is now based on JupyterLab.


00:22:36.300 --> 00:22:38.700
And there's a lot of overlap of these things, right?


00:22:38.700 --> 00:22:39.700
Yeah.


00:22:39.700 --> 00:22:42.340
I don't know if it was the right time to go more into the details.


00:22:42.340 --> 00:22:45.180
But give us a little, it's a bit of a jump ahead.


00:22:45.180 --> 00:22:49.820
But I let just give us a sense that people who maybe people are listening, go, I'm not


00:22:49.820 --> 00:22:52.860
going to use Jupyter lab, I'm kind of the notebook type of person, right?


00:22:52.860 --> 00:22:56.540
There's a lot of what we're talking about that still directly applies, because there's


00:22:56.540 --> 00:22:59.340
a bunch of similarity or actually reused, right?


00:22:59.340 --> 00:23:05.220
So one thing we didn't mention yet about Jupyter lab is that, so for end users, it is indeed


00:23:05.220 --> 00:23:10.140
a more advanced environment with more like an ID, even though it's not really an ID.


00:23:10.140 --> 00:23:13.660
For developers, it's also a framework.


00:23:13.660 --> 00:23:18.500
So Jupyter lab itself is just a set of plugins and extensions.


00:23:18.500 --> 00:23:23.820
They were designed from the very beginning to be reused in, you know, in different ways.


00:23:23.820 --> 00:23:29.020
So like, in a few, actually, if you go to the Jupyter repo, there is an examples, a


00:23:29.020 --> 00:23:30.020
folder.


00:23:30.020 --> 00:23:34.780
And in there, there is a, there are a few, a few different apps that you can build yourself.


00:23:34.780 --> 00:23:36.220
And they are not Jupyter lab.


00:23:36.220 --> 00:23:42.100
They are like just a single cell on the page, or maybe just, yeah, this one, maybe just


00:23:42.100 --> 00:23:44.500
a console, maybe just a notebook.


00:23:44.500 --> 00:23:49.780
And this is made possible because Jupyter lab is indeed just a set of extensions.


00:23:49.780 --> 00:23:53.940
These examples, they just reuse some of them and they just put them together in a different


00:23:53.940 --> 00:23:54.940
way.


00:23:54.940 --> 00:23:57.700
So we sometimes call them remixes.


00:23:57.700 --> 00:24:01.780
And in the end, notebook seven is a Jupyter lab remix.


00:24:01.780 --> 00:24:08.260
It's just a different Jupyter lab interface, but focused on the document centric experience


00:24:08.260 --> 00:24:13.460
that, you know, users have been liking for many years already.


00:24:13.460 --> 00:24:18.220
So yeah, that's a bit of the second side of Jupyter lab.


00:24:18.220 --> 00:24:19.220
Excellent.


00:24:19.220 --> 00:24:20.220
Yeah.


00:24:20.220 --> 00:24:24.340
There's a bunch of features that we're going to talk about here that come to Jupyter notebooks


00:24:24.340 --> 00:24:28.920
in seven, because yeah, seven, you can get the right version for the right product because


00:24:28.920 --> 00:24:34.340
of what you all have done here, like interactive debugging and real time collaboration and


00:24:34.340 --> 00:24:35.340
things like that.


00:24:35.340 --> 00:24:36.340
Yes.


00:24:36.340 --> 00:24:37.340
Yeah.


00:24:37.340 --> 00:24:40.820
All of that was really a by-product of moving over to the Jupyter lab architecture.


00:24:40.820 --> 00:24:48.300
And one other key aspect of notebook seven over notebook six is that since we use the


00:24:48.300 --> 00:24:54.420
text editor from Jupyter lab four, which is a newer version of code mirror, we also get


00:24:54.420 --> 00:24:57.140
a lot of benefits in terms of accessibility.


00:24:57.140 --> 00:25:01.180
Most of the work on accessibility has been going into the Jupyter lab code base and not


00:25:01.180 --> 00:25:06.700
into the classic notebook, which was really based on older versions of, of, you know,


00:25:06.700 --> 00:25:10.260
older libraries and, you know, JavaScript from 2010s.


00:25:10.260 --> 00:25:14.540
And so we're in a much better shape on this regard with Jupyter lab four and notebook


00:25:14.540 --> 00:25:15.540
seven.


00:25:15.540 --> 00:25:18.340
It's a different world with JavaScript these days than it was in 2010.


00:25:18.340 --> 00:25:19.340
That's right.


00:25:19.340 --> 00:25:20.860
Quite a bit.


00:25:20.860 --> 00:25:24.660
Let's start by talking about some of the new features for Jupyter lab.


00:25:24.660 --> 00:25:29.820
One of the ones is for very large notebooks, Jupyter lab is quite a bit faster, right?


00:25:29.820 --> 00:25:30.820
That's, that's excellent.


00:25:30.820 --> 00:25:32.420
Who wants to take that one?


00:25:32.420 --> 00:25:33.420
I nominate.


00:25:33.420 --> 00:25:35.620
Yeah, I can go ahead with that one.


00:25:35.620 --> 00:25:37.100
Go ahead.


00:25:37.100 --> 00:25:43.540
So yeah, that's one of the complaint of the user is that when you get lots of notebook


00:25:43.540 --> 00:25:49.860
open or when you get some notebook that are very lengthy, the UI responsiveness can be


00:25:49.860 --> 00:25:51.300
low.


00:25:51.300 --> 00:25:56.380
And so we decided to focus quite some time on that aspect.


00:25:56.380 --> 00:26:01.900
And that was made possible by fully upgrading the text editor to the latest version.


00:26:01.900 --> 00:26:03.580
So we are using CodeMirror.


00:26:03.580 --> 00:26:09.020
So for party, awesome for party library for dealing with text editor.


00:26:09.020 --> 00:26:13.780
And we upgraded the latest one that bring up a very important speed up.


00:26:13.780 --> 00:26:19.780
And also we, we have work on the styling to try to optimize it because styling can hit


00:26:19.780 --> 00:26:21.900
your browser pretty hard.


00:26:21.900 --> 00:26:28.940
And lately we have also introduced a new way of rendering notebook, like only rendering


00:26:28.940 --> 00:26:31.540
what the user is seeing basically.


00:26:31.540 --> 00:26:33.260
That one is still experimental.


00:26:33.260 --> 00:26:36.380
So by default, this off and user can try it.


00:26:36.380 --> 00:26:42.460
And we are still working on that one to get it on by default for the next version.


00:26:42.460 --> 00:26:44.940
So for 4.1.


00:26:44.940 --> 00:26:52.860
Hopefully when we reach that milestone, we get like a very smooth experience for 99%


00:26:52.860 --> 00:26:53.860
for user.


00:26:53.860 --> 00:26:54.860
That's the goal.


00:26:54.860 --> 00:26:55.860
Yeah.


00:26:55.860 --> 00:27:00.020
It's tricky because web browsers typically want to just have the whole document, the


00:27:00.020 --> 00:27:02.760
DOM loaded and they want you to just work with it.


00:27:02.760 --> 00:27:06.980
But if you've got a hundred, hundred virtual pages, right, that you would go through, you


00:27:06.980 --> 00:27:11.180
don't want to style all those and do all the widgets and all that if they're not on the


00:27:11.180 --> 00:27:12.180
screen.


00:27:12.180 --> 00:27:13.180
Right.


00:27:13.180 --> 00:27:14.180
So there's this tension.


00:27:14.180 --> 00:27:20.100
And sometimes it can come from tricky part, like just displaying for education, for example,


00:27:20.100 --> 00:27:21.700
they use and that's very nice.


00:27:21.700 --> 00:27:24.540
All that's of equation, nice rendering.


00:27:24.540 --> 00:27:30.300
And those are creating so many elements in the webpage that sometimes just having not


00:27:30.300 --> 00:27:36.340
so long notebook, but if we've lots of math expression can crush your browser, basically.


00:27:36.340 --> 00:27:38.300
That's surprising at first.


00:27:38.300 --> 00:27:39.300
All right.


00:27:39.300 --> 00:27:40.300
Right.


00:27:40.300 --> 00:27:41.300
Okay.


00:27:41.420 --> 00:27:45.020
So what I'm hearing is like complex math, like calculus, differential equations, those


00:27:45.020 --> 00:27:50.660
kinds of things, not just hard for people, but also hard for web browsers.


00:27:50.660 --> 00:27:51.900
Math is hard for web browsers.


00:27:51.900 --> 00:27:52.900
Got it.


00:27:52.900 --> 00:27:53.900
That's pretty interesting.


00:27:53.900 --> 00:27:59.540
Darren, you showed in your talk, you showed this off in a video, a side-by-side Jupyter


00:27:59.540 --> 00:28:01.860
Lab three versus four with a large notebook.


00:28:01.860 --> 00:28:03.580
And it was much faster.


00:28:03.580 --> 00:28:09.780
Did that video have the virtual paging, like the render, the scene culling thing where


00:28:09.780 --> 00:28:13.740
it doesn't show it doesn't render the stuff it doesn't see, or is that just the first


00:28:13.740 --> 00:28:15.220
default version right now?


00:28:15.220 --> 00:28:19.620
This is where I come clean to your audience and say, Fred is the person who produced and


00:28:19.620 --> 00:28:21.180
recorded those videos.


00:28:21.180 --> 00:28:22.180
And okay.


00:28:22.180 --> 00:28:23.180
Okay.


00:28:23.180 --> 00:28:24.700
Fred was originally going to give that talk.


00:28:24.700 --> 00:28:25.700
I can tell you that.


00:28:25.700 --> 00:28:27.520
Yes, that's exactly what's going on.


00:28:27.520 --> 00:28:31.220
But Fred can give you the actual details because he's the one who hit the record button.


00:28:31.220 --> 00:28:32.220
Yeah.


00:28:33.220 --> 00:28:34.220
Tell us, Fred.


00:28:34.220 --> 00:28:36.180
I have a very happy event that prevent me to go to the JupyterCon.


00:28:36.180 --> 00:28:42.060
So I was mentioned, normally you was the one that had to do the talk with Marta, but we


00:28:42.060 --> 00:28:45.460
had to switch last minute and thank again, Afin for doing that.


00:28:45.460 --> 00:28:50.060
But definitely the video that was displayed was that we, it's a comparison between the


00:28:50.060 --> 00:28:57.340
latest 3.6 version and the four version with that feature that's off for now by default,


00:28:57.340 --> 00:29:00.980
but we'll bring the best performance for the end user.


00:29:00.980 --> 00:29:01.980
Yeah.


00:29:01.980 --> 00:29:02.980
It was a massive speed up.


00:29:02.980 --> 00:29:03.980
Yeah.


00:29:03.980 --> 00:29:07.580
You know, on one hand you're like, ah, you're just waiting 10 seconds, but those kinds of


00:29:07.580 --> 00:29:10.540
little delays, they just kind of break your thought and your flow.


00:29:10.540 --> 00:29:13.020
And you just feel like the tools are getting in the way.


00:29:13.020 --> 00:29:17.180
And if it's really, really quick, then the tools kind of vanished to the background and


00:29:17.180 --> 00:29:18.180
you don't think about them.


00:29:18.180 --> 00:29:19.180
Right.


00:29:19.180 --> 00:29:20.180
That's how it should be.


00:29:20.180 --> 00:29:21.180
Exactly.


00:29:21.180 --> 00:29:24.100
Even when, even when rendering all of the notebook and without enabling the virtual


00:29:24.100 --> 00:29:29.700
scrolling, we get already a nice speed up already, thanks to the adoption of CodeMirror


00:29:29.700 --> 00:29:35.100
6, which is much faster to render and a bunch of other optimizations that we were able to


00:29:35.100 --> 00:29:36.100
do.


00:29:36.100 --> 00:29:40.380
But yeah, I mean, it was the easiest clap in the entire talk was just playing that video


00:29:40.380 --> 00:29:44.900
and seeing the fast one render and the slow one keep going.


00:29:44.900 --> 00:29:50.220
It just, it's a really different user experience, even though, as you say, it's only a few seconds,


00:29:50.220 --> 00:29:56.660
it turns out a few seconds is enough to cause the kind of interruption that leaves a negative,


00:29:56.660 --> 00:30:01.100
a negative overall impression in the user's experience.


00:30:01.100 --> 00:30:03.540
Absolutely.


00:30:03.540 --> 00:30:06.940
This portion of Talk Python to Me is brought to you by Python Tutor.


00:30:06.940 --> 00:30:11.220
Are you learning Python or another language like JavaScript, Java, C, or C++?


00:30:11.220 --> 00:30:14.000
If so, check out Python Tutor.


00:30:14.000 --> 00:30:18.740
This free website lets you write code, run it and visualize what happens line by line


00:30:18.740 --> 00:30:20.480
as your code executes.


00:30:20.480 --> 00:30:24.160
No more messy print statements or fighting with the debugger to understand what code


00:30:24.160 --> 00:30:25.160
is doing.


00:30:25.160 --> 00:30:29.860
Python Tutor automatically shows you exactly what's going on step by step in an intuitive


00:30:29.860 --> 00:30:31.300
visual way.


00:30:31.300 --> 00:30:36.260
You'll see all the objects as they are represented in Python memory, and how they are connected


00:30:36.260 --> 00:30:39.980
and potentially shared across variables over time.


00:30:39.980 --> 00:30:44.180
It's a great free tool to complement what you're learning from books, YouTube videos,


00:30:44.180 --> 00:30:47.340
and even online courses like the ones right here at Talk Python Training.


00:30:47.340 --> 00:30:53.180
In fact, I even used Python Tutor when creating our Python Memory Management and Tips course.


00:30:53.180 --> 00:30:58.120
It was excellent for showing just what's happening with references and containers in memory.


00:30:58.120 --> 00:31:00.000
Python Tutor is super easy to check out.


00:31:00.000 --> 00:31:05.540
Just visit talkpython.fm/python-tutor and click visualize code.


00:31:05.540 --> 00:31:09.560
It comes preloaded with an example, and you don't even need an account to use it.


00:31:09.560 --> 00:31:13.940
Again, that's talkpython.fm/python-tutor to visualize your code for free.


00:31:13.940 --> 00:31:16.240
The link is in your podcast player show notes.


00:31:16.240 --> 00:31:20.900
Thank you to Python Tutor for sponsoring this episode.


00:31:20.900 --> 00:31:26.240
This is not a JupyterLab feature exactly, but while we're on this code editor topic,


00:31:26.240 --> 00:31:29.580
I wanted to ask you all just your thoughts about this.


00:31:29.580 --> 00:31:32.340
Now keep in mind before I ask this question, my perspective.


00:31:32.340 --> 00:31:37.540
I've come from doing a lot of traditional software development with editors like PyCharm


00:31:37.540 --> 00:31:39.020
and Visual Studio Code and others.


00:31:39.020 --> 00:31:44.060
So when I work in Jupyter Notebook or Lab, it doesn't really matter.


00:31:44.060 --> 00:31:47.580
And I'll say some variable dot.


00:31:47.580 --> 00:31:52.060
It doesn't give me any help unless I press tab to see the autocomplete.


00:31:52.060 --> 00:31:57.980
Is there an option or discussion around having more aggressive autocomplete that kind of


00:31:57.980 --> 00:32:00.180
automatically shows up as you work with it?


00:32:00.180 --> 00:32:04.500
Or is the community just like, we don't really want that stuff popping up around.


00:32:04.500 --> 00:32:06.260
We just want to type.


00:32:06.260 --> 00:32:16.260
So the reason it's currently this way is primarily due to the behavior of Jupyter Notebook a


00:32:16.260 --> 00:32:20.180
long time ago and not subverting user expectations.


00:32:20.180 --> 00:32:28.860
But we can often keep that as the default and have some setting to facilitate a different


00:32:28.860 --> 00:32:30.300
kind of behavior.


00:32:30.300 --> 00:32:36.420
With this one, I think there's probably actual appetite for it, but no one's shown up to


00:32:36.420 --> 00:32:37.420
do it.


00:32:37.420 --> 00:32:40.660
I don't think we would turn down a feature like this hidden behind a setting.


00:32:40.660 --> 00:32:47.100
I just don't think anyone has both been bothered enough and also been in the time and place


00:32:47.100 --> 00:32:50.540
with the resources and where it would fall necessary to do it.


00:32:50.540 --> 00:32:52.420
But it doesn't sound...


00:32:52.420 --> 00:32:58.100
Yeah, it sounds totally doable and compatible with both keeping the user expectations intact


00:32:58.100 --> 00:33:00.180
and offering you the feature you're talking about.


00:33:00.180 --> 00:33:04.140
Because yeah, people have different styles of completion that they're into.


00:33:04.140 --> 00:33:08.260
And new things are appearing all the time and creating new expectations like LSP, which


00:33:08.260 --> 00:33:09.260
changes the language.


00:33:09.260 --> 00:33:11.260
It changes the language server protocol.


00:33:11.260 --> 00:33:12.260
Yeah.


00:33:12.260 --> 00:33:13.260
Anyone else have thoughts on that?


00:33:13.260 --> 00:33:19.020
I would say that in 4.1, there are things coming to at least give you the ability to


00:33:19.020 --> 00:33:21.380
more quickly restore history.


00:33:21.380 --> 00:33:28.260
Like you type and then it's going to propose you to copy paste the code that was written


00:33:28.260 --> 00:33:31.300
previously in some previous cells and stuff like that.


00:33:31.300 --> 00:33:38.060
And the same infrastructure will be available for plugins.


00:33:38.060 --> 00:33:44.620
And I know some people are working on AI integration in Jupyter and some of them are already working


00:33:44.620 --> 00:33:51.020
and okay, let's try to do a request when the user is typing to help him complete the code


00:33:51.020 --> 00:33:54.540
or give him a hint on how to improve things.


00:33:54.540 --> 00:33:58.620
And yeah, there are a couple of people working on that.


00:33:58.620 --> 00:34:00.220
So stay tuned for more.


00:34:00.220 --> 00:34:01.220
Yeah, okay.


00:34:01.220 --> 00:34:03.020
I really liked JupyterLab and working it now.


00:34:03.020 --> 00:34:06.940
But if you could just go and these are all the things you can do just as I would, you


00:34:06.940 --> 00:34:08.660
know, I would make me even more happy.


00:34:08.660 --> 00:34:14.780
Darn, you mentioned settings and that's actually one of the new features as well as like a


00:34:14.780 --> 00:34:15.780
UI for settings.


00:34:15.780 --> 00:34:16.780
Is that right?


00:34:16.780 --> 00:34:17.780
Yeah.


00:34:17.780 --> 00:34:25.460
So this is basically a front end that's capable of taking any extensions, defined settings


00:34:25.460 --> 00:34:32.340
and rendering a UI for it because we don't know what the preferences and extension author


00:34:32.340 --> 00:34:35.260
is going to want are going to look like.


00:34:35.260 --> 00:34:38.100
We can't create like a custom UI for it.


00:34:38.100 --> 00:34:44.260
Instead, we have to read a schema file that defines such like the extension author who


00:34:44.260 --> 00:34:51.500
wrote an extension that does git, right, also has a whole bunch of booleans that are by


00:34:51.500 --> 00:34:54.020
default set to true.


00:34:54.020 --> 00:34:55.700
So this UI is like, oh, okay, cool.


00:34:55.700 --> 00:34:58.140
I'll bring a bunch of checkboxes and check them.


00:34:58.140 --> 00:34:59.140
And so it's very flexible.


00:34:59.140 --> 00:35:03.940
It can take any extension settings and as long as they're described properly, according


00:35:03.940 --> 00:35:07.380
to the API, they will render inside that UI.


00:35:07.380 --> 00:35:12.460
And it really meets what we used to have there, which is just a JSON blob editor.


00:35:12.460 --> 00:35:13.460
Here you go.


00:35:13.460 --> 00:35:14.460
Here's your JSON.


00:35:14.460 --> 00:35:15.460
Good luck.


00:35:15.460 --> 00:35:17.300
And we tried to make it slightly nicer.


00:35:17.300 --> 00:35:24.700
I think we tried to make it support a version of JSON that has inline comments as well,


00:35:24.700 --> 00:35:26.780
but like it's still not that nice.


00:35:26.780 --> 00:35:32.700
So I'm very happy to see this as the way you go playing around with all the choices you


00:35:32.700 --> 00:35:38.300
have because JupyterLab has a lot of settings, but it's really difficult to explore them


00:35:38.300 --> 00:35:39.860
without something like this.


00:35:39.860 --> 00:35:42.980
Especially with all the extensions kind of unbounded set, right?


00:35:42.980 --> 00:35:43.980
Exactly.


00:35:43.980 --> 00:35:44.980
Yeah.


00:35:44.980 --> 00:35:48.540
The settings UI has a search that searches through all the different areas for settings.


00:35:48.540 --> 00:35:50.420
It's one of my favorite things on complex apps.


00:35:50.420 --> 00:35:54.620
I mean, like, I don't know what, what is in here, but I bet if I start typing, it'll reveal


00:35:54.620 --> 00:35:56.420
itself if it's in there somewhere.


00:35:56.420 --> 00:35:57.420
Right.


00:35:57.420 --> 00:35:58.420
Yeah.


00:35:59.420 --> 00:36:00.420
JupyterLab has two places like that.


00:36:00.420 --> 00:36:02.260
One is the command palette.


00:36:02.260 --> 00:36:05.780
So let's you search the entire menu system basically.


00:36:05.780 --> 00:36:08.620
And that's become, you know, in other ideas too.


00:36:08.620 --> 00:36:14.980
I mean, I think there's a certain point as a user of these tools where you discover something


00:36:14.980 --> 00:36:15.980
like that.


00:36:15.980 --> 00:36:18.500
And then after that point, you don't want to go back.


00:36:18.500 --> 00:36:20.220
So I think you're right.


00:36:20.220 --> 00:36:24.460
Like I didn't used to always need search in my applications, but now I do just like you


00:36:24.460 --> 00:36:25.460
say.


00:36:25.460 --> 00:36:26.460
Yeah, exactly.


00:36:26.460 --> 00:36:30.280
This really goes into the thing we were mentioning earlier about JupyterLab remixes.


00:36:30.280 --> 00:36:34.680
So as you know, JupyterLab is basically only a collection of extensions, right?


00:36:34.680 --> 00:36:39.120
And the notebook itself, the command palette, all of these things are extensions to the


00:36:39.120 --> 00:36:41.240
core app, right?


00:36:41.240 --> 00:36:48.160
And the, so remixes are a way to cherry pick some of these core extensions, potentially


00:36:48.160 --> 00:36:51.280
include third party extensions into a new thing.


00:36:51.280 --> 00:36:56.960
I think that there are not many equivalents to JupyterLab in that regard.


00:36:56.960 --> 00:37:04.800
If you try to make a new complex application in the web, like a photo editor, a CAD engine,


00:37:04.800 --> 00:37:09.800
anything that falls into the category of having to display a lot of information on the screen,


00:37:09.800 --> 00:37:14.960
doing something that you spend hours doing every day, you will want a framework that


00:37:14.960 --> 00:37:22.600
allows extensibility, theming, a command palette, unified keyboard shortcuts across the application,


00:37:22.600 --> 00:37:27.080
a settings editor for your main app and all of your extensions, configurable keyboard


00:37:27.080 --> 00:37:30.960
shortcuts, I mentioned that earlier, potentially real-time collaboration.


00:37:30.960 --> 00:37:36.400
And these are lots of checkboxes to check if you are starting from scratch.


00:37:36.400 --> 00:37:42.840
And so the JupyterLab basically application framework allowed us to reuse all of that


00:37:42.840 --> 00:37:47.860
work for other things that have nothing to do with the notebook, for example.


00:37:47.860 --> 00:37:53.360
So earlier this year, we released JupyterCAD, which is a web-based CAD modeler, which is


00:37:53.360 --> 00:37:54.920
a JupyterLab remix, really.


00:37:54.920 --> 00:37:59.040
It can be used both at the JupyterLab extension where you find everything that you're used


00:37:59.040 --> 00:38:01.040
to or in a standalone fashion.


00:38:01.040 --> 00:38:03.240
And this JupyterCAD is really interesting.


00:38:03.240 --> 00:38:11.840
It's a 3D CAD curated design editor that's built on top of the JupyterLab framework,


00:38:11.840 --> 00:38:16.440
but it's not itself exactly about Jupyter, like programming and so on, right?


00:38:16.440 --> 00:38:20.900
And it has really interesting things, like it has real-time collaboration between multiple


00:38:20.900 --> 00:38:24.860
people and all of that stuff comes from just building on top of this, like you said.


00:38:24.860 --> 00:38:28.420
That's a good example of something really different, but still possible.


00:38:28.420 --> 00:38:29.420
Yeah.


00:38:29.420 --> 00:38:34.100
So in the way we enable real-time collaboration in JupyterLab, we have to specialize a few


00:38:34.100 --> 00:38:38.780
things depending on the type of document that you're editing, but really the framework is


00:38:38.780 --> 00:38:44.820
generic and you can start enabling real-time collaboration and other types of content than


00:38:44.820 --> 00:38:47.620
just textual content or whatnot.


00:38:47.620 --> 00:38:53.340
And we all got used to real-time collaboration and collaborative editing on text, you know,


00:38:53.340 --> 00:38:58.420
on the sort of software suite that we use for basic productivity, but very convinced


00:38:58.420 --> 00:39:04.340
that this will be the case for more technical computing, not just code, but everything where


00:39:04.340 --> 00:39:07.060
you have to put together a really complex system.


00:39:07.060 --> 00:39:11.740
Like especially if you are building something that really requires a lot of people to coordinate,


00:39:11.740 --> 00:39:18.380
like you're making a new plane or a football stadium, and you have this unified model where


00:39:18.380 --> 00:39:24.340
everything percolates across many domain-specific applications from CAD to electrical systems


00:39:24.340 --> 00:39:25.620
or whatnot.


00:39:25.620 --> 00:39:30.380
And for people to effectively collaborate in these kinds of environments, I think collaborative


00:39:30.380 --> 00:39:34.740
editing is going to bring a lot if we can implement this vision.


00:39:34.740 --> 00:39:39.140
So really JupyterCAD is a demonstrator that you can do collaborative editing on other


00:39:39.140 --> 00:39:40.140
things than just notebooks.


00:39:40.140 --> 00:39:41.140
Yeah.


00:39:41.140 --> 00:39:44.740
And I think the collab may become the foundation for things that we would never expect to be


00:39:44.740 --> 00:39:45.740
part of programming.


00:39:45.740 --> 00:39:47.340
Like you're talking about, it's interesting.


00:39:47.340 --> 00:39:48.340
Yeah.


00:39:48.340 --> 00:39:51.700
It's more technical computing than just, you know, interactive computing, I would say.


00:39:51.700 --> 00:39:52.700
Yeah.


00:39:53.700 --> 00:39:58.340
I was thinking about this book here, like, oh man, this book is thrown around as like,


00:39:58.340 --> 00:40:03.500
by Fred Brooks, basically saying like, there's no project where adding more and more people,


00:40:03.500 --> 00:40:06.620
it's going to speed it up and get it done more on time.


00:40:06.620 --> 00:40:07.620
Right.


00:40:07.620 --> 00:40:11.020
And I was thinking about sort of the follies of like, well, as you add more people, the


00:40:11.020 --> 00:40:15.940
complexity of the communication and the overhead of syncing and all of that is kind of going


00:40:15.940 --> 00:40:17.020
to break everything.


00:40:17.020 --> 00:40:22.460
And so, you know, you, you can't make a baby in like one month by having nine women work


00:40:22.460 --> 00:40:26.060
on it and sort of story, you know, like, but the stuff that you're talking about here and


00:40:26.060 --> 00:40:30.780
all of this communication tools and all of this interesting async stuff that we're doing


00:40:30.780 --> 00:40:34.820
these days, I kind of feel like people should rethink these ideas.


00:40:34.820 --> 00:40:39.740
And I think kind of what you're touching on here is like, it is possible to get deeper,


00:40:39.740 --> 00:40:44.780
important work done as a groups, then maybe the methodology that people think about in


00:40:44.780 --> 00:40:49.580
the software world traditionally has been, it's a different world in 2023 and on.


00:40:49.580 --> 00:40:51.540
I mean, it's kind of a sidebar of it.


00:40:51.540 --> 00:40:53.860
It's also important to what this, this collaborative editing.


00:40:53.860 --> 00:40:54.860
Yeah.


00:40:54.860 --> 00:40:55.860
I like this book.


00:40:55.860 --> 00:41:00.780
So for a long time, we have been trying to introduce real-time collaboration to Jupyter.


00:41:00.780 --> 00:41:06.300
We've had at least three significant technical attempts at it, right?


00:41:06.300 --> 00:41:07.540
It's a hard problem.


00:41:07.540 --> 00:41:12.680
It's one we've worked on a long time, and it's given me a unique opportunity that most


00:41:12.680 --> 00:41:18.980
people don't have, which is try to justify to myself over the course of six years, why


00:41:18.980 --> 00:41:24.380
anyone should want real-time collaboration inside a programming environment.


00:41:24.380 --> 00:41:31.200
And what I can say is over that time period, I have spent, I don't know, hundreds of hours


00:41:31.200 --> 00:41:36.700
inside documents with other people that are markdown files, because that's how we conduct


00:41:36.700 --> 00:41:43.980
our meetings or inside Google Docs, because that's how we wrote our governance or asynchronously


00:41:43.980 --> 00:41:50.380
back and forth on GitHub, which is not exactly the same thing, but truly is collaboration.


00:41:50.380 --> 00:41:56.540
And so I don't think there's a tension between there's a group of us working on something


00:41:56.540 --> 00:42:01.220
in a room and we want technical tools so that we don't all have to be in that room, but


00:42:01.220 --> 00:42:06.740
we can have that seamlessness and the myth of the mythical, you know, the man month,


00:42:06.740 --> 00:42:07.740
right?


00:42:07.740 --> 00:42:12.220
I actually think those problems are like on the surface, they look pretty similar, but


00:42:12.220 --> 00:42:15.100
I actually think they're not the same thing.


00:42:15.100 --> 00:42:20.500
It's more like back when that book was written, groups of people would get inside one room


00:42:20.500 --> 00:42:22.500
and work collaboratively.


00:42:22.500 --> 00:42:27.380
Today, every one of us on this call is in a different location and some of us are pretty


00:42:27.380 --> 00:42:28.380
far apart.


00:42:28.380 --> 00:42:31.020
We're in different countries and it's all working out fine.


00:42:31.020 --> 00:42:36.740
And Jupyter is bringing tools like that to people and less tools like let's add 5,000


00:42:36.740 --> 00:42:37.740
people.


00:42:37.740 --> 00:42:42.420
Now what Sylvan was talking about still, you know, you're not going to have one person


00:42:42.420 --> 00:42:47.060
opening up the grand document that describes like the whole Coliseum, right?


00:42:47.060 --> 00:42:51.300
But there's going to be tons of groups that are working on systems where there's like


00:42:51.300 --> 00:42:54.340
seven people who need to work on this thing together.


00:42:54.340 --> 00:42:59.100
And Google Docs for wiring documents doesn't exist yet, you know, but it could exist.


00:42:59.100 --> 00:43:00.100
Yeah.


00:43:00.100 --> 00:43:01.100
And it could be built on JupyterLab.


00:43:01.100 --> 00:43:02.100
That's right.


00:43:02.100 --> 00:43:03.820
One of the big features is this real time collaboration.


00:43:03.820 --> 00:43:06.380
Let's, you know, let's talk about that for a moment.


00:43:06.380 --> 00:43:10.860
I think that's, I think it's a big deal as I've been hinting that with my sidebar and


00:43:10.860 --> 00:43:11.860
so on.


00:43:11.860 --> 00:43:15.100
But in the beginning, I think we need to start small.


00:43:15.100 --> 00:43:20.180
Even with, you know, Google Docs when it came out, I think in 2006, a lot of many people


00:43:20.180 --> 00:43:21.580
didn't see the point.


00:43:21.580 --> 00:43:24.900
Like why would I want someone else's cursor in my document?


00:43:24.900 --> 00:43:27.220
It sounds dangerous, right?


00:43:27.220 --> 00:43:33.300
So if you were to make a survey of what people wanted at the time, nobody would have said


00:43:33.300 --> 00:43:35.300
that, right?


00:43:35.300 --> 00:43:37.740
Yet everybody does that now, right?


00:43:37.740 --> 00:43:43.100
And it's probably, people probably have the same feeling when it comes to writing code


00:43:43.100 --> 00:43:45.700
or doing any sort of technical work.


00:43:45.700 --> 00:43:49.780
And I think we'll get past this point where people will get it.


00:43:49.780 --> 00:43:55.700
And in the very beginning, this can start being useful for peer programming, doing something


00:43:55.700 --> 00:44:01.100
together while we're reviewing code over a Zoom meeting, that sort of thing where, you


00:44:01.100 --> 00:44:07.460
know, there is a, you know, real time interaction between people over some kind of medium.


00:44:07.460 --> 00:44:14.140
If you look at more technical objects, like for example, you have two different teams,


00:44:14.140 --> 00:44:19.580
like someone's making a plane, there is a team of people that's doing some simulation


00:44:19.580 --> 00:44:25.020
and see how, you know, the plane goes through the air and another person is making physical


00:44:25.020 --> 00:44:28.220
prototypes of parts of the plane.


00:44:28.220 --> 00:44:29.900
And you have this interaction.


00:44:29.900 --> 00:44:34.420
Now, normally these two groups would be in two different branches of the company.


00:44:34.420 --> 00:44:39.420
And in order to change any kind of spec, you need to go up and down in the hierarchy by


00:44:39.420 --> 00:44:41.100
a few, you know, degrees.


00:44:41.100 --> 00:44:42.100
Right.


00:44:42.100 --> 00:44:44.220
You schedule a meeting for next week, that sort of thing.


00:44:44.220 --> 00:44:45.220
Yeah.


00:44:46.220 --> 00:44:53.020
And you change the specs and now everybody has to change or make changes to their boundaries.


00:44:53.020 --> 00:44:59.780
And if you enable more real time, you know, feedback on suggestions and whatnot, you may


00:44:59.780 --> 00:45:01.660
be become a lot more efficient.


00:45:01.660 --> 00:45:06.860
So how's it, it's pretty similar to Jupyter, to Google Docs, excuse me.


00:45:06.860 --> 00:45:12.380
You have to install the Jupyter Collaborator collaboration extension for the server, right?


00:45:12.380 --> 00:45:13.980
In order for this to work.


00:45:13.980 --> 00:45:17.860
It's not just, yeah, install JupyterLab and you're good to go.


00:45:17.860 --> 00:45:23.260
Well, you can install JupyterLab and install Jupyter Collaboration if you need the one


00:45:23.260 --> 00:45:24.260
liner.


00:45:24.260 --> 00:45:30.620
But the idea was lots of people install for personal use on their own laptops and anyone


00:45:30.620 --> 00:45:34.580
who's going to create an environment where collaboration is happening is doing more than


00:45:34.580 --> 00:45:36.980
running just one command to install Jupyter anyway.


00:45:36.980 --> 00:45:38.100
Yeah, yeah, of course.


00:45:38.100 --> 00:45:43.340
You know, so like as a toy, if the five of us are in the same network, we can launch


00:45:43.340 --> 00:45:45.100
it that way just to play around with.


00:45:45.100 --> 00:45:48.860
But really any sophisticated user is going to tie in the user system and do a whole bunch


00:45:48.860 --> 00:45:50.740
of config and all those things.


00:45:50.740 --> 00:45:59.220
And so we're not shipping the code that does that inside core JupyterLab for two reasons.


00:45:59.220 --> 00:46:06.820
One is that, you know, the main sort of install base doesn't do real time collaboration.


00:46:06.820 --> 00:46:11.140
The other is that we're working on that package much faster than we're working on JupyterLab


00:46:11.140 --> 00:46:12.140
core.


00:46:12.140 --> 00:46:16.820
And having them in separate packages allows us to bump versions if we need without carrying


00:46:16.820 --> 00:46:21.140
that much and to add new features and to just, you know, it's a smaller subset, it can move


00:46:21.140 --> 00:46:22.140
way faster.


00:46:22.140 --> 00:46:27.620
Yeah, that's a great design philosophy process because there was a conversation like this


00:46:27.620 --> 00:46:33.260
in core Python and requests are like, we have a URL library in Python, but requests seems


00:46:33.260 --> 00:46:34.260
to be the default.


00:46:34.260 --> 00:46:37.100
We should move it in and be like, Whoa, Whoa, Whoa, you're going to make us ship requests


00:46:37.100 --> 00:46:38.100
once a year.


00:46:38.100 --> 00:46:39.100
We don't want to do that.


00:46:39.100 --> 00:46:41.300
This is not like, this is changing fast and it needs to be more adaptive.


00:46:41.300 --> 00:46:43.500
And that sounds like a similar deal here.


00:46:43.500 --> 00:46:44.500
Excellent.


00:46:44.500 --> 00:46:45.980
Let's hit on some more of the new things.


00:46:45.980 --> 00:46:51.220
So we've got one of the things that's new is cell toolbars.


00:46:51.220 --> 00:46:54.820
There's like when I'm editing a cell within the little cell, there's a toolbar with some


00:46:54.820 --> 00:46:55.820
new features.


00:46:55.820 --> 00:46:56.820
Anyone want to talk about that?


00:46:56.820 --> 00:46:58.460
Yeah, that's exactly what you said.


00:46:58.460 --> 00:47:05.140
One question often asked by extension authors is, okay, I want to do a certain thing to


00:47:05.140 --> 00:47:07.140
a specific kind of cell, right?


00:47:07.140 --> 00:47:11.220
Like I want to somehow pull out this cell and do something extra with it.


00:47:11.220 --> 00:47:12.220
Where do I put that button?


00:47:12.220 --> 00:47:14.300
Or, you know, it's the answer to that question.


00:47:14.300 --> 00:47:17.580
But really, all of the things that you can do were there before.


00:47:17.580 --> 00:47:23.220
It's just meant to give users a discoverable way to learn maybe some capabilities they


00:47:23.220 --> 00:47:27.580
didn't know, or maybe even hover over the button and learn a new keyboard shortcut or


00:47:27.580 --> 00:47:28.580
something.


00:47:28.580 --> 00:47:30.460
It's one of those quality of life features.


00:47:30.460 --> 00:47:32.340
It's not like revolutionary.


00:47:32.340 --> 00:47:35.780
It's more like just making this thing slightly more ergonomic.


00:47:35.780 --> 00:47:39.500
Yeah, I was thinking when I saw that, I was thinking of, you know, the biologists who


00:47:39.500 --> 00:47:45.740
is doing their first semester of a class where they had to use Jupyter notebooks for their


00:47:45.740 --> 00:47:51.200
work and they're like, how do I, you just seeing those buttons there for the first month


00:47:51.200 --> 00:47:52.700
of working with it is helpful.


00:47:52.700 --> 00:47:55.940
And as you point out, you learn the hotkeys and like I press B, I don't go over here with


00:47:55.940 --> 00:47:57.740
the mouse and those kinds of things.


00:47:57.740 --> 00:48:00.180
But still, I think it's a nice one.


00:48:00.180 --> 00:48:04.540
Let's see what else that I want to give a shout out to that we haven't done yet.


00:48:04.540 --> 00:48:07.940
Oh, collapsing based on markdown headers.


00:48:07.940 --> 00:48:13.580
That's kind of interesting that you can organize your document in a way to kind of expose parts


00:48:13.580 --> 00:48:17.620
or make it more of a report or more of a coding environment and these kinds of things.


00:48:17.620 --> 00:48:19.140
Who wants to introduce that feature?


00:48:19.140 --> 00:48:24.620
The idea was to, especially when you have some document that can be long, like from


00:48:24.620 --> 00:48:27.300
education that has lots of text and stuff like that.


00:48:27.300 --> 00:48:35.300
It tells the student, for example, to be able to focus or to scroll artificially, let's


00:48:35.300 --> 00:48:38.180
say to the right place more faster.


00:48:38.180 --> 00:48:40.740
So that's one of those nice features.


00:48:40.740 --> 00:48:46.420
And I think it's something we're so now we are used to because lots of classical office


00:48:46.420 --> 00:48:49.060
text editor have that kind of ability.


00:48:49.060 --> 00:48:52.100
So it was a nice feature to add to in JupyterLab.


00:48:52.100 --> 00:48:57.180
Yeah, kind of related and it's probably going to sound really boring, but it actually is


00:48:57.180 --> 00:48:58.180
pretty awesome.


00:48:58.180 --> 00:49:02.220
I think is the table of contents where it looks like it's showing the table of contents,


00:49:02.220 --> 00:49:06.900
but as it's, if you say run all cells, it'll actually show you as you go, it'll sort of


00:49:06.900 --> 00:49:11.200
like go down the table of contents showing where in like some big doc, if the running


00:49:11.200 --> 00:49:15.260
cell is off the screen, what it's working on currently, which is actually pretty excellent,


00:49:15.260 --> 00:49:16.260
I think.


00:49:16.260 --> 00:49:21.420
And then soon you would also report that one side crashed and you should look at it.


00:49:21.420 --> 00:49:26.060
That's coming up in the next version.


00:49:26.060 --> 00:49:28.060
Okay, excellent.


00:49:28.060 --> 00:49:29.200
What else?


00:49:29.200 --> 00:49:32.980
Running kernels in the side panel sounds kind of interesting, like different kernels, you


00:49:32.980 --> 00:49:36.820
can go create notebooks based on them and see all of what is at play.


00:49:36.820 --> 00:49:39.300
I think that's probably worthwhile as well.


00:49:39.300 --> 00:49:40.300
Yeah.


00:49:40.300 --> 00:49:46.140
So this is more something you would care about if you're running JupyterLab than notebooks.


00:49:46.140 --> 00:49:51.380
So it's a sidebar in JupyterLab that just says, in the environment where you're running,


00:49:51.380 --> 00:49:55.060
here are all the kernels that you as a user can see.


00:49:55.060 --> 00:50:02.060
And so you can even have kernels that might not be coming from your Jupyter server at


00:50:02.060 --> 00:50:03.420
some future date, right?


00:50:03.420 --> 00:50:11.020
The idea being, why shouldn't JupyterLab be the place you interact with lots of different


00:50:11.020 --> 00:50:13.700
resources wherever they might be.


00:50:13.700 --> 00:50:20.380
And for the longest time, we thought of a running kernel session, for want of a better


00:50:20.380 --> 00:50:24.500
word, as intricately tied to a file, right?


00:50:24.500 --> 00:50:26.620
The notebook that it's the kernel for.


00:50:26.620 --> 00:50:28.140
But you know, we've been moving away from that.


00:50:28.140 --> 00:50:33.180
I mean, the same way IPython hits a kernel, but isn't really transient, we have code consoles


00:50:33.180 --> 00:50:36.660
inside of JupyterLab that aren't really transient.


00:50:36.660 --> 00:50:40.980
But you can take a notebooks kernel and open a code console on it so that you could do


00:50:40.980 --> 00:50:44.060
some scratch work, but not modify your document.


00:50:44.060 --> 00:50:48.660
So there's just having more insight into what's available in your environment is what that's


00:50:48.660 --> 00:50:49.660
about.


00:50:49.660 --> 00:50:51.020
And again, it's not a revolutionary change.


00:50:51.020 --> 00:50:56.220
It's just one of these sort of ergonomic features to make it a better multi-tool for being in


00:50:56.220 --> 00:51:00.020
an environment that gives you lots of different kernels to play with.


00:51:00.020 --> 00:51:03.660
Like the sort of use case that we'd like to tackle with this is, for example, there are


00:51:03.660 --> 00:51:09.420
lots of desktop applications that embed a Python interpreter, like FreeCAD or Blender.


00:51:09.420 --> 00:51:15.780
But eventually, if these desktop applications advertise a way to connect to these running


00:51:15.780 --> 00:51:20.660
interpreters with a Jupyter kernel API, then they would be listed there.


00:51:20.660 --> 00:51:27.340
So the JupyterLab could almost become a scripting front end to like a running Blender project


00:51:27.340 --> 00:51:28.460
or something like that?


00:51:28.460 --> 00:51:29.460
Exactly.


00:51:29.460 --> 00:51:34.940
So this has already been done actually in Ketwer's Slic3r 3D project.


00:51:34.940 --> 00:51:39.620
So they run a kernel as part of their desktop application.


00:51:39.620 --> 00:51:44.380
And so we want to streamline that use case and make it more easier to do.


00:51:44.380 --> 00:51:49.780
I'm sure the UI for a lot of people's hosted integrated Python is really poor.


00:51:49.780 --> 00:51:54.580
You know, there's probably, maybe you'll get auto indentation if you're lucky, right?


00:51:54.580 --> 00:51:57.460
You know, like it's just, there's not a, there's not a great story.


00:51:57.460 --> 00:52:01.140
So they could just, like the other examples we talked about, build upon what JupyterLab


00:52:01.140 --> 00:52:03.820
is already doing and just add their part.


00:52:03.820 --> 00:52:04.820
Yeah.


00:52:04.820 --> 00:52:07.940
So instead of them having to reinvent everything, they can just reuse Jupyter.


00:52:07.940 --> 00:52:08.940
Yeah.


00:52:08.940 --> 00:52:14.340
And because of the extensions, you could theoretically have like a Blender extension for JupyterLab


00:52:14.340 --> 00:52:15.340
potentially.


00:52:15.340 --> 00:52:16.860
Actually, someone has made one.


00:52:16.860 --> 00:52:23.460
So for the specific use case, I think it's Jan Hendrik Muller has a Blender extension


00:52:23.460 --> 00:52:25.900
to render Blender model in line in the notebook.


00:52:25.900 --> 00:52:27.340
So yeah, check it out.


00:52:27.340 --> 00:52:28.340
Excellent.


00:52:28.340 --> 00:52:30.260
All right, y'all, we're getting very short on time here.


00:52:30.260 --> 00:52:33.340
There's two things I want to touch on really quick before we put a wrap on it.


00:52:33.340 --> 00:52:37.660
These are not exactly like brand new things, but they're very exciting.


00:52:37.660 --> 00:52:39.860
And one is JupyterLite.


00:52:39.860 --> 00:52:41.740
And Jeremy, I know you've done a lot with JupyterLite.


00:52:41.740 --> 00:52:44.380
You want to tell us quick, quick about JupyterLite?


00:52:44.380 --> 00:52:45.600
Yeah, sure.


00:52:45.600 --> 00:52:52.780
The idea behind JupyterLite is to have a full Jupyter distribution that runs in a web browser.


00:52:52.780 --> 00:52:58.540
So normally when you use Jupyter, you need to install JupyterLab package, Python package,


00:52:58.540 --> 00:53:02.340
or the notebook Python package, your machine or on a server.


00:53:02.340 --> 00:53:04.900
But with JupyterLite, you don't need to do this.


00:53:04.900 --> 00:53:09.620
So in the end, what you get is just a set of static files.


00:53:09.620 --> 00:53:12.300
So it's just a bunch of files sitting on this.


00:53:12.300 --> 00:53:16.580
You just have HTML, CSS, JavaScript, and WebAssembly.


00:53:16.580 --> 00:53:23.740
So the main difference compared to a traditional Jupyter installation is the fact that the


00:53:23.740 --> 00:53:27.420
execution, the environment runs in a browser as well.


00:53:27.420 --> 00:53:33.700
So for example, Python, but it could also be other languages that are compiled to WebAssembly.


00:53:33.700 --> 00:53:37.820
All of this is, again, built on the shoulder of Giants.


00:53:37.820 --> 00:53:38.940
Yeah, this is awesome.


00:53:38.940 --> 00:53:39.940
This is so awesome.


00:53:39.940 --> 00:53:45.100
The Jupyter stack is just another way of kind of remixing the whole stack.


00:53:45.100 --> 00:53:52.380
So you take a bit of JupyterLab, a little bit of the Jupyter protocol to interact with


00:53:52.380 --> 00:53:54.380
the kernels.


00:53:54.380 --> 00:53:57.260
And then even the kernels can be reused in some way.


00:53:57.260 --> 00:53:59.940
And then you put that together and make something new.


00:53:59.940 --> 00:54:02.860
So that's the idea behind JupyterLite.


00:54:02.860 --> 00:54:07.620
It was also made possible by the work on the Pyodite.


00:54:07.620 --> 00:54:10.740
So this Python compiled to WebAssembly.


00:54:10.740 --> 00:54:16.300
Since Python is still the most heavily used language in Jupyter, this is kind of what


00:54:16.300 --> 00:54:21.300
people expect when they use Jupyter and JupyterLite to have a Python kernel.


00:54:21.300 --> 00:54:27.420
So if I wanted to say host some interactive code exploration, I want to have something


00:54:27.420 --> 00:54:32.020
that people can play with, maybe I'm an educator and I've got a thousand students, but I don't


00:54:32.020 --> 00:54:36.140
want to set up a server and worry about what people might do to it, but I want to give


00:54:36.140 --> 00:54:37.460
them flexibility, right?


00:54:37.460 --> 00:54:38.580
Like this is really nice.


00:54:38.580 --> 00:54:41.420
You could just put this on a static file server like Netlify.


00:54:41.420 --> 00:54:43.520
Yeah, that's definitely a use case.


00:54:43.520 --> 00:54:46.820
So GitHub pages, Orita docs, it's very simple.


00:54:46.820 --> 00:54:52.380
It's much simpler than having to do sysadmin work to install packages.


00:54:52.380 --> 00:54:56.660
And also for the end user is also simpler because they don't have to install anything.


00:54:56.660 --> 00:54:58.340
Everything is already pre-packaged.


00:54:58.340 --> 00:54:59.340
It's crazy.


00:54:59.340 --> 00:55:01.700
It looks just like JupyterLab, you know, but it's...


00:55:01.700 --> 00:55:04.300
Because it is in the end just JupyterLab.


00:55:04.300 --> 00:55:07.100
And there is also a Notebook 7 running as well.


00:55:07.100 --> 00:55:12.940
So again, like we were talking about earlier, if some users prefer to have this document


00:55:12.940 --> 00:55:16.740
centric interface, then they can also use a Notebook 7 instead.


00:55:16.740 --> 00:55:17.740
That's excellent.


00:55:17.740 --> 00:55:22.180
If you want to give some, give access to some notebook, but not run a server.


00:55:22.180 --> 00:55:24.000
I think there's kind of two options here.


00:55:24.000 --> 00:55:25.000
This is one of them.


00:55:25.000 --> 00:55:30.540
The other is if I'm going to give a notebook file to somebody and say, here, run this on


00:55:30.540 --> 00:55:31.800
your computer.


00:55:31.800 --> 00:55:34.440
There's a lot of assumptions about what happens at that point.


00:55:34.440 --> 00:55:35.440
Do you have Python?


00:55:35.440 --> 00:55:36.440
Do you have the right Python?


00:55:36.440 --> 00:55:40.580
Do you have permissions to install Jupyter and all the other dependencies?


00:55:40.580 --> 00:55:41.580
Can you run a server?


00:55:41.580 --> 00:55:42.740
Do you know what a terminal is?


00:55:42.740 --> 00:55:45.400
Like that's a long conversation.


00:55:45.400 --> 00:55:48.220
And so I think the other thing that's really interesting, I don't know where I pulled it


00:55:48.220 --> 00:55:54.060
up, but yeah, Jupyter desktop is also quite interesting as a quick start to getting in


00:55:54.060 --> 00:55:56.540
a Jupyter Python environment on your system.


00:55:56.540 --> 00:55:57.540
Right?


00:55:57.540 --> 00:55:58.540
Yeah.


00:55:58.540 --> 00:56:03.660
That's some work done by Mehmet and basically it bundled an Electron.


00:56:03.660 --> 00:56:06.940
So it's a web browser that's packaged with JupyterLab.


00:56:06.940 --> 00:56:11.940
And it's very powerful because now it can come with its own Python, but you can also


00:56:11.940 --> 00:56:16.140
use the Python that you have on your computer.


00:56:16.140 --> 00:56:23.180
And yeah, that's really a nice way for distributing and easing the installation for the end user,


00:56:23.180 --> 00:56:28.500
especially on non-friendly operating system, let's call it like that.


00:56:28.500 --> 00:56:29.660
Sure.


00:56:29.660 --> 00:56:32.180
Or people who are not familiar with it.


00:56:32.180 --> 00:56:35.780
Like, yeah, I mean, you've got a Mac.


00:56:35.780 --> 00:56:39.420
Well, there is a macOS ARM and 64 version.


00:56:39.420 --> 00:56:41.060
There's a Debian and Fedora.


00:56:41.060 --> 00:56:43.420
There's a Windows EXE like that's...


00:56:43.420 --> 00:56:49.180
No, it's really solved the problem of I've never used the command line, but I know lots


00:56:49.180 --> 00:56:50.180
of math.


00:56:50.180 --> 00:56:51.180
Right?


00:56:51.180 --> 00:56:52.180
So...


00:56:52.180 --> 00:56:53.180
Yes, exactly.


00:56:53.180 --> 00:56:56.580
But when I run MATLAB, I just click the MATLAB icon and then I get that shell.


00:56:56.580 --> 00:56:59.940
What is, why can't I have permissions to install Jupyter?


00:56:59.940 --> 00:57:00.940
It says I don't have...


00:57:00.940 --> 00:57:01.940
No, I get it.


00:57:01.940 --> 00:57:04.700
That whole frustration side could go away, I think.


00:57:04.700 --> 00:57:05.700
This is interesting.


00:57:05.700 --> 00:57:11.620
But I mean, this is a harder problem than one might imagine just because of how many


00:57:11.620 --> 00:57:15.020
packages there are in the ecosystem, what things you might be using.


00:57:15.020 --> 00:57:18.020
So JupyterLab desktop is pretty clever.


00:57:18.020 --> 00:57:24.020
It can also detect if you have Conda or Mamba installed and use those environments.


00:57:24.020 --> 00:57:27.500
It can use a running server.


00:57:27.500 --> 00:57:30.580
So it shifts with the newest version of JupyterLab, right?


00:57:30.580 --> 00:57:34.900
But it could also connect to a server that's serving a different version of JupyterLab


00:57:34.900 --> 00:57:35.900
and give you that.


00:57:35.900 --> 00:57:38.500
It can be a client to different JupyterLabs is what I mean.


00:57:38.500 --> 00:57:44.180
One time, just to see if it would work, I ran Jupyter Notebook and Lab and Desktop with


00:57:44.180 --> 00:57:47.060
real-time collaboration and it turns out you could do that.


00:57:47.060 --> 00:57:51.900
So it really is like first-class JupyterLab and it's very flexible and it tries to integrate


00:57:51.900 --> 00:57:52.900
with what you've got.


00:57:52.900 --> 00:57:55.540
If you've got nothing, it brings what it needs.


00:57:55.540 --> 00:57:58.220
If you've got Conda set up, it finds stuff there.


00:57:58.220 --> 00:58:00.100
If you've got Mamba set up, it finds stuff there.


00:58:00.100 --> 00:58:06.980
So it basically tries to be exactly what that first user experience you would want is.


00:58:06.980 --> 00:58:09.260
You go, you download, you double-click a file.


00:58:09.260 --> 00:58:12.600
The only thing that's missing is you have to go to GitHub to get this.


00:58:12.600 --> 00:58:15.460
We should probably put it in an easier place for you to find.


00:58:15.460 --> 00:58:16.460
Yeah, possibly.


00:58:16.460 --> 00:58:19.340
Like maybe in the various stores.


00:58:19.340 --> 00:58:20.340
I don't know.


00:58:20.340 --> 00:58:21.340
That's such a hassle.


00:58:21.340 --> 00:58:22.740
Well, no, I just mean go to jupyter.org.


00:58:22.740 --> 00:58:24.980
I just said a URL.


00:58:24.980 --> 00:58:27.860
Sadly, it's not going to work for you, but maybe we should do that.


00:58:27.860 --> 00:58:28.860
Yes, exactly.


00:58:28.860 --> 00:58:30.740
That would be a pretty easy thing to do, actually.


00:58:30.740 --> 00:58:34.940
Just detect the OS and highlight that or have that all drop down and choose another OS,


00:58:34.940 --> 00:58:35.940
right?


00:58:35.940 --> 00:58:36.940
See all downloads.


00:58:36.940 --> 00:58:41.180
I think these two options are going to really make it possible to reach the next 10 million


00:58:41.180 --> 00:58:42.180
users of Jupyter.


00:58:42.180 --> 00:58:48.100
Like, especially JupyterLite in terms of scalability is unmatched at the moment.


00:58:48.100 --> 00:58:55.020
There is a deployment of an in-browser Jupyter flavor in use at the moment by the French


00:58:55.020 --> 00:58:56.460
high school system.


00:58:56.460 --> 00:59:00.020
They started with the Paris area and now they enabled all the school districts there.


00:59:00.020 --> 00:59:06.780
There is over half a million users on this deployment, 200,000 sessions per week.


00:59:06.780 --> 00:59:09.580
And it's also one single virtual machine.


00:59:09.580 --> 00:59:15.980
And if they were trying to do this with a one Docker image per user session, it wouldn't


00:59:15.980 --> 00:59:16.980
fly.


00:59:16.980 --> 00:59:19.500
They'd need a massive IT team to pull that off.


00:59:19.500 --> 00:59:20.500
Exactly.


00:59:20.500 --> 00:59:24.300
And France is not home to hyperscaler cloud providers.


00:59:24.300 --> 00:59:32.580
So we'd need to host that Azure or Alibaba or Google, and that would be an enormous cost.


00:59:32.580 --> 00:59:35.020
And this is incredibly cheap.


00:59:35.020 --> 00:59:38.140
There are some limitations to WebAssembly.


00:59:38.140 --> 00:59:43.420
And I mean, for the sort of use cases, I know what a high schooler is going to do in a notebook,


00:59:43.420 --> 00:59:47.860
like learning how to write for loops or computing a greatest common denominator.


00:59:47.860 --> 00:59:50.260
This is more than enough.


00:59:50.260 --> 00:59:53.180
The complexity of it is lesser than rendering the UI.


00:59:53.180 --> 00:59:55.340
So yeah, I think you're absolutely right.


00:59:55.340 --> 00:59:58.740
That's why I put them both side by side, the JupyterLite and the Jupyter desktop app.


00:59:58.740 --> 01:00:02.260
I think they kind of address similar audience, but in a different way.


01:00:02.260 --> 01:00:03.860
Check this out, by the way.


01:00:03.860 --> 01:00:06.140
This probably won't come through very well.


01:00:06.140 --> 01:00:12.900
This is my iPad and I've got JupyterLite working just the same on my browser there as I did,


01:00:12.900 --> 01:00:14.420
or it'd be a Chromebook or whatever.


01:00:14.420 --> 01:00:15.420
Right.


01:00:15.420 --> 01:00:16.420
Like it really reaches a big audience.


01:00:16.420 --> 01:00:17.420
Yeah.


01:00:17.420 --> 01:00:18.940
I mean, modern browsers now can all handle it.


01:00:18.940 --> 01:00:21.500
It's not the bad old days, at least on that front.


01:00:21.500 --> 01:00:26.820
There will be a lot of really exciting things that happen inside browsers that will surprise


01:00:26.820 --> 01:00:29.780
anyone who was using this era of the web.


01:00:29.780 --> 01:00:31.900
Like we're about to see crazy things.


01:00:31.900 --> 01:00:33.540
We are about to see crazy things.


01:00:33.540 --> 01:00:34.660
We already see crazy things.


01:00:34.660 --> 01:00:35.820
We'll see more of them.


01:00:35.820 --> 01:00:36.820
That's for sure.


01:00:37.820 --> 01:00:38.820
All right, y'all.


01:00:38.820 --> 01:00:41.020
I think we are out of time, but we are certainly not out of topics.


01:00:41.020 --> 01:00:43.940
We could keep talking for a long time, but we'll close it here.


01:00:43.940 --> 01:00:46.260
I guess final thoughts, call to action.


01:00:46.260 --> 01:00:47.540
People want to check this stuff out.


01:00:47.540 --> 01:00:52.940
Maybe they want to upgrade from an older version, either JupyterLab 4 or Jupyter Notebook 7.


01:00:52.940 --> 01:00:53.940
What do you say?


01:00:53.940 --> 01:00:54.940
Pip install Notebook.


01:00:54.940 --> 01:00:58.940
Pip install JupyterLab and have fun.


01:00:58.940 --> 01:00:59.940
Dash dash upgrade.


01:00:59.940 --> 01:01:00.940
Yes.


01:01:00.940 --> 01:01:01.940
Good point.


01:01:01.940 --> 01:01:02.940
I guess you already got it.


01:01:02.940 --> 01:01:03.940
Pull request welcome.


01:01:04.940 --> 01:01:05.940
Awesome.


01:01:05.940 --> 01:01:06.940
Yeah.


01:01:06.940 --> 01:01:10.540
So it's a huge project with lots of people involved.


01:01:10.540 --> 01:01:12.180
Frederic, final thoughts.


01:01:12.180 --> 01:01:15.460
That's a very fun project to work on too.


01:01:15.460 --> 01:01:20.740
So if people are willing to contribute, just come and contribute to it.


01:01:20.740 --> 01:01:26.100
There's plenty of spaces as we have just touched some of them here and we are very happy to


01:01:26.100 --> 01:01:31.980
have new contributors and help people learn the ecosystem to try to contribute.


01:01:31.980 --> 01:01:34.300
And there is no small contribution.


01:01:34.300 --> 01:01:35.900
There is no small contribution.


01:01:35.900 --> 01:01:37.460
Everybody is welcome.


01:01:37.460 --> 01:01:38.460
Yeah.


01:01:39.460 --> 01:01:41.140
Somebody could set up the download page for Jupyter Desktop.


01:01:41.140 --> 01:01:42.140
Exactly.


01:01:42.140 --> 01:01:43.140
Absolutely.


01:01:43.140 --> 01:01:44.140
Yeah.


01:01:44.140 --> 01:01:46.340
Jeremy, you get the final, final word.


01:01:46.340 --> 01:01:50.020
Yeah, that was what I was going to say a little bit as well.


01:01:50.020 --> 01:01:54.300
The Jupyter community is very welcoming, so you can contribute in many different ways.


01:01:54.300 --> 01:01:59.660
It doesn't have to be about technical details or code only.


01:01:59.660 --> 01:02:05.260
Even just putting a talk out there for support or going to JupyterCon and sharing your use


01:02:05.260 --> 01:02:09.980
cases is already very valuable to the community and also to the developers because they can


01:02:09.980 --> 01:02:14.340
learn about how people use the tools, get a very valuable feedback.


01:02:14.340 --> 01:02:20.180
So that'll be your one call to action is don't hesitate to get involved.


01:02:20.180 --> 01:02:25.020
And if you think there is room to improve, for sure, as I was saying before, PRs are


01:02:25.020 --> 01:02:27.620
welcome as we say often.


01:02:27.620 --> 01:02:35.020
And yeah, check out the latest update on the JupyterLite because there is going to be exciting


01:02:35.020 --> 01:02:39.300
new updates to the JupyterLab 4 and the Book 7 coming in a couple of days.


01:02:39.300 --> 01:02:44.460
So I think maybe by the time this podcast is released, it will probably be out already.


01:02:44.460 --> 01:02:49.700
And also exciting developments when it comes to real-time collaboration in JupyterLite,


01:02:49.700 --> 01:02:52.500
JupyterLab Desktop, JupyterLab together.


01:02:52.500 --> 01:02:53.500
Yeah, very exciting.


01:02:53.500 --> 01:02:56.460
A lot of things are already great here that we talked about.


01:02:56.460 --> 01:02:57.700
These are some big changes.


01:02:57.700 --> 01:03:01.260
So thank you all for being on the show and sharing what you and everyone else has been


01:03:01.260 --> 01:03:02.260
up to.


01:03:02.260 --> 01:03:03.260
Thank you.


01:03:03.260 --> 01:03:04.260
Thanks very much.


01:03:04.260 --> 01:03:05.260
Thank you.


01:03:05.260 --> 01:03:06.260
Yeah, thank you.


01:03:06.260 --> 01:03:07.260
Bye.


01:03:07.260 --> 01:03:08.260
This has been another episode of Talk Python to Me.


01:03:08.260 --> 01:03:10.140
Thank you to our sponsors.


01:03:10.140 --> 01:03:11.520
Be sure to check out what they're offering.


01:03:11.520 --> 01:03:15.540
It really helps support the show.


01:03:15.540 --> 01:03:18.340
Developers and data scientists are the new high-value targets.


01:03:18.340 --> 01:03:19.340
That's you.


01:03:19.340 --> 01:03:22.420
And yet this group remains severely underprotected.


01:03:22.420 --> 01:03:25.520
Phylum detects, reports, and blocks malicious packages.


01:03:25.520 --> 01:03:32.160
Get their research and join their community at talkpython.fm/phylum-research.


01:03:32.160 --> 01:03:33.160
Python tutor.


01:03:33.160 --> 01:03:38.020
Visualize your Python code step-by-step to understand just what's happening with your


01:03:38.020 --> 01:03:39.020
code.


01:03:39.020 --> 01:03:42.900
Try it for free and anonymously at talkpython.fm/python-tutor.


01:03:42.900 --> 01:03:46.980
Want to level up your Python?


01:03:46.980 --> 01:03:51.060
We have one of the largest catalogs of Python video courses over at Talk Python.


01:03:51.060 --> 01:03:56.160
Our content ranges from true beginners to deeply advanced topics like memory and async.


01:03:56.160 --> 01:03:58.860
And best of all, there's not a subscription in sight.


01:03:58.860 --> 01:04:01.980
Check it out for yourself at training.talkpython.fm.


01:04:01.980 --> 01:04:03.740
Be sure to subscribe to the show.


01:04:03.740 --> 01:04:06.600
Open your favorite podcast app and search for Python.


01:04:06.600 --> 01:04:07.960
We should be right at the top.


01:04:07.960 --> 01:04:13.060
You can also find the iTunes feed at /itunes, the Google Play feed at slash Play,


01:04:13.060 --> 01:04:17.540
and the Direct RSS feed at /rss on talkpython.fm.


01:04:17.540 --> 01:04:20.100
We're live streaming most of our recordings these days.


01:04:20.100 --> 01:04:23.680
If you want to be part of the show and have your comments featured on the air, be sure


01:04:23.680 --> 01:04:28.620
to subscribe to our YouTube channel at talkpython.fm/youtube.


01:04:28.620 --> 01:04:29.940
This is your host, Michael Kennedy.


01:04:29.940 --> 01:04:31.060
Thanks so much for listening.


01:04:31.060 --> 01:04:32.300
I really appreciate it.


01:04:32.300 --> 01:04:34.060
Now get out there and write some Python code.


01:04:34.060 --> 01:04:47.100
Thanks for watching.


01:04:47.100 --> 01:04:49.100
Bye.


01:04:51.100 --> 01:04:53.160
you


01:04:53.160 --> 01:04:58.160
because that's what we're doing.

