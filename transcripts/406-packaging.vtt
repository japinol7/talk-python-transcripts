WEBVTT
00:00:00.000 --> 00:00:05.640
The great power of Python is it's over 400,000 packages on PyPI to serve as building blocks


00:00:05.640 --> 00:00:06.640
for your app.


00:00:06.640 --> 00:00:11.560
How do you get those needed packages on your dev machine and manage them within your project?


00:00:11.560 --> 00:00:13.800
What about production and QA servers?


00:00:13.800 --> 00:00:18.760
I don't even know where to start if you're shipping built software to non-developer end


00:00:18.760 --> 00:00:19.760
users.


00:00:19.760 --> 00:00:23.020
There are many variations on how this works today, and where we should go from here has


00:00:23.020 --> 00:00:25.380
been a hot topic of discussion.


00:00:25.380 --> 00:00:27.560
So today, that's the topic of Talk Python.


00:00:27.560 --> 00:00:34.000
I have a great panel of guests, Steve Dower, Pradyan Geddam, Ofek Lev, and Paul Moore.


00:00:34.000 --> 00:00:39.280
This is Talk Python to Me, episode 406, recorded February 21st, 2023.


00:00:39.280 --> 00:00:55.640
Welcome to Talk Python to Me, a weekly podcast on Python.


00:00:55.640 --> 00:00:57.500
This is your host, Michael Kennedy.


00:00:57.500 --> 00:01:02.400
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython,


00:01:02.400 --> 00:01:04.680
both on fosstodon.org.


00:01:04.680 --> 00:01:08.560
Be careful with impersonating accounts on other instances, there are many.


00:01:08.560 --> 00:01:14.040
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.


00:01:14.040 --> 00:01:17.560
We've started streaming most of our episodes live on YouTube.


00:01:17.560 --> 00:01:23.660
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be


00:01:23.660 --> 00:01:24.720
part of that episode.


00:01:24.720 --> 00:01:28.520
- This episode is brought to you by Cox Automotive.


00:01:28.520 --> 00:01:31.000
Use your technical skills to transform the way


00:01:31.000 --> 00:01:33.320
the world buys, sells, and owns cars


00:01:33.320 --> 00:01:36.760
at talkpython.fm/cox and by Sentry.


00:01:36.760 --> 00:01:38.360
Don't let those errors go unnoticed.


00:01:38.360 --> 00:01:39.520
Use Sentry.


00:01:39.520 --> 00:01:42.640
Get started at talkpython.fm/sentry.


00:01:42.640 --> 00:01:45.880
Steve, Paul, Ofek, and Pradyan,


00:01:45.880 --> 00:01:47.760
welcome all to Talk Python to Me.


00:01:47.760 --> 00:01:48.600
Happy to have you here.


00:01:48.600 --> 00:01:49.420
- Thanks for having us.


00:01:49.420 --> 00:01:50.260
- Yeah, you bet.


00:01:50.260 --> 00:01:52.600
New for some of you, welcome back for some others.


00:01:52.600 --> 00:01:54.400
So either way, it's still great.


00:01:54.400 --> 00:01:57.440
Let's just go around the video square here


00:01:57.440 --> 00:02:00.120
and have you all just do a quick introduction.


00:02:00.120 --> 00:02:02.120
I know, like I said, some of you have been here before,


00:02:02.120 --> 00:02:02.960
but it may have been a while.


00:02:02.960 --> 00:02:04.120
So Steve, you wanna kick us off?


00:02:04.120 --> 00:02:06.700
- My name's Steve Dower, Zuber on Twitter


00:02:06.700 --> 00:02:07.960
and GitHub in various places,


00:02:07.960 --> 00:02:09.480
and CPython core developer,


00:02:09.480 --> 00:02:12.360
and I actually got involved in Python in the first place


00:02:12.360 --> 00:02:13.520
to help with packaging.


00:02:13.520 --> 00:02:16.520
And while I'm not kind of officially closely involved


00:02:16.520 --> 00:02:19.880
with packaging as much now, I still help contribute.


00:02:19.880 --> 00:02:20.720
- Yeah, awesome.


00:02:20.720 --> 00:02:23.720
And you're also pretty notable for helping step up


00:02:23.720 --> 00:02:25.360
Python's game on Windows.


00:02:25.360 --> 00:02:25.720
Yeah.


00:02:25.720 --> 00:02:30.000
Along with some of the others in this panel, actually, we've got a few, few of


00:02:30.000 --> 00:02:33.080
the Windows contributors here, but yeah, that's, that's kind of my focus area.


00:02:33.080 --> 00:02:33.240
Yeah.


00:02:33.240 --> 00:02:33.640
Awesome.


00:02:33.640 --> 00:02:34.960
Paul, welcome.


00:02:34.960 --> 00:02:35.800
Happy to have you here.


00:02:35.800 --> 00:02:37.080
Hi, nice to be here.


00:02:37.080 --> 00:02:38.200
I'd say I'm Paul.


00:02:38.200 --> 00:02:41.880
I'm a core Python developer and a pip maintainer.


00:02:41.880 --> 00:02:44.240
Two things I'm most involved in.


00:02:44.240 --> 00:02:51.240
I'm also for my sins, the PEP delegate for packaging standards, if you like.


00:02:51.240 --> 00:02:58.520
So basically anything that's a PEP around interoperability between packaging tools


00:02:58.520 --> 00:03:03.320
comes to me ultimately for the decision on how it's going.


00:03:03.320 --> 00:03:06.040
I've been around in packaging for years now, so


00:03:06.040 --> 00:03:10.440
got quite a lot of the history behind me, which is also useful in this type of discussion.


00:03:10.440 --> 00:03:13.800
Yeah, absolutely. Very much involved with pip.


00:03:13.800 --> 00:03:18.920
And that's at the heart of this, right? That's probably the earliest tool there.


00:03:18.920 --> 00:03:20.520
- The venerable one. - Ulfsek.


00:03:20.520 --> 00:03:21.520
- Yeah, welcome. - Hey, yeah.


00:03:21.520 --> 00:03:25.020
I'm the primary maintainer of Hatch,


00:03:25.020 --> 00:03:27.120
which has been around for a few years,


00:03:27.120 --> 00:03:30.120
but more recently I rewrote it from scratch


00:03:30.120 --> 00:03:32.820
to better satisfy kind of what I wanted


00:03:32.820 --> 00:03:36.420
and what more users wanted the UX to look like.


00:03:36.420 --> 00:03:39.120
It comes with a build backend Hatchling too,


00:03:39.120 --> 00:03:41.220
that is also a bit new.


00:03:41.220 --> 00:03:44.720
So yeah, my primary focus is the user experience,


00:03:44.720 --> 00:03:49.840
making things as easy and less prone to errors as possible


00:03:49.840 --> 00:03:52.400
with perspective and shape and stuff like that.


00:03:52.400 --> 00:03:58.000
Excellent. Yeah, so Hatch is in the general category of these higher level tools


00:03:58.000 --> 00:04:00.800
that work on top of the lower level Python ones


00:04:00.800 --> 00:04:03.680
to provide more consistent workflows for doing things.


00:04:03.680 --> 00:04:06.560
And that's kind of the heart of this discussion, honestly,


00:04:06.560 --> 00:04:08.640
is like, what should those workflows be?


00:04:08.640 --> 00:04:11.040
What tools should be responsible for it? And so on.


00:04:11.040 --> 00:04:14.080
We're not quite there yet, because Prajyan still has to introduce himself.


00:04:14.080 --> 00:04:16.240
- Indeed. Hi, I'm Prabhu.


00:04:16.240 --> 00:04:19.740
I am a maintainer on Pip, Flit,


00:04:19.740 --> 00:04:22.020
and a few more Python packaging stuff.


00:04:22.020 --> 00:04:24.320
I'm also the maintainer of Domo,


00:04:24.320 --> 00:04:27.580
as well as, well, I guess I'm the new


00:04:27.580 --> 00:04:31.920
CPython co-developer, as of, so yeah, that's me.


00:04:31.920 --> 00:04:33.960
- Yeah, welcome. You're doing a lot of cool stuff.


00:04:33.960 --> 00:04:37.360
So we're all here together because,


00:04:37.360 --> 00:04:40.340
let me pull this up my screen really quick,


00:04:40.340 --> 00:04:44.300
Because of this discussion over on discuss.python.org,


00:04:44.300 --> 00:04:49.840
it's multi-part, which is notable for how long just a part of it is,


00:04:49.840 --> 00:04:52.300
Python packaging strategy discussion.


00:04:52.300 --> 00:04:54.300
And part one, if you scroll down just a little bit,


00:04:54.300 --> 00:04:59.840
it says that there are 272 replies and 150 minutes of reading time.


00:04:59.840 --> 00:05:02.800
And that's before we get to the related blogs, the GitHub issues,


00:05:02.800 --> 00:05:07.000
part two, the survey results, all of these things.


00:05:07.000 --> 00:05:12.160
So this is quite a discussion and a lot of people seem to care a lot about it.


00:05:12.160 --> 00:05:13.840
I don't think you've brought your screen up that for us, Michael.


00:05:13.840 --> 00:05:14.480
Oh, I have not.


00:05:14.480 --> 00:05:14.760
Have I?


00:05:14.760 --> 00:05:15.280
There we go.


00:05:15.280 --> 00:05:15.820
Thank you.


00:05:15.820 --> 00:05:16.360
Yeah.


00:05:16.360 --> 00:05:21.200
So let's start the discussion with maybe a summary of what's going on here.


00:05:21.200 --> 00:05:25.160
She was posted by Shemika who unfortunately couldn't be here today,


00:05:25.160 --> 00:05:26.700
was going to be here, but can't make it.


00:05:26.700 --> 00:05:30.880
So I'm going to have to let whoever feels most qualified to jump in on this.


00:05:30.880 --> 00:05:34.040
Who wants to sort of set the stage for what this discussion was about?


00:05:34.040 --> 00:05:35.920
Paul, you look like you might be willing to fight.


00:05:35.920 --> 00:05:40.160
Paul looked like everybody else was backing off.


00:05:40.160 --> 00:05:45.460
Yeah, one of the things that we've wanted to do for some time now


00:05:45.460 --> 00:05:53.100
is sort of get a better feel for how the user community views packaging.


00:05:53.100 --> 00:06:00.340
Shameka joined the packaging community as the project manager for the packaging effort as a whole.


00:06:00.340 --> 00:06:05.820
And one of the things she initiated in that was getting a survey done


00:06:05.820 --> 00:06:09.100
to effectively try and answer those questions.


00:06:09.100 --> 00:06:13.260
What do the users think of the packaging ecosystem?


00:06:13.260 --> 00:06:15.500
What do they think of how things are going?


00:06:15.500 --> 00:06:17.740
What do they want from Python packaging?


00:06:17.740 --> 00:06:21.700
There was a fair bit, there was a, I don't honestly know


00:06:21.700 --> 00:06:26.260
how big the response was, but it was quite, we got quite a decent response from it,


00:06:26.260 --> 00:06:30.740
which basically got summarized up in a couple of feedback documents.


00:06:30.740 --> 00:06:37.540
Yeah, I think here we go. There's a PDF that I'll link to that has the actual survey responses.


00:06:37.540 --> 00:06:43.700
Yeah, and it turns out that putting a banner on PyPI.org seems to be the winner in terms of


00:06:43.700 --> 00:06:44.980
reaching out to people who care.


00:06:44.980 --> 00:06:53.540
We have almost 8.7k responses and 7.9k out of those are from PyPI. So that's more than 90%.


00:06:53.540 --> 00:06:54.980
Yeah, absolutely.


00:06:54.980 --> 00:07:01.540
Basically from that, the discussions on Python discourse are following on from that,


00:07:01.540 --> 00:07:06.500
taking a number of the messages that came out of the survey


00:07:06.500 --> 00:07:12.820
and essentially getting everybody in the packaging community together to talk about,


00:07:12.820 --> 00:07:16.820
you know, what does this mean? What do we expect we can do about this?


00:07:16.820 --> 00:07:21.300
How do we address the comments that have been made? Where do we take it?


00:07:21.300 --> 00:07:27.460
There are a number of discussions planned. I don't know how many.


00:07:27.460 --> 00:07:32.020
The first one, Pradeon's either waving at me or suggesting it's five.


00:07:32.020 --> 00:07:39.380
The first one is the one that we've had already, the sort of main strategy.


00:07:39.380 --> 00:07:42.900
There are a number of follow-ups to that, one of which has just started,


00:07:42.900 --> 00:07:45.620
but most of which haven't taken place yet.


00:07:45.620 --> 00:07:49.140
So where we're at now, the initial discussion,


00:07:49.140 --> 00:07:52.340
which was the thread that you showed previously,


00:07:52.340 --> 00:07:56.420
that went on for about a month on discourse,


00:07:56.420 --> 00:08:00.100
generated quite a lot of discussion,


00:08:00.100 --> 00:08:05.140
and we now need to sort of digest that and understand where that leaves us


00:08:05.140 --> 00:08:07.620
and what actions we can take from it,


00:08:07.620 --> 00:08:09.220
what conclusions we can draw,


00:08:09.220 --> 00:08:13.540
how we pull that together into something that we can actually do something with, I guess.


00:08:13.540 --> 00:08:17.060
Yeah, and I think it's worth adding that this is not kind of an unusual thing


00:08:17.060 --> 00:08:25.220
for our packaging participants. We have quite a significant history of a few comments kicking off


00:08:25.220 --> 00:08:32.660
a huge discussion that flows and fragments and drags on for hundreds of posts. And this one


00:08:32.660 --> 00:08:37.300
actually feels a bit different. This one feels like there's a real sort of commitment from


00:08:37.300 --> 00:08:40.420
certainly some of the main players who are involved in it. If you look at the regular


00:08:40.420 --> 00:08:44.420
posters in that other thread, then you'll see a lot of us up near the top, but there's also a


00:08:44.420 --> 00:08:49.460
a number of other people involved who are, it feels more serious this time. It feels like we


00:08:49.460 --> 00:08:54.980
really not just feeling or recognizing pain that we've always kind of seen and known is out there


00:08:54.980 --> 00:08:59.220
for a lot of people using it, but it feels like we're kind of at a place where something has to


00:08:59.220 --> 00:09:04.020
give. And I feel like we're getting closer and closer to being able to change whatever it is


00:09:04.020 --> 00:09:07.940
that needs to change to make that give. So I think it's an exciting set of discussions,


00:09:08.500 --> 00:09:14.260
Though it is long and meandering and drawn out and occasionally a little frustrating.


00:09:14.260 --> 00:09:20.340
I've taken a few breaks during it just to cool off and I suspect some of the others in here


00:09:20.340 --> 00:09:25.700
have as well. But a lot of it's nothing new. It's nothing that we haven't heard or come across


00:09:25.700 --> 00:09:31.380
before. Having it laid out the way the survey did gave us a real kind of strong starting point.


00:09:31.380 --> 00:09:36.100
And there's just a lot of, honestly, discussion, a lot of things that have to be talked through


00:09:36.660 --> 00:09:40.660
because we're all different people with different backgrounds, different areas,


00:09:40.660 --> 00:09:47.060
and trying to get aligned well enough to then align the random group of volunteers who make up


00:09:47.060 --> 00:09:51.540
this group. It's like we jokingly call it a packaging authority, but that's the biggest


00:09:51.540 --> 00:09:56.900
joke in the world. And so to actually align the volunteers working on independent projects


00:09:56.900 --> 00:10:02.260
takes a huge, you know, we've got to build up that momentum and that alignment before we can


00:10:02.260 --> 00:10:04.800
can even start changing projects.


00:10:04.800 --> 00:10:05.640
Yeah, there it is.


00:10:05.640 --> 00:10:07.140
- There's a couple of levels of this, right?


00:10:07.140 --> 00:10:09.760
I mean, as a broad Python community,


00:10:09.760 --> 00:10:12.840
we gotta get enough alignment that people will back it.


00:10:12.840 --> 00:10:15.560
But there's a bunch of people who would have to build


00:10:15.560 --> 00:10:19.560
whatever variant of this you all might pick,


00:10:19.560 --> 00:10:20.720
and you gotta agree on that as well.


00:10:20.720 --> 00:10:23.560
And many of them are working on different tools.


00:10:23.560 --> 00:10:25.880
Prajin mentioned Flit and Pip,


00:10:25.880 --> 00:10:28.520
Ofec is Hatch and Hatchling, Paul is Pip.


00:10:28.520 --> 00:10:31.280
Like, in some sense, the discussion might be,


00:10:31.280 --> 00:10:34.360
well, should pip take on the responsibilities of Flit


00:10:34.360 --> 00:10:37.800
or should it do less and Hatch takes on,


00:10:37.800 --> 00:10:39.760
you know, there's this give and take,


00:10:39.760 --> 00:10:41.920
which I think is gonna be an interesting thing


00:10:41.920 --> 00:10:43.080
to see play out.


00:10:43.080 --> 00:10:47.160
We've had a thousand flowers bloom sort of moment, I think,


00:10:47.160 --> 00:10:48.000
with the packaging,


00:10:48.000 --> 00:10:50.160
we've seen a bunch of different tools come along,


00:10:50.160 --> 00:10:52.640
but that's also led to, I think,


00:10:52.640 --> 00:10:53.640
confusion with people are like,


00:10:53.640 --> 00:10:55.840
well, one blog post said use poetry,


00:10:55.840 --> 00:10:57.480
now this one says use Hatch.


00:10:57.480 --> 00:10:59.000
This other one said, don't use any of them.


00:10:59.000 --> 00:10:59.840
What do I do?


00:10:59.840 --> 00:11:00.960
I'm new, I'm confused.


00:11:00.960 --> 00:11:02.880
- Yeah, well, before we move on,


00:11:02.880 --> 00:11:04.180
just sort of summarizing your thoughts


00:11:04.180 --> 00:11:07.000
of this overall discussion, just kicking it off,


00:11:07.000 --> 00:11:08.480
you know, Ofec and Prajean,


00:11:08.480 --> 00:11:09.960
you haven't got a chance to weigh in.


00:11:09.960 --> 00:11:10.800
Ofec, what do you think?


00:11:10.800 --> 00:11:13.440
- Yeah, I will say, although the main sentiment


00:11:13.440 --> 00:11:16.120
about the takeaway from the survey


00:11:16.120 --> 00:11:18.360
was that people wanted more unification


00:11:18.360 --> 00:11:20.240
and sort of guidance,


00:11:20.240 --> 00:11:23.680
I think the threat itself was not as much about that,


00:11:23.680 --> 00:11:26.160
but just like a myriad of issues.


00:11:26.160 --> 00:11:30.420
So only one of the issues was actually about tools


00:11:30.420 --> 00:11:34.700
like user experience, other people brought up other long standing issues,


00:11:34.700 --> 00:11:39.940
like we want more integration with conda. That's a large topic there. Some


00:11:39.940 --> 00:11:45.020
other people want better support for extension modules and detection of like


00:11:45.020 --> 00:11:51.980
GPU, stuff like that. So there's lots of needs from various communities that


00:11:51.980 --> 00:11:56.700
also have to be worked out. It's not all just about the user experience and


00:11:57.140 --> 00:11:59.300
things like that. Sure. That makes sense.


00:11:59.300 --> 00:12:02.740
Regan, you wrote a huge, great long blog post on this,


00:12:02.740 --> 00:12:05.820
which we're going to get to a little bit, but you know, higher level first.


00:12:05.820 --> 00:12:06.900
It's been productive.


00:12:06.900 --> 00:12:12.540
There, one of the things that Steve gave me the word for is level setting.


00:12:12.540 --> 00:12:17.580
There's a lot of sort of bringing everyone to context on or bringing up to the


00:12:17.580 --> 00:12:22.580
same amount of information and sort of understanding other use cases that you


00:12:22.580 --> 00:12:23.780
don't have yourself,


00:12:23.980 --> 00:12:27.520
even though you're right, that supports that and things like that.


00:12:27.520 --> 00:12:33.780
Having all of this discussion happen has helped bring everyone up to the same page on these things.


00:12:33.780 --> 00:12:36.860
One thing I want to push back on, like Steve just said, which is


00:12:36.860 --> 00:12:42.360
that if the Python packaging authority does not have authority, is probably not true.


00:12:42.360 --> 00:12:47.360
We do have Will here, who gets the authority to decide on things


00:12:47.360 --> 00:12:49.360
directly delegated from the steering council.


00:12:49.360 --> 00:12:52.460
I heard the cats. That's about as far as it goes.


00:12:52.460 --> 00:13:02.360
There is a level of authority involved, but it's limited because we'll get on to the structure of the PIPA, I guess.


00:13:02.360 --> 00:13:11.920
But there's a lot of independent projects, a lot of independent people, and one of the things that this discussion did was bring everybody together and get us


00:13:11.920 --> 00:13:15.120
interacting maybe more than we had done.


00:13:15.120 --> 00:13:20.000
I think historically, it's probably worth also saying that historically,


00:13:20.000 --> 00:13:24.560
packaging started off very much one or two tools that did everything,


00:13:24.560 --> 00:13:26.560
things like disk utils and setup tools.


00:13:26.560 --> 00:13:27.920
They were it.


00:13:27.920 --> 00:13:31.360
And there were all sorts of issues at that time,


00:13:31.360 --> 00:13:35.680
which meant that we consciously tried to take a view


00:13:35.680 --> 00:13:38.800
that we were going to enable diversity,


00:13:38.800 --> 00:13:42.160
allow other tools to get into the mix.


00:13:42.160 --> 00:13:54.520
We started by looking at how we could make alternatives to set up tools work, how we could give people choice there. And from there, it's grown. And we've now got choice in a lot of areas that we never used to have choice in.


00:13:54.520 --> 00:14:05.560
That wasn't an accident. That was a conscious decision that we made to try to give some level of competition, some level of innovation that hadn't been there beforehand.


00:14:05.680 --> 00:14:15.840
One of the things that this discussion has done, well one of the things the survey did, has brought home to us the downside of that is that everybody's confused as heck.


00:14:15.840 --> 00:14:19.520
That nobody knows what to do now because we've just given them a hundred million choices.


00:14:19.520 --> 00:14:21.920
And that's a very fair comment.


00:14:21.920 --> 00:14:28.800
It wasn't the intention, but it was an obvious consequence of that diversity that we promoted.


00:14:28.800 --> 00:14:42.420
Now what we need to do and what we're trying to do on the back of the discussion on the back of what we've learned is trying to pull that back together again we've got all these tools now we want to try and if not exactly unified them


00:14:42.420 --> 00:14:47.820
what's the league give a clear picture of this is how you do things story


00:14:47.740 --> 00:14:58.840
I'm part of the problem with that one of the things that getting everybody talking has done it's made it clear that we do need to work together we can't keep competing because


00:14:58.840 --> 00:15:05.660
the users of the tools i just lost knowing what to do so we need to bring things together but nobody is


00:15:05.580 --> 00:15:16.420
Certainly i don't think this point anybody is saying that we're gonna shut down all the other tools all the people working on them wasted the time that's not the idea at all but we still need to navigate


00:15:16.420 --> 00:15:26.080
how we get more unified approach within the context of we got which is a lot of people working on their own vision of how they are


00:15:25.980 --> 00:15:39.480
serving a subset of the overall group of users like steve said i think it's been really useful getting everybody together and everybody getting each other's perspectives we now need to work out what to do with that.


00:15:39.480 --> 00:15:45.160
This portion of talk python me is brought to you by cox automotive.


00:15:45.540 --> 00:15:47.940
Cox Automotive isn't a car company.


00:15:47.940 --> 00:15:52.020
It's a technology company that's transforming the automotive industry.


00:15:52.020 --> 00:15:56.580
The team at Cox Automotive understands the future of car buying and ownership,


00:15:56.580 --> 00:15:59.540
and they're looking for software developers, data engineers,


00:15:59.540 --> 00:16:03.140
scrum masters, and other experts to help make that happen.


00:16:03.140 --> 00:16:07.380
If you're interested in innovating with brands like Kelly Blue Book,


00:16:07.380 --> 00:16:11.540
Auto Traders, and others, then you should check out Cox Automotive.


00:16:11.540 --> 00:16:15.540
Just visit talkpython.fm/cox to find out more.


00:16:15.540 --> 00:16:19.540
Thank you to Cox Automotive for sponsoring the show.


00:16:19.540 --> 00:16:23.540
One thing that stood out to me from reading the survey, and we can


00:16:23.540 --> 00:16:27.540
poke through some of the interesting questions and responses there.


00:16:27.540 --> 00:16:31.540
I feel like there's two users that almost need two approaches.


00:16:31.540 --> 00:16:35.540
There are people who are creating libraries


00:16:35.540 --> 00:16:39.540
and shipping them to PyPI, and they're core Python


00:16:39.540 --> 00:16:44.120
developer folks, not core developers, but you know, they live in breathe Python


00:16:44.120 --> 00:16:48.220
and they build Python things and, you know, stuff like Pydantic or FastAPI


00:16:48.220 --> 00:16:52.020
and so on, they might need the flexibility and the diversity.


00:16:52.020 --> 00:16:56.360
Sarah, the new grad student in the biology department that needs to get


00:16:56.360 --> 00:17:00.840
pandas to work and she knows that Python is her path forward.


00:17:00.840 --> 00:17:03.880
She shouldn't have to decide whether to use flit or hatch or


00:17:03.880 --> 00:17:06.100
straight pip plus maybe pip tools.


00:17:06.100 --> 00:17:06.780
And right.


00:17:06.780 --> 00:17:08.900
These are two very different use cases.


00:17:09.320 --> 00:17:11.640
and almost like bringing them together to,


00:17:11.640 --> 00:17:14.080
well, what's the best of those two solutions together


00:17:14.080 --> 00:17:16.000
seems almost maybe the wrong,


00:17:16.000 --> 00:17:18.520
you might make both groups unhappy going down that path.


00:17:18.520 --> 00:17:22.080
- And I think if we bring together the current 8,000 tools,


00:17:22.080 --> 00:17:25.000
it's gonna make 7,999 groups unhappy.


00:17:25.000 --> 00:17:27.400
I mean, this is part of the challenge.


00:17:27.400 --> 00:17:29.040
Though I think an interesting thing there,


00:17:29.040 --> 00:17:32.520
and probably about halfway through this mega thread,


00:17:32.520 --> 00:17:34.280
it kind of clicked, at least for me,


00:17:34.280 --> 00:17:36.960
I think some people had mentioned it earlier,


00:17:36.960 --> 00:17:39.840
that there's really two big categories of tools.


00:17:39.840 --> 00:17:42.240
Kind of, as you say, there's the tools for packaging


00:17:42.240 --> 00:17:44.480
and the tools for using packages,


00:17:44.480 --> 00:17:47.160
which includes what seems to be the biggest issue


00:17:47.160 --> 00:17:48.440
is the environment managers.


00:17:48.440 --> 00:17:51.160
It's the virtual environment creation,


00:17:51.160 --> 00:17:53.720
which is kind of half of poetry,


00:17:53.720 --> 00:17:55.880
it's, but not the other half,


00:17:55.880 --> 00:17:58.160
a big part of Hatch, but not the other half.


00:17:58.160 --> 00:17:59.480
It's none of Flit.


00:17:59.480 --> 00:18:01.520
It's none of setup tools.


00:18:01.520 --> 00:18:03.920
It's like, those are purely about building packages.


00:18:03.920 --> 00:18:06.040
And it's on this side, the building packages,


00:18:06.040 --> 00:18:10.720
where we've invested in kind of creating and driving that diversity.


00:18:10.720 --> 00:18:12.680
And I think that's worked really well.


00:18:12.680 --> 00:18:17.920
We've got a range of standards that make them interoperable at the right places


00:18:17.920 --> 00:18:22.840
so that pip can take kind of any of these backends and trigger them correctly.


00:18:22.840 --> 00:18:26.640
Source code written to provide metadata for any of these backends


00:18:26.640 --> 00:18:29.600
can be easily transferred between a lot of them.


00:18:29.600 --> 00:18:31.120
That seems to mostly work.


00:18:31.120 --> 00:18:33.080
And it's a situation where, again, as you say,


00:18:33.080 --> 00:18:37.800
that the deep in Python maintainers have a choice in what backend they want to use.


00:18:37.800 --> 00:18:43.560
And what kind of clicked is people were saying, you know, we want less diversity. And a lot of


00:18:43.560 --> 00:18:47.240
us were going, well, the diversity is in the backend. So if you want less than we have to


00:18:47.240 --> 00:18:51.320
combine the backends. But I think what clicked is that no, that's not what they're wanting,


00:18:51.320 --> 00:18:57.080
because it is the new newcomer to Python who just wants it to work, who's trying to choose between


00:18:57.080 --> 00:19:01.560
all of these environment managers. And especially when you throw condor in there as well, which is


00:19:01.560 --> 00:19:06.020
just so fundamentally different in how it behaves from the ones that kind of rely on


00:19:06.020 --> 00:19:09.900
PyPI directly, that we already have that divide.


00:19:09.900 --> 00:19:13.380
And the diversity has shown up on this side uncontrolled.


00:19:13.380 --> 00:19:19.500
We didn't set out to see Poetry created or see Pipenv created or any of these, but it's


00:19:19.500 --> 00:19:20.500
there.


00:19:20.500 --> 00:19:25.260
And how do we rein in something that has grown up all by itself, completely outside of anything


00:19:25.260 --> 00:19:26.860
that we've ever tried to control?


00:19:26.860 --> 00:19:33.620
One thing that struck me in that discussion was I'm really quite happy with a lot of the,


00:19:33.620 --> 00:19:36.460
like Steve says, the backend tools, all that sort of stuff.


00:19:36.460 --> 00:19:41.540
But it occurred to me that when I'm just writing little hobby programs and things like that


00:19:41.540 --> 00:19:44.580
for myself, I'm with everybody else.


00:19:44.580 --> 00:19:45.940
Packaging is horrible.


00:19:45.940 --> 00:19:50.740
I just want to say, "Start a project, start up a notebook, do something."


00:19:50.740 --> 00:19:53.540
And it's really hard.


00:19:53.540 --> 00:19:57.140
It hadn't occurred to me until we had this discussion


00:19:57.140 --> 00:20:01.380
that that's very much the two sides of the user equation.


00:20:01.380 --> 00:20:04.580
We've really not put as much effort into


00:20:04.580 --> 00:20:09.900
the "just wants to use Python to do their job" side of the user base


00:20:09.900 --> 00:20:13.700
than we should, and tools like Hatch and PDM is another one,


00:20:13.700 --> 00:20:17.540
Poetry is another one, they are addressing that.


00:20:17.540 --> 00:20:20.100
And I actually went off and started exploring them.


00:20:20.100 --> 00:20:21.900
I thought, "Hey, there's cool stuff going on here


00:20:21.980 --> 00:20:25.220
that I really wasn't as conscious of as I could have been.


00:20:25.220 --> 00:20:27.520
So, yeah, absolutely.


00:20:27.520 --> 00:20:30.320
We need to look at that side as well now, I think.


00:20:30.320 --> 00:20:30.720
I agree.


00:20:30.720 --> 00:20:35.920
The Italian behavior we're talking about is like libraries versus applications.


00:20:35.920 --> 00:20:37.580
So as people have mentioned,


00:20:37.580 --> 00:20:40.920
it is very easy now to build the library and test it.


00:20:40.920 --> 00:20:44.080
And that's due in large part to the standards that we made


00:20:44.080 --> 00:20:46.880
to allow diversity for the build back end.


00:20:46.880 --> 00:20:48.280
So that's very good.


00:20:48.280 --> 00:20:50.820
But yeah, it's where the applications are.


00:20:50.820 --> 00:20:52.260
That's like the hard part now.


00:20:52.260 --> 00:20:55.860
And I think at least one of the missing features


00:20:55.860 --> 00:20:58.660
that I think we should devote resources to,


00:20:58.660 --> 00:21:00.700
and I know Brett isn't here,


00:21:00.700 --> 00:21:04.660
but lock files is something that we desperately need.


00:21:04.660 --> 00:21:08.740
And Poetry has their own implementation of lock files


00:21:08.740 --> 00:21:12.020
and dependency resolution, so does PDM,


00:21:12.020 --> 00:21:14.380
but there's nothing like standard for that.


00:21:14.380 --> 00:21:18.060
And that should be the next step, I think, for applications.


00:21:18.060 --> 00:21:21.600
While we're talking about the future and sort of where we are,


00:21:21.600 --> 00:21:24.760
I will point out, part of the reason we're seeing a bunch of this


00:21:24.760 --> 00:21:27.640
is because we've solved some of the harder problems already.


00:21:27.640 --> 00:21:29.400
We are at a point where,


00:21:29.400 --> 00:21:31.940
"Oh, I'm having difficulties installing Pandas


00:21:31.940 --> 00:21:33.640
and figuring out what to work for for that."


00:21:33.640 --> 00:21:35.860
And not, "I can't install Pandas."


00:21:35.860 --> 00:21:36.480
That's a good point.


00:21:36.480 --> 00:21:39.400
Or, "I can't publish Pandas," or whatever.


00:21:39.400 --> 00:21:42.320
So we have been solving the problems as we go.


00:21:42.320 --> 00:21:44.860
It's just, we're going to keep seeing more and more problems,


00:21:44.860 --> 00:21:46.780
especially in a user base this large.


00:21:46.780 --> 00:21:50.880
there's always going to be more interesting and really difficult problems to solve.


00:21:50.880 --> 00:21:56.620
I think a lot of the people who are now just trying to get on with using Python for their day job,


00:21:56.620 --> 00:22:02.820
probably when we were starting the process of moving away from setup tools,


00:22:02.820 --> 00:22:06.260
they didn't even exist. Python wasn't that popular in those days.


00:22:06.260 --> 00:22:11.140
There's a new set of users who are coming along with a new set of problems.


00:22:11.140 --> 00:22:16.140
And if we don't keep our eye on what people are trying to do with Python,


00:22:16.200 --> 00:22:22.040
we'll get left behind, I guess. We won't be relevant. They won't have any solutions for


00:22:22.040 --> 00:22:23.040
what they're trying to do.


00:22:23.040 --> 00:22:27.720
And a lot of them came in because they believed Python was easy, because we've got a reputation


00:22:27.720 --> 00:22:32.120
for being easy. They wouldn't be frustrated if they thought it was going to be impossible


00:22:32.120 --> 00:22:36.360
and then found out that it's impossible. They wouldn't be frustrated. They wouldn't be happy,


00:22:36.360 --> 00:22:39.880
but they'd be satisfied. It's because they've come in expecting this great experience that


00:22:39.880 --> 00:22:44.840
everyone's talking about, and we're just not able to deliver it in enough cases that the


00:22:44.840 --> 00:22:46.040
and frustration comes in.


00:22:46.040 --> 00:22:47.240
And we get that.


00:22:47.240 --> 00:22:49.240
We all get hit by it as well.


00:22:49.240 --> 00:22:52.240
I am quite optimistic about it, though.


00:22:52.240 --> 00:22:54.180
I think one person brought up a good point


00:22:54.180 --> 00:22:56.940
in one of the recent discourse threads


00:22:56.940 --> 00:22:59.880
that despite the hardships with packaging


00:22:59.880 --> 00:23:01.880
and everything we are discussing here,


00:23:01.880 --> 00:23:06.340
Python has gained massively in popularity and usage


00:23:06.340 --> 00:23:08.000
despite all these obstacles.


00:23:08.000 --> 00:23:09.900
So, yeah, I'm pretty optimistic


00:23:09.900 --> 00:23:12.700
that we can satisfy people's needs.


00:23:12.780 --> 00:23:17.180
Yeah, I'm too. I think there's, I think Praty didn't really hit on it. I remember


00:23:17.180 --> 00:23:23.380
long ago that certain things wouldn't install, sorry, you couldn't get this to compile or this other thing wouldn't work right.


00:23:23.380 --> 00:23:27.940
It hadn't really occurred to me explicitly, but I haven't seen those errors for a real long time.


00:23:27.940 --> 00:23:32.900
Yeah, and there's a lot of work that's gone into build backends to make that possible.


00:23:32.900 --> 00:23:38.740
Certainly for Linux users, the huge amount of effort that went into defining the mini Linux standard,


00:23:38.740 --> 00:23:44.820
where which is kind of the base layout of system libraries and where they're expected to be on a


00:23:44.820 --> 00:23:50.180
system so that people can build a binary package for Linux that can assume that those libraries


00:23:50.180 --> 00:23:54.100
are there and distribute those has meant that yeah, a lot of the time when you go to install


00:23:54.100 --> 00:23:59.060
something you'll get already built, already compiled packages that are just ready to go.


00:23:59.060 --> 00:24:06.020
And kind of the problem that that's raised up is we've taken the really obvious problem of


00:24:06.020 --> 00:24:10.820
you don't have a compiled package yet, up to the point where you have a compiled package that is


00:24:10.820 --> 00:24:15.460
subtly incompatible with some other compiled package, which can be really subtle because it


00:24:15.460 --> 00:24:19.780
can be one of those 99% of the times it works fine, and then the other time it just segfaults


00:24:19.780 --> 00:24:24.900
and everything dies. Or it may be subtle data corruption, like there's a million little things


00:24:24.900 --> 00:24:30.100
that can subtly go wrong there, and we're starting to see some of those come up. Certainly, the people


00:24:30.100 --> 00:24:34.500
in the data science side of things saw them come up quicker because they use a lot more of these


00:24:34.500 --> 00:24:37.200
these complex packages and they do interact with each other


00:24:37.200 --> 00:24:40.200
and they do check things like numerical stability.


00:24:40.200 --> 00:24:43.540
A lot of the rest of us don't worry about that kind of stuff most of the time.


00:24:43.540 --> 00:24:45.300
And so like, yeah, this works.


00:24:45.300 --> 00:24:46.440
This works, put it out there.


00:24:46.440 --> 00:24:49.740
Maybe if wheel existed before conda,


00:24:49.740 --> 00:24:53.100
people would have just pushed harder on wheel potentially and conda might not exist.


00:24:53.100 --> 00:24:57.800
Not saying it shouldn't exist, but that might, it might not have been a bad enough problem to make it exist.


00:24:57.800 --> 00:25:01.800
I agree, like conda came into existence because the solutions that were there


00:25:01.800 --> 00:25:03.400
weren't able to satisfy it.


00:25:03.400 --> 00:25:08.040
And it was so far, like just the distance from where we were at that point,


00:25:08.040 --> 00:25:09.880
because at that point, it was like eggs.


00:25:09.880 --> 00:25:11.480
Probably no one watching even remembers eggs.


00:25:11.480 --> 00:25:12.200
I'm sure Paul does.


00:25:12.200 --> 00:25:14.680
At that point, it was effect.


00:25:14.680 --> 00:25:15.400
May as well.


00:25:15.400 --> 00:25:17.320
I'm not sure how long you've been involved, mate.


00:25:17.320 --> 00:25:19.160
But yeah, it was like it was a very different world.


00:25:19.160 --> 00:25:21.640
And the distance to get there just looks so impossible.


00:25:21.640 --> 00:25:25.000
But yeah, if we'd been at wheels, then they may have said, well,


00:25:25.000 --> 00:25:27.400
this little tweak to wheels will make it work for us.


00:25:27.400 --> 00:25:29.160
And who knows where we might have been then?


00:25:29.160 --> 00:25:30.280
It's quite possible.


00:25:30.280 --> 00:25:38.360
I can't judge honestly, but it's quite possible that Conda is where wheels will be in a number of years.


00:25:38.360 --> 00:25:42.360
I think there are fundamental reasons why that might not be the case,


00:25:42.360 --> 00:25:46.120
and we may have to find different ways of dealing with the problems.


00:25:46.120 --> 00:25:53.000
But yeah, these sort of really difficult, really basically not solved technical problems.


00:25:53.000 --> 00:25:57.480
It's not that Python is struggling with something that's easy.


00:25:57.480 --> 00:26:02.000
there are no languages or environments anywhere


00:26:02.000 --> 00:26:04.200
that have really solved these problems.


00:26:04.200 --> 00:26:07.320
So we're trying to find solutions as we go along.


00:26:07.320 --> 00:26:11.000
And I think in spite of what Steve is saying,


00:26:11.000 --> 00:26:14.280
I think having an 80-90% solution


00:26:14.280 --> 00:26:16.120
often is plenty good enough.


00:26:16.120 --> 00:26:19.080
I don't want to say that we should abandon


00:26:19.080 --> 00:26:20.440
the users who really need that,


00:26:20.440 --> 00:26:23.880
because they are on the forefront of things like AI research


00:26:23.880 --> 00:26:25.320
and data science,


00:26:25.320 --> 00:26:30.680
and they're doing incredible work, which they can't do if Python falls apart on them.


00:26:30.680 --> 00:26:34.840
But at the same time, I think we're now in a position where we have to balance


00:26:34.840 --> 00:26:38.680
the general solution with the specialist solution and try and understand that.


00:26:38.680 --> 00:26:41.640
And for a lot of us, certainly for me, that's quite new.


00:26:41.640 --> 00:26:46.120
I'm not entirely comfortable yet with the idea of saying,


00:26:46.120 --> 00:26:48.760
"We need a different solution for this than we have for that."


00:26:48.760 --> 00:26:50.840
It's something we're all getting to grips with, I think.


00:26:50.840 --> 00:26:57.480
One aspect of this is also sort of kind of related to the Conda and Python success aspects of this


00:26:57.480 --> 00:27:04.840
is Python is a famously glue language. So when you're trying to package or use Python,


00:27:04.840 --> 00:27:10.360
you're not just using Python, you're using a whole stack of other languages and text stacks


00:27:10.360 --> 00:27:17.320
along with it. Photography uses rocks under the hood. And there's Fortran code in NumPy.


00:27:17.960 --> 00:27:24.920
there's all sorts of diverse tooling underneath what just looks like a Python package.


00:27:24.920 --> 00:27:32.920
And that works. And you are able to use things. And it also introduces all the challenges that


00:27:32.920 --> 00:27:40.040
come with all of those themselves. So, it's... we're in a good spot. There's also a long way


00:27:40.040 --> 00:27:46.440
ahead. But we're also quite a ways from where we were. And I think one of the things to bring it


00:27:46.440 --> 00:27:52.600
around that the strategy discussion is doing is helping us understand where the


00:27:52.600 --> 00:27:56.480
gaps are right now and what the most painful points are right now, which is


00:27:56.480 --> 00:28:01.160
where the user survey was really helpful in telling us these are the things that


00:28:01.160 --> 00:28:06.480
at least the users that we follow and who did fill the survey think the problem and


00:28:06.480 --> 00:28:07.240
the end point are.


00:28:07.240 --> 00:28:12.640
I would say, just quick estimate looking at the source of the respondents from the


00:28:12.640 --> 00:28:18.560
survey that even this, these results lean more towards the highly committed


00:28:18.560 --> 00:28:23.880
software developer side and data science side of Python and not the super casual


00:28:23.880 --> 00:28:26.160
user because there's a huge bias.


00:28:26.160 --> 00:28:26.440
Yeah.


00:28:26.440 --> 00:28:30.240
My, my example of Sarah in the biology department, she's not going to


00:28:30.240 --> 00:28:32.080
PyPI and going through surveys.


00:28:32.080 --> 00:28:34.880
She might see the banner, which is, ah, whatever I got, I care about


00:28:34.880 --> 00:28:36.840
biology or I care about economics.


00:28:36.840 --> 00:28:37.040
Right.


00:28:37.040 --> 00:28:41.320
So I think even this should be taken with a bit of a, a bit of a bias.


00:28:41.400 --> 00:28:47.160
I think one of the useful pieces of data that we did collect was user experience, like experience level.


00:28:47.160 --> 00:28:57.720
One of the things I've wanted to do but not done is sort of split this survey data that we have across various axes and see if we see other pieces of this currency here.


00:28:57.720 --> 00:29:05.200
I don't think any of the people who have acted in this space have had the time to enter the data.


00:29:05.200 --> 00:29:08.880
I for one don't have the expertise or skills to do so.


00:29:09.120 --> 00:29:19.720
So like one of the things that's really useful is having people look through the statement and come up with new insights and flag things, which is one of the trigger moments.


00:29:19.720 --> 00:29:28.800
That's very much a common problem we have is so many people use Python who we just have no way of getting in touch with.


00:29:28.800 --> 00:29:34.480
We have no way of knowing what their experience is because why would they talk to us?


00:29:34.480 --> 00:29:39.600
It's like you don't go and talk to the engineers who design your car. You just drive the flipping thing and


00:29:39.600 --> 00:29:46.840
There's an awful lot of people who treat Python like that and we can ask we can put surveys up


00:29:46.840 --> 00:29:52.600
But at the end of the day like you say the sort of people who would really really like to get feedback from


00:29:52.600 --> 00:29:59.040
Simply don't look at these sort of things. They they aren't involved in going on to pypi


00:29:59.040 --> 00:30:05.600
you know, they type pip install something that the guy across the desk from them told them would work,


00:30:05.600 --> 00:30:12.560
and they never see PyPI. In my workplace, I was very conscious that we had some people who were dabbling in Python


00:30:12.560 --> 00:30:19.040
who didn't interact at all with the community, never even contemplated doing so.


00:30:19.040 --> 00:30:22.160
And that's with me sitting next to them and saying, "Hey, Python's cool."


00:30:22.160 --> 00:30:26.660
And that's the norm. That's the actual Python user.


00:30:26.660 --> 00:30:29.720
Anyone who's looking at a survey and responding to it


00:30:29.720 --> 00:30:32.720
is already in the top 5%.


00:30:32.720 --> 00:30:38.360
This portion of Talk Python to Me is brought to you by Sentry.


00:30:38.360 --> 00:30:41.060
How would you like to remove a little stress from your life?


00:30:41.060 --> 00:30:47.160
Do you worry that users may be encountering errors, slowdowns, or crashes with your app right now?


00:30:47.160 --> 00:30:50.160
Would you even know it until they sent you that support email?


00:30:50.160 --> 00:30:54.640
How much better would it be to have the error or performance details immediately sent to you,


00:30:54.640 --> 00:30:59.840
including the call stack and values of local variables and the active user recorded in the


00:30:59.840 --> 00:31:05.840
report? With Sentry, this is not only possible, it's simple. In fact, we use Sentry on all the


00:31:05.840 --> 00:31:11.680
Talk Python web properties. We've actually fixed a bug triggered by a user and had the upgrade


00:31:11.680 --> 00:31:16.560
ready to roll out as we got the support email. That was a great email to write back. Hey, we


00:31:16.560 --> 00:31:19.620
We already saw your error and have already rolled out the fix.


00:31:19.620 --> 00:31:21.340
Imagine their surprise.


00:31:21.340 --> 00:31:23.540
Surprise and delight your users.


00:31:23.540 --> 00:31:29.860
Create your Sentry account at talkpython.fm/sentry and if you sign up with the code talkpython,


00:31:29.860 --> 00:31:34.660
all one word, it's good for two free months of Sentry's business plan, which will give


00:31:34.660 --> 00:31:39.440
you up to 20 times as many monthly events as well as other features.


00:31:39.440 --> 00:31:43.680
Create better software, delight your users, and support the podcast.


00:31:43.680 --> 00:31:48.180
at talkpython.fm/sentry and use the coupon code talkpython.


00:31:48.180 --> 00:31:55.380
There's a really interesting term that Scott Hanselman came up with called


00:31:55.380 --> 00:31:59.680
the dark matter developer. The unseen 99%.


00:31:59.680 --> 00:32:02.280
And it's exactly what you're describing here, Paul, is


00:32:02.280 --> 00:32:05.580
you can't reach them because they don't come to the meetups,


00:32:05.580 --> 00:32:08.380
they don't come to the conferences, they don't subscribe to the blog.


00:32:08.380 --> 00:32:10.680
They just use it as a tool and go home.


00:32:10.680 --> 00:32:13.480
And they shouldn't. They don't, you know, it's not what they're doing.


00:32:13.480 --> 00:32:21.640
Some of the best feedback that we do get in these discussions comes from, as well as kind of people who get actual issues reported to them.


00:32:21.640 --> 00:32:25.480
So every time the pip maintainers are like, people are reporting this problem all the time.


00:32:25.480 --> 00:32:28.000
Okay, we know that's a problem because it's getting to the developers.


00:32:28.000 --> 00:32:42.400
But we also get feedback from people who do training and tutorials and people who kind of manage Python's presence in a workplace and in an organization, because in that position, and that's kind of the position that I do as well at my work, we get more of that feedback.


00:32:42.400 --> 00:32:46.960
We get people complaining about things that they'd never think to take out in public,


00:32:46.960 --> 00:32:51.300
but they'll happily put on an internal list somewhere saying, "Hey, how come Python can't do this?"


00:32:51.300 --> 00:32:51.800
Right?


00:32:51.800 --> 00:32:55.900
Or they'll ask for help because they actually have a job to do and they need to get it done.


00:32:55.900 --> 00:32:58.680
And, you know, we're all getting paid to be there.


00:32:58.680 --> 00:33:02.380
So there's no kind of fear or shame in saying, "Hey, can someone just tell me how to do this?"


00:33:02.380 --> 00:33:06.020
And so by being kind of that central point in that place,


00:33:06.020 --> 00:33:09.820
just the same as when you're teaching a class, students are going to say, "This didn't work."


00:33:09.820 --> 00:33:13.820
And now you see a problem. And when you start seeing the same things over and over again,


00:33:13.820 --> 00:33:20.220
that becomes kind of useful additional feedback to factor into these kind of surveys. And I don't


00:33:20.220 --> 00:33:24.620
think we've put a lot of weight in kind of the quantitative response here. Like it's quotes,


00:33:24.620 --> 00:33:28.460
it's stuff that people have put in the open spaces that, you know, the ones that have really


00:33:28.460 --> 00:33:33.340
resonated or been repeated a lot are the ones that we've pulled out into the discussion and


00:33:33.340 --> 00:33:38.220
have been working from. And kind of the actual numbers, it's like, yeah, they could mean anything


00:33:38.220 --> 00:33:41.500
Realistically. And we can slice them to make them mean whatever we want.


00:33:41.500 --> 00:33:47.500
Exactly. So there's a careful balance there of drawing the right insights from this,


00:33:47.500 --> 00:33:52.780
knowing the limitations of what we've done, as is probably the case with every single way.


00:33:52.780 --> 00:33:56.140
Let me read out some of the, oh, sorry, go ahead, Nofeq, and then I'll read off some of the


00:33:56.140 --> 00:33:59.260
comments that actually some of the respondents actually made. But go ahead.


00:33:59.260 --> 00:34:04.700
Oh, yeah, no, I was going to say, I agree with Steve that I think since we have no access to


00:34:04.700 --> 00:34:08.500
to these 99% of actual developers.


00:34:08.500 --> 00:34:10.900
I think what maps closest to them


00:34:10.900 --> 00:34:12.880
would be users and industry.


00:34:12.880 --> 00:34:15.520
I got companies building applications.


00:34:15.520 --> 00:34:17.300
Because if you're a user of Python,


00:34:17.300 --> 00:34:18.740
like kind of by definition,


00:34:18.740 --> 00:34:21.620
you're writing an app and not really building a library.


00:34:21.620 --> 00:34:24.540
So I think that if we hear feedback


00:34:24.540 --> 00:34:28.240
from people at companies trying to build apps,


00:34:28.240 --> 00:34:29.620
facing hardships,


00:34:29.620 --> 00:34:33.300
I think that would reflect the main chunk of users.


00:34:33.300 --> 00:34:34.140
- That is a good point.


00:34:34.140 --> 00:34:50.620
I made the distinction that was almost like beginner versus expert, but really, I guess how I should have phrased it is close to what you said, Oveck, is people building applications and presentation type things that they never will share with anybody through PyPI or something.


00:34:50.620 --> 00:34:51.940
They just want to get it to run.


00:34:51.940 --> 00:34:54.060
Maybe they'll deploy it, but they won't publish it.


00:34:54.060 --> 00:34:58.500
Versus people building Flask and Pydantic and SQLAlchemy.


00:34:58.500 --> 00:35:00.980
And so these are really different use cases.


00:35:01.020 --> 00:35:04.560
So the person building that may be extremely talented and experienced,


00:35:04.560 --> 00:35:07.320
but they also have different constraints and different goals.


00:35:07.320 --> 00:35:08.520
So that's a really good point.


00:35:08.520 --> 00:35:08.980
All right.


00:35:08.980 --> 00:35:13.200
So I'm quick respondent thoughts here, just from this discussion thread.


00:35:13.200 --> 00:35:16.160
So one person says unify multiple tools.


00:35:16.160 --> 00:35:18.480
It's good to have new ideas and new implementation, but it


00:35:18.480 --> 00:35:20.560
has to converge after a while.


00:35:20.560 --> 00:35:21.700
That's pretty interesting.


00:35:21.700 --> 00:35:26.580
Number two, there should be one and preferably only one obvious way to do it.


00:35:26.580 --> 00:35:29.700
Get rid of the fragmentation straight out of a Zen and Python there.


00:35:30.080 --> 00:35:34.720
Number three, I definitely want Python to introduce the one true packaging tool,


00:35:34.720 --> 00:35:41.400
ideally both as easy as Rust's cargo and as an extensible package installing


00:35:41.400 --> 00:35:43.640
as easy package building as the wild west.


00:35:43.640 --> 00:35:47.080
So that kind of speaks to the, potentially the other side of creating


00:35:47.080 --> 00:35:49.720
in the libraries and then person four, it said, blow it all away.


00:35:49.720 --> 00:35:51.680
Just everything goes away.


00:35:51.680 --> 00:35:53.040
Start over from scratch.


00:35:53.040 --> 00:35:57.160
Paul, you, you had actually a comment here in this discussion


00:35:57.160 --> 00:35:59.440
about the historical perspective.


00:35:59.560 --> 00:36:11.240
I think I even potentially pulled it up here, saying, you know, this, having pip be exactly this tool might be really hard because pip has been built to do certain things and people now rely on it, right?


00:36:11.240 --> 00:36:25.080
PIP is in a very odd position here. It is, it's shipped with Python, and it's shipped with Python for a very specific reason. You've got to have something to start the whole process off. You've got to be able to bootstrap.


00:36:25.080 --> 00:36:28.360
And if you use Hatch, how do you get Hatch on your PC?


00:36:28.360 --> 00:36:32.920
You need something. And Pit was incorporated into the Python.


00:36:32.920 --> 00:36:37.160
It's not technically part of the standard library. It's installed with the standard library.


00:36:37.160 --> 00:36:43.640
But let's not go there. But it was incorporated to give us that bootstrapping capability.


00:36:43.640 --> 00:36:48.600
At the time, that's really all Pit was, was an installer.


00:36:48.600 --> 00:36:52.680
It had build capabilities because you needed to build things from source,


00:36:52.680 --> 00:36:55.080
because that's how you installed a lot of things.


00:36:55.080 --> 00:36:56.920
All right, predated wheels and all that, yeah.


00:36:56.920 --> 00:37:00.360
Yeah, wheels were nowhere near as common at the time.


00:37:00.360 --> 00:37:02.680
Since then, things have changed,


00:37:02.680 --> 00:37:05.280
but pip is still the one thing that,


00:37:05.280 --> 00:37:08.880
it's where people get into the whole packaging ecosystem.


00:37:08.880 --> 00:37:11.280
They have to start by saying pip install.


00:37:11.280 --> 00:37:14.040
And there's a very good point which was made,


00:37:14.040 --> 00:37:15.720
I mean, this is January,


00:37:15.720 --> 00:37:18.360
my opinions change every 15 minutes,


00:37:18.360 --> 00:37:20.280
so that was a long time ago now.


00:37:20.280 --> 00:37:29.320
But there was a good point made, which is that pip is in the position to be that unified tool,


00:37:29.320 --> 00:37:34.680
but it's not what it is now. Other tools like Hatch or PDM or Poetry


00:37:34.680 --> 00:37:41.400
are better at being the workflow tool that people talk about when they make analogies with Rust and Cargo, for example.


00:37:41.400 --> 00:37:48.760
But they don't come with Python. And to balance that problem out and come up with a solution there,


00:37:48.760 --> 00:37:53.760
we can't just look at packaging in isolation.


00:37:53.760 --> 00:37:55.520
One of the things Conda does,


00:37:55.520 --> 00:38:00.560
which is what allows them to solve certain problems that they solve,


00:38:00.560 --> 00:38:05.680
but at the same time is one of the reasons some people don't find Conda appropriate,


00:38:05.680 --> 00:38:07.960
is that it bundles Python.


00:38:07.960 --> 00:38:11.720
You install Conda and then use that to install Python.


00:38:11.720 --> 00:38:16.320
And that's a fundamentally different way of getting Python.


00:38:16.320 --> 00:38:26.680
roast has a similar thing you get rostov not give you rostin cargo the model is the model is using all the places but i change like that is not something that


00:38:26.680 --> 00:38:35.720
the packaging community can agree on by themselves that would involve the code of the steering council it's a very very


00:38:35.720 --> 00:38:42.400
significant change to the whole model and i think one of the things that we struggle with one of the things i was


00:38:42.320 --> 00:38:58.800
sort of trying to get out at this point in the discussion was that we're not in a position to do that at the moment maybe we should be more not one of the things coming out of this discussion is a broader look at what can we achieve what can we achieve


00:38:58.800 --> 00:39:04.800
what we need to work out how to how to take that forward if we want to so yeah i think


00:39:04.720 --> 00:39:08.800
Pip is in an odd position because a lot of people say,


00:39:08.800 --> 00:39:10.400
"Why can't we add this to Pip?"


00:39:10.400 --> 00:39:12.880
Because pip should be the thing to do.


00:39:12.880 --> 00:39:15.200
But speaking as a pip maintainer,


00:39:15.200 --> 00:39:18.080
I'm not even sure if that's what pip should be doing.


00:39:18.080 --> 00:39:20.720
Because we've got a lot of history,


00:39:20.720 --> 00:39:23.280
we've got a lot of legacy code in Pip,


00:39:23.280 --> 00:39:27.800
it will be a big disruptive change to use as a pip to our workflow,


00:39:27.800 --> 00:39:29.520
whereas Hatch is doing a great job of it.


00:39:29.520 --> 00:39:30.760
PDM is doing fine.


00:39:30.760 --> 00:39:34.000
Do we want to get into that area?


00:39:34.000 --> 00:39:42.020
And that's where, in all honesty, that's where a lot of the discussion started to veer towards


00:39:42.020 --> 00:39:44.240
big-round philosophy questions.


00:39:44.240 --> 00:39:49.600
And I think a lot of people got quite frustrated because they're hard questions and nobody's


00:39:49.600 --> 00:39:50.980
got an answer.


00:39:50.980 --> 00:39:51.980
People wanted action.


00:39:51.980 --> 00:39:55.740
I think one of the things that came out of the survey was a real sense of urgency.


00:39:55.740 --> 00:39:58.640
People said, "Burn it all down and create something new now.


00:39:58.640 --> 00:40:01.120
We want a unified solution now."


00:40:01.120 --> 00:40:05.600
And that put everybody under a sense of pressure to, we ought to be doing better.


00:40:05.600 --> 00:40:09.520
But the reality is, some of these things will take a long time.


00:40:09.520 --> 00:40:13.360
And thinking about them is the first step, which is what we're doing here.


00:40:13.360 --> 00:40:16.400
The analogies that people make, I find very interesting, because some people do come in


00:40:16.400 --> 00:40:21.560
saying make it more like Conda, which as Paul said, kind of sits outside of Python.


00:40:21.560 --> 00:40:25.600
But then other people say make it more like Cargo, make it more like NPM, which kind of


00:40:25.600 --> 00:40:29.640
have the virtual environment thing built into the packaging tool.


00:40:29.640 --> 00:40:32.900
So rather, but it still lives inside it.


00:40:32.900 --> 00:40:36.920
And we get people coming, always coming in with these assumptions that because pip is


00:40:36.920 --> 00:40:42.580
part of the standard distributions of Python, I'm choosing those words carefully as a core


00:40:42.580 --> 00:40:47.640
developer, because it comes with the stand with the Python.org distributions, they assume


00:40:47.640 --> 00:40:51.260
that because it's included, it's going to be like the ones that are included in other


00:40:51.260 --> 00:40:52.260
languages.


00:40:52.260 --> 00:40:53.260
And that's simply not the case.


00:40:53.260 --> 00:40:56.060
I mean, we, for starters, we existed well before those did.


00:40:56.060 --> 00:40:58.420
that we couldn't have copied what Rust does


00:40:58.420 --> 00:41:01.360
or what Node does, but it's just not.


00:41:01.360 --> 00:41:02.960
But having all those requests come in


00:41:02.960 --> 00:41:05.320
kind of just show that if we did burn it down,


00:41:05.320 --> 00:41:07.340
we don't even know what people actually want


00:41:07.340 --> 00:41:08.980
built back in its place.


00:41:08.980 --> 00:41:10.460
'Cause they're all asking for different things.


00:41:10.460 --> 00:41:12.000
- I think part of the challenge,


00:41:12.000 --> 00:41:14.940
people are asking for you all to decide.


00:41:14.940 --> 00:41:17.620
I got that sense from a lot of this conversation


00:41:17.620 --> 00:41:20.520
from some of the feedback, the survey results,


00:41:20.520 --> 00:41:25.100
was nobody is deciding in the core developer space.


00:41:25.100 --> 00:41:26.380
tell us how to do it.


00:41:26.380 --> 00:41:27.380
We'll go with that.


00:41:27.380 --> 00:41:29.900
A lot of them would say, obviously not everyone.


00:41:29.900 --> 00:41:31.800
- The CPython co-developers,


00:41:31.800 --> 00:41:33.940
well, this isn't the most polite way of saying this,


00:41:33.940 --> 00:41:36.080
but they sort of don't care about packaging.


00:41:36.080 --> 00:41:39.780
The Python stream effectively delegated all of this


00:41:39.780 --> 00:41:42.040
and say, you figure it out.


00:41:42.040 --> 00:41:44.700
And while there's a bunch of people here


00:41:44.700 --> 00:41:47.660
who are co-developers, they're wearing two hats.


00:41:47.660 --> 00:41:49.020
It's not a single hat.


00:41:49.020 --> 00:41:51.660
And to jump back in the conversation,


00:41:51.660 --> 00:41:53.620
I'm sorry, I've done that a few times already.


00:41:53.620 --> 00:41:54.460
- Please do.


00:41:54.460 --> 00:42:00.220
very redistributor-driven distribution model, whereas with RustUp, for example, everyone's


00:42:00.220 --> 00:42:05.480
getting Rust as the Rust team built it and as the Rust team packaged it, and it ships


00:42:05.480 --> 00:42:12.020
to them. Many people are getting their Python from Homebrew or from PyEnv and compiling


00:42:12.020 --> 00:42:18.980
it or from ASDF and doing the same thing, or from Debian, who have patched it in a bazillion


00:42:18.980 --> 00:42:26.660
ways. And a lot of the Python packaging problems that people keep hitting are actually these


00:42:26.660 --> 00:42:31.280
problems in the trench code. These are Python distribution problems that are showing up


00:42:31.280 --> 00:42:37.300
when we use the packaging tooling. And that causes a lot of friction there as well. And


00:42:37.300 --> 00:42:43.740
solving that is probably hinted at is the last problem. And it's also tricky because


00:42:43.740 --> 00:42:45.820
Problems mirror your organization.


00:42:45.820 --> 00:42:49.620
And as we're organized, we aren't set to solve this.


00:42:49.620 --> 00:42:50.460
Not easily.


00:42:50.460 --> 00:42:51.740
- To be fair to the distributors,


00:42:51.740 --> 00:42:53.940
we like distributing Python as source code.


00:42:53.940 --> 00:42:57.220
Like the official release of CPython is a pile


00:42:57.220 --> 00:42:59.820
of source code that someone else should build


00:42:59.820 --> 00:43:00.820
and give to you.


00:43:00.820 --> 00:43:02.660
'Cause that's model, the Linux model,


00:43:02.660 --> 00:43:05.700
whichever model it is from 30 years back,


00:43:05.700 --> 00:43:08.120
is you got your operating system


00:43:08.120 --> 00:43:09.540
with the software built for it


00:43:09.540 --> 00:43:12.060
by someone who picked up all those source bundles


00:43:12.060 --> 00:43:13.020
and built it for you.


00:43:13.020 --> 00:43:18.780
if you didn't do it yourself. And so it's never really been built around the core team, build the


00:43:18.780 --> 00:43:23.100
binaries and distribute those. And it certainly does confuse people because we do do that for


00:43:23.100 --> 00:43:27.260
Windows and we do do that for macOS because we've been able to, because we never had distributors


00:43:27.260 --> 00:43:32.620
pick those up. I think with... In the same way that the Linux distributors did. With more Windows


00:43:32.620 --> 00:43:40.780
users nowadays than we used to have, I think that confusion is much more visible. The people coming


00:43:40.780 --> 00:43:46.300
from a Windows background think, "Well, I get Python from python.org." People coming from a


00:43:46.300 --> 00:43:53.020
Linux background think, "Python.org has nothing. I get it from Ubuntu," or "It's just there. I don't


00:43:53.020 --> 00:43:59.660
even know where I get it from." That's something that is changing. I don't know if we will ever...


00:43:59.660 --> 00:44:04.940
I think languages like Rust with things like Rustop, that's a new model, and it comes from


00:44:05.580 --> 00:44:09.580
much more recent how people expect things to be delivered to them.


00:44:09.580 --> 00:44:17.180
And Python's got a heck of a lot of history here that isn't as easy to change as people might like to think it is.


00:44:17.180 --> 00:44:20.780
I'm not saying we don't. I'm not saying this isn't a challenge.


00:44:20.780 --> 00:44:27.980
I guess to draw an analogy, it's similar to the source distribution versus wheel problem that we solved in some sense,


00:44:27.980 --> 00:44:34.780
wherein you can still build your own NumPy, but the NumPy developers ship a single NumPy,


00:44:34.780 --> 00:44:39.120
and that has certain choices made that you can make differently.


00:44:39.120 --> 00:44:41.280
I guess I wasn't trying to be combative here.


00:44:41.280 --> 00:44:43.280
[laughter]


00:44:43.280 --> 00:44:45.280
This is how packaging discussions always go.


00:44:45.280 --> 00:44:47.280
This is how packaging discussions, we always get combative.


00:44:47.280 --> 00:44:50.280
It sounds like we're arguing, we were actually agreeing with each other.


00:44:50.280 --> 00:44:52.280
[laughter]


00:44:52.280 --> 00:44:53.280
- We're still just all together. - Absolutely.


00:44:53.280 --> 00:44:54.480
But a big difference... Oh, sorry.


00:44:54.480 --> 00:44:58.280
In the future, I would imagine, what would be best for users


00:44:58.280 --> 00:45:02.880
would be not to download a Python executable that installs,


00:45:02.880 --> 00:45:05.920
but rather you would download the workflow tool.


00:45:05.920 --> 00:45:09.320
So whatever our version of Cargo ends up being,


00:45:09.320 --> 00:45:13.440
that's what you would actually download and install on Windows or Mac.


00:45:13.440 --> 00:45:15.920
And that would manage your Python.


00:45:15.920 --> 00:45:20.520
In that case, then that would be easier to install for users,


00:45:20.520 --> 00:45:23.600
and you wouldn't have the conflict of, you know, like,


00:45:23.600 --> 00:45:25.600
should pip do everything?


00:45:25.600 --> 00:45:28.200
Because then it wouldn't be pip we're talking about.


00:45:28.200 --> 00:45:31.480
Because right now, if you were to add workflow features to pip,


00:45:31.480 --> 00:45:34.440
that's a bit awkward because pip is in every Python.


00:45:34.440 --> 00:45:39.080
So you have multiple workflow tools on your path, which is a bit odd.


00:45:39.080 --> 00:45:43.800
Yeah, then you're tied to figure out how do I get to the right version of Python


00:45:43.800 --> 00:45:46.920
to then ask it the workflow questions. And what if I get that wrong?


00:45:46.920 --> 00:45:50.440
What if 3.10 is not in the path that's installed, but why doesn't this work?


00:45:50.440 --> 00:45:51.400
So on and so on.


00:45:51.400 --> 00:45:55.880
So a couple of the interesting tools that have been growing a bit in more recent times,


00:45:55.880 --> 00:45:58.360
we've had the the py launcher on Windows for a while.


00:45:58.360 --> 00:46:04.040
And Brett, unfortunately not here, is maintaining a PY launcher for other platforms as well.


00:46:04.040 --> 00:46:08.520
And so there's some suggestion, I think Brett's actually experimenting a bit with adding some of


00:46:08.520 --> 00:46:13.080
this functionality into that tool. So kind of the primary function of the PY tool is you have that


00:46:13.080 --> 00:46:17.640
one command to launch Python, and it takes an option to select which version you actually want


00:46:17.640 --> 00:46:21.800
to run. So you don't end up with multiple copies on path, you don't worry about which order they're


00:46:21.800 --> 00:46:27.000
in. You just say PY, and you'll get the latest version, whatever the latest version is, because


00:46:27.000 --> 00:46:29.100
because it can do a more intelligent sort.


00:46:29.100 --> 00:46:32.340
Or you say py-3.10-3.11.


00:46:32.340 --> 00:46:34.380
- Or it has shebangs on Windows even,


00:46:34.380 --> 00:46:36.020
or you say the version in there, yeah?


00:46:36.020 --> 00:46:39.680
- The Windows one has a lot of extra functionality.


00:46:39.680 --> 00:46:41.920
I briefly looked at merging the two


00:46:41.920 --> 00:46:44.600
and kind of adopting Brett's one for both platforms.


00:46:44.600 --> 00:46:46.380
But honestly, the Windows one,


00:46:46.380 --> 00:46:49.680
like 5% of the functionality is launching Python


00:46:49.680 --> 00:46:53.920
and the other 95% does not exist in the cross-platform one


00:46:53.920 --> 00:46:56.280
because it exists in the platform itself.


00:46:56.280 --> 00:46:59.720
So there's a lot of other stuff that I don't even want to bring up in the Windows one.


00:46:59.720 --> 00:47:03.000
But we do already have this extra tool that's getting installed everywhere,


00:47:03.000 --> 00:47:04.840
that's independently installable,


00:47:04.840 --> 00:47:08.200
that might be a suitable place to take on some of that workload.


00:47:08.200 --> 00:47:13.400
I think the big challenge here, and I don't want to get into the Pipconda discussion again,


00:47:13.400 --> 00:47:17.160
but we have, at this point, 10 years worth of evidence


00:47:17.160 --> 00:47:20.600
of what happens when you put out a workflow tool


00:47:20.600 --> 00:47:25.160
that isn't strictly Python, but will give you Python.


00:47:25.160 --> 00:47:27.800
and it hasn't beaten all the other workflow tools.


00:47:27.800 --> 00:47:30.760
People still don't want to use the tool that does that.


00:47:30.760 --> 00:47:34.040
And so I don't know if we can simply assume that


00:47:34.040 --> 00:47:37.960
providing that tool or mandating that kind of tool is going to be a winner


00:47:37.960 --> 00:47:41.480
because it exists, it's been around for a long time, and it's not won.


00:47:41.480 --> 00:47:47.160
I think it's proven to be a fantastic experience if it suits you.


00:47:47.160 --> 00:47:48.440
That's what Conda...


00:47:48.440 --> 00:47:54.360
You listen to a Conda user and they are massively enthusiastic about it.


00:47:54.360 --> 00:47:56.960
But it's because it fits what they want to do.


00:47:56.960 --> 00:48:00.460
You listen to somebody who doesn't like Conda and they're equally frustrated


00:48:00.460 --> 00:48:01.800
with the choices it makes.


00:48:01.800 --> 00:48:03.360
And I think, I think Steve's right.


00:48:03.360 --> 00:48:07.960
I think we have to learn all of the lessons, not just some of the lessons.


00:48:07.960 --> 00:48:12.480
And one of the lessons here is that sort of everything in one bundle


00:48:12.480 --> 00:48:14.560
tool is a mixed blessing.


00:48:14.560 --> 00:48:18.440
I'm going to call from January because that's right in front of me.


00:48:18.440 --> 00:48:19.840
And it seems very prudent.


00:48:19.840 --> 00:48:23.680
Many of the respondents wanting a unified tool will have an implicit


00:48:23.680 --> 00:48:28.160
assumption that their preferred workflow will be supported. There are many workflows in


00:48:28.160 --> 00:48:35.280
here and trying to corral all of them into a single workflow is quite possibly a non-profitable


00:48:35.280 --> 00:48:41.000
problem. I don't think anybody responded to the survey saying please give a unified workflow


00:48:41.000 --> 00:48:47.520
tool that doesn't do what I currently do. Exactly. Please make what I do not work. Yes.


00:48:47.520 --> 00:48:52.440
Make it hard. Everyone thinks their own workflow is normal and everyone else is the weird one.


00:48:52.440 --> 00:48:59.320
I do want to, speaking of workflows, I was thinking through this process and thinking of like, well, what might an option be?


00:48:59.320 --> 00:49:02.680
What might some other tool look like?


00:49:02.680 --> 00:49:08.680
You all talk a lot about in the surveys and the responses about a user experience, right?


00:49:08.680 --> 00:49:15.760
And we've got certainly notable people in the community who are well known for creating APIs that just connect with folks, right?


00:49:15.760 --> 00:49:21.080
So I put together this idea of what if there was a few more commands in Python


00:49:21.080 --> 00:49:23.800
itself that you didn't even have to think about, do I have pip?


00:49:23.800 --> 00:49:27.280
Does it use a hatch under the covers or does it not?


00:49:27.280 --> 00:49:31.680
What have you had things like Python init, Python add requests,


00:49:31.680 --> 00:49:34.000
Python upgrade all, Python build.


00:49:34.000 --> 00:49:36.360
I think you've just misspelled hatch here.


00:49:36.360 --> 00:49:36.860
Haven't you?


00:49:36.860 --> 00:49:37.720
I probably have.


00:49:37.720 --> 00:49:41.160
You've spelled hatch with a P Y T H O N.


00:49:41.160 --> 00:49:41.880
I probably have.


00:49:41.880 --> 00:49:43.920
Yeah, exactly.


00:49:44.000 --> 00:49:46.500
Well, but I don't have to think of pip is installed.


00:49:46.500 --> 00:49:48.600
I don't think if pip is there,


00:49:48.600 --> 00:49:52.500
like, I'm almost afraid to put this up here as a proposal,


00:49:52.500 --> 00:49:54.500
because if it got adopted,


00:49:54.500 --> 00:49:56.000
then it might be the way and I don't like it.


00:49:56.000 --> 00:49:57.000
I don't know if I would like it.


00:49:57.000 --> 00:49:59.400
But have you thought to go this far to say like,


00:49:59.400 --> 00:50:02.000
we're not even going to talk about the tools that make this happen.


00:50:02.000 --> 00:50:05.000
This might be pip plus Hatch making this happen behind the scenes.


00:50:05.000 --> 00:50:06.800
You might set an environment variable that says,


00:50:06.800 --> 00:50:09.500
please use poetry when you do this stuff,


00:50:09.500 --> 00:50:11.800
but I don't want to talk or know about poetry.


00:50:11.800 --> 00:50:12.800
I just want the output of it.


00:50:12.800 --> 00:50:17.600
just Python install. That's all you tell them versus pip install dash our requirements.txt.


00:50:17.600 --> 00:50:21.680
Oh, I meant pip three. Wait, pip three doesn't exist. Why doesn't pip three exist on and on


00:50:21.680 --> 00:50:27.280
and on? Right? Like, and then if you want to do more, you use hatch or use pip tools or insane,


00:50:27.280 --> 00:50:32.080
not insane. I'd use that. I think there is a quick, like Steve said, this is, this is almost


00:50:32.080 --> 00:50:36.640
hatch. Make app is the one I'm looking at and thinking, please give it to me now. But it's


00:50:36.640 --> 00:50:42.240
It's almost Hatch. The question is whether Hatch is where it is, or PDM, or Poetry,


00:50:42.240 --> 00:50:44.720
or whether it's Python.


00:50:44.720 --> 00:50:48.280
If you want it to be the Python command,


00:50:48.280 --> 00:50:50.020
then I think there's a whole...


00:50:50.020 --> 00:50:54.920
We're way too far through this now to talk about the role of the PyPA


00:50:54.920 --> 00:50:59.860
and how it links to the core developers.


00:50:59.860 --> 00:51:02.940
But there's a whole disconnect that we struggle with,


00:51:02.940 --> 00:51:05.040
and we continue to struggle with,


00:51:05.100 --> 00:51:10.700
which is what can we do in packaging and what do we need the core to be involved with?


00:51:10.700 --> 00:51:19.100
Pradyum mentioned earlier, Python core defer packaging decisions to the PyPA and to the packaging people,


00:51:19.100 --> 00:51:23.660
which is great as long as it works, but when it doesn't, when we need to integrate more,


00:51:23.660 --> 00:51:27.500
we're not really there yet in knowing how to address that sort of thing.


00:51:27.500 --> 00:51:31.660
So I think a tool that does something like that, it's certainly what I'm looking for.


00:51:31.660 --> 00:51:37.060
it's certainly what I think a lot of people see when they say workflow tool.


00:51:37.060 --> 00:51:42.700
And as I say, we've got people like Hatch and PDM and Poetry making that a reality.


00:51:42.700 --> 00:51:44.300
You just made tools into people.


00:51:44.300 --> 00:51:45.300
Yeah, sorry.


00:51:45.300 --> 00:51:49.100
I don't know all the names.


00:51:49.100 --> 00:51:54.340
But yeah, we have people making that sort of thing happen in the different tools around.


00:51:54.340 --> 00:51:58.860
Unifying is a question that I think we need to look at.


00:51:58.860 --> 00:52:05.100
And there's a clear message that having 10 different tools that do this sort of workflow is not what people want.


00:52:05.100 --> 00:52:09.260
But we don't know quite what the best model is yet. So there's some work to do there.


00:52:09.260 --> 00:52:13.900
The massive danger, Paul, is if you pick one, and it turns out to not be really that great.


00:52:13.900 --> 00:52:14.140
Yeah.


00:52:14.140 --> 00:52:15.980
Which we've been burnt by before.


00:52:15.980 --> 00:52:16.780
Many times.


00:52:16.780 --> 00:52:21.420
So it makes us a lot more hesitant to pick something.


00:52:21.420 --> 00:52:25.260
I think all I'll say on this is, yeah, there's tools out there doing a lot of this.


00:52:25.260 --> 00:52:31.180
The best way to get it adopted into core Python is have a tool that is clearly the winner,


00:52:31.180 --> 00:52:38.460
that we can integrate that tool directly. And so the transition path becomes if you're using Python


00:52:38.460 --> 00:52:44.860
3.36 or whatever version it makes it into, then you have Python that command. If you want to work


00:52:44.860 --> 00:52:50.060
with the previous version, then first you install, let's say, Hatch and use Hatch that command.


00:52:50.060 --> 00:52:54.060
This is the kind of thing that might get integrated into that py launcher I mentioned before,


00:52:54.060 --> 00:52:57.660
because we have more ability to add more random commands to that.


00:52:57.660 --> 00:53:00.540
All of these are valid Python commands today.


00:53:00.540 --> 00:53:05.340
So people could theoretically be running these commands already and having it do something.


00:53:05.340 --> 00:53:08.380
I'm clearly not doing what you intend here, but they're all valid commands.


00:53:08.380 --> 00:53:11.500
And so we can't just push out a minor update that breaks them.


00:53:11.500 --> 00:53:17.260
The only thing we do need to watch with that is something that Pradeon mentioned in his blog post,


00:53:17.260 --> 00:53:21.180
which is, we want to see a winner in one sense,


00:53:21.180 --> 00:53:26.460
but we want to be very careful not to end up in a competitive situation where,


00:53:26.460 --> 00:53:31.460
rather than working together to get to the ideal workflow,


00:53:31.460 --> 00:53:33.260
we're working against each other.


00:53:33.260 --> 00:53:36.620
We do not want, it's not going to be good for users,


00:53:36.620 --> 00:53:39.180
it's not going to be good for the tool developers,


00:53:39.180 --> 00:53:41.740
it's not going to be good for the community if we're all


00:53:41.740 --> 00:53:43.420
trying to compete with each other on,


00:53:43.420 --> 00:53:45.100
I've got this whizzy new feature.


00:53:45.100 --> 00:53:48.660
We want to work together and I think we want,


00:53:48.660 --> 00:53:57.060
I hesitate to use the word a winner, but we want a clear sort of best of breed that we can promote,


00:53:57.060 --> 00:54:02.660
because as we've said, we've been so burned by saying this is what we should use, having


00:54:02.660 --> 00:54:08.020
everything go horribly wrong, that we're very reluctant to do that without evidence. So we want


00:54:08.020 --> 00:54:15.700
to see something become that tool that people want. Which is going to get difficult as long


00:54:15.700 --> 00:54:22.660
as we have competing solutions where it's like, "Oh, now we're split 50/50. And now what? There


00:54:22.660 --> 00:54:28.020
were decent solutions. Whichever you pick makes half the ecosystem angry." Yeah, but I think it


00:54:28.020 --> 00:54:33.140
is important to eventually get help from CorePython. I know we were just talking about how


00:54:33.140 --> 00:54:39.300
Conda has been around for like a decade and that workflow tool hasn't won. But like if a decade


00:54:39.300 --> 00:54:44.660
ago, you know, on Python.org, you had that tool, I think that would have won. It's just about


00:54:44.660 --> 00:54:49.300
advertising it on core Python. So eventually we'll need their assistance.


00:54:49.300 --> 00:54:51.140
Yeah, that's a really good point. Indeed.


00:54:51.140 --> 00:54:54.100
And you know, we definitely do want to make it work from the core Python side.


00:54:54.100 --> 00:54:59.620
I might be the least kind of conflicted core developer here. So I can say that we do want


00:54:59.620 --> 00:55:06.580
to make this work. It's just seen as kind of outside of the core runtime responsibilities.


00:55:06.580 --> 00:55:11.220
One of the massive discussion threads actually kicked off because I mistakenly thought the


00:55:11.220 --> 00:55:16.980
steering council kind of owned responsibility for packaging and delegated it officially to the


00:55:16.980 --> 00:55:21.860
PyPA. But it turns out I was wrong, and they just don't cover packaging at all. And so packaging is


00:55:21.860 --> 00:55:27.460
kind of outside of core focus entirely. It's officially not cared for by the core developers,


00:55:27.460 --> 00:55:31.940
unofficially not cared for, if that makes sense. It's like, we do care about it. We do want it to


00:55:31.940 --> 00:55:36.020
work. We do want it to be a good experience because we know it's critical to the overall


00:55:36.020 --> 00:55:42.900
Python experience, but it's also just scoped out of being our job, which is why we don't hold up


00:55:42.900 --> 00:55:49.380
releases based on packaging and to get packaging features into the core runtime is, it just feels


00:55:49.380 --> 00:55:55.380
like a huge amount of work to do because it's got to overcome that this is so important to the core


00:55:55.380 --> 00:56:01.300
runtime, to the reference interpreter, that it's got to be in there, even though it's a packaging


00:56:01.300 --> 00:56:05.060
thing. So it's challenging, but there's definitely those of us who want to make it happen.


00:56:05.060 --> 00:56:09.860
And one of the benefits of being outside of the language is that it can move faster.


00:56:09.860 --> 00:56:14.100
Python has an annual release cycle compared to, to draw an analogy,


00:56:14.100 --> 00:56:16.580
the Rust plus Cargo story of six weeks.


00:56:16.580 --> 00:56:22.420
And also, not having this be in the core language makes it possible for alternative


00:56:22.420 --> 00:56:25.380
platforms and implementations that don't exist,


00:56:25.380 --> 00:56:28.980
that CPython does not care about today, to support those things.


00:56:28.980 --> 00:56:31.700
Wasm, which is a 303 support,


00:56:31.700 --> 00:56:38.500
pep11 for anyone who cares about where that word comes from. Pyodive exists. It runs things.


00:56:38.500 --> 00:56:44.900
CPython compiles on Wobblin and it runs things. The packaging story for Python on the browser is


00:56:44.900 --> 00:56:48.580
going to be very different. The development workflow for Python on the browser is going


00:56:48.580 --> 00:56:57.060
to be very different. And if you try to shout poetry and paper or those specific rules as


00:56:57.060 --> 00:57:02.740
differently shaped into those workflows, that's just not going to work. And you also don't want to


00:57:02.740 --> 00:57:10.180
visual bad avenue of innovation using these tools. That's one of the pieces that is sort of a


00:57:10.180 --> 00:57:17.300
symptom of success or a problem of success, which is HAT, poetry, PDM, all of these exist because


00:57:17.300 --> 00:57:23.300
the other problems have been solved well enough and they've been solved well enough that these


00:57:23.300 --> 00:57:25.180
These are now the main endpoints.


00:57:25.180 --> 00:57:29.780
They're innovating in this space, and there's other aspects of Python getting innovated


00:57:29.780 --> 00:57:35.740
on in terms of where it runs, in terms of how you interact with it even.


00:57:35.740 --> 00:57:39.420
And as long as we don't stifle those, we're doing fine.


00:57:39.420 --> 00:57:40.420
Yeah.


00:57:40.420 --> 00:57:44.540
And that's a really good point about it not being in the core distribution as well.


00:57:44.540 --> 00:57:49.580
If the ability to install packages was considered a core feature of the runtime, we wouldn't


00:57:49.580 --> 00:57:53.740
able to release the runtime for a new platform until we'd figured that out, because that would


00:57:53.740 --> 00:57:59.180
block the release because we'd have to say the Python is incomplete until it has a complete


00:57:59.180 --> 00:58:03.900
packaging story on this brand new platform. So because that is separated, we can release Python.


00:58:03.900 --> 00:58:09.900
And so we have WASM releases of the CPython runtime because packaging is not part of that.


00:58:09.900 --> 00:58:15.020
And so we don't have to wait for that to come up. And yeah, because it's independent,


00:58:15.020 --> 00:58:19.980
Anaconda can come along and build PyScript and build packaging around the runtime, because it


00:58:19.980 --> 00:58:23.980
doesn't have to be tightly integrated into it. So there's big advantages. Like there's a reason we


00:58:23.980 --> 00:58:30.780
pulled distutils out of the core library, because it was restricting things. And so it opens up more


00:58:30.780 --> 00:58:36.460
things, but it does put more responsibility on distributors, essentially, to build a distribution


00:58:36.460 --> 00:58:41.900
of Python that includes the workflow tools, the packaging tools, the indexes, the repositories,


00:58:41.900 --> 00:58:46.060
whatever they need to give users of that distribution a good experience.


00:58:46.060 --> 00:58:52.380
And ultimately, a lot of this comes down to our distributions from Python.org have a very,


00:58:52.380 --> 00:58:57.100
very basic story for this. We have pip preinstalled. That's basically our entire story.


00:58:57.100 --> 00:59:03.020
Linux distros have their own story, which again, is they keep a very narrow focus on what they


00:59:03.020 --> 00:59:09.820
want to care about. And users want things outside of that. Even conda users, very kind of narrow


00:59:09.820 --> 00:59:11.620
focus to what's in those repositories.


00:59:11.620 --> 00:59:17.260
And when you try and go outside of that, then things start breaking down just the same as all the distributions do.


00:59:17.260 --> 00:59:19.740
So it's got pluses and minuses.


00:59:19.740 --> 00:59:24.980
Python gets into places where it otherwise couldn't if packaging was a core feature of the runtime.


00:59:24.980 --> 00:59:32.540
But it does mean that packaging is determined by the distribution and not by the core team and not even by the core


00:59:32.540 --> 00:59:39.260
maintainers of the kind of satellite projects that are really, really close to the core runtime because setup tools


00:59:39.260 --> 00:59:44.700
can't determine how a Wasm build is going to work because they're not controlling that distribution.


00:59:44.700 --> 00:59:49.980
So there's a separation of roles that is not really clear, even to most of us who are involved,


00:59:49.980 --> 00:59:55.500
to be honest, that we all have different jobs to do and someone has to pull it all together.


00:59:55.500 --> 00:59:59.100
And unfortunately, a lot of the time it's the end user has to connect the dots.


00:59:59.100 --> 01:00:01.980
Well, I think guys, we are out of time, I would say,


01:00:01.980 --> 01:00:06.380
although not out of discussion points for sure. This could just go on and on.


01:00:06.380 --> 01:00:10.300
It was super interesting conversation. It's really great to see it getting this focus.


01:00:10.300 --> 01:00:15.260
But yeah, it's going to be interesting to see where it goes. It's a challenge. But


01:00:15.260 --> 01:00:19.180
Harjeet, I really like your ideas that we're going to rise to it. We've now come,


01:00:19.180 --> 01:00:23.420
we've solved the hard enough problems now that this new thing is a problem. Ofek, go ahead.


01:00:23.420 --> 01:00:28.140
I have one quick question because I'm sure listeners would be curious too. What do we


01:00:28.140 --> 01:00:33.900
think the next steps either are or should be for this? I know we split off into different


01:00:33.900 --> 01:00:39.500
discussions and we're trying to research the feedback that we got, but what do we think the


01:00:39.500 --> 01:00:45.740
next steps are? Or is that just the next step, just trying to understand what users want more?


01:00:45.740 --> 01:00:47.180
I don't think we know yet.


01:00:47.180 --> 01:00:52.060
Yeah, I mean, I've written far too many posts on where I think we've got to go next,


01:00:52.060 --> 01:00:56.780
but I do think we still have to, as Prajan mentioned earlier, level set.


01:00:56.780 --> 01:01:00.860
There's a lot of people involved. We all have different backgrounds, different expectations,


01:01:00.860 --> 01:01:06.940
different experiences and we just need to talk and figure that out. And it's the kind of thing


01:01:06.940 --> 01:01:12.380
that would be ideal for us all to fly to some remote island somewhere for a week and just


01:01:12.380 --> 01:01:17.340
hash it all out in person. That's unfortunately not going to happen. So long discourse threads.


01:01:17.340 --> 01:01:21.900
We're not leaving Hawaii until we solve this. We've got to stay. I'm okay with that. I will do


01:01:21.900 --> 01:01:29.660
it. Three months later, we're still there. Yeah, absolutely. All right. Well, you all,


01:01:29.660 --> 01:01:31.120
- Well, thank you so much for being here.


01:01:31.120 --> 01:01:33.400
Thanks for taking the time and participating


01:01:33.400 --> 01:01:35.360
in this first, the original discussion,


01:01:35.360 --> 01:01:36.800
and then this here as well.


01:01:36.800 --> 01:01:39.320
I think it's going to highlight a lot of interesting


01:01:39.320 --> 01:01:41.660
and unseen aspects for people.


01:01:41.660 --> 01:01:43.500
Final word, listeners out there,


01:01:43.500 --> 01:01:46.400
they want to get maybe their feedback in.


01:01:46.400 --> 01:01:47.960
We saw some folks in the audience asking


01:01:47.960 --> 01:01:49.120
how they take the survey.


01:01:49.120 --> 01:01:50.260
The survey is closed.


01:01:50.260 --> 01:01:52.280
I'll give you a chance to sort of say like,


01:01:52.280 --> 01:01:54.520
what next for people out there listening.


01:01:54.520 --> 01:01:56.560
Steve, we'll go around the circle again.


01:01:56.560 --> 01:01:57.760
You're the top of it, go first.


01:01:57.760 --> 01:01:59.120
- If you're still on Twitter,


01:01:59.120 --> 01:02:04.880
then you can mention me in a tweet at Zubo is, you know, I do, I do read those and I


01:02:04.880 --> 01:02:10.760
do collect a lot of kind of random information ideas out of the otherwise discourse and started


01:02:10.760 --> 01:02:14.880
discussion and don't be surprised if we point you at an existing one and say we've done


01:02:14.880 --> 01:02:16.120
this one to death already.


01:02:16.120 --> 01:02:22.640
So I always happy to hear more and I guess just be aware that we do get very overloaded.


01:02:22.640 --> 01:02:23.640
Sure.


01:02:23.640 --> 01:02:24.640
Paul.


01:02:24.640 --> 01:02:28.240
Yeah, I think that's probably about the about the situation.


01:02:28.240 --> 01:02:33.880
When I'm not very active on social media, you can probably ping me on Twitter or Mastodon


01:02:33.880 --> 01:02:35.720
and I might notice.


01:02:35.720 --> 01:02:41.040
Certainly get involved, I can't promise, certainly get involved on Discord.


01:02:41.040 --> 01:02:47.740
I think a lot of people are put off joining the conversations because it feels quite a


01:02:47.740 --> 01:02:49.240
hostile environment.


01:02:49.240 --> 01:02:53.040
There's a lot of, like Steve said, we've seen that before.


01:02:53.040 --> 01:02:55.140
We do want new perspectives.


01:02:55.140 --> 01:02:59.460
We do want people offering ideas and it's hard.


01:02:59.460 --> 01:03:07.140
It's hard to speak up because there's so much history that people will assume you know and


01:03:07.140 --> 01:03:08.140
you won't.


01:03:08.140 --> 01:03:13.060
But please do, you know, come with half-baked ideas.


01:03:13.060 --> 01:03:15.220
We'll maybe tell you how to bake them.


01:03:15.220 --> 01:03:19.700
We'll maybe tell you we've already covered them, but we won't ignore them.


01:03:19.700 --> 01:03:21.180
We'll see them.


01:03:21.180 --> 01:03:26.420
And even if it looks like we're not picking up on things that you think are really important,


01:03:26.420 --> 01:03:27.420
they'll get in the pot.


01:03:27.420 --> 01:03:28.740
We will be aware of them.


01:03:28.740 --> 01:03:30.140
And that's the main thing.


01:03:30.140 --> 01:03:33.420
What we want more than anything is to be aware of what people think.


01:03:33.420 --> 01:03:34.420
Yep.


01:03:34.420 --> 01:03:35.420
Effect?


01:03:35.420 --> 01:03:36.420
I agree with what's been said.


01:03:36.420 --> 01:03:42.860
I'm always on the discourse forums reading feedback and if any Twitter threads gain popularity.


01:03:42.860 --> 01:03:48.220
I think it's important to realize most people that work on this are volunteers at the end


01:03:48.220 --> 01:03:49.220
of the day.


01:03:49.220 --> 01:03:54.420
We might not have much time to iterate as fast as people want, but we are trying our


01:03:54.420 --> 01:03:55.420
best for sure.


01:03:55.420 --> 01:03:56.420
Excellent.


01:03:56.420 --> 01:04:01.060
And there was that big sponsorship to make major progress on PyPI.org.


01:04:01.060 --> 01:04:02.580
Maybe we'll see something like that at some point.


01:04:02.580 --> 01:04:04.500
Pradyan, you get the final word here.


01:04:04.500 --> 01:04:06.380
That's literally what I was going to say.


01:04:06.380 --> 01:04:07.820
Invest in Python folks.


01:04:07.820 --> 01:04:13.940
If you work somewhere that uses Python, tell them to invest in the language.


01:04:13.940 --> 01:04:19.100
And part of why we're having these discussions is because the role that initiated the user


01:04:19.100 --> 01:04:22.300
service is a sponsored role from Bloomberg.


01:04:22.300 --> 01:04:28.700
And these sorts of investments into the ecosystem are vital to sort of make things keep working


01:04:28.700 --> 01:04:34.420
because there's only so far we can go with a bunch of people doing this in their evenings


01:04:34.420 --> 01:04:39.740
when they're, you know, slightly sort of bored and kind of want to keep themselves busy.


01:04:39.740 --> 01:04:43.980
And these tough problems are not going to solve themselves because someone had half


01:04:43.980 --> 01:04:46.420
an hour in their evening or an hour in their evening.


01:04:46.420 --> 01:04:47.420
Yep.


01:04:47.420 --> 01:04:48.420
All right.


01:04:48.420 --> 01:04:49.420
Good point.


01:04:49.420 --> 01:04:50.420
And thank you all for being here.


01:04:50.420 --> 01:04:51.420
Thanks very much.


01:04:51.420 --> 01:04:52.420
Thanks, Michael.


01:04:52.420 --> 01:04:53.420
Bye.


01:04:53.420 --> 01:04:54.420
Bye.


01:04:54.420 --> 01:04:55.420
This has been another episode of Talk Python to Me.


01:04:55.420 --> 01:04:57.460
Thank you to our sponsors.


01:04:57.460 --> 01:04:58.820
Be sure to check out what they're offering.


01:04:58.820 --> 01:05:01.060
It really helps support the show.


01:05:01.060 --> 01:05:06.100
Join Cox Automotive and use your technical skills to transform the way the world buys,


01:05:06.100 --> 01:05:08.300
sells, and owns cars.


01:05:08.300 --> 01:05:13.740
an exciting position that's right for you at talkpython.fm/cox.


01:05:13.740 --> 01:05:15.480
Take some stress out of your life.


01:05:15.480 --> 01:05:20.220
Get notified immediately about errors and performance issues in your web or mobile applications


01:05:20.220 --> 01:05:21.520
with Sentry.


01:05:21.520 --> 01:05:26.380
Just visit talkpython.fm/sentry and get started for free.


01:05:26.380 --> 01:05:29.620
Be sure to use the promo code "talkpython," all one word.


01:05:29.620 --> 01:05:31.500
Want to level up your Python?


01:05:31.500 --> 01:05:35.600
We have one of the largest catalogs of Python video courses over at Talk Python.


01:05:35.600 --> 01:05:40.720
Our content ranges from true beginners to deeply advanced topics like memory and async.


01:05:40.720 --> 01:05:43.400
And best of all, there's not a subscription in sight.


01:05:43.400 --> 01:05:46.360
Check it out for yourself at training.talkpython.fm.


01:05:46.360 --> 01:05:50.980
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.


01:05:50.980 --> 01:05:52.340
We should be right at the top.


01:05:52.340 --> 01:05:57.880
You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the Direct


01:05:57.880 --> 01:06:02.400
RSS feed at /rss on talkpython.fm.


01:06:02.400 --> 01:06:04.960
We're live streaming most of our recordings these days.


01:06:04.960 --> 01:06:08.560
If you want to be part of the show and have your comments featured on the air, be sure


01:06:08.560 --> 01:06:13.280
to subscribe to our YouTube channel at talkpython.fm/youtube.


01:06:13.280 --> 01:06:14.520
This is your host Michael Kennedy.


01:06:14.520 --> 01:06:15.720
Thanks so much for listening.


01:06:15.720 --> 01:06:16.960
I really appreciate it.


01:06:16.960 --> 01:06:18.680
Now get out there and write some Python code.


01:06:18.680 --> 01:06:40.680
[MUSIC]

