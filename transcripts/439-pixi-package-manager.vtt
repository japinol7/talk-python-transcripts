WEBVTT

00:00:00.000 --> 00:00:04.320
In this episode, we have Wolf Volprecht and Ruben Arch from the Pixie Project here to talk about


00:00:04.320 --> 00:00:10.240
Pixie, a high performance package manager for Python and other languages that actually manages


00:00:10.240 --> 00:00:15.600
Python itself too. They have a lot of interesting ideas on where Python packaging should go,


00:00:15.600 --> 00:00:20.720
and they're putting their time and effort behind them. Will Pixie become your next package manager?


00:00:20.720 --> 00:00:39.520
Listen in to find out. This is Talk Python to Me, episode 439, recorded October 19th, 2023.


00:00:39.520 --> 00:00:47.120
Welcome to Talk Python to Me, a weekly podcast on Python. This is your host, Michael Kennedy.


00:00:47.120 --> 00:00:52.320
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython,


00:00:52.320 --> 00:00:58.320
both on fosstodon.org. Keep up with the show and listen to over seven years of past episodes at


00:00:58.320 --> 00:01:04.160
talkpython.fm. We've started streaming most of our episodes live on YouTube. Subscribe to our


00:01:04.160 --> 00:01:10.160
YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of


00:01:10.160 --> 00:01:17.120
that episode. This episode is sponsored by Posit Connect from the makers of Shiny. Publish, share,


00:01:17.120 --> 00:01:22.560
and deploy all of your data projects that you're creating using Python. Streamlit, Dash, Shiny,


00:01:22.560 --> 00:01:29.280
Bokeh, FastAPI, Flask, Reports, Dashboards, and APIs. Posit Connect supports all of them. Try


00:01:29.280 --> 00:01:37.280
Posit Connect for free by going to talkpython.fm/posit, P-O-S-I-T. And it's brought to you by


00:01:37.280 --> 00:01:42.800
Python Tutor. Visualize your Python code step-by-step to understand just what's happening


00:01:42.800 --> 00:01:48.960
with your code. Try it for free and anonymously at talkpython.fm/python-tutor.


00:01:48.960 --> 00:01:52.640
Wolf, Ruben, welcome to Talk Python to Me.


00:01:52.640 --> 00:01:52.960
>> Hello.


00:01:53.280 --> 00:01:53.920
>> Thanks for having us.


00:01:53.920 --> 00:01:59.440
>> Yeah, it's great to have you here. We're going to dive into packaging once again. And


00:01:59.440 --> 00:02:04.640
we've talked about packaging a couple of times over the last few months. It's a super interesting


00:02:04.640 --> 00:02:10.960
topic. And there are these times where it seems like there's a fixed way and everyone kind of


00:02:10.960 --> 00:02:15.280
agrees, like, this is how you do things. For example, you know, I think Flask and Django have


00:02:15.280 --> 00:02:19.200
kind of been web frameworks for a long time. Then all of a sudden, you know, a thousand flowers


00:02:19.200 --> 00:02:24.560
bloom and there's a bunch of new ideas. In the web space, I think that was driven by async and


00:02:24.560 --> 00:02:28.160
the typing stuff. And a bunch of people said, well, let's try new things now that we have these


00:02:28.160 --> 00:02:32.960
new ideas. And the other frameworks were more stable, couldn't make those adjustments. And


00:02:32.960 --> 00:02:36.880
I think people are just, you know, we're kind of at one of these explosion points of different


00:02:36.880 --> 00:02:40.720
ideas and different experiments in packaging. What do you all think?


00:02:40.720 --> 00:02:44.880
>> Yeah, that's an interesting way to put it. I think we definitely see a lot of interest in


00:02:44.880 --> 00:02:50.000
package management these days and new ideas being explored. But I also think that we're


00:02:50.000 --> 00:02:53.600
definitely standing on the shoulders of giants. So kind of similar to what you just described


00:02:53.600 --> 00:02:58.240
with the web frameworks, where actually I think we are taking a lot of inspiration from


00:02:58.240 --> 00:03:03.520
multiple different ecosystems that are out there and try to kind of synthesize the best ideas


00:03:03.520 --> 00:03:06.240
into our tools. >> Yeah, you got some interesting


00:03:06.240 --> 00:03:10.720
ideas for sure. Ruben? >> I cannot really add to that anymore. I'm


00:03:10.720 --> 00:03:14.720
standing on the shoulders of giants like, whoa. >> Yeah, absolutely.


00:03:14.720 --> 00:03:17.840
>> But I think we'll go into that. >> Yeah, we sure will. Now, before we get


00:03:17.840 --> 00:03:22.000
into the topics, let's just do a quick introduction for folks who don't know you. I feel like this is


00:03:22.000 --> 00:03:27.760
a really interesting coincidence because the very last previous show that I did was with


00:03:27.760 --> 00:03:34.240
Sylvan and Jeremy, a bunch of folks from QuantStack. And just out of coincidence, like I said,


00:03:34.240 --> 00:03:37.280
your colleagues, right? So Wolf, let's start with you, a little background on you.


00:03:37.280 --> 00:03:41.920
>> I did work at QuantStack for quite a while. And it's also where my journey with package


00:03:41.920 --> 00:03:48.800
management began. But maybe just taking one more step back, I studied in Zurich and I actually


00:03:48.800 --> 00:03:51.680
graduated in robotics there with a master's degree. >> Wow.


00:03:51.680 --> 00:03:53.200
>> Yeah. >> That's awesome.


00:03:53.200 --> 00:03:58.800
>> I had some fun times. I was also working with Disney Research on like a little robot that was


00:03:58.800 --> 00:04:05.280
drawing images in the sand and these kind of fun things. But at QuantStack, we were doing a lot of


00:04:05.280 --> 00:04:11.600
scientific computing stuff. Initially trying to like re-implement NumPy in C++, which is a library


00:04:11.600 --> 00:04:17.600
called XTensor. And always doing a lot of package management and mostly in the CondaForge and Conda


00:04:17.600 --> 00:04:23.760
ecosystem. And Conda at some point became really slow and CondaForge became really large. And that


00:04:23.760 --> 00:04:30.640
led me to kind of experiment with new things, which resulted in Mamba. And then I got really


00:04:30.640 --> 00:04:35.600
lucky and had the opportunity to create my own little startup around more of these package


00:04:35.600 --> 00:04:41.440
management ideas, which is the current company called Prefix. And we'll dive more into Pixie and


00:04:41.440 --> 00:04:43.680
all these new things that we're doing, I think, later on.


00:04:43.840 --> 00:04:48.320
>> Yeah. That's a lot of interesting stuff. What language do you program a robot that


00:04:48.320 --> 00:04:51.280
writes in the sand in? >> It's always a mix of Python and C++.


00:04:51.280 --> 00:04:56.160
So I think I stuck to that up until now. >> Yeah. Yeah. It sounds like it. Ruben,


00:04:56.160 --> 00:05:01.280
what's your story? Tell people a bit about yourself. >> Yeah. So I also started in robotics.


00:05:01.280 --> 00:05:08.320
I did a mechatronics engineering degree. And while working in robotics, I started at my previous


00:05:08.320 --> 00:05:14.400
company, Smart Robotics. And there we were building the new modern AI-driven robots.


00:05:14.400 --> 00:05:19.600
So that also involves a lot of deep learning packages and stuff like that. And that is kind


00:05:19.600 --> 00:05:25.200
of how I got into these package management solutions. And we started using Conda to package


00:05:25.200 --> 00:05:31.680
our C++ and our Python stuff and to make it easy to use in these virtual environments where we


00:05:31.680 --> 00:05:38.560
combine those packages. And it all was made easier by Mamba, which was built by Wolf. So that's how


00:05:38.560 --> 00:05:45.600
we got in touch. And later on, I moved to Wolf's company. So that's why I'm here now. >> Excellent.


00:05:45.600 --> 00:05:50.400
So you're a prefix dev as well. >> Yes. >> Awesome. >> I'm an expert dev there. Yeah.


00:05:50.400 --> 00:05:56.160
>> Cool. Well, I guess let's start with a little bit of maybe setting the stage. So you all talked


00:05:56.160 --> 00:06:02.720
about Conda and Conda Forge and really relying on that for a while and then wanting better


00:06:02.720 --> 00:06:07.120
performance, some other features we're going to talk about as well. But give us a quick background


00:06:07.120 --> 00:06:12.480
for those maybe non-data scientists or people who are not super into it. What is Conda and what is


00:06:12.480 --> 00:06:17.760
Conda Forge and the relationship of those things? Who wants to take that? >> Conda is, generally


00:06:17.760 --> 00:06:24.800
speaking, a package manager. That's all it is. Actually has nothing specific to AI, ML, data


00:06:24.800 --> 00:06:30.320
science, et cetera. But most people associate it with Python and machine learning, let's say.


00:06:30.320 --> 00:06:36.800
And Conda is written in Python and it's like, I don't know, 10 or 15 years old. And it kind of


00:06:36.800 --> 00:06:44.160
comes out of an era where there were no wheel files on PyPI and people had to compile stuff


00:06:44.160 --> 00:06:48.720
on their own machines. There was no good Windows support. >> Right. You can't use this. Where's


00:06:48.720 --> 00:06:54.400
your Fortran compiler? Come on. >> Yeah, exactly. >> What year is this again? >> And you need your


00:06:54.400 --> 00:07:02.160
GCC, et cetera. That's kind of when Conda was born. And I think it really was one of those early


00:07:02.160 --> 00:07:07.440
tools that tried something with binary package management cross-platform. So basically, Conda


00:07:07.440 --> 00:07:13.600
allowed you to install Python and a bunch of Python packages that needed compiled extensions


00:07:13.600 --> 00:07:19.840
like NumPy, SciPy, et cetera. And it kind of comes out of this Travis Olyphant universe of


00:07:19.840 --> 00:07:26.240
scientific Python tools. >> Yeah. He's made a huge impact, for sure. >> Yeah. But for us, sort of,


00:07:26.240 --> 00:07:30.960
the key feature is just that it's like a cross-platform generic package manager that


00:07:30.960 --> 00:07:36.480
you can actually use for any language. So you can also create Conda packages for R.


00:07:36.480 --> 00:07:43.600
And there are actually quite a few R packages on Conda for us, let's say. And you can also do Julia


00:07:43.600 --> 00:07:48.960
or Rust, et cetera. So there's a lot of possibility and potential. I think it also kind of hits a


00:07:48.960 --> 00:07:53.600
sweet spot where Conda is really not a language-specific package manager, at the same time


00:07:53.600 --> 00:07:58.800
cross-platform. Because usually what you have is you have either some sort of Windows package


00:07:58.800 --> 00:08:04.880
manager or Linux package manager like apt-get or DNF on Fedora, or you have a language-specific


00:08:04.880 --> 00:08:11.680
package manager like pip or Julia has package.jl or, I don't know, R has CRAN, et cetera. And so


00:08:11.680 --> 00:08:16.800
Conda kind of sits at the crossroads of those two, where it's not language-specific and also


00:08:16.800 --> 00:08:21.920
cross-platform. And I think that makes it really interesting. And then maybe I can also talk a


00:08:21.920 --> 00:08:26.720
little bit about Conda Forge, because I think that's the other really impactful part about the


00:08:26.720 --> 00:08:33.040
Conda universe, where Conda Forge is really a group of, I think, over 5,000 individual people


00:08:33.040 --> 00:08:39.760
that are building packages in GitHub repositories. And each of those repositories basically builds a


00:08:39.760 --> 00:08:45.920
recipe on a CI system that then kind of results in the artifact, which is a Conda package that


00:08:45.920 --> 00:08:53.760
you can install. And so all of the packages on Conda Forge are built on CI systems. And most of


00:08:53.760 --> 00:08:59.040
them are cross-platform available. So you have them for Windows, macOS, and Linux. And those


00:08:59.040 --> 00:09:04.960
packages are all the low-level stuff. Usually, Conda starts at the glibc level, let's say. So


00:09:04.960 --> 00:09:10.560
glibc is that fundamental library that we need to get from the operating system. And on Windows and


00:09:10.560 --> 00:09:15.840
macOS, there's an SDK and other DLLs that we need from the operating system. But everything


00:09:15.840 --> 00:09:23.200
above is managed by Conda or Mamba or Pixi. So all of these tools work on the base of the same


00:09:23.200 --> 00:09:30.560
packages. And that starts at bzip2 or zlib, these low-level compression libraries, OpenSSL,


00:09:30.560 --> 00:09:37.200
and then up to Python. And then you can also get Qt, which is a graphical user interface library,


00:09:37.200 --> 00:09:42.320
which is written in C++. And applications that are building on top of Qt, so for example,


00:09:42.320 --> 00:09:48.480
physics simulation engines and stuff like this. And you also get Cuda and lots of libraries like


00:09:48.480 --> 00:09:55.200
this. All is not bound to a specific operating system in that sense. And that makes it pretty


00:09:55.200 --> 00:10:00.080
nice. For example, also in CI, when you want to test your own software and stuff like this,


00:10:00.080 --> 00:10:04.560
you can use the same commands to set up basically the same packages across different platforms.


00:10:04.560 --> 00:10:11.200
- Yeah, nice. So kind of like what Wheels did for pip and PyPI, Conda was way ahead of that game,


00:10:11.200 --> 00:10:16.240
right? But with a harder challenge because it wasn't just Python packages, it was all these


00:10:16.240 --> 00:10:20.240
different ones, right? - Yeah, including Python itself. So that's also one of the things that


00:10:20.240 --> 00:10:25.120
people sometimes maybe not realize, but Python itself is actually properly packaged on Conda


00:10:25.120 --> 00:10:31.920
Forge and installable via Conda or Mamba or Pixi. - Ruben, anything you want to add to that before we


00:10:31.920 --> 00:10:37.360
start talking about what you all are creating? - Yeah, so from my history, it's like this


00:10:37.360 --> 00:10:43.200
multi-platform stuff is left used in robotics because a lot of the stuff is still running in


00:10:43.200 --> 00:10:50.320
Linux, but it moved it from the ability to run it only on Ubuntu to, yeah, any version you want. And


00:10:50.320 --> 00:10:56.800
you could install any version of the robotics software you're running on like any version of


00:10:56.800 --> 00:11:02.240
Ubuntu. So where we were locked, not just to Linux, but locked to a distribution of Linux,


00:11:02.240 --> 00:11:07.840
we were now like completely unbound and the developers can set their own environments,


00:11:07.840 --> 00:11:12.960
which is just really powerful for the user itself. That brought it back into our company


00:11:12.960 --> 00:11:17.360
in a much better way. - That's excellent. I'm always blown away at how much traffic


00:11:17.360 --> 00:11:23.280
these package managers have, how much bandwidth they use and things like that. Who's hosting


00:11:23.280 --> 00:11:29.680
Conda Forge and where you get that stuff from? - Currently, Conda Forge is entirely hosted by


00:11:29.680 --> 00:11:35.920
anaconda.org. We do have a couple of mirrors available, but they are not really used. But


00:11:35.920 --> 00:11:41.600
one of the more exciting mirrors that we have is on GitHub itself. GitHub has this GitHub packages


00:11:41.600 --> 00:11:47.760
feature and we are using an OCI registry where you would usually put your Docker containers and


00:11:47.760 --> 00:11:53.040
stuff like that. We upload all the Conda packages there just as a backup. And we're planning to make


00:11:53.040 --> 00:11:57.680
it usable as well. So that would be nice for your own GitHub actions and stuff because they could


00:11:57.680 --> 00:12:03.440
just take the package from GitHub internal. - Just write down the server rack in the data


00:12:03.440 --> 00:12:04.560
center. - Yeah, exactly.


00:12:04.560 --> 00:12:07.200
- Keep it local. It's always good to be local. - Yep.


00:12:07.200 --> 00:12:13.280
- Okay. I want to focus mostly on Pixie for our conversation because I think that's got a lot


00:12:13.280 --> 00:12:18.080
of excitement. Maybe we'll get some time to talk about Mamba and other things as well. But yeah,


00:12:18.080 --> 00:12:24.240
you all wrote this interesting announcement entitled, "Let's Stop Dependency Hell,"


00:12:24.240 --> 00:12:28.640
talking about Pixie here. I think we can just sort of talk through some of the ideas you laid out


00:12:28.640 --> 00:12:31.360
there and that'll give people a good idea of what this is all about. - Yeah.


00:12:31.360 --> 00:12:36.080
- Yeah. So first of all, let's start with some of the problems you're trying to solve here. So


00:12:36.080 --> 00:12:42.000
we've all experienced issues with reproducibility and dependency management. I will tell you just


00:12:42.000 --> 00:12:48.400
yesterday, and if it was later in the day for me, it would probably be today, I'm running into a


00:12:48.400 --> 00:12:54.800
problem with my courses website where I try to install both the developer dependencies and the


00:12:54.800 --> 00:12:59.680
production dependencies. And it's like, this one requires greater than this dependency, and this


00:12:59.680 --> 00:13:04.720
one requires less than that dependency. You can't install it. I'm like, well, how am I supposed to


00:13:04.720 --> 00:13:13.040
do this? I'd rather have it shaky than impossible. So, you know, dependency challenges are all too


00:13:13.040 --> 00:13:18.960
present for me. But yeah, let's maybe you can lay out some of the ideas, like what you had in mind


00:13:18.960 --> 00:13:23.520
when you're talking about reproducibility and challenges here. - Yeah. I think you're not alone,


00:13:23.520 --> 00:13:29.680
first of all. So a lot of people have these kind of problems and it's also not only in the Python


00:13:29.680 --> 00:13:34.160
world, let's say, but I think it's maybe a bit more pronounced in the Python world just because


00:13:34.160 --> 00:13:38.000
there are so many packages and the way that package management in the Python world works.


00:13:38.000 --> 00:13:41.680
- Yeah. I feel like we can always look over at the JavaScript. People feel a little bit better,


00:13:41.680 --> 00:13:45.440
but it's still a challenge for us. - That's true. Yeah. With Pixie,


00:13:45.440 --> 00:13:52.880
just to take one step back. So we kind of started to, again, rewrite the entirety of how you manage


00:13:52.880 --> 00:13:59.760
conda packages with Pixie or with the lower level tools that we're using in Pixie, which are called,


00:13:59.760 --> 00:14:05.840
it's like a set of crates that is under the retla repository. And those are like, I don't know,


00:14:05.840 --> 00:14:11.200
eight or nine crates that basically do everything from fetching the package, resolving the versions


00:14:11.200 --> 00:14:16.720
that you want to have, reading the metadata from the packages and linking it into the virtual


00:14:16.720 --> 00:14:21.040
environment because we're creating these virtual environments on the hard drive and we have a


00:14:21.040 --> 00:14:25.040
central cache and things like this. And so retla is kind of the low level tools that take care of


00:14:25.040 --> 00:14:30.080
all of this. And it's written more or less from scratch in Rust. I mean, obviously we're reusing


00:14:30.080 --> 00:14:35.040
a lot of the nice things that we found in the Rust ecosystem. So there are many very useful crates,


00:14:35.040 --> 00:14:41.040
but yeah, basically that's sort of the bottom line thing that we're doing. And what's also


00:14:41.040 --> 00:14:45.360
nice about it is that we are spinning off multiple things from the same set of crates.


00:14:45.360 --> 00:14:49.360
So it's not only Pixie, there's also one thing called retla build, which is actually building


00:14:49.360 --> 00:14:54.400
the conda packages. And there is another, and then we have the backend of our website, prefix.dev,


00:14:54.400 --> 00:14:59.520
which is also written in Rust and also uses retla underneath. So that's really nice for us.


00:14:59.520 --> 00:15:00.160
And a big win.


00:15:00.480 --> 00:15:06.480
This portion of talk Python to me is brought to you by Posit, the makers of Shiny, formerly RStudio,


00:15:06.480 --> 00:15:12.480
and especially Shiny for Python. Let me ask you a question. Are you building awesome things? Of


00:15:12.480 --> 00:15:16.320
course you are. You're a developer or data scientist. That's what we do. And you should


00:15:16.320 --> 00:15:22.240
check out Posit Connect. Posit Connect is a way for you to publish, share and deploy all the data


00:15:22.240 --> 00:15:28.240
products that you're building using Python. People ask me the same question all the time. Michael,


00:15:28.240 --> 00:15:32.880
I have some cool data science project or notebook that I built. How do I share it with my users,


00:15:32.880 --> 00:15:40.400
stakeholders, teammates, I need to learn FastAPI or flask or maybe view or react.js Hold on now.


00:15:40.400 --> 00:15:44.240
Those are cool technologies, and I'm sure you'd benefit from them. But maybe stay focused on the


00:15:44.240 --> 00:15:49.120
data project. Let Posit Connect handle that side of things. With Posit Connect, you can rapidly


00:15:49.120 --> 00:15:55.040
and securely deploy the things you build in Python, Streamlit, Dash, Shiny, Bokeh, FastAPI,


00:15:55.040 --> 00:16:01.680
flask, Quadro, reports, dashboards and APIs. Posit Connect supports all of them. And Posit Connect


00:16:01.680 --> 00:16:07.360
comes with all the bells and whistles to satisfy IT and other enterprise requirements. Make deployment


00:16:07.360 --> 00:16:12.080
the easiest step in your workflow with Posit Connect. For a limited time, you can try Posit


00:16:12.080 --> 00:16:20.000
Connect for free for three months by going to talkpython.fm/posit. That's talkpython.fm/posit.


00:16:20.000 --> 00:16:26.880
Talkpython.fm/posit. The link is in your podcast player show notes. Thank you to the team at Posit


00:16:26.880 --> 00:16:33.680
for supporting Talk Python. If I wanted to stick with say, Conda, could I still use Rattler build


00:16:33.680 --> 00:16:38.160
and then somehow upload that to Conda Forge, something along those lines? Okay.


00:16:38.160 --> 00:16:44.480
You can totally, like, that's kind of the baseline sort of commonality between all of these tools is


00:16:44.480 --> 00:16:48.400
that we are sharing the same sort of Conda packages and the same metadata. And like,


00:16:49.120 --> 00:16:53.280
we definitely want to be 100% compatible package-wise with Conda for now.


00:16:53.280 --> 00:16:53.760
Excellent.


00:16:53.760 --> 00:16:57.920
We might have features later on, but we like, we don't like, we want to go through,


00:16:57.920 --> 00:17:02.400
like, Conda as a project has also like, become much more community oriented. And there's like,


00:17:02.400 --> 00:17:07.440
a process called Conda Enhancement Proposals. And we have already written a few of those.


00:17:07.440 --> 00:17:10.560
So there are many ideas, but we can talk about that later.


00:17:10.560 --> 00:17:13.360
Trying to improve the overall system instead of overthrow it.


00:17:13.360 --> 00:17:18.480
Yes. Yes. Yeah. Like we would love to like, improve the entirety of like,


00:17:18.480 --> 00:17:22.480
Conda packages, Conda Forge and all of this. Like that's, that's our main dream.


00:17:22.480 --> 00:17:26.880
So, and then with some of the low-level tools in Rattler and with Pixi, we're kind of combining


00:17:26.880 --> 00:17:31.600
a bunch of tools that already existed. And one thing essential for reproducibility is


00:17:31.600 --> 00:17:35.680
that you have log files. So at the point where you are sort of resolving your,


00:17:35.680 --> 00:17:39.760
your dependencies, we are also writing them into a log file. And that's like something


00:17:39.760 --> 00:17:46.800
known from poetry, from NPM, Yarn, Cargo also has it. And there's also a Conda project that's called


00:17:46.800 --> 00:17:52.240
Conda Log that writes log files. And so we have adopted the same format that Conda Log uses,


00:17:52.240 --> 00:17:57.600
which is a YAML-based log file format and implemented in Rattler. And we are exposing


00:17:57.600 --> 00:18:02.960
it and using it in Pixi. So anytime you like, add a new dependency to your project, we write it in a


00:18:02.960 --> 00:18:09.200
log file and we make sure that like, you can install the same packages, the same set of packages,


00:18:09.200 --> 00:18:14.800
the same versions and SHA hashes in like the future. And the other part about reproducibility,


00:18:14.800 --> 00:18:20.240
and that's more on the repository side is that Conda Forge never deletes old packages. So that's


00:18:20.240 --> 00:18:25.520
similar to PyPI, but not really this, like it's different in a lot of like Linux distributions,


00:18:25.520 --> 00:18:29.840
but with PyPI, it's also the case that, you know, old versions are just kept around.


00:18:29.840 --> 00:18:35.680
Do you ever worry that that might not be sustainable? Like it's fine now in 20 years,


00:18:35.680 --> 00:18:42.640
but like we cannot pay for the thing in 20 years. Like it's, we just can't get enough donations to


00:18:42.640 --> 00:18:48.480
support Flask 0.1. We just can't. It's out. That's the problem of the person that uses


00:18:48.480 --> 00:18:53.520
Flask 0.1, right? Like that's not the problem of the repository. I think we're just making sure


00:18:53.520 --> 00:18:59.680
that you could still run it and you should probably sandbox it like crazy so that there


00:18:59.680 --> 00:19:04.800
are no like zero days that could affect your system. You do have some things that are like


00:19:04.800 --> 00:19:09.600
self-hosted Conda capabilities that maybe we'll get a chance to talk about. Like


00:19:09.600 --> 00:19:16.160
theoretically you could download these and save as a company or an organization or a researcher.


00:19:16.160 --> 00:19:18.400
You could get the ones that actually count for you, right?


00:19:18.400 --> 00:19:21.360
Yeah. Like, I mean, only have a subset of the packages that you need.


00:19:21.360 --> 00:19:25.760
Yeah. Say I'm using 50 packages with the transitive closure of everything I'm using. And


00:19:25.760 --> 00:19:31.680
so I'm just going to make sure I have every version of those on Dropbox or on a hard drive


00:19:31.680 --> 00:19:33.120
I put away somewhere.


00:19:33.120 --> 00:19:37.680
It's actually pretty funny because what you create on your local system is a cache of all


00:19:37.680 --> 00:19:42.640
the packages that you ever used. And you could activate that cache as a channel like what


00:19:42.640 --> 00:19:46.960
Conda Forge is. You could make your own channel of all your packages locally. This is something


00:19:46.960 --> 00:19:52.240
we use when the internet went down in our company and we still needed to share packages with each


00:19:52.240 --> 00:19:57.200
other and needed to make our environments. And just some people would spin up their own channel


00:19:57.200 --> 00:19:59.680
and you could use it from there. It's just a different URL.


00:19:59.680 --> 00:20:04.640
Yeah. That's awesome. Cool. I derailed your, your there, Wolf.


00:20:04.640 --> 00:20:10.320
No, but yeah, I think like log files are the basis for reproducibility. And then the fact


00:20:10.320 --> 00:20:16.560
that packages are never deleted. I think that's something that like log files make a little bit


00:20:16.560 --> 00:20:22.320
like a Docker container sort of. Because you know exactly what's in your software environment.


00:20:22.320 --> 00:20:27.120
We don't control the outside and we don't do sandboxing as of now, but that's kind of the


00:20:27.120 --> 00:20:32.160
way we think about log files. And it just makes it very convenient also to ship basically that


00:20:32.160 --> 00:20:38.880
log file plus the Pixie Toml and stuff to your coworker and they can just run it. And we also


00:20:38.880 --> 00:20:43.440
resolve for multiple operating systems at the same time. So you can say, you can specify in


00:20:43.440 --> 00:20:48.880
your Pixie Toml if you want Linux, MacOS and Windows, and we resolve everything at the same


00:20:48.880 --> 00:20:54.160
time in parallel with async Rust code and stuff like this. So it's pretty fast and nice. And


00:20:54.800 --> 00:20:58.160
yeah, the idea is that you can send it to your coworker. They can just do a Pixie run start,


00:20:58.160 --> 00:21:01.120
which would just give them everything they need and have them up and going.


00:21:01.120 --> 00:21:07.760
Really cool. So in your announcement for Pixie, one of the things you said is you're looking for


00:21:07.760 --> 00:21:15.680
the convenience of modern package managers, such as Cargo. What's different than say pip and PyPI


00:21:15.680 --> 00:21:19.600
versus Cargo? Like when you say that, what are these new features? You're like, I wish we had


00:21:19.600 --> 00:21:24.560
this already. We don't, so I'm going to build it. I think one thing that's just really nice was


00:21:24.560 --> 00:21:29.200
Cargo is, and that also attracts so many contributors to Rust projects, at least


00:21:29.200 --> 00:21:36.080
that's the way I feel about it, is that it's so easy to just say Cargo run whatever, and it most


00:21:36.080 --> 00:21:41.600
of the time works and you just do Cargo build and it builds. And that's the experience that we want


00:21:41.600 --> 00:21:47.600
to recreate with Pixie. And Cargo also comes with log files and Cargo just does this pretty nicely.


00:21:47.600 --> 00:21:53.520
I mean, there are some peculiarities about how Rust builds packages or things about dependencies


00:21:53.520 --> 00:21:57.920
where the result is pretty different, let's say from like Python ecosystem and stuff like this,


00:21:57.920 --> 00:22:01.440
but the baseline experience is definitely what we're also striving for.


00:22:01.440 --> 00:22:07.200
And part of the problem is maybe also that pip is not managing Python. So you always have that


00:22:07.200 --> 00:22:11.280
a little bit of a chicken and egg problem where you need to get Python first to be able to run


00:22:11.280 --> 00:22:16.000
PIP. And with Pixie, you don't have that problem because we also manage Python. So you can specify


00:22:16.000 --> 00:22:20.720
in your Pixie what version of Python you want. You get it on Windows, MacOS, and Linux in the


00:22:20.720 --> 00:22:26.000
same way. And everything is just one command and everything is also locked in your log file,


00:22:26.000 --> 00:22:32.080
et cetera. So that's kind of, yeah, we just control a bit more than PIP. And I think that's


00:22:32.080 --> 00:22:37.600
what's giving us some power. And then pip also, as far as I'm aware, and we recently had discussions


00:22:37.600 --> 00:22:44.480
with Python package management developers, they haven't come up with a log file format that works


00:22:44.480 --> 00:22:48.560
for everyone yet. So Poetry has their own implementation and a bunch of other tools


00:22:48.560 --> 00:22:53.280
maybe have their own implementations as well. - Right. There's the pip log from PIPenv and others.


00:22:53.280 --> 00:22:58.720
- We're also kind of working on that. I don't know if you saw that, but we just announced another


00:22:58.720 --> 00:23:02.800
tool that's also low level, sort of on the same level as Red Lab, but it's called RIP. And it


00:23:02.800 --> 00:23:09.360
deals with Python resolving and wheel files. And so we want to kind of cross over those two worlds


00:23:09.360 --> 00:23:14.400
where we resolve the Conda packages first, and we resolve the Python packages after,


00:23:14.400 --> 00:23:19.600
and we stick everything into the same log file that will for now be similar to the, yeah,


00:23:19.600 --> 00:23:24.000
basically based on the Conda log format, which is a YAML file. - Interesting. So this RIP,


00:23:24.000 --> 00:23:29.440
I'm familiar with that. I didn't necessarily in my mind, tie it back to Pixie, but would that allow


00:23:29.440 --> 00:23:34.640
you to, could you mix and match? Like some stuff comes off Conda forwards and some stuff comes off


00:23:34.640 --> 00:23:40.400
of PyPI, but you express that in your dependency file? - Yeah. Like there are parts of the semantics


00:23:40.400 --> 00:23:45.120
that aren't yet figured out, let's say, but the idea is definitely that you can install Python


00:23:45.120 --> 00:23:50.480
and NumPy, for example, from Conda forwards. And then I don't know, scikit-learn from PyPI. Like


00:23:50.480 --> 00:23:53.920
that's maybe not the example of how you would use it, but. - Yeah, of course. Right. Maybe you do


00:23:53.920 --> 00:23:59.040
a, one of the web frameworks, right? Like FastAPI versus some of the scientific stuff from Conda.


00:23:59.040 --> 00:24:05.040
At least the official Conda stuff. Sometimes the framework, certain frameworks are a little bit


00:24:05.040 --> 00:24:12.000
behind and there are situations where having the latest one within an hour matters a lot. You know,


00:24:12.000 --> 00:24:17.680
for example, Hey, it turns out theoretically it's not real. It turns out that say Flask has a super


00:24:17.680 --> 00:24:23.200
bad remote code execution problem. We just found out that if you send like a cat emoji as part of


00:24:23.200 --> 00:24:28.320
the URL, it's all over. So patch it now. Right. Like you don't want to wait for that to like


00:24:28.320 --> 00:24:34.960
slowly get through some, you need that now. Right. And PyPI I find is kind of the tip of the latest


00:24:35.280 --> 00:24:41.360
in that regard. - I do agree to some extent. So it's like, we also found that a lot of,


00:24:41.360 --> 00:24:47.040
there are these no arch packages, like pure Python packages. And I think, and there's just way more


00:24:47.040 --> 00:24:52.720
packages on PyPI and the turn of managing that on Conda forwards is a bit high. So that's also like,


00:24:52.720 --> 00:24:56.880
we have lots of reasons. And also in real world examples, we often find people mixing


00:24:56.880 --> 00:25:03.520
PyPI, pip and Conda. So that's why we're thinking like we need proper sort of support for PyPI in


00:25:03.520 --> 00:25:06.960
our tool to make it really nice for Python developers. - It would take it to another level


00:25:06.960 --> 00:25:12.480
for sure. And it would certainly make it stand out from what Conda does or what pip does honestly.


00:25:12.480 --> 00:25:17.280
- Conda for example, there is a way to kind of like add some Python dependency or pip dependencies,


00:25:17.280 --> 00:25:21.680
but it's really just invoking pip as like a sub process and then installing some additional stuff


00:25:21.680 --> 00:25:26.480
into your environment. And it's not really nice, not really tightly integrated. And so we actually


00:25:26.480 --> 00:25:34.640
kind of did the work and wrote a resolver and rust, so SAT solver. And we've just extended it


00:25:34.640 --> 00:25:40.160
to also deal with Python or PyPI metadata, which is kind of what RIP is. So that's going to be very


00:25:40.160 --> 00:25:44.880
interesting to figure out how to integrate those things and like really make them work nicely


00:25:44.880 --> 00:25:49.680
together. - I wanna talk about the ergonomics using Pixie, but first, maybe Ruben, you could address


00:25:49.680 --> 00:25:56.320
this first, but I opened this whole conversation with a thousand flowers blooming around the


00:25:56.320 --> 00:26:03.680
package management story. And I think for a long time, what people had seen was they're going to


00:26:03.680 --> 00:26:08.880
try to innovate within Python. So you install Python, you create your environment, and then


00:26:08.880 --> 00:26:13.920
like you have a different workflow with different tools. But some of the new ideas are starting to


00:26:13.920 --> 00:26:19.280
move to the outside. Like we'll also manage Python itself. If you say you want Python 3.10 and you


00:26:19.280 --> 00:26:24.480
only have 3.11 installed, we'll take care of that. And something built on Python has a real hard time


00:26:24.480 --> 00:26:28.720
installing Python because there's this chicken and egg, probably needs it first, right? And it


00:26:28.720 --> 00:26:33.280
sounds like you all are taking that approach of we're going to be outside of Python, you know,


00:26:33.280 --> 00:26:39.040
built in rust or any binary that just runs on its own would work to have a greater control, right?


00:26:39.040 --> 00:26:43.920
So yeah, I know, just what are your thoughts on that? - Yeah, so one of the strong points is Pixie


00:26:43.920 --> 00:26:49.120
that you can install it as a standalone binary. So you have a simple script or you can even just


00:26:49.120 --> 00:26:54.560
download it and put it in your machine and then you can install whatever you want. So you're not


00:26:54.560 --> 00:27:00.960
limited to Python alone. And in a lot of cases, you want to mix a lot of stuff. Sometimes you


00:27:00.960 --> 00:27:06.480
need a specific version of SSH or sometimes you need a specific version of OpenSSL or whatever


00:27:06.480 --> 00:27:12.480
that meets your package. And you would have these long lists of getting started to like, oh, you


00:27:12.480 --> 00:27:17.520
need to install this with APT or you need to install this with name anything, any other package


00:27:17.520 --> 00:27:23.280
manager, and then you can run pip install and then it should all work. And Pixie kind of moves it


00:27:23.280 --> 00:27:27.680
back to you have to have Pixie and you have to have the source code of the package that you're


00:27:27.680 --> 00:27:33.120
running or you're directly like using Pixie to install something. And like you're most of the


00:27:33.120 --> 00:27:39.120
time just two commands away from running the actual code that you're trying to run instead of


00:27:39.120 --> 00:27:42.960
going to read some kind of readme from a person on the internet.


00:27:42.960 --> 00:27:46.800
Yeah. And it's also pretty challenging for newcomers to programming.


00:27:46.800 --> 00:27:48.880
This is really focused on making it easy.


00:27:48.880 --> 00:27:52.080
Yeah, exactly. I just want to run this. You're like, but what am I doing all this terminal


00:27:52.080 --> 00:27:56.480
stuff? Like I just want to run, I wrote the program. I want it to go. I feel like maybe


00:27:56.480 --> 00:28:01.360
that's part of why notebooks and that whole notebook, Jupyter side of things is so popular


00:28:01.360 --> 00:28:05.760
because assuming somebody has created a server and got it started for you, like you don't worry


00:28:05.760 --> 00:28:06.720
about those things. Right.


00:28:06.720 --> 00:28:07.280
Yeah, exactly.


00:28:07.280 --> 00:28:12.720
Yeah. Let's talk about kind of the, that beginner experience. If you have an example on your


00:28:12.720 --> 00:28:17.520
website somewhere where it just shows, if you just check out a repository that's already been


00:28:17.520 --> 00:28:25.040
configured to use Pixie, it's just clone Pixie run to run start or something like that. Right.


00:28:25.040 --> 00:28:29.280
You don't have to create the environments. And even that could potentially happen without Python


00:28:29.280 --> 00:28:30.720
even on the machine initially. Right.


00:28:30.720 --> 00:28:36.640
Totally. So a funny part of Pixie is we Pixie itself is a Pixie project. So if we want to


00:28:36.640 --> 00:28:43.680
build Pixie, it is a Rust project, but we run Pixie run build in this case, or Pixie run install.


00:28:43.680 --> 00:28:50.720
So you kind of move everything back into the tasks in Pixie and you can run it using Pixie.


00:28:50.720 --> 00:28:52.560
And Pixie will take care of your environment.


00:28:52.560 --> 00:28:52.960
Nice.


00:28:52.960 --> 00:28:57.920
Yeah. So basically, as I also said before, we're learning a lot, for example, from Cargo. So we


00:28:57.920 --> 00:29:03.200
also have a single Pixie terminal file that kind of defines all of your dependencies, a bit of


00:29:03.200 --> 00:29:08.160
metadata about your project, and then you can define these tasks. And so like what we see on


00:29:08.160 --> 00:29:13.920
the screen is that we have a task that's called start and that just runs Python main.py. So that's


00:29:13.920 --> 00:29:19.200
pretty straightforward, but obviously like you can go further, like you can have tasks that depend


00:29:19.200 --> 00:29:23.920
on other tasks and that we're learning a lot from. There's a project called taskfile.dev.


00:29:23.920 --> 00:29:28.720
And we also want to integrate caching into these tasks so that if you like one task might


00:29:28.720 --> 00:29:33.200
download something on your system, like some assets that you need, like images and stuff.


00:29:33.200 --> 00:29:36.480
And if you already have them cached, then you don't need to re-download them and these kind


00:29:36.480 --> 00:29:41.840
of things. So we're really like wanting to build a simple but powerful task system in there.


00:29:41.840 --> 00:29:46.400
And that benefits greatly from having these dependencies available because like in this


00:29:46.400 --> 00:29:50.720
case, what we see on the screen, we have two dependencies. And one of those is Python 3.11.


00:29:50.720 --> 00:29:56.320
And that means the moment you run Pixie run start, it will actually look at the log file


00:29:56.320 --> 00:30:00.000
and look at what you have in your local environment installed. And the environments


00:30:00.000 --> 00:30:03.440
are always local to the project, which is also a difference to call that number.


00:30:03.440 --> 00:30:08.320
So it will look into that environment and check if Python 3.11 is there. And if the version that


00:30:08.320 --> 00:30:12.000
you have in your environment corresponds to the one that's listed in the log file,


00:30:12.000 --> 00:30:16.240
and if not, it will download the version and install it into your environment and like make


00:30:16.240 --> 00:30:21.120
sure that you have all the stuff that's necessary or listed to run what you need.


00:30:21.120 --> 00:30:27.920
Nice. This portion of talk Python to me is brought to you by Python tutor. Are you learning Python


00:30:27.920 --> 00:30:34.320
or another language like JavaScript, Java, C or C++? If so, check out Python tutor. This free


00:30:34.320 --> 00:30:40.240
website lets you write code, run it and visualize what happens line by line as your code executes.


00:30:40.240 --> 00:30:45.120
No more messy print statements are fighting with the debugger to understand what code is doing.


00:30:45.120 --> 00:30:50.400
Python tutor automatically shows you exactly what's going on step by step in an intuitive visual way.


00:30:51.040 --> 00:30:56.320
You'll see all the objects as they are represented in Python memory, and how they are connected and


00:30:56.320 --> 00:31:01.840
potentially shared across variables over time. It's a great free tool to complement what you're


00:31:01.840 --> 00:31:06.400
learning from books, YouTube videos, and even online courses like the ones right here at talk


00:31:06.400 --> 00:31:11.680
Python training. In fact, I even used Python tutor when creating our Python memory management and


00:31:11.680 --> 00:31:16.880
tips course. It was excellent for showing just what's happening with references and containers


00:31:16.880 --> 00:31:22.560
in memory. Python tutor is super easy to check out. Just visit talk Python dot fm slash Python


00:31:22.560 --> 00:31:28.160
dash tutor and click visualize code. It comes preloaded with an example and you don't even need


00:31:28.160 --> 00:31:33.120
an account to use it. Again, that's talk Python dot fm slash Python dash tutor to visualize your


00:31:33.120 --> 00:31:37.760
code for free. The link is in your podcast player show notes. Thank you to Python tutor for sponsoring


00:31:37.760 --> 00:31:47.040
this episode. So for example, you got in your example, a Python 311 for some flexibility there


00:31:47.040 --> 00:31:52.160
on the very, very end. Does that download a binary version or does it build from source or what


00:31:52.160 --> 00:31:58.160
happens when it needs that? Yeah. So typically like Konda is a binary package manager. So usually


00:31:58.160 --> 00:32:02.720
what you download is binary. We are working on the source dependency capabilities where


00:32:02.720 --> 00:32:06.880
also Rackler build, what I mentioned before is going to play a big role because the idea is that


00:32:06.880 --> 00:32:11.920
you can also run pixie build at some point soon and that will build your Konda package out of your


00:32:11.920 --> 00:32:17.600
pixie project. But we would use the same capabilities to basically also allow you to


00:32:17.600 --> 00:32:21.680
get local dependencies and then build them ad hoc and put them into your environment.


00:32:21.680 --> 00:32:26.720
Yeah. So that comes back to the example you gave before with the problem that there's a


00:32:26.720 --> 00:32:34.240
user debug or something and you would want to use a non support. Yeah. A version that's not


00:32:34.800 --> 00:32:40.560
shared around the world yet. So you need this GitHub link and that package you need to install.


00:32:40.560 --> 00:32:46.160
And that's something we still want to support through this local or URL based dependency.


00:32:46.160 --> 00:32:51.040
But for that, we first need to be able to build it. Yeah. Kind of like the get plus on pip install.


00:32:51.040 --> 00:32:56.160
Yeah. Yeah, exactly. I found that where this little section was here, where this pixie is


00:32:56.160 --> 00:33:00.960
made for collaboration on your announcement, where it just says get clone some repo pixie run,


00:33:00.960 --> 00:33:04.880
start build, whatever. Yeah. Maybe just talk through like what happens there? Because if I


00:33:04.880 --> 00:33:08.960
don't even have Python, much less a virtual environment, much less the things installed,


00:33:08.960 --> 00:33:14.240
you know, if I try this at Python, if I, they just say clone this, go here, Python run. Like


00:33:14.240 --> 00:33:18.720
if you don't have Python, it'll just say Python. What is that? You do a Python. It'll say, you know,


00:33:18.720 --> 00:33:24.960
FastAPI. What is that? Right? Like there's a lot of steps that this really simplifies. And that's


00:33:24.960 --> 00:33:29.040
kind of what I was talking about with the beginners as well. Like, you know, maybe speak to what's


00:33:29.040 --> 00:33:35.680
happening here. Yeah. So when you do pixie run, it will create, and you have nothing on your system,


00:33:35.680 --> 00:33:41.520
right? Except for pixie and that repository, then it's going to create a hidden folder inside of


00:33:41.520 --> 00:33:46.480
your project. That's called dot pixie. And in there, it will install all of these tools that


00:33:46.480 --> 00:33:52.640
are dependencies of the project. So Python, NumPy, scikit-learn, whatever. And that like,


00:33:52.640 --> 00:33:57.280
and then when you do pixie run, it will invoke, actually, there's a thing called Dino task share,


00:33:57.280 --> 00:34:02.080
which we're using. And that's basically something, like, it looks like bash, but it also works in


00:34:02.080 --> 00:34:08.000
Windows, which is like the key feature here. So that will sort of run the task. And in this case,


00:34:08.000 --> 00:34:12.560
like some task is probably defined inside of the pixie toml. And that might run something like


00:34:12.560 --> 00:34:19.120
Python, I don't know, start flask or start Jupyter or, you know, whatever the developer


00:34:19.120 --> 00:34:24.400
desires to do. But the cool thing is that it will, like in the background, activate the environment,


00:34:24.400 --> 00:34:27.760
like the virtual environment and use it to run your software.


00:34:27.760 --> 00:34:28.640
- Yeah, that's really cool.


00:34:28.640 --> 00:34:34.000
- And that, yeah, most of that kind of happens behind the scenes. So also with Conda, for example,


00:34:34.000 --> 00:34:40.560
or Mamba, it's usually multiple steps. So usually what you would do is you do like Mamba create


00:34:40.560 --> 00:34:44.000
my environment, and then the environment would have some name, and then you would need to do


00:34:44.000 --> 00:34:49.840
Mamba activate my environment. And then only you would be able to run stuff. And what you're


00:34:49.840 --> 00:34:54.000
running is also probably going to look more complicated than just typing pixie run some


00:34:54.000 --> 00:34:55.280
task, which does all of that.


00:34:55.280 --> 00:34:59.600
- Right. The some task is almost an alias for the actual run command, right?


00:34:59.600 --> 00:34:59.920
- Yeah.


00:34:59.920 --> 00:35:01.120
- Yeah. Yeah.


00:35:01.120 --> 00:35:04.560
- Could be something very complicated. And it could also be multiple tasks that actually run


00:35:04.560 --> 00:35:06.560
in the background because they can depend on each other.


00:35:06.560 --> 00:35:12.800
- Excellent. I really like that the virtual environment or all the binary configuration


00:35:12.800 --> 00:35:19.360
stuff is a sub directory of the project. That's always bothered me about Conda. If I go,


00:35:19.760 --> 00:35:26.560
I've got, I think I have about 260 GitHub repos on my GitHub profile, and I check out other people's


00:35:26.560 --> 00:35:31.040
stuff and check it out. And so if I go just to my file system and I go in there, I'm like,


00:35:31.040 --> 00:35:35.600
I haven't messed with this for a year. Was that on the old computers on my laptop? Is on my mini?


00:35:35.600 --> 00:35:40.080
Like what was that on? I don't, so it could be I haven't set it up or maybe I have, right?


00:35:40.080 --> 00:35:45.120
And if I go there and I see there's a VNV folder or something along those lines, I'm like, oh yeah,


00:35:45.120 --> 00:35:48.480
it might be out of date, but I definitely have done something with this here. I probably can


00:35:48.480 --> 00:35:53.840
run it. Whereas the Conda style, like you don't know, what did you name it? If you have 200 of


00:35:53.840 --> 00:35:59.680
them, what is the right one? How do I activate it? And then also if something kind of goes haywire,


00:35:59.680 --> 00:36:06.400
it's like, you know, I'm just going to RMRF that folder and it's out. Just recreate it on the new


00:36:06.400 --> 00:36:10.240
version of whatever. Right. But if it's somewhere else, you know, there's just like this, this


00:36:10.240 --> 00:36:14.800
disconnected, I know there's like a command flag to override or something to like get Conda to put


00:36:14.800 --> 00:36:19.280
it locally, but defaults are powerful. Right. And I really like that. It's, it's like there and you


00:36:19.280 --> 00:36:24.640
can just blast away the dot pixie and, you know, start over if you need to. We also using the same


00:36:24.640 --> 00:36:29.440
tricks that Conda uses and a bunch of other package managers. So you can have these multiple


00:36:29.440 --> 00:36:34.000
environments, but they actually share the underlying files. So if you use the same Python


00:36:34.000 --> 00:36:38.640
3.11 version and multiple environments, it's not like you don't duplicate those files. You don't


00:36:38.640 --> 00:36:42.080
lose a lot of storage, for example. Oh, that's nice. And the other thing that's really cool.


00:36:42.080 --> 00:36:45.920
And I mean, Conda also gives you that, but you can have completely different Python versions


00:36:45.920 --> 00:36:50.720
and all of these environments. And it's it's very like straightforward to use. Like you don't need


00:36:50.720 --> 00:36:56.320
to run it through containers or stuff like that. It's just like all in your system and yeah,


00:36:56.320 --> 00:37:01.440
very nice and isolated. Yeah. So one thing that I ran across here that was pretty interesting


00:37:01.440 --> 00:37:07.440
while just researching this, as you said, Pixie and Conda like Nix are language agnostics. And


00:37:07.440 --> 00:37:12.240
I'm like, what is this Nix thing? And that brought me over to Nix OS. What is this?


00:37:12.240 --> 00:37:17.840
Nix basically is a functional package manager. It works with a functional programming language,


00:37:17.840 --> 00:37:24.560
which is kind of an interesting idea. And a lot of people that know Nix really love it. So we would


00:37:24.560 --> 00:37:31.440
like for Pixie to also be as loved as Nix is by Nix people. And basically what's nice about the


00:37:31.440 --> 00:37:36.400
functional programming language is that it kind of, you know, from the input, the output, so you


00:37:36.400 --> 00:37:41.360
can cache the function execution and you know, okay, like if the function didn't change and the


00:37:41.360 --> 00:37:45.040
inputs didn't change, then the output is also not going to change. Right. You can cache the heck out


00:37:45.040 --> 00:37:50.240
of it. You can parallelize it so much and so on. Yeah. And that's kind of what like, that's how I


00:37:50.240 --> 00:37:55.120
understand Nix is that basically you have a function that you execute to, let's say, get


00:37:55.120 --> 00:38:01.280
bash on your system or get Python on your system. And once you have executed that function for that


00:38:01.280 --> 00:38:05.440
specific Python version, you know that you have, you know, Python with that hash in your system


00:38:05.440 --> 00:38:11.360
somewhere. And then Nix has some magic to kind of string things together so that you can also sort


00:38:11.360 --> 00:38:16.960
of do something like a conda activate where it would put the right version of Python, NumPy and


00:38:16.960 --> 00:38:23.280
whatever you installed through Nix onto your like system path and make it usable. And so I think


00:38:23.280 --> 00:38:29.760
Nix and Pixie are competitors. Anyway, the thing about the functional language is that it also makes


00:38:29.760 --> 00:38:35.120
it like way less beginner friendly, at least of my opinion. Yeah, I agree. The way Pixie kind of


00:38:35.120 --> 00:38:40.560
works is like really straightforward in a way. Like you just define your dependencies and ranges


00:38:40.560 --> 00:38:45.440
and stuff and you get the binaries. With Nix, sometimes you need to like, usually you build


00:38:45.440 --> 00:38:49.600
things from source. So that's also a difference. I think they have like distributed caches that you


00:38:49.600 --> 00:38:54.880
could use and things like that. But honestly, I'm not a user of Nix. So I'm not sure how, how widely


00:38:54.880 --> 00:39:00.560
these caches, like widely used these caches are. But we definitely look at Nix as like also another


00:39:00.560 --> 00:39:05.520
source of like inspiration. And I think they have something really good going for them because


00:39:05.520 --> 00:39:08.960
people that use Nix, they are like super evangelical about it.


00:39:08.960 --> 00:39:12.960
Well, it also probably helps its functional programming, right? People who do functional


00:39:12.960 --> 00:39:16.400
programming, like they love functional programming. That's for sure.


00:39:16.400 --> 00:39:20.560
The pureness of it is pretty, it's pretty nice. And then NixOS also goes like a set


00:39:20.560 --> 00:39:25.200
further where you can sort of manage your entire like configuration and everything through,


00:39:25.200 --> 00:39:29.360
through the same system. And that's also pretty powerful. And maybe, maybe we can


00:39:29.360 --> 00:39:33.760
find some interesting ways of like supporting something similar. But in a way, like if you


00:39:33.760 --> 00:39:38.880
look at Pixie, I think we are trying to, we don't actually care so much about Conda in a way, or


00:39:38.880 --> 00:39:43.040
like maybe that's also the wrong way to put it. But, but basically what we're looking is also like,


00:39:43.040 --> 00:39:47.920
how does Docker do things and how does Nix do things and like, how can we kind of like


00:39:47.920 --> 00:39:49.760
learn from those tools? And...


00:39:49.760 --> 00:39:54.400
Yeah, we have a pretty well-defined vision for ourselves. And the main part is that we just


00:39:54.400 --> 00:39:59.040
want to make it easy to get started. So you shouldn't have to hassle of learning a new


00:39:59.040 --> 00:40:04.640
thing to get started. You should just know like the bare minimum of information on how to run


00:40:04.640 --> 00:40:10.400
something. And Pixie is there to help you instead of we do something like with a complete vision,


00:40:10.400 --> 00:40:14.880
that's making it perfect. And we're even doing it in a specific OS that you need to install.


00:40:14.880 --> 00:40:19.680
We want this to be used on every OS and we want this to be used by everyone. So you can share


00:40:19.680 --> 00:40:23.040
your code with anyone, anywhere. That's something we really focus on.


00:40:23.040 --> 00:40:28.160
Sure. The clone and then just Pixie run. That's pretty easy. It's pretty easy for people to do,


00:40:28.160 --> 00:40:28.560
right?


00:40:28.560 --> 00:40:29.360
I would say so.


00:40:29.360 --> 00:40:34.240
So that's the experience of someone's set up a project for you. On your announcement post,


00:40:34.240 --> 00:40:41.120
you'll have a nice little example of not a terribly complicated example of an app that you might,


00:40:41.120 --> 00:40:45.680
or a project you set up, but maybe just talk through, like, if I want to start with just,


00:40:45.680 --> 00:40:49.680
maybe I have a GitHub repo already, but I haven't set it up. Like what's the process there?


00:40:49.680 --> 00:40:53.840
If you already have a GitHub repository, for example, you would just do Pixie init and then


00:40:53.840 --> 00:40:58.320
give it, yeah, basically you would just say dot because that's your current folder.


00:40:58.320 --> 00:41:01.920
Or if you don't have anything, you would just do something like Pixie.ini my project.


00:41:01.920 --> 00:41:06.400
And that will create the my project folder for you with a Pixie.toml file inside. And then once


00:41:06.400 --> 00:41:13.200
you have that, you can do Pixie add Python and you can use like the specifiers from Conda. So


00:41:13.200 --> 00:41:18.400
you could do something like Python equals 3.11 and that would get you Python 3.11 into the


00:41:18.400 --> 00:41:22.800
dependencies of that project. And then when you, and it also installed it at that point.


00:41:22.800 --> 00:41:27.840
And after it installs, it creates that log file that you can also like should check into your


00:41:27.840 --> 00:41:32.160
repository so that you know what the latest versions were that were like working for your


00:41:32.160 --> 00:41:36.880
project. Okay. Like the pinned, basically the pinned versions or constraints. Yeah.


00:41:36.880 --> 00:41:40.320
Yeah. One other thing that happens when you do Pixie add is that it actually goes and


00:41:40.320 --> 00:41:43.840
tries to figure out like what's the latest version that's available for that package


00:41:43.840 --> 00:41:48.320
and then already puts a pin into your dependencies. So what we see on the screen is like we do


00:41:48.320 --> 00:41:54.080
Pixie add cow pie and then it adds cow pie 1.1.5.star. So that's a pretty specific version


00:41:54.080 --> 00:41:59.040
already. Nice. And you haven't done it here, but so example is Pixie run cow pie. And then


00:41:59.040 --> 00:42:03.360
the parameters, hello, blog reader. And it like does the cow saying hello, blog reader.


00:42:03.360 --> 00:42:08.640
But when you talked earlier about the tasks or whatever, you could just say create a task


00:42:08.640 --> 00:42:13.280
called cow and it is Python cow pie. Hello, blog reader. Right. And that you would just


00:42:13.280 --> 00:42:16.960
say Pixie run cow. And the same thing would happen. Is that, I got that all put together,


00:42:16.960 --> 00:42:22.320
right? That's absolutely the case. And, but basically everything, any binary executable


00:42:22.320 --> 00:42:25.760
that you have in your environment, like in this case, cow pie, you can also call was


00:42:25.760 --> 00:42:29.600
Pixie run whatever. Like, so you can also do Pixie run Python and it would start Python


00:42:29.600 --> 00:42:33.040
3.11 or whatever you have installed inside of that environment. Yeah. And that would


00:42:33.040 --> 00:42:37.600
actually do the REPL and everything. Yeah. Yeah. Yeah. Just like having it globally installed.


00:42:37.600 --> 00:42:41.600
So one other feature of Pixie that we haven't mentioned before is that you can still do


00:42:41.600 --> 00:42:45.520
global installs. So sometimes you have that comment line tool that you really love. One


00:42:45.520 --> 00:42:50.560
of the things we, I usually install is bat, which is like cat with wings. What you can


00:42:50.560 --> 00:42:55.680
do with Pixie is you can do Pixie global installed bat and that will install bat and make it


00:42:55.680 --> 00:43:00.640
globally available. So you can run it from wherever it's not tied to any like project


00:43:00.640 --> 00:43:05.600
environment. It's just on your system in your home folder, essentially. And you can just


00:43:05.600 --> 00:43:11.600
run bat wherever you are and it works. The one that comes to mind for me a lot is PIPX


00:43:11.600 --> 00:43:16.560
is one of them. That's exactly where we got this using similar mechanisms to that. So


00:43:16.560 --> 00:43:21.120
every tool that you install this way is installed into its own virtual environment. So they


00:43:21.120 --> 00:43:26.240
don't have any overlap. You can install versions that are completely unrelated. Even that different


00:43:26.240 --> 00:43:31.760
Pythons, right? One thing that I also like a lot about this and, you know, pour one out


00:43:31.760 --> 00:43:38.400
for poor old PEP something, something, something about the dunder PI packages folder. I can't


00:43:38.400 --> 00:43:44.080
remember where the PEP number is, but basically the idea that if I'm just in the right place,


00:43:44.080 --> 00:43:48.560
the run command should grab whatever local environment is the one I've set up rather


00:43:48.560 --> 00:43:53.440
than explicitly going, finding the environment, activating the environment, et cetera. So


00:43:53.440 --> 00:43:58.800
it looks like when you say Pixie run, there's no Pixie activate or any of those things,


00:43:58.800 --> 00:44:03.200
right? How's that work? The way conda environments work is that you need to have some sort of


00:44:03.200 --> 00:44:07.920
like little activation thing where basically the past variable environment variables changed


00:44:07.920 --> 00:44:12.160
and adjusted and some other activation scripts are run. And with Pixie, what we're doing


00:44:12.160 --> 00:44:16.720
is we run those in the background and then we extract all the environment variables that


00:44:16.720 --> 00:44:23.920
are necessary for, for the activation basically to work. And then we just inject it right before


00:44:23.920 --> 00:44:27.120
we execute what you want to execute, like copa in this case.


00:44:27.120 --> 00:44:31.440
Yeah. So there's like an implicit activate or you don't even have to say activate in


00:44:31.440 --> 00:44:37.440
Python. You can just, if you just use that Python, you say the path to the virtual


00:44:37.440 --> 00:44:39.840
environment, Python run that like that's sufficient. Yeah.


00:44:39.840 --> 00:44:44.560
That's more or less what happens. Like sometimes, you know, packages can have different requirements


00:44:44.560 --> 00:44:48.320
when it comes to activation. So like Python doesn't have many requirements when it comes


00:44:48.320 --> 00:44:52.000
to activation, but some other packages, they, they might need some other like environment


00:44:52.000 --> 00:44:55.520
variables that are specific to the environment location where they are installed, et cetera.


00:44:55.520 --> 00:45:00.400
Sure. Well, even Python virtual environments can get weird where like you can set environment


00:45:00.400 --> 00:45:04.960
variables that get set during the activation of the virtual environment. Right. Like,


00:45:04.960 --> 00:45:08.400
I don't think many people do that because it's transient, but it could.


00:45:08.400 --> 00:45:13.040
We also have a pixie shell command. So if you want to have that experience of like an


00:45:13.040 --> 00:45:18.560
activated environment, you can use pixie shell. And then it is like basically a shell that


00:45:18.560 --> 00:45:22.080
acts like an activated environment. Like poetry has the same and many others.


00:45:22.080 --> 00:45:26.960
The example here shows like I'm in the top level of the project and I say pixie run.


00:45:26.960 --> 00:45:31.600
What if I'm like three directories down and I say pixie run, what happens then?


00:45:31.600 --> 00:45:35.520
The exact same thing will happen because pixie runs from the root of the project.


00:45:35.520 --> 00:45:41.280
And all your tasks are by default running from the root of the project. So you define them


00:45:41.280 --> 00:45:47.520
with the boss in your project as they are always. And then where you are, you can run those thoughts


00:45:47.520 --> 00:45:52.640
as they are. But if you want to run something in that directory, you can just use pixie run


00:45:52.640 --> 00:45:57.920
and then your own commands to, to X on that directory. There's this other way of using it.


00:45:57.920 --> 00:46:04.400
Like the pixie itself will run down the path that you're in and we'll find the first picture


00:46:04.400 --> 00:46:10.160
project that it encounters. And for instance, pixie itself has some examples. So if you move


00:46:10.160 --> 00:46:15.280
into the example, start three and then in one of the examples, those are their own pixie project.


00:46:15.280 --> 00:46:20.800
So if you run it there, pixie run start, it will start the example instead of the actual pixie


00:46:20.800 --> 00:46:26.160
project. Interesting. So you could have a nested one, like there's a main one, but then inside you


00:46:26.160 --> 00:46:31.520
could have a little sub pixie projects. Yeah. A little bit like node and NPM in that regard.


00:46:31.520 --> 00:46:37.920
We have an issue that's open about mono repo support and Cargo does a pretty nice job. Yeah.


00:46:37.920 --> 00:46:41.120
Yeah. And this sounds like a really good idea for mono repo support.


00:46:41.120 --> 00:46:46.640
There's a different problem that you normally would mono repos have some shared dependencies.


00:46:46.640 --> 00:46:53.120
So if you, for instance, have in your, your, your root of your repository, you have


00:46:53.120 --> 00:47:00.320
fightin dependency defined, then you want that shared between all the packages. Yeah. Down in


00:47:00.320 --> 00:47:05.440
your repo tree. So that's something we still have to support. So right now there are like


00:47:05.440 --> 00:47:11.040
two separate projects and the pixie tool will just find the first projects that encounters,


00:47:11.040 --> 00:47:17.360
but we need some kind of way to define a workspace or mono repo. If you would say it like that,


00:47:17.360 --> 00:47:22.960
and then you could like link those environments together. And if you start a lower level one,


00:47:22.960 --> 00:47:27.680
you would start the main one with it or something like that. That's still in the works.


00:47:27.680 --> 00:47:32.320
Look at the dependencies of the top one. And then you might add some more in your little sub project


00:47:32.320 --> 00:47:35.760
type of thing, something like that. Yeah. Well, even what you already have sounds pretty


00:47:35.760 --> 00:47:40.960
excellent for you. Yeah. So currently if you have like a system where you have a backend server,


00:47:40.960 --> 00:47:45.040
that's completely poisoned or rest or whatever, you could have that as a separate project and


00:47:45.040 --> 00:47:49.680
then have a, another project that is like the front end. So you do some, you know, you install


00:47:49.680 --> 00:47:54.960
MPM there or whatever. And those are completely separate within your repository. And the main


00:47:54.960 --> 00:48:01.600
repository is just some tooling to for instance, lint everything or, or something like that, or


00:48:01.600 --> 00:48:05.920
install your base dependencies that you want to use in the, in the complete report story,


00:48:05.920 --> 00:48:11.360
but you could already set it up pretty nicely. I'm sure if you have a truly large organization


00:48:11.360 --> 00:48:16.080
with the mono repo, which for people that know that just means like all the code or the whole


00:48:16.080 --> 00:48:21.280
organization is in one huge repository instead of a bunch of projects with dependencies across


00:48:21.280 --> 00:48:26.080
projects. It's just within that kind of that file structure. Like it's a lot. I was complaining


00:48:26.080 --> 00:48:30.960
about having a dependency that had two things that wanted the same library, both lower than


00:48:30.960 --> 00:48:34.960
and greater than some version number. Like that's for one project. You know what I mean? You put it


00:48:34.960 --> 00:48:38.880
all together. It's only going to get more challenging. So tools like this, these sub


00:48:38.880 --> 00:48:42.800
projects and stuff I think could help go like, all right, this part needs these things. Cause


00:48:42.800 --> 00:48:47.040
that's the data science part. This other part needs that thing. Cause that's the microservice


00:48:47.040 --> 00:48:54.480
part. So what else do people know about Pixie taking dependency, taking PR PRS and contributions?


00:48:54.480 --> 00:49:00.960
Definitely. Like we also still like pretty early. So we love people that test Pixie and tell us the


00:49:00.960 --> 00:49:07.120
feedback on like our discord channel or on like GitHub. I think we have discussions open as well


00:49:07.120 --> 00:49:11.840
and issues, any feedbacks appreciated. And we're really like trying to take package management to


00:49:11.840 --> 00:49:16.400
the next level that includes like building packages that includes like package signing,


00:49:16.400 --> 00:49:21.360
stuff like this, security, et cetera. There are so many things and issues to work on.


00:49:21.360 --> 00:49:27.120
And I think it's going to be very fun. I'm also actually organizing packaging con. That's


00:49:27.120 --> 00:49:32.000
happening in like a week from now actually. And really looking forward to that. So that's going


00:49:32.000 --> 00:49:37.680
to be fun to chat with a lot of package manager developers. Does it have an online component?


00:49:37.680 --> 00:49:42.800
Yeah, virtual. So it's in Berlin, but it's also hybrid. So you can join virtually if you want.


00:49:42.800 --> 00:49:45.840
Will the videos be on some, something like YouTube later?


00:49:45.840 --> 00:49:46.400
Yep. Yep.


00:49:46.400 --> 00:49:50.960
Okay, cool. If the timing lines up, you'll have to give me the link to the videos and I'll put


00:49:50.960 --> 00:49:55.920
it into the show notes for people. Like we might somehow miss like the conference runs, but the


00:49:55.920 --> 00:49:59.920
videos aren't yet up, but if they are, you know, send me a link and we'll make it part of the show.


00:49:59.920 --> 00:50:00.800
So people can check it out.


00:50:00.800 --> 00:50:06.400
And one of Prefix Bas will also talk about this, these Rust crates that we've been building and


00:50:06.400 --> 00:50:11.200
how it all fits together. If you want to learn more about that and if you want to contribute,


00:50:11.200 --> 00:50:15.360
like also if you want to learn Rust, like we're more than happy to kind of like help you,


00:50:15.360 --> 00:50:18.160
like guide you as time permits, obviously.


00:50:18.160 --> 00:50:23.280
Yeah. We're trying to be really active on our channels. So on GitHub, we have some good first


00:50:23.280 --> 00:50:28.400
issues. And if you have some questions, just ask around. And then our Discord, we're very active


00:50:28.400 --> 00:50:32.400
and really try to react as fast as possible to anything.


00:50:32.400 --> 00:50:38.560
Right at the bottom of prefix.dev, you've got your little Discord icon down there. So people can


00:50:38.560 --> 00:50:40.640
click on that to kind of be part of it. Right.


00:50:40.640 --> 00:50:41.840
I think it's also on the top.


00:50:41.840 --> 00:50:42.320
Yeah.


00:50:42.320 --> 00:50:49.520
Yeah. I see you all both are like me and have like, not accepted that, that X Twitter is called X.


00:50:49.520 --> 00:50:51.760
Yeah.


00:50:51.760 --> 00:50:52.800
I'm not changing mine.


00:50:52.800 --> 00:50:57.200
They should come out with the final logo, right? Like that's not, that can't be it.


00:50:57.200 --> 00:51:02.000
I can't be it. It's like a child. Like I'm just, this is what I got. And it's there. Maybe I need,


00:51:02.000 --> 00:51:10.000
I should probably put an EX Twitter in there just for, yeah. And then a quick question from Elliot's,


00:51:10.000 --> 00:51:12.480
any meaning behind the name Pixie?


00:51:12.480 --> 00:51:17.920
We thought very long about the name. We had a bunch of different versions. Like initially we


00:51:17.920 --> 00:51:22.240
thought PX, just P and X, but that was somehow like hard.


00:51:22.240 --> 00:51:26.720
Have you considered X? I hear you just use that for whatever. Just kidding. Sorry. But


00:51:26.720 --> 00:51:27.200
back to Twitter.


00:51:27.200 --> 00:51:28.480
I think that name is burnt.


00:51:28.480 --> 00:51:30.080
It is burnt.


00:51:30.080 --> 00:51:37.520
We also thought about PAX, like P A X, but that's partly executable that you already have on your


00:51:37.520 --> 00:51:42.240
system if you're using Linux or Mac. So that didn't work because then tab completion is broken


00:51:42.240 --> 00:51:48.160
and all of that. We thought about P E X. I don't know. We wanted to derive it a little bit from


00:51:48.160 --> 00:51:53.360
the name prefix because that's kind of the company name, but Pixie seemed really cool because it's


00:51:53.360 --> 00:51:57.760
partly a magical fairy and we want to make a package management magic.


00:51:57.760 --> 00:52:02.800
Yeah, exactly. I think the name is great. It's short enough to type. It's pretty unique. You can,


00:52:02.800 --> 00:52:05.120
it's somewhat Google-able, right?


00:52:05.120 --> 00:52:08.240
Yeah. You can pronounce it. That was also important to it.


00:52:08.240 --> 00:52:12.800
Yeah. You don't have to debate. Is it pypy or is it PyPI? Like, let's say,


00:52:12.800 --> 00:52:16.800
make it lowercase. It's not an acronym. You don't say the letters.


00:52:16.800 --> 00:52:21.120
We created this thing called MicroMamba, which I don't want to like go into too much detail,


00:52:21.120 --> 00:52:26.160
but a lot of people complained about MicroMamba being too long to type. So we had to stay under


00:52:26.160 --> 00:52:28.000
the five character limit.


00:52:28.000 --> 00:52:33.040
Yeah. I think there's value in that. There's definitely value in that. So let's close out


00:52:33.040 --> 00:52:36.640
our conversation with where you all are headed. What's next?


00:52:36.640 --> 00:52:41.840
Yeah. Like we are super excited about a bunch of upcoming features. One is definitely what I


00:52:41.840 --> 00:52:45.520
already mentioned, PixieBuild so that you can build packages right away from Pixie.


00:52:45.520 --> 00:52:47.920
To prepare them for CondaForge, right?


00:52:47.920 --> 00:52:52.320
Well, for CondaForge, or like maybe you also have some internal stuff or your own private


00:52:52.320 --> 00:52:57.520
things and stuff. We just want to make that easy because that is currently way too hard to like


00:52:57.520 --> 00:53:03.760
make a Conda package. It's like a bunch of steps. And that also kind of precludes that you could


00:53:03.760 --> 00:53:08.960
use source and get dependencies for like other Pixie projects. Because basically what we do,


00:53:08.960 --> 00:53:13.440
what we will do in the background is like, if you depend on a source dependency for another


00:53:13.440 --> 00:53:17.200
Pixie project, we will build it into a like package on the fly and then put it into your


00:53:17.200 --> 00:53:21.680
environment. And then like integrating with the pypy ecosystem, that's what we're actually working


00:53:21.680 --> 00:53:25.600
on the most right now. And that is the rip thing that I told you about.


00:53:25.600 --> 00:53:26.240
Yeah, that's awesome.


00:53:26.240 --> 00:53:30.720
Because we just see a lot of need in the community to have this. A lot of projects


00:53:30.720 --> 00:53:32.400
in the wild are kind of mixing it.


00:53:32.400 --> 00:53:37.440
Yeah. If you get it working with pypy, I will switch my stuff over and give it a try and see


00:53:37.440 --> 00:53:41.440
how it works. So that would be great. Until then I can't, right? I've just got, I've got


00:53:41.440 --> 00:53:45.920
hundreds of packages and a lot of them I'm sure are just unique to pypy.


00:53:45.920 --> 00:53:51.040
We're not far away. Like I think the hard bits are solved and that was like resolving


00:53:51.040 --> 00:53:55.440
because it works quite different from, from Conda. You need to like get the individual


00:53:55.440 --> 00:54:00.000
wheel files to get the metadata, et cetera. And like that doesn't scale if you need all


00:54:00.000 --> 00:54:04.080
the metadata upfront, which is actually the case in Conda, you have all the metadata upfront,


00:54:04.080 --> 00:54:08.480
but with pypy you don't. And so we had to make the solver lazy. We had to make the solver generic


00:54:08.480 --> 00:54:13.760
and we are through that process now. And now it's basically just engineering work in that sense to,


00:54:13.760 --> 00:54:17.520
to integrate it with Pixie, but it's going to happen and it's going to be nice. I'm sure.


00:54:17.520 --> 00:54:22.720
Yeah. We also have some ideas of like, can we somehow merge Pixie Toml into Pi Project


00:54:22.720 --> 00:54:28.160
Toml so that it's like more natural to like Python developers and you only need to manage


00:54:28.160 --> 00:54:32.240
one file. And I think Pi Project Toml gives us the flexibility that we would need to do that.


00:54:32.240 --> 00:54:38.560
It does. You've got things like Hatch and others that, that kind of got a way to go in there.


00:54:38.560 --> 00:54:42.720
Yeah. And then we have some other ideas that are a bit more out there maybe, but,


00:54:42.720 --> 00:54:46.640
or not really, but like we already have a set up Pixie action for GitHub. That's,


00:54:46.640 --> 00:54:51.680
that's really nice. And then another idea is like, how, how can you go from a virtual


00:54:51.680 --> 00:54:56.240
environment to a Docker image easily? So that's also something that we're thinking about.


00:54:56.240 --> 00:54:56.560
Okay.


00:54:56.560 --> 00:54:57.280
These kinds of things.


00:54:57.280 --> 00:54:58.080
All very exciting.


00:54:58.080 --> 00:54:58.560
Awesome.


00:54:58.560 --> 00:55:02.560
How long has this been around? I'm, your blog post is two months old, but it's


00:55:02.560 --> 00:55:04.080
announcing this stuff. So.


00:55:04.080 --> 00:55:10.160
Yeah. I mean, I think we maybe made the repository public months earlier than the blog post or so,


00:55:10.160 --> 00:55:17.600
but it like prefix as a company is like just very little over a year old. And that's when we like,


00:55:17.600 --> 00:55:24.080
really started to build the website, the platform, Pixie, Rattler, and all of these things. So I


00:55:24.080 --> 00:55:29.120
think Pixie, we started maybe like five months ago. So not too old, still very fresh.


00:55:29.120 --> 00:55:32.400
Yeah. Yeah. It still has that, that new software smell.


00:55:32.400 --> 00:55:32.880
Yeah.


00:55:32.880 --> 00:55:33.680
Exactly.


00:55:33.680 --> 00:55:35.360
Definitely.


00:55:35.360 --> 00:55:37.600
I hope we don't get the, yeah, like,


00:55:37.600 --> 00:55:38.560
The old and baldy smell.


00:55:38.560 --> 00:55:41.440
We also know how to, yeah, you don't want that.


00:55:41.440 --> 00:55:47.040
Personally, I'm very surprised how stable it is already. And I think that's partly due to


00:55:47.040 --> 00:55:53.920
the use of Rust and the fact that we can very heavily check some of the inner workings of the


00:55:53.920 --> 00:55:55.600
tool before we ship it.


00:55:55.600 --> 00:55:59.840
Well, it looks like it's off to a really good start. I like a lot of the ideas here. So yeah,


00:55:59.840 --> 00:56:04.400
keep up the good work before we wrap it up or basically out of time, but there's the,


00:56:04.400 --> 00:56:09.600
always the open source dream of I'm going to build a project. It's going to get super popular.


00:56:09.600 --> 00:56:13.760
The dream used to be, I'm going to do some consulting around it, right? I've created


00:56:13.760 --> 00:56:18.640
Project X, Project X is popular so I can charge high consulting rates. That's the dream of the


00:56:18.640 --> 00:56:24.640
nineties. I think the new dream is I'm going to start a company around my project and, and have


00:56:24.640 --> 00:56:29.120
some kind of open core model and something interesting there. You guys have prefix.dev.


00:56:29.120 --> 00:56:32.800
What's the dream for you? Like how, what's your, how are you approaching this? I think a ton of


00:56:32.800 --> 00:56:37.040
people would be interested to just hear, like, how did you make that happen? You know?


00:56:37.040 --> 00:56:39.040
So you saved the hardest question for last.


00:56:39.040 --> 00:56:43.040
You don't have to answer it, but I do think it's interesting.


00:56:43.040 --> 00:56:50.720
Yeah. Package management is a hard problem. And there are lots of sort of sub problems that I


00:56:50.720 --> 00:56:55.360
would say enterprise customers in a way are willing to pay for that includes like security,


00:56:55.360 --> 00:57:01.840
managed repositories, let's say like basically Red Hats and like more or less Red Hats product


00:57:01.840 --> 00:57:06.480
is that they have this like, I know five or 10 years or something like of support


00:57:06.480 --> 00:57:12.240
for like old versions of packages for enterprise customers. And I think we have a pretty


00:57:12.240 --> 00:57:17.360
interesting approach to package management that is pretty easy to kind of grasp. And like part


00:57:17.360 --> 00:57:21.760
of why we want to make PixieBuild a thing is also because we want people to make more packages and


00:57:21.760 --> 00:57:28.000
then upload them to our website and kind of grow this entire thing in popularity and make it super


00:57:28.000 --> 00:57:32.720
useful so that we hopefully end up with customers that are supporting our work.


00:57:32.720 --> 00:57:37.120
Awesome. Well, good luck to both of you. And thanks for being on the show to share


00:57:37.120 --> 00:57:38.480
what you're up to. Sure. Thank you.


00:57:39.440 --> 00:57:44.800
This has been another episode of Talk Python to Me. Thank you to our sponsors. Be sure to check


00:57:44.800 --> 00:57:51.120
out what they're offering. It really helps support the show. Python Tutor, visualize your Python


00:57:51.120 --> 00:57:56.320
code step by step to understand just what's happening with your code. Try it for free


00:57:56.320 --> 00:58:03.920
and anonymously at talkpython.fm/python-tutor. Want to level up your Python? We have one of the


00:58:03.920 --> 00:58:09.440
largest catalogs of Python video courses over at Talk Python. Our content ranges from true beginners


00:58:09.440 --> 00:58:14.560
to deeply advanced topics like memory and async. And best of all, there's not a subscription in


00:58:14.560 --> 00:58:19.520
sight. Check it out for yourself at training.talkpython.fm. Be sure to subscribe to the


00:58:19.520 --> 00:58:24.400
show. Open your favorite podcast app and search for Python. We should be right at the top. You


00:58:24.400 --> 00:58:30.400
can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS


00:58:30.400 --> 00:58:36.400
feed at /rss on talkpython.fm. We're live streaming most of our recordings these days.


00:58:36.400 --> 00:58:39.840
If you want to be part of the show and have your comments featured on the air,


00:58:39.840 --> 00:58:45.520
be sure to subscribe to our YouTube channel at talkpython.fm/youtube. This is your host,


00:58:45.520 --> 00:58:49.520
Michael Kennedy. Thanks so much for listening. I really appreciate it. Now get out there and


00:58:49.520 --> 00:59:11.200
write some Python code. [Music]

