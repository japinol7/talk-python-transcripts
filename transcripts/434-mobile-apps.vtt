WEBVTT

00:00:00.000 --> 00:00:04.200
Are you building a mobile app and wondering where Python fits in in the mix?


00:00:04.200 --> 00:00:09.020
Are you supporting others building these apps with back-end APIs written in Python?


00:00:09.020 --> 00:00:12.120
Can you write your entire app end-to-end in Python?


00:00:12.120 --> 00:00:16.980
Well, I have a great panel put together to discuss exactly this, and they all have a


00:00:16.980 --> 00:00:19.360
different and unique take on the options.


00:00:19.360 --> 00:00:25.520
Welcome to Lauren Augie, Harut Bozakizan, Andreas Kuhn, Jeffrin, and Joshua.


00:00:25.520 --> 00:00:44.880
This is Talk Python to Me, episode 434, recorded September 9th, 2023.


00:00:44.880 --> 00:00:48.300
Welcome to Talk Python to Me, a weekly podcast on Python.


00:00:48.300 --> 00:00:50.160
This is your host, Michael Kennedy.


00:00:50.160 --> 00:00:55.280
Follow me on Mastodon, where I'm at MKennedy, and follow the podcast using at Talk Python.


00:00:55.280 --> 00:00:57.680
Both on mastodon.org.


00:00:57.680 --> 00:01:02.920
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.


00:01:02.920 --> 00:01:06.440
We've started streaming most of our episodes live on YouTube.


00:01:06.440 --> 00:01:11.680
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming


00:01:11.680 --> 00:01:14.320
shows and be part of that episode.


00:01:14.320 --> 00:01:16.640
This episode is sponsored by Sentry.


00:01:16.640 --> 00:01:18.320
Don't let those errors go unnoticed.


00:01:18.320 --> 00:01:19.320
Use Sentry.


00:01:19.320 --> 00:01:23.280
Get started at talkpython.fm/Sentry.


00:01:23.280 --> 00:01:27.080
And it's also brought to you by us over at Talk Python Training.


00:01:27.080 --> 00:01:31.280
Did you know that we have over 250 hours of Python courses?


00:01:31.280 --> 00:01:32.560
Yeah, that's right.


00:01:32.560 --> 00:01:35.600
Check them out at talkpython.fm/courses.


00:01:35.600 --> 00:01:42.520
Hey everyone, Andreas, Harut, Lauren, Jeffrin, and Joshua, all of you, welcome to the show.


00:01:42.520 --> 00:01:43.800
So exciting to have you here.


00:01:43.800 --> 00:01:44.800
Thank you so much.


00:01:44.800 --> 00:01:45.800
I'm really happy to be here.


00:01:45.800 --> 00:01:46.800
Yeah, great to be here.


00:01:46.800 --> 00:01:47.800
Sam, yeah, it's great to be here.


00:01:47.800 --> 00:01:49.760
This is going to be a really fun topic.


00:01:49.760 --> 00:01:54.600
And I think it's one that puts Python into an interesting space.


00:01:54.600 --> 00:01:57.840
Python's really popular, as everyone listening knows.


00:01:57.840 --> 00:02:01.720
Its growth has been super, super high since 2012.


00:02:01.720 --> 00:02:06.280
And yet it really doesn't play a huge part in mobile apps.


00:02:06.280 --> 00:02:11.380
Although we do have some folks representing Kivi here via their app, which is pretty awesome.


00:02:11.380 --> 00:02:13.200
So I'm very excited about that.


00:02:13.200 --> 00:02:17.640
But it's not the first language you might pick for writing mobile apps.


00:02:17.640 --> 00:02:20.920
If you just say, all I care about is mobile apps, I just want to get started.


00:02:20.920 --> 00:02:25.360
But I think there's a lot of things that Python plays a part in, right?


00:02:25.360 --> 00:02:26.440
Backend services.


00:02:26.440 --> 00:02:29.440
And I'm really excited to hear about the Kivi experience as well.


00:02:29.440 --> 00:02:33.960
So there's a ton of Python people out there who either are building or want to build some


00:02:33.960 --> 00:02:35.000
kind of mobile app.


00:02:35.000 --> 00:02:37.100
It's obviously one of the most important computing platforms.


00:02:37.100 --> 00:02:41.180
So I think everyone's going to learn from everyone's experience here.


00:02:41.180 --> 00:02:46.000
So I think let's just, I guess I'll go around by app.


00:02:46.000 --> 00:02:48.800
That's the best way I can kind of know to do this.


00:02:48.800 --> 00:02:50.480
And have you all introduce yourself.


00:02:50.480 --> 00:02:53.640
And then actually, let's just have you introduce yourself, then we'll talk about the app.


00:02:53.640 --> 00:02:58.720
So Andreas, we'll go around the Brady Bunch circle of pictures we got on the screen here.


00:02:58.720 --> 00:02:59.720
Andreas, go first.


00:02:59.720 --> 00:03:01.160
Yeah, my name is Andreas.


00:03:01.160 --> 00:03:03.960
I live and work in Stockholm, Sweden.


00:03:03.960 --> 00:03:07.960
And I've been working with Python for about 10 years now.


00:03:07.960 --> 00:03:14.600
And have been working with, I used to work for an online tailor-made suit company, where


00:03:14.600 --> 00:03:16.400
we developed the platform ourselves.


00:03:16.400 --> 00:03:22.600
And now I'm working with a membership management company, which is a Django app that we are


00:03:22.600 --> 00:03:23.600
running in the background.


00:03:23.600 --> 00:03:24.600
Nice.


00:03:24.600 --> 00:03:25.600
Very exciting.


00:03:25.600 --> 00:03:26.600
Looking forward to hearing about it.


00:03:26.600 --> 00:03:27.600
Harut.


00:03:27.600 --> 00:03:28.600
Hey, guys, my name is Harut.


00:03:28.600 --> 00:03:33.120
I have been working in Python for like, let's say a decade on and off.


00:03:33.120 --> 00:03:36.320
My background is in applied and computational math.


00:03:36.320 --> 00:03:41.960
So I did a lot of MATLAB in college, and then found my way kind of over into Python, did


00:03:41.960 --> 00:03:44.280
some data analytics, some data science.


00:03:44.280 --> 00:03:47.120
And then for the past few years, found that building tools for people is actually what


00:03:47.120 --> 00:03:48.120
I really enjoy.


00:03:48.120 --> 00:03:52.040
So I do a lot of work with data visualization, a lot of JavaScript.


00:03:52.040 --> 00:03:55.480
But if there's one thing that's been consistent in the past 10 years, it's been my Python


00:03:55.480 --> 00:03:56.480
usage overall.


00:03:56.480 --> 00:03:57.480
Awesome.


00:03:57.480 --> 00:03:59.840
That's kind of how I started as well, building scientific tools and stuff.


00:03:59.840 --> 00:04:00.840
Lauren.


00:04:00.840 --> 00:04:01.840
Hi, everyone.


00:04:01.840 --> 00:04:02.840
Yeah, my name is Lauren.


00:04:02.840 --> 00:04:03.840
I've been programming since 2020.


00:04:03.840 --> 00:04:05.960
Prior to that, it was basically a direct result of COVID.


00:04:05.960 --> 00:04:07.800
Prior to that, I was a live sound engineer.


00:04:07.800 --> 00:04:09.880
So setting up for concerts and corporate events, all that.


00:04:09.880 --> 00:04:12.340
All that went away pretty much overnight in March 2020.


00:04:12.340 --> 00:04:15.760
So yeah, I started learning programming, landed on Flutter.


00:04:15.760 --> 00:04:16.760
That's my main thing.


00:04:16.760 --> 00:04:19.680
Fast forward a couple years, I had finished up a contract with a company called T-Vision


00:04:19.680 --> 00:04:20.680
Insights.


00:04:20.680 --> 00:04:23.640
Luckily for me, most of their services are written in Python.


00:04:23.640 --> 00:04:27.560
One of the lead engineers there is a fan of both your podcasts, Michael, and gave me a


00:04:27.560 --> 00:04:30.320
tip that you're looking for a Flutter developer, which brings me here.


00:04:30.320 --> 00:04:32.680
So I was involved in building the Tuck Python mobile app.


00:04:32.680 --> 00:04:35.480
Yeah, now I'm on the Flutter team for an insurance company.


00:04:35.480 --> 00:04:39.320
I did not write any Python until I had finished the mobile app.


00:04:39.320 --> 00:04:42.940
I had sat through a lot of those courses throughout the development process, kind of landed on


00:04:42.940 --> 00:04:44.940
FastAPI for my backend services.


00:04:44.940 --> 00:04:47.860
Really like it, was really impressed with how easy it was to get started and all that.


00:04:47.860 --> 00:04:48.860
So yeah, that's where I'm at.


00:04:48.860 --> 00:04:49.860
Yeah, awesome.


00:04:49.860 --> 00:04:53.420
I'm really looking forward to talking to you, sort of the interplay of how we work together


00:04:53.420 --> 00:04:54.580
to build that mobile app.


00:04:54.580 --> 00:04:55.900
And it's just so well-received.


00:04:55.900 --> 00:04:56.900
It's such a solid app.


00:04:56.900 --> 00:04:59.340
The only people who don't seem to receive it well is the app store people.


00:04:59.340 --> 00:05:02.620
We'll save that for later.


00:05:02.620 --> 00:05:07.180
If anyone wants to see me cry, there's a good chance at the end of this episode, I will


00:05:07.180 --> 00:05:08.260
just be in tears.


00:05:08.260 --> 00:05:09.820
But we'll save that for later.


00:05:09.820 --> 00:05:13.620
But I do want to ask, I mean, I think that's a really interesting background and people,


00:05:13.620 --> 00:05:17.700
a lot of people listen to this show and they feel like, they hear from guests who are like,


00:05:17.700 --> 00:05:19.580
yeah, I got my computer science degree.


00:05:19.580 --> 00:05:21.100
I was like an accelerated student.


00:05:21.100 --> 00:05:23.500
So I got it when I was 16.


00:05:23.500 --> 00:05:26.860
And then, you know, like, they're like, well, I admire this person and they're doing awesome


00:05:26.860 --> 00:05:27.860
stuff.


00:05:27.860 --> 00:05:29.540
But I didn't get my computer science degree at 16.


00:05:29.540 --> 00:05:34.200
Like I was still in high school and I didn't start programming until I was 30 or, you know,


00:05:34.200 --> 00:05:35.980
and is there still a place for me?


00:05:35.980 --> 00:05:40.260
And I think you've super excelled at that in honestly, with Flutter and Dart, which


00:05:40.260 --> 00:05:44.020
is not one of the simpler beginner, more beginner friendly language.


00:05:44.020 --> 00:05:48.140
Like it's a pretty seriously structured language.


00:05:48.140 --> 00:05:51.700
So maybe just, you know, give people your thoughts of your three year journey, I guess


00:05:51.700 --> 00:05:52.700
at this point.


00:05:52.700 --> 00:05:53.700
First of all, thank you for saying that.


00:05:53.700 --> 00:05:54.700
And yeah, I listened to your podcast.


00:05:54.700 --> 00:05:57.100
You have some very impressive people on your show.


00:05:57.100 --> 00:05:59.460
My first line of code till 36, right?


00:05:59.460 --> 00:06:02.720
It was weird, a weird time 2020, obviously.


00:06:02.720 --> 00:06:06.400
But to be fair, I did have a lot of time on my hands, like many of us did, you know, very


00:06:06.400 --> 00:06:07.400
abruptly.


00:06:07.400 --> 00:06:11.760
So I kind of went all in, you know, that's just I got hooked fast.


00:06:11.760 --> 00:06:13.200
And I had a lot of fun.


00:06:13.200 --> 00:06:16.360
You know, it's kind of thing not everybody gravitates towards programming, they try it,


00:06:16.360 --> 00:06:17.360
they don't like it.


00:06:17.360 --> 00:06:18.520
It's not for everybody, to be fair.


00:06:18.520 --> 00:06:20.980
But all it is, is consistency and putting in the time.


00:06:20.980 --> 00:06:22.520
If you don't have a degree, it's fine.


00:06:22.520 --> 00:06:26.640
I even chose Flutter is not like if you're looking for a job, there are better technologies


00:06:26.640 --> 00:06:30.800
to choose if you're just trying to, you know, land a job, right?


00:06:30.800 --> 00:06:34.960
I'm obviously way more ubiquitous in terms of finding a job, even on the front end, learning


00:06:34.960 --> 00:06:37.040
something like React, way more jobs.


00:06:37.040 --> 00:06:38.920
But all that to say, it's still possible.


00:06:38.920 --> 00:06:41.720
I didn't go to college for audio or programming.


00:06:41.720 --> 00:06:46.320
But again, putting the time consistency, the job hunting process was not particularly fun.


00:06:46.320 --> 00:06:47.520
It's pretty grueling.


00:06:47.520 --> 00:06:49.640
But sooner or later, you just keep at it and you can get there.


00:06:49.640 --> 00:06:51.760
So it's never too late to get started.


00:06:51.760 --> 00:06:52.760
Awesome.


00:06:52.760 --> 00:06:54.280
Yeah, I know you're doing good stuff these days.


00:06:54.280 --> 00:06:55.280
That's great.


00:06:55.280 --> 00:06:56.280
Thanks, Jeffrey and Joshua.


00:06:56.280 --> 00:06:57.960
First of all, my name is Joshua.


00:06:57.960 --> 00:07:01.440
His name is Jeffrey and Jeffrey and Julian.


00:07:01.440 --> 00:07:04.880
We are from Colombia and he is a Spanish speaker.


00:07:04.880 --> 00:07:07.740
So he doesn't know to speak English.


00:07:07.740 --> 00:07:08.740
So I'm here to help.


00:07:08.740 --> 00:07:09.740
Sure, sure.


00:07:09.740 --> 00:07:10.740
Yes.


00:07:10.740 --> 00:07:11.740
Oh, wonderful.


00:07:11.740 --> 00:07:12.740
Well, welcome to both of you.


00:07:12.740 --> 00:07:13.740
Okay, thank you.


00:07:13.740 --> 00:07:14.740
Tell us a bit about yourselves.


00:07:14.740 --> 00:07:15.740
Okay.


00:07:15.740 --> 00:07:23.200
Julian, who is the main programmer or designer of his app, started like 15 years ago when


00:07:23.200 --> 00:07:28.600
he was playing some video games and he wanted to know how did they work.


00:07:28.600 --> 00:07:35.640
So he started to look for it and started programming, you know, like self-taught people.


00:07:35.640 --> 00:07:37.040
And that's it.


00:07:37.040 --> 00:07:42.880
He started a career, a university career, and he's a very talented designer.


00:07:42.880 --> 00:07:44.740
And also, you know, as a friend.


00:07:44.740 --> 00:07:48.480
So he is a very close friend of mine.


00:07:48.480 --> 00:07:52.840
And I can say you, I can say, I can tell you that I think maybe the right place to start


00:07:52.840 --> 00:07:53.840
our conversation.


00:07:53.840 --> 00:07:58.560
Now everybody knows all of you is just a quick introduction to your apps.


00:07:58.560 --> 00:08:03.600
And then we'll dive into maybe the first thing is everyone here has chosen a different framework,


00:08:03.600 --> 00:08:04.600
a different language.


00:08:04.600 --> 00:08:10.000
I think that is in and of itself is pretty interesting that we're all here as fans of


00:08:10.000 --> 00:08:13.560
Python or with some kind of Python roots or interests.


00:08:13.560 --> 00:08:18.400
And yet that is not, you know, it's not necessarily what we chose to write the apps in.


00:08:18.400 --> 00:08:22.800
So I think that's going to be a real interesting conversation, but let's jump over and maybe


00:08:22.800 --> 00:08:23.800
start with this one.


00:08:23.800 --> 00:08:28.000
So PinPlanet, I forgot which app goes with which person or group.


00:08:28.000 --> 00:08:29.920
So we'll have to just jump in.


00:08:29.920 --> 00:08:30.920
Who's PinPlanet?


00:08:30.920 --> 00:08:32.200
I'm the creator of PinPlanet.


00:08:32.200 --> 00:08:37.880
The idea started from, actually started from my girlfriend in December 2020 or October


00:08:37.880 --> 00:08:38.880
2021.


00:08:38.880 --> 00:08:39.880
I'm sorry.


00:08:39.880 --> 00:08:40.880
She's a big traveler.


00:08:40.880 --> 00:08:43.760
She's always wanted a way to kind of curate all of her travels, kind of keep them in one


00:08:43.760 --> 00:08:44.760
place.


00:08:44.760 --> 00:08:47.920
And the thing that she told me at the time that really sold me was, I want to be able


00:08:47.920 --> 00:08:54.560
to show all my friends, like my place I've traveled to with pins on a 3D globe that spins,


00:08:54.560 --> 00:08:58.480
which is actually the second screenshot on the screen for, I guess, for people who are


00:08:58.480 --> 00:08:59.800
watching the live stream.


00:08:59.800 --> 00:09:01.800
And then from there I was just, I was sold.


00:09:01.800 --> 00:09:03.960
So I started, I started building this.


00:09:03.960 --> 00:09:07.440
I will say that the original version of this was actually a web app, a progressive web


00:09:07.440 --> 00:09:10.560
app, and I was a huge proponent of it at the time.


00:09:10.560 --> 00:09:14.840
But for anybody who's used PWAs, they know the experience on both Apple and Google.


00:09:14.840 --> 00:09:18.360
Somehow both of them are just not that great.


00:09:18.360 --> 00:09:20.280
You just cannot seem to win.


00:09:20.280 --> 00:09:24.960
And we've trained users for what, like a decade to look for apps in the app store.


00:09:24.960 --> 00:09:26.160
So that's also kind of a pain.


00:09:26.160 --> 00:09:27.160
Yeah.


00:09:27.160 --> 00:09:28.960
And you can't really list your progressive web app in the app store.


00:09:28.960 --> 00:09:29.960
Right.


00:09:29.960 --> 00:09:32.880
I think actually progressive web apps might be passable because there's a lot of bad frameworks


00:09:32.880 --> 00:09:37.680
out there that it would, they would compete with, but the discoverability is, is the killer,


00:09:37.680 --> 00:09:38.680
right?


00:09:38.680 --> 00:09:39.680
It's quite tough.


00:09:39.680 --> 00:09:42.560
So I ended up building, building this app about three or four months into it.


00:09:42.560 --> 00:09:44.520
I brought my friend Andrew as well.


00:09:44.520 --> 00:09:46.080
I'm actually sitting in his office right now.


00:09:46.080 --> 00:09:47.920
He does quite a lot of Python as well.


00:09:47.920 --> 00:09:48.920
More Python than I do.


00:09:48.920 --> 00:09:52.240
He's the person that I kind of look up to when it comes to, to writing.


00:09:52.240 --> 00:09:54.880
I can't forget the, I forgot the word for it now.


00:09:54.880 --> 00:09:57.640
Not Pythonista, but it'll, it'll come to me.


00:09:57.640 --> 00:09:59.760
Oh, writing more Pythonic code.


00:09:59.760 --> 00:10:00.760
Yes.


00:10:00.760 --> 00:10:04.760
And then from there, some, I think somewhere around the summer I decided, okay, you know


00:10:04.760 --> 00:10:08.960
what, this is the app is gaining a lot of traction, but people want a native experience.


00:10:08.960 --> 00:10:13.480
So I kind of took the plunge, learned Swift and SwiftUI, which is a really awesome framework


00:10:13.480 --> 00:10:14.640
released by Apple.


00:10:14.640 --> 00:10:18.520
And then we, we released the, the native version, which focuses on like, you can pin all your


00:10:18.520 --> 00:10:19.520
places.


00:10:19.520 --> 00:10:21.640
You can add your spots, your reviews, your photos.


00:10:21.640 --> 00:10:22.640
You can add travel buddies.


00:10:22.640 --> 00:10:24.660
You guys can collaborate on trips together.


00:10:24.660 --> 00:10:28.560
There's a really cool explore page where you can see kind of the best pins that other people


00:10:28.560 --> 00:10:29.800
have put up.


00:10:29.800 --> 00:10:32.400
And we're just, you know, adding more features over time.


00:10:32.400 --> 00:10:33.400
It's gaining traction.


00:10:33.400 --> 00:10:34.400
It's a lot of fun.


00:10:34.400 --> 00:10:35.400
It's really exciting.


00:10:35.400 --> 00:10:36.400
Awesome.


00:10:36.400 --> 00:10:37.400
Congratulations.


00:10:37.400 --> 00:10:38.400
Thank you.


00:10:38.400 --> 00:10:40.560
I see that it's a, well, first of all, it has five star, a five star review out of a


00:10:40.560 --> 00:10:42.800
bunch of ratings, which is pretty ridiculous.


00:10:42.800 --> 00:10:43.800
That's awesome.


00:10:43.800 --> 00:10:44.800
Also that it's free though.


00:10:44.800 --> 00:10:45.800
Is it just free free?


00:10:45.800 --> 00:10:48.680
Is there in-app purchases or what's the story?


00:10:48.680 --> 00:10:49.680
It's completely free.


00:10:49.680 --> 00:10:52.000
Just looking for growth and traction and you'll figure it out.


00:10:52.000 --> 00:10:53.000
Yeah.


00:10:53.000 --> 00:10:55.200
Oh, actually, since you're on the screenshots, Michael, I do want to say thank you for the


00:10:55.200 --> 00:10:58.440
tip, the screenshots pro website or web app.


00:10:58.440 --> 00:10:59.440
Oh yeah.


00:10:59.440 --> 00:11:00.440
That helped out quite a bit.


00:11:00.440 --> 00:11:01.440
Yeah.


00:11:02.440 --> 00:11:03.440
Really appreciate it.


00:11:03.440 --> 00:11:07.680
Well, it's a pay it forward because Lauren suggested that to me from his app.


00:11:07.680 --> 00:11:08.680
So it goes.


00:11:08.680 --> 00:11:09.680
And on, on it goes.


00:11:09.680 --> 00:11:10.680
Yeah.


00:11:10.680 --> 00:11:14.320
So I think it was screenshot, I believe was screenshots pro.


00:11:14.320 --> 00:11:17.720
Let me screenshots.pro is the app that I use.


00:11:17.720 --> 00:11:18.720
Yeah.


00:11:18.720 --> 00:11:20.760
You can come up with really fantastic looking screenshots.


00:11:20.760 --> 00:11:22.480
I'm super happy with how that came out.


00:11:22.480 --> 00:11:23.480
All right.


00:11:23.480 --> 00:11:24.480
My club.


00:11:24.480 --> 00:11:25.480
That's mine.


00:11:25.480 --> 00:11:26.480
Yeah.


00:11:26.480 --> 00:11:30.000
And my club is, like I said, previously, this is a membership management program.


00:11:30.000 --> 00:11:34.680
We've previously been working with progressive web apps as well, but we had a Ruby on Rails


00:11:34.680 --> 00:11:40.720
developer who did those, and we are a Django backend in where most of the information was.


00:11:40.720 --> 00:11:45.600
So we had a lot of different servers connecting to our backend and doing all of these strange


00:11:45.600 --> 00:11:48.420
things instead of just having one.


00:11:48.420 --> 00:11:53.040
And exactly like Harut talked about, you need to have your app on the app store because


00:11:53.040 --> 00:11:55.540
there's a lot of people asking, where is your app?


00:11:55.540 --> 00:11:59.340
Even though we did have like progressive web apps and you were able to see everything.


00:11:59.340 --> 00:12:05.180
But what we have now is we've developed so that all of our users can handle the members


00:12:05.180 --> 00:12:11.300
with their invoices, their memberships in various groups and so on to handle if they're


00:12:11.300 --> 00:12:19.940
going to certain trainings or going to certain meetups and just answer to that in the app.


00:12:19.940 --> 00:12:23.180
And we also have like push notifications and all of that as well.


00:12:23.180 --> 00:12:24.180
Yeah.


00:12:24.180 --> 00:12:28.300
I think one of the main reasons people might want to create an app as a business is for


00:12:28.300 --> 00:12:31.780
the notifications because that's an interesting way to reach out for sure.


00:12:31.780 --> 00:12:33.380
It really has helped a lot as well.


00:12:33.380 --> 00:12:39.780
I mean, just being on the app store, regardless if you're on Android or on iOS, just being


00:12:39.780 --> 00:12:44.020
there actually means that things start to happen with the usage and so on.


00:12:44.020 --> 00:12:51.960
We have about, I think in total about 8,000 installs on these apps, which from going from


00:12:51.960 --> 00:12:55.180
nothing about half a year ago is rather good for us.


00:12:55.180 --> 00:12:57.100
We're a rather small company, so it's...


00:12:57.100 --> 00:12:58.100
Yeah, that's really good.


00:12:58.100 --> 00:12:59.380
We are, everything's in Swedish.


00:12:59.380 --> 00:13:04.460
We are a Swedish company and we don't have anything translated into English yet.


00:13:04.460 --> 00:13:05.800
The screenshots are awesome.


00:13:05.800 --> 00:13:08.380
And I think it's, it makes perfect sense, right?


00:13:08.380 --> 00:13:12.900
Like not everything needs to be in English, even though it does seem like it some of the


00:13:12.900 --> 00:13:13.900
times I suppose.


00:13:13.900 --> 00:13:14.900
All right.


00:13:14.900 --> 00:13:15.900
V3D.


00:13:15.900 --> 00:13:17.500
Let's talk about that guys.


00:13:17.500 --> 00:13:21.300
Jeffrey is going to talk in Spanish and I'm going to translate.


00:13:21.300 --> 00:13:22.300
Yeah.


00:13:22.300 --> 00:13:23.300
Thanks.


00:13:23.300 --> 00:13:28.300
V3D es una aplicación que inicié en el año 2020.


00:13:28.300 --> 00:13:36.300
V3D es una aplicación que comenzó a diseñar en la pandemia de 2020.


00:13:36.300 --> 00:13:44.940
Inicialmente era para mostrar gráficos 3D, ya que como hobby soy modelador 3D en el software


00:13:44.940 --> 00:13:45.940
de Blender.


00:13:45.940 --> 00:13:53.740
It was initially just to show graphics on 3D because he is a developer for this.


00:13:53.740 --> 00:14:01.660
Poco a poco vinieron más ideas y quise seguir la programación, llevándolas al punto en


00:14:01.660 --> 00:14:09.060
el que está hoy, donde soporta texturizado, creación de materiales, también soporta


00:14:09.060 --> 00:14:13.260
mando de control Xbox y tiene un módulo de realidad virtual.


00:14:13.260 --> 00:14:21.780
And by step I came up with some ideas to implement to the app, like featuring and modeling.


00:14:21.780 --> 00:14:24.300
We can use an Xbox controller.


00:14:24.300 --> 00:14:27.540
Yes, it has a lot of features.


00:14:27.540 --> 00:14:30.660
That's pretty cool to use the Xbox controller with the mobile devices.


00:14:30.660 --> 00:14:31.660
Yeah.


00:14:31.660 --> 00:14:36.980
Actualmente estoy trabajando en una actualización que involucra texturizado con imágenes en


00:14:36.980 --> 00:14:37.980
movimiento.


00:14:37.980 --> 00:14:42.260
Sigo trabajando en ella y próximamente será lanzada.


00:14:42.260 --> 00:14:46.860
I'm currently working on animated textures, features.


00:14:46.860 --> 00:14:50.500
Yes, I'm working on it and very soon it's going to be ready.


00:14:50.500 --> 00:14:52.300
Yeah, this looks like an amazing app.


00:14:52.300 --> 00:14:54.300
This is built in Kivy, yeah?


00:14:54.300 --> 00:14:55.300
Exactly.


00:14:55.300 --> 00:14:56.300
Awesome.


00:14:56.300 --> 00:15:00.540
This portion of Talk Python to Me is brought to you by Sentry.


00:15:00.540 --> 00:15:06.180
Is your Python application fast or does it sometimes suffer from slowdowns and unexpected


00:15:06.180 --> 00:15:07.180
latency?


00:15:07.180 --> 00:15:09.700
Does this usually only happen in production?


00:15:09.700 --> 00:15:13.100
It's really tough to track down the problems at that point, isn't it?


00:15:13.100 --> 00:15:17.260
If you've looked at APM, application performance monitoring products before, they may have


00:15:17.260 --> 00:15:19.500
felt out of place for software teams.


00:15:19.500 --> 00:15:24.380
Many of them are more focused on legacy problems made for ops and infrastructure teams to keep


00:15:24.380 --> 00:15:27.860
their infrastructure and services up and running.


00:15:27.860 --> 00:15:31.780
Sentry has just launched their new APM service.


00:15:31.780 --> 00:15:36.400
In Sentry's approach to application monitoring is focused on being actionable, affordable


00:15:36.400 --> 00:15:40.980
and actually built for developers, whether it's a slow running query or latent payment


00:15:40.980 --> 00:15:44.860
endpoint that's at risk of timing out and causing sales to tank.


00:15:44.860 --> 00:15:49.580
Sentry removes the complexity and does the analysis for you, surfacing the most critical


00:15:49.580 --> 00:15:52.660
performance issues so you can address them immediately.


00:15:52.660 --> 00:15:58.580
Most legacy APM tools focus on an ingest everything approach, resulting in high storage costs,


00:15:58.580 --> 00:16:03.460
noisy environments and an enormous amount of telemetry data most developers will never


00:16:03.460 --> 00:16:05.260
need to analyze.


00:16:05.260 --> 00:16:10.300
Sentry has taken a different approach, building the most affordable APM solution in the market.


00:16:10.300 --> 00:16:14.660
They remove the noise and extract the maximum value out of your performance data while passing


00:16:14.660 --> 00:16:19.500
the savings directly on to you, especially for Talk Python listeners who use the code


00:16:19.500 --> 00:16:21.180
Talk Python.


00:16:21.180 --> 00:16:27.220
So get started at talkpython.fm/Sentry and be sure to use their code Talk Python,


00:16:27.220 --> 00:16:31.260
all lowercase, so you let them know that you heard about them from us.


00:16:31.260 --> 00:16:34.740
My thanks to Sentry for keeping this podcast going strong.


00:16:34.740 --> 00:16:41.540
Now, Lauren, I was going to pull up, I will pull up the Talk Python app that we built together,


00:16:41.540 --> 00:16:44.100
the mobile app that you built and the backend stuff that I built.


00:16:44.100 --> 00:16:48.200
You also have an app that you recently built just straight in Flutter.


00:16:48.200 --> 00:16:49.740
Maybe just pull that up real quick as well.


00:16:49.740 --> 00:16:53.260
I have it installed and I like it, but I don't remember exactly what to search for.


00:16:53.260 --> 00:16:54.260
Oh, thanks.


00:16:54.260 --> 00:16:55.260
Yeah.


00:16:55.260 --> 00:16:56.260
It's called Epic Skies.


00:16:56.260 --> 00:16:57.260
It's just a weather app.


00:16:57.260 --> 00:16:58.260
Epic Skies.


00:16:58.260 --> 00:16:59.260
That's right.


00:16:59.260 --> 00:17:00.260
Yeah.


00:17:00.260 --> 00:17:01.260
That's a beautiful app as well.


00:17:01.260 --> 00:17:02.260
So you've got a couple apps out in the app store now, right?


00:17:02.260 --> 00:17:03.620
Well, yeah, this and as far as apps that I built myself.


00:17:03.620 --> 00:17:07.980
Yeah, this one, which was released maybe a month ago and your app, Talk Python app.


00:17:07.980 --> 00:17:11.580
So this one is straight Flutter, not too many backends, right?


00:17:11.580 --> 00:17:15.060
Probably consumes like some public weather API data somewhere.


00:17:15.060 --> 00:17:16.060
Yeah.


00:17:16.060 --> 00:17:21.260
But that being said, having taken your async Mongo Python course, FastAPI, as I go to implement


00:17:21.260 --> 00:17:26.700
push notifications, the backend logic will be in Python and determining who gets what


00:17:26.700 --> 00:17:29.740
local weather alerts, all that will be, the app is already deployed.


00:17:29.740 --> 00:17:30.740
I just don't have the features.


00:17:30.740 --> 00:17:32.740
I don't have all that functionality built yet.


00:17:32.740 --> 00:17:35.900
But yeah, backend for this handling the notifications will be Python.


00:17:35.900 --> 00:17:36.900
That's really cool.


00:17:36.900 --> 00:17:37.900
Yeah.


00:17:38.900 --> 00:17:39.900
You had a couple of releases this year so far.


00:17:39.900 --> 00:17:44.580
And so then also I'll let you talk about it since you built most of the front end stuff.


00:17:44.580 --> 00:17:45.580
Yeah.


00:17:45.580 --> 00:17:46.580
The Talk Python app.


00:17:46.580 --> 00:17:47.580
Sure.


00:17:47.580 --> 00:17:48.580
Yeah.


00:17:48.580 --> 00:17:49.580
I imagine most of the listeners are also students.


00:17:49.580 --> 00:17:52.220
So, you know, maybe a lot of people listening, I've used it, but basically it's a mobile


00:17:52.220 --> 00:17:57.100
app that allows students of Talk Python Training to consume their video courses, right.


00:17:57.100 --> 00:17:58.380
Similar to Udemy or something like that.


00:17:58.380 --> 00:17:59.380
Yeah.


00:17:59.380 --> 00:18:03.780
So we have our very fast backend written in Python, pulls in the user info, what courses


00:18:03.780 --> 00:18:05.220
they have access to.


00:18:05.220 --> 00:18:10.660
We track what courses, what lectures the users have watched so that it's in sync.


00:18:10.660 --> 00:18:14.300
If they go to the web app, all that is, you know, stays nicely in sync.


00:18:14.300 --> 00:18:15.300
Yeah.


00:18:15.300 --> 00:18:16.300
Written completely in Flutter.


00:18:16.300 --> 00:18:21.160
There were no, you know, it relies very heavily on video player, obviously, but all these


00:18:21.160 --> 00:18:25.740
libraries that we rely very heavily on are just available as Dart libraries.


00:18:25.740 --> 00:18:28.820
So I didn't have to write, you know, not a single line of native code as far as that


00:18:28.820 --> 00:18:29.820
goes.


00:18:29.820 --> 00:18:34.580
Even, you know, when Apple made us do in-app purchases or, for example, showing the progress


00:18:34.580 --> 00:18:37.540
in the notification bar, there's libraries for all of that.


00:18:37.540 --> 00:18:41.500
I'm grateful you chose Flutter as this, cause I got to be involved, but I also think it


00:18:41.500 --> 00:18:43.260
was an excellent choice that you could have made.


00:18:43.260 --> 00:18:45.220
I think it was an excellent choice as well.


00:18:45.220 --> 00:18:46.740
And let's go and talk about that.


00:18:46.740 --> 00:18:51.940
Cause I can see some good questions out in the audience and I know this, and I also opened


00:18:51.940 --> 00:18:52.980
the show like this, right?


00:18:53.220 --> 00:18:57.820
Like there are many ways in which you can build these apps and Lauren was just touching


00:18:57.820 --> 00:18:58.820
on it.


00:18:58.820 --> 00:19:05.740
How close do you need to be to native and use the exact API delivered by Apple or Google?


00:19:05.740 --> 00:19:07.900
Or how much do you care about cross platform?


00:19:07.900 --> 00:19:11.220
Because on this one, for example, you can get it on Google play, you can get it on the


00:19:11.220 --> 00:19:12.220
app store.


00:19:12.220 --> 00:19:14.680
The only real changes is there's different rules.


00:19:14.680 --> 00:19:19.660
And so for example, you can't talk about prices or you've got to do in-app purchases on Apple


00:19:19.660 --> 00:19:24.340
or, you know, there's, there's little variations that they force from their policies onto you,


00:19:24.340 --> 00:19:30.100
but otherwise it's just the same code, same code for iPad and tablet as it is for mobile,


00:19:30.100 --> 00:19:34.620
as opposed to Haru, who has the Swift project, which is awesome, but you're really tied to


00:19:34.620 --> 00:19:39.380
Apple, but you also get to take advantage of the closest changes.


00:19:39.380 --> 00:19:43.860
The build published stuff doesn't keep running into weird issues when there's some mismatch.


00:19:43.860 --> 00:19:48.420
I mean, you want to strike fear into your heart, just mentioned new release of Xcode


00:19:48.420 --> 00:19:51.740
and then that literally just happened this week.


00:19:51.740 --> 00:19:57.860
I was building something on Xcode 15 beta eight, and it was a huge pain to install.


00:19:57.860 --> 00:19:59.500
Didn't build for no reason.


00:19:59.500 --> 00:20:02.180
It's completely unclear, no documentation whatsoever.


00:20:02.180 --> 00:20:03.180
It's not great.


00:20:03.180 --> 00:20:06.820
So let's talk about choosing the framework and I'll just go through the, I got a bunch


00:20:06.820 --> 00:20:08.900
of tabs pulled up so we can talk about them.


00:20:08.900 --> 00:20:11.460
Andreas, you chose Ionic.


00:20:11.460 --> 00:20:14.900
Tell people what Ionic is and then why you chose it.


00:20:14.900 --> 00:20:21.900
Ionic is a way to create applications that can be delivered both to like normal website,


00:20:21.900 --> 00:20:24.360
to Android and to iOS.


00:20:24.360 --> 00:20:28.320
So we get all of the functionality and only need to write the code once.


00:20:28.320 --> 00:20:32.100
What it really is in our case, we chose to write everything in Angular.


00:20:32.100 --> 00:20:35.740
It's a web view running on the mobile phones.


00:20:35.740 --> 00:20:42.540
So you actually get just a simple server running on the mobile phone and also on iPads, of


00:20:42.540 --> 00:20:43.540
course.


00:20:43.540 --> 00:20:47.980
You can get connectors to the phone for doing things like push notifications.


00:20:47.980 --> 00:20:55.500
You can connect to the photo and photo library and also to the web camera and so on.


00:20:55.500 --> 00:20:58.620
So you can get all of that functionality into your app as well.


00:20:58.620 --> 00:21:02.220
The only difference being is that you only have to implement it once and it works on


00:21:02.220 --> 00:21:04.060
all of these three platforms.


00:21:04.060 --> 00:21:09.380
You can even get web functionality or sorry, camera functionality on the web application


00:21:09.380 --> 00:21:10.380
as well.


00:21:10.380 --> 00:21:13.500
That is running in an Angular, in a normal Angular platform.


00:21:13.500 --> 00:21:18.460
So yeah, that's and the reason we chose Ionic was that we're a very small team, only three


00:21:18.460 --> 00:21:19.460
developers.


00:21:19.460 --> 00:21:25.780
I and one of the me and the other one of the other developers had some experience of Angular.


00:21:25.780 --> 00:21:31.180
I've released other applications in Angular and we decided that that would be the way


00:21:31.180 --> 00:21:32.340
to go.


00:21:32.340 --> 00:21:35.380
So yeah, that's really why we chose Ionic.


00:21:35.380 --> 00:21:39.660
And what it does have it has like style sheets for each type of application.


00:21:39.660 --> 00:21:43.460
So you have one style sheet for the web, you have one style sheet for iOS and you have


00:21:43.460 --> 00:21:45.500
one style sheet for Android.


00:21:45.500 --> 00:21:47.960
So each button gets styled.


00:21:47.960 --> 00:21:53.020
So it looks like an Android button or an iOS button and so on in the system as well.


00:21:53.020 --> 00:21:56.140
Are you all using the Ionic framework for your web app as well?


00:21:56.140 --> 00:21:57.140
Yes.


00:21:57.140 --> 00:21:58.140
Okay.


00:21:58.140 --> 00:21:59.140
Now that's interesting.


00:21:59.140 --> 00:22:01.260
That's a different level of integration there that or a reuse.


00:22:01.260 --> 00:22:02.260
That's pretty interesting.


00:22:02.260 --> 00:22:07.140
The thing is for us, just this specific application, because what we did have previously, we had


00:22:07.140 --> 00:22:12.220
a progressive web app that was written on Ruby on Rails and the Ruby on Rails developer


00:22:12.220 --> 00:22:18.220
decided to go elsewhere, which meant that me and another Python guy, Ruby on Rails application


00:22:18.220 --> 00:22:19.420
that we had to take care of.


00:22:19.420 --> 00:22:21.060
I have read some Ruby on Rails.


00:22:21.060 --> 00:22:26.460
I've also written some Ruby on Rails previously, but it's like, is that 15 years ago, I think?


00:22:26.460 --> 00:22:28.620
So that's not something that we wanted to keep up with.


00:22:28.620 --> 00:22:34.140
And what we do need to do, we need the deep linking, which means that if you get an URL


00:22:34.140 --> 00:22:39.380
in an email, because we send out notifications for invoices, for example, you get an URL


00:22:39.380 --> 00:22:43.620
in your email, you click on that, you either go to the web application, if you don't have


00:22:43.620 --> 00:22:47.780
the app installed on your mobile phone, but you can get into the application directly


00:22:47.780 --> 00:22:49.580
if you have it installed on your phone.


00:22:49.580 --> 00:22:52.540
So that type of integration is very important for us as well.


00:22:52.540 --> 00:22:58.420
It's worth pointing out Ionic is cross platform, not just web to mobile as I'm learning, but


00:22:58.420 --> 00:23:04.300
also so you can publish in the Google Play Store, you can publish in the Apple App Store.


00:23:04.300 --> 00:23:12.500
We publish in all app stores and then we also have it on the web on its own URL as well.


00:23:12.500 --> 00:23:17.780
It needs certain documents in the web application to actually make sure that deep linking works


00:23:17.780 --> 00:23:23.700
in the mobile space as well, so that we can get to the right mobile phone and application


00:23:23.700 --> 00:23:24.700
and so on as well.


00:23:24.700 --> 00:23:25.700
Did you look at other frameworks?


00:23:25.700 --> 00:23:31.940
Were you thinking of maybe going true native and writing in Swift or other things?


00:23:31.940 --> 00:23:35.780
The main thing is, like I said, we're a small team and we needed to do something that was


00:23:35.780 --> 00:23:39.540
rather simple, things that we knew something about.


00:23:39.540 --> 00:23:43.100
The other main developer, he is Python Django developer.


00:23:43.100 --> 00:23:48.500
I worked with him also on that online tailored suit company that we had previously.


00:23:48.500 --> 00:23:51.580
And we've been working with Django for a very long time.


00:23:51.580 --> 00:23:56.620
And just changing to like writing something in Swift or writing, then needing to also


00:23:56.620 --> 00:24:01.460
do it in Java for an Android application would be too much hassle for us.


00:24:01.460 --> 00:24:06.740
And therefore we chose something that we sort of thought that we would be more or less comfortable


00:24:06.740 --> 00:24:07.740
with.


00:24:07.740 --> 00:24:11.700
It's still just HTML, that's CSS and it's some TypeScript, which is like a better version


00:24:11.700 --> 00:24:12.700
of JavaScript.


00:24:12.700 --> 00:24:13.700
What is your framework?


00:24:13.700 --> 00:24:16.100
I mean, you kind of mentioned this a little bit, but why did you choose this?


00:24:16.100 --> 00:24:18.060
And like, you know, did you look at others?


00:24:18.060 --> 00:24:21.780
And yeah, I think this is actually the biggest choice people have to make when they're building


00:24:21.780 --> 00:24:22.780
an app.


00:24:22.780 --> 00:24:25.460
It's like, what do I even, which direction do I even go?


00:24:25.460 --> 00:24:29.900
Even if I'm sure I'm doing Python in the backend, then still that doesn't solve this problem


00:24:29.900 --> 00:24:30.900
necessarily.


00:24:30.900 --> 00:24:32.380
I think the story will make a little bit more sense.


00:24:32.380 --> 00:24:35.540
I mentioned earlier that the initial version was a PWA.


00:24:35.540 --> 00:24:38.420
That's mostly because my background is web development.


00:24:38.420 --> 00:24:40.460
I write a lot of Vue as well.


00:24:40.460 --> 00:24:44.220
However, the PWA was difficult for discoverability.


00:24:44.220 --> 00:24:47.900
And then I had to make the really tough choice of, okay, what's kind of the next thing to


00:24:47.900 --> 00:24:48.900
do?


00:24:48.900 --> 00:24:51.360
I really did look kind of all around the landscape.


00:24:51.360 --> 00:24:56.140
But the one thing that always kind of scared me was that if, or I guess the thing that


00:24:56.140 --> 00:25:01.540
really pushed me into going native was like, if I wanted really native functionality, which,


00:25:01.540 --> 00:25:06.280
you know, having like been billing apps for quite a few years now, sometimes the things


00:25:06.280 --> 00:25:10.580
that you want to do or the things that people ask for veers off into like the, all right,


00:25:10.580 --> 00:25:11.860
this is actually pretty custom.


00:25:11.860 --> 00:25:12.860
There's no library for this.


00:25:12.860 --> 00:25:15.500
Like we got to, we got to just like roll up our sleeves and do it.


00:25:15.500 --> 00:25:16.500
Yeah.


00:25:16.500 --> 00:25:19.860
I knew that if I had gone cross platform that all my experience, let's say for example,


00:25:19.860 --> 00:25:23.020
would have been in Flutter or React Native, which are like the two really, really popular


00:25:23.020 --> 00:25:24.020
options.


00:25:24.020 --> 00:25:27.580
And if I now needed to write something custom, the one year of Swift experience that I have


00:25:27.580 --> 00:25:28.780
now I wouldn't have had.


00:25:28.780 --> 00:25:32.780
So it's like, not only am I using a really difficult and probably not well-documented


00:25:32.780 --> 00:25:36.280
API, it's like, on top of that, I also don't even understand the language.


00:25:36.280 --> 00:25:39.020
So I think for me, that was kind of the big, the big thing.


00:25:39.020 --> 00:25:42.140
And one of the reasons was I always thought maybe like, we haven't done this yet, but


00:25:42.140 --> 00:25:46.420
maybe we could like amp up the camera or do something with video players, or maybe like


00:25:46.420 --> 00:25:50.100
be a little bit more custom with, with the way that we pull, pull our images in and take


00:25:50.100 --> 00:25:51.760
more advantage of caching and stuff.


00:25:51.760 --> 00:25:56.480
So that was where kind of, that was the reason why I ended up, I ended up going with Swift.


00:25:56.480 --> 00:25:58.440
I think it was, it was a pretty cool choice.


00:25:58.440 --> 00:25:59.440
Yeah.


00:25:59.440 --> 00:26:02.360
And it sounds like SwiftUI makes it a little bit easier than, you know, a bunch of storyboards


00:26:02.360 --> 00:26:03.360
and all that.


00:26:03.360 --> 00:26:05.000
Let me say a little bit about, about SwiftUI.


00:26:05.000 --> 00:26:06.280
It has been quite helpful.


00:26:06.280 --> 00:26:08.600
I don't know if it's because I've come from the web.


00:26:08.600 --> 00:26:13.680
I've heard online that the people at Apple or the, the people who develop SwiftUI were


00:26:13.680 --> 00:26:14.880
influenced by React.


00:26:14.880 --> 00:26:18.960
I could see that a little bit having, having used a little bit of React, but it is, it


00:26:18.960 --> 00:26:21.440
is quite a bit more, it's a lot more expressive.


00:26:21.440 --> 00:26:23.000
It's a lot easier to write.


00:26:23.000 --> 00:26:27.040
But let me also say that you're not going to get away with only writing SwiftUI.


00:26:27.040 --> 00:26:31.560
Like you could do maybe 80 to 90%, but there's that additional 10% you have to dip down to


00:26:31.560 --> 00:26:34.320
UIKit and, and kind of put some extra stuff together.


00:26:34.320 --> 00:26:35.760
Still a little rough around the edges.


00:26:35.760 --> 00:26:36.760
That's kind of the case.


00:26:36.760 --> 00:26:40.020
I'm always thinking of new apps and new ideas and that I have no time to work on them.


00:26:40.020 --> 00:26:42.920
But the one that I have no time to work on right now that I'm thinking of is something


00:26:42.920 --> 00:26:45.240
to do with the Apple watch.


00:26:45.240 --> 00:26:48.480
And there's no Flutter for Apple watch right now.


00:26:48.480 --> 00:26:52.240
So I'm like, well, maybe I'm going to have to learn Swift after all.


00:26:52.240 --> 00:26:53.240
We'll see.


00:26:53.240 --> 00:26:55.800
We'll see if I, first I got to find time and then we'll come to that.


00:26:55.800 --> 00:26:56.800
We'll solve that problem later.


00:26:56.800 --> 00:26:57.800
Awesome.


00:26:57.800 --> 00:27:00.800
All right, Geoffrey, Kivi, why'd you choose Kivi?


00:27:00.800 --> 00:27:04.720
Mi framework favorito en ese caso es Kivi.


00:27:04.720 --> 00:27:07.520
Kivi lo conocí en el año 2011.


00:27:07.520 --> 00:27:08.520
Okay.


00:27:08.520 --> 00:27:10.440
My favorite framework is Kivi.


00:27:10.440 --> 00:27:18.640
I knew it in 2011 and I use it because it's very stable and steady.


00:27:18.640 --> 00:27:26.920
And because it has a very active community and it allows and develop applications for


00:27:26.920 --> 00:27:31.560
many platforms and with one use, just one code.


00:27:31.560 --> 00:27:35.160
So that's why he chose Kivi.


00:27:35.160 --> 00:27:40.820
It seems like Kivi is a good fit for the type of application that Geoffrey built.


00:27:40.820 --> 00:27:42.520
So it was a good match.


00:27:42.520 --> 00:27:43.520
Yes.


00:27:43.520 --> 00:27:45.680
Si, totalmente encaja con lo que he buscado.


00:27:45.680 --> 00:27:51.720
De hecho para mi es gratificante que lo conjundan con un juego porque siempre he querido que


00:27:51.720 --> 00:27:59.000
tenga ese nivel de realismo que ofrecen los videojuegos como los frameworks de Unity 3D.


00:27:59.000 --> 00:28:09.040
Okay, it's grateful for me that Kivi really match with I look for because I found it nice


00:28:09.040 --> 00:28:16.840
that people can feel it like a game because games are realistic in some ways to control


00:28:16.840 --> 00:28:23.760
what do you want, how do you want to and custom your car, for example.


00:28:23.760 --> 00:28:30.760
And this application gives you lots of features to implement to what you want.


00:28:30.760 --> 00:28:31.760
Okay, Lauren.


00:28:31.760 --> 00:28:33.160
I don't remember if I mentioned it.


00:28:33.160 --> 00:28:38.720
I actually started briefly with Kotlin and native Android programming in 2020.


00:28:38.720 --> 00:28:43.240
But once I tried Flutter, I just found the developer experience to be exponentially better,


00:28:43.240 --> 00:28:44.240
right?


00:28:44.240 --> 00:28:46.160
And with the added benefit of being cross platform.


00:28:46.160 --> 00:28:48.120
So Kotlin as a language, I think is great.


00:28:48.120 --> 00:28:51.920
It's not that's not the issue, but just the overall process of building an app and native


00:28:51.920 --> 00:28:52.920
Android versus Flutter.


00:28:52.920 --> 00:28:55.400
I imagine I would probably like Swift better.


00:28:55.400 --> 00:28:59.640
If I tried that I haven't really had a need to dive too deep into it so far.


00:28:59.640 --> 00:29:03.040
But I think Haru made some interesting points in terms of you need something really custom.


00:29:03.040 --> 00:29:07.520
Yeah, he would have had he chose a cross platform framework, he then would have had to learn


00:29:07.520 --> 00:29:08.800
Swift and then do all that.


00:29:08.800 --> 00:29:13.520
But I do want to make the point that you do still have access to any native API's that


00:29:13.520 --> 00:29:14.520
you need, right?


00:29:14.520 --> 00:29:15.840
Even if there's not a library for it.


00:29:15.840 --> 00:29:18.280
And Flutter, it's something called a method channel.


00:29:18.280 --> 00:29:21.640
And then you can just just a message you send back to the native platform, whatever you


00:29:21.640 --> 00:29:25.440
got to do on the native side, you can do that being said, in terms of what really struck


00:29:25.440 --> 00:29:30.400
me in Flutter was building UI was so much nicer than than doing it Android with a hot


00:29:30.400 --> 00:29:34.580
reload, you know, you make a change, hit save immediately updates the widget.


00:29:34.580 --> 00:29:37.260
So in Flutter, all your UI components are called widgets.


00:29:37.260 --> 00:29:40.880
If you ever look at some Flutter UI code, it's I didn't really like it at first, like


00:29:40.880 --> 00:29:43.120
it looks a little bit weird if you're not used to it.


00:29:43.120 --> 00:29:47.440
But as soon as you wrap your head around the widget tree and how it all works, and get


00:29:47.440 --> 00:29:51.600
used to using snippets and your preferred IDE, you just say wrap this widget and another


00:29:51.600 --> 00:29:53.400
widget that saves a bunch of time.


00:29:53.400 --> 00:29:56.600
It's really not fun if you're doing that stuff manually without without snippets.


00:29:56.600 --> 00:30:01.560
But yeah, all that being said, I was just so much more productive building UIs and again,


00:30:01.560 --> 00:30:04.560
having the added benefit of being cross platform.


00:30:04.560 --> 00:30:10.640
So for me, that's I mean, it's unlikely I'll ever have a need to go native or choose a


00:30:10.640 --> 00:30:14.200
different framework for that matter, because Flutter suits all my needs.


00:30:14.200 --> 00:30:17.220
So there's some code that somebody has never seen that that might look might look a little


00:30:17.220 --> 00:30:18.220
bit weird, right?


00:30:18.220 --> 00:30:19.220
It looks normal to me.


00:30:19.220 --> 00:30:23.440
What's interesting about it is like, it's really you build these, these like hierarchies


00:30:23.440 --> 00:30:29.120
of code, but they exactly match the UI hierarchy, like this panel contains these three things,


00:30:29.120 --> 00:30:30.600
and they're kind of indented in code.


00:30:30.600 --> 00:30:37.400
But boy, do you need a smart plugin in your IDE or your editor to like manage the back


00:30:37.400 --> 00:30:39.680
end of those curly closing things?


00:30:39.680 --> 00:30:44.360
Yeah, it was especially starting out, you're missing one, one parentheses or one curly


00:30:44.360 --> 00:30:47.860
bracket and your page is full of red squiggly lines.


00:30:47.860 --> 00:30:51.160
And if you don't know how to sort that out, it's not once you get used to it, it's fine.


00:30:51.160 --> 00:30:54.920
But especially in the early days, sorting out those closing brackets are pretty annoying.


00:30:54.920 --> 00:30:59.200
But yeah, all that being said, I found myself way more productive with Flutter, really easy


00:30:59.200 --> 00:31:03.360
to build nice UIs, the performance is always getting better animations, all that stuff


00:31:03.360 --> 00:31:04.400
is really nice.


00:31:04.400 --> 00:31:09.800
And you still have access to the full native API's if you if you need to use it.


00:31:09.800 --> 00:31:13.680
Doc Python to me is partially supported by our training courses.


00:31:13.680 --> 00:31:17.820
Python's async and parallel programming support is highly underrated.


00:31:17.820 --> 00:31:21.440
Have you shied away from the amazing new async and await keywords because you've heard it's


00:31:21.440 --> 00:31:25.480
way too complicated or that it's just not worth the effort?


00:31:25.480 --> 00:31:29.880
With the right workloads, 100 times speed up is totally possible with minor changes


00:31:29.880 --> 00:31:31.040
to your code.


00:31:31.040 --> 00:31:32.840
But you do need to understand the internals.


00:31:32.840 --> 00:31:37.800
And that's why our course async techniques and examples in Python show you how to write


00:31:37.800 --> 00:31:41.900
async code successfully, as well as how it works.


00:31:41.900 --> 00:31:49.160
Get started with async and await today with our course at talkpython.fm/async.


00:31:49.160 --> 00:31:54.960
One of my concerns with all of these frameworks, these these non, non Kotlin, non Swift frameworks


00:31:54.960 --> 00:31:56.880
is like, well, how supported are they?


00:31:56.880 --> 00:32:00.240
Like, am I excited about something that 10 people are using?


00:32:00.240 --> 00:32:02.720
You know what I mean?


00:32:02.720 --> 00:32:07.360
Right so I can pull up Ionic and Ionic's got 50,000 stars.


00:32:07.360 --> 00:32:12.240
And then, you know, one of the other ones I definitely considered and chose is Flutter


00:32:12.240 --> 00:32:15.020
and it's got 157,000 stars.


00:32:15.020 --> 00:32:19.120
By way of comparison, Flask has around, I think, 50,000, 60,000.


00:32:19.120 --> 00:32:20.920
CPython itself has 50,000.


00:32:20.920 --> 00:32:21.920
Right?


00:32:21.920 --> 00:32:26.300
So like, oh, okay, well that seems like a good enough number that people are using it.


00:32:26.300 --> 00:32:28.160
These are all really interesting choices.


00:32:28.160 --> 00:32:32.320
And I think just making this choice, it's where you got to start, but it's a challenge.


00:32:32.320 --> 00:32:34.120
You got to think about what you're building and whatnot.


00:32:34.120 --> 00:32:35.120
Right?


00:32:35.120 --> 00:32:36.640
I'd like to also add to that.


00:32:36.640 --> 00:32:40.040
I mean, one of the main things that like you said, one of the things that we had a bit


00:32:40.040 --> 00:32:46.440
of a worry about was, will like, for example, iOS, the app store, will they accept something


00:32:46.440 --> 00:32:48.600
that's coming from Ionic framework?


00:32:48.600 --> 00:32:54.680
Because you are literally just running a web application in a web view in your app is really


00:32:54.680 --> 00:32:56.960
a small component.


00:32:56.960 --> 00:33:02.680
And we even had in the previous versions, we had the ability to update the underlying


00:33:02.680 --> 00:33:07.840
HTML code and the application code from a server that is on the internet.


00:33:07.840 --> 00:33:12.960
So it was really a really strange thing, but Apple has never had any issues with our application.


00:33:12.960 --> 00:33:14.840
Yeah, that's fantastic.


00:33:14.840 --> 00:33:15.840
Congratulations also.


00:33:15.840 --> 00:33:19.160
I know, I don't think it's the Ionic framework.


00:33:19.160 --> 00:33:21.400
I think there's always a weird issue.


00:33:21.400 --> 00:33:23.080
There's just a weird review processes there.


00:33:23.080 --> 00:33:29.440
But I think Ionic seems to be pretty solid and that people have apps out in the app store.


00:33:29.440 --> 00:33:30.440
Flutter, absolutely.


00:33:30.440 --> 00:33:34.080
Like you can see a bunch of things like the BMW app and stuff.


00:33:34.080 --> 00:33:36.400
Kivy also, I think that's really good.


00:33:36.400 --> 00:33:41.880
I think there's, I think one of the rules of thumbs that people should really have is


00:33:41.880 --> 00:33:46.400
if you're going to use a framework, just look to see that there are apps in the app store


00:33:46.400 --> 00:33:47.840
based on that framework.


00:33:47.840 --> 00:33:48.840
Right?


00:33:48.840 --> 00:33:52.960
Not proof of concept, not theoretical things, but like here are apps in the app store based


00:33:52.960 --> 00:33:55.400
on this, this app.


00:33:55.400 --> 00:34:00.720
And not necessarily because it's only a good thing if the app is in the app store, but


00:34:00.720 --> 00:34:02.960
there's all these little edges, right?


00:34:02.960 --> 00:34:05.240
Like I said, in-app purchasing, for example, right?


00:34:05.240 --> 00:34:08.400
That's something you could, you could build a cool mobile framework and never add that


00:34:08.400 --> 00:34:09.920
because you haven't gotten around to it.


00:34:09.920 --> 00:34:14.160
But if, even if you don't want it, if the people at the app store require you to have


00:34:14.160 --> 00:34:18.080
it, your app doesn't go in the app store until you put it in, regardless of whether you even


00:34:18.080 --> 00:34:19.080
want to.


00:34:19.080 --> 00:34:20.080
Right?


00:34:20.080 --> 00:34:21.760
So I remember Lauren and I spent, how long did we spend?


00:34:21.760 --> 00:34:26.480
Like a week and a half full-time adding in-app purchasing and we didn't even want it.


00:34:26.480 --> 00:34:27.480
Right?


00:34:27.480 --> 00:34:28.480
And they're like, Nope, Nope.


00:34:28.480 --> 00:34:30.680
You have to have it rejected, rejected, rejected.


00:34:30.680 --> 00:34:31.680
Nope.


00:34:31.680 --> 00:34:33.840
Here's the way you can, what is it?


00:34:33.840 --> 00:34:38.360
You can like protest this rejection to a higher authority, protest it, reject it.


00:34:38.360 --> 00:34:40.280
You know, it's like, it wasn't good.


00:34:40.280 --> 00:34:41.280
It wasn't good.


00:34:41.280 --> 00:34:45.160
So you got to think about those kinds of things, like when you choose a framework, right?


00:34:45.160 --> 00:34:47.200
And good job on that in the end, Lauren.


00:34:47.200 --> 00:34:49.480
We're not done as, as we'll see.


00:34:49.480 --> 00:34:52.160
But yeah, nonetheless, we're, we're pretty much there.


00:34:52.160 --> 00:34:53.880
Again, I had a blast working on this.


00:34:53.880 --> 00:34:56.680
It's really, really nice working with you directly.


00:34:56.680 --> 00:34:58.200
Really grateful to have been a part of that.


00:34:58.200 --> 00:34:59.200
There's a question in the audience.


00:34:59.200 --> 00:35:02.840
I kind of want to get, I guess this is for you, Lauren.


00:35:02.840 --> 00:35:06.400
This is Alan asks, looking into Flutter, I want to know the best way to integrate with


00:35:06.400 --> 00:35:10.800
AWS, for example, is Cognito an option for a signup flow?


00:35:10.800 --> 00:35:12.680
So I don't know what Cognito is.


00:35:12.680 --> 00:35:16.320
I guess it's an authentication platform from AWS, I'm guessing.


00:35:16.320 --> 00:35:19.040
But yeah, I mean, just maybe talk about that real quick.


00:35:19.040 --> 00:35:22.960
If, if you've got any experience, I don't personally have a lot of AWS experience and


00:35:22.960 --> 00:35:25.120
I know they have like a million separate services.


00:35:25.120 --> 00:35:28.640
So I do know that there is an AWS library for Flutter.


00:35:28.640 --> 00:35:33.280
Again, I don't know what exactly that entails in terms of which one of their services it


00:35:33.280 --> 00:35:37.520
provides a Dart wrapper for, but either way, it's certainly possible to integrate with


00:35:37.520 --> 00:35:39.480
any, any other services.


00:35:39.480 --> 00:35:42.320
Even if you have to, you know, do it from scratch, it's obviously possible.


00:35:42.320 --> 00:35:43.680
It's all just APIs at the end of the day.


00:35:43.680 --> 00:35:47.560
So I would say that like every one of these frameworks we just talked about, to my knowledge


00:35:47.560 --> 00:35:50.640
has something like pip and PyPI, right?


00:35:50.640 --> 00:35:53.200
PyPI, we're all used to pip install our projects.


00:35:53.200 --> 00:35:56.800
Like that's just the lifeblood of how Python works.


00:35:56.800 --> 00:36:02.840
But for example, Flutter has pub.dev and you can, you know, pub, pub get stuff and it's


00:36:02.840 --> 00:36:04.520
in the equivalent type thing, right?


00:36:04.520 --> 00:36:07.520
Compared to like React Native, which is a little bit older, you know, you, you see a


00:36:07.520 --> 00:36:12.560
lot about how they're, they have a more robust package system, but in my experience, I've


00:36:12.560 --> 00:36:17.000
yet to run across a scenario where I did not find the library that I needed.


00:36:17.000 --> 00:36:18.480
Like weather app uses location.


00:36:18.480 --> 00:36:20.520
It's plenty of location libraries, you know?


00:36:20.520 --> 00:36:21.520
Yeah.


00:36:21.520 --> 00:36:23.880
And Ionic has NPM, obviously, right?


00:36:23.880 --> 00:36:24.880
Yeah.


00:36:24.880 --> 00:36:26.880
And they also have their own package.


00:36:26.880 --> 00:36:29.760
They have the Cordova packages or Cordova.


00:36:29.760 --> 00:36:30.760
Okay.


00:36:30.760 --> 00:36:31.760
Yeah.


00:36:31.760 --> 00:36:37.000
Which are, are what they use for connecting to the telephone itself.


00:36:37.000 --> 00:36:42.000
So everything that you need to do with that, you, you go through the Cordova store.


00:36:42.000 --> 00:36:46.080
There are a lot of various packages on the Ionic website themselves.


00:36:46.080 --> 00:36:47.440
So, yep.


00:36:47.440 --> 00:36:52.080
And to varying degrees of success, we have CocoaPods for you Haru, right?


00:36:52.080 --> 00:36:53.860
Now it's actually Swift package manager.


00:36:53.860 --> 00:36:55.280
So it's, it's a little bit better.


00:36:55.280 --> 00:36:57.320
I think it goes by SPM or I don't know.


00:36:57.320 --> 00:36:58.320
Yeah.


00:36:58.320 --> 00:37:00.840
A little bit easier to install less configuration hassle overall.


00:37:00.840 --> 00:37:04.320
Because like I said, the CocoaPods are kind of a little bit janky, right?


00:37:04.320 --> 00:37:08.680
They're based on like Ruby gems and then they compile it.


00:37:08.680 --> 00:37:11.600
A lot of Rube Goldberg and stuff happening there.


00:37:11.600 --> 00:37:14.800
And then for packages in Kivy, you just use pip.


00:37:14.800 --> 00:37:15.800
Yes.


00:37:15.800 --> 00:37:18.960
Utilize la libreria Pginus.


00:37:18.960 --> 00:37:22.000
I use the Pginus library.


00:37:22.000 --> 00:37:26.000
Y tambien utilice para monetizar la aplicacion en la play store.


00:37:26.000 --> 00:37:28.080
Con publicidad utilice Kipmo.


00:37:28.080 --> 00:37:32.400
And for play store, I use for purchasing Kipmo.


00:37:32.400 --> 00:37:33.400
Cool.


00:37:33.400 --> 00:37:36.360
So there's third party packages that you can do in-app purchases with.


00:37:36.360 --> 00:37:37.360
That's great.


00:37:37.360 --> 00:37:42.520
Utilizar graficos 3D, calculos rapidos NumPy.


00:37:42.520 --> 00:37:47.360
And for 3D calculation, I use NumPy.


00:37:47.360 --> 00:37:48.360
That's really cool.


00:37:48.360 --> 00:37:51.640
That's one of the most popular ones for general science, but I guess it's, it's neat that


00:37:51.640 --> 00:37:53.520
it applies right there on mobile apps.


00:37:53.520 --> 00:37:56.000
There definitely are some advantages to having Kivy.


00:37:56.000 --> 00:38:02.320
This is a question for you, Andreas, I guess, but we can maybe all talk about this real


00:38:02.320 --> 00:38:03.320
quick.


00:38:03.320 --> 00:38:06.440
What are the limitations of Ionic regarding to being connected to the internet versus


00:38:06.440 --> 00:38:08.120
I being offline?


00:38:08.120 --> 00:38:12.240
I'm guessing that that question has comes from the fact that it sounds like a web app


00:38:12.240 --> 00:38:13.240
framework.


00:38:13.240 --> 00:38:16.560
It is a web app framework, but it is self-contained.


00:38:16.560 --> 00:38:21.400
So when you install the app, you get all of the JavaScript, all of the HTML, all of the


00:38:21.400 --> 00:38:27.240
CSS that's required to make your app look like it should look on the mobile phone.


00:38:27.240 --> 00:38:30.980
It's more of how you design your application yourself.


00:38:30.980 --> 00:38:35.320
If you want, for example, our application doesn't work without internet access because


00:38:35.320 --> 00:38:38.380
we have all of the information on the backend and there's really nothing that we can do


00:38:38.380 --> 00:38:40.500
without internet access.


00:38:40.500 --> 00:38:45.120
But you could of course design it that you download stuff and you use it with, there's


00:38:45.120 --> 00:38:49.520
a lot of plugins to get like in, what is it that Apple likes?


00:38:49.520 --> 00:38:53.200
They like to use the default database that we get on all of our Python.


00:38:53.200 --> 00:38:54.200
SQLite maybe?


00:38:54.200 --> 00:38:55.200
Yeah.


00:38:55.200 --> 00:38:56.200
SQLite.


00:38:56.200 --> 00:38:57.200
Thank you.


00:38:57.200 --> 00:39:02.860
They use a lot of SQLite on the apps and you can get SQLite connectors and use that locally


00:39:02.860 --> 00:39:04.440
on the mobile phone itself.


00:39:04.440 --> 00:39:08.760
So you can store everything if you want to and do a complete offline experience as well.


00:39:08.760 --> 00:39:13.320
And you use block, but did you use block for offline capabilities?


00:39:13.320 --> 00:39:17.000
For anyone not familiar, block is one of the many available state management libraries


00:39:17.000 --> 00:39:18.000
for Flutter.


00:39:18.000 --> 00:39:20.320
That's the one I prefer generally.


00:39:20.320 --> 00:39:21.760
It's what I use at work as well.


00:39:21.760 --> 00:39:26.400
They also have a library called hydrated block, which makes it really, really easy.


00:39:26.400 --> 00:39:30.800
It just persists any state change within your application without having to write manually


00:39:30.800 --> 00:39:31.800
write your code.


00:39:31.800 --> 00:39:35.360
So basically it's a to JSON and from JSON situation.


00:39:35.360 --> 00:39:40.720
You have like a state class and as long as your state can be serialized in the JSON,


00:39:40.720 --> 00:39:43.140
it just does all that in the background, which is really nice.


00:39:43.140 --> 00:39:48.400
So there's like that kind of state persistence between app sessions, but then there's also


00:39:48.400 --> 00:39:53.400
actually downloading the files like for when the, you know, offline was very important


00:39:53.400 --> 00:39:54.400
to you, right?


00:39:54.400 --> 00:39:55.400
As far as the functionality.


00:39:55.400 --> 00:39:56.400
So yeah, yeah.


00:39:56.400 --> 00:39:58.000
That's one of the reasons the app existed.


00:39:58.000 --> 00:39:59.240
One of the two or three, right?


00:39:59.240 --> 00:40:00.240
Sure.


00:40:00.240 --> 00:40:01.240
Yeah.


00:40:01.240 --> 00:40:04.560
So the thing is that wasn't really hydrated block was not actually it saved the file path,


00:40:04.560 --> 00:40:08.720
but the actual bytes, you know, streaming of the bytes and saving the file itself.


00:40:08.720 --> 00:40:13.000
That was just basically just the HTTP library, writing that directly to the, to the device.


00:40:13.000 --> 00:40:15.960
And then hydrated block saves the file path.


00:40:15.960 --> 00:40:19.800
The next time the user needs to watch that offline.


00:40:19.800 --> 00:40:21.220
What's your offline story?


00:40:21.220 --> 00:40:23.400
We don't really have an offline story.


00:40:23.400 --> 00:40:25.940
I think it's kind of similar to like other platforms.


00:40:25.940 --> 00:40:29.040
So something like Instagram, if you don't have an internet connection, you don't really


00:40:29.040 --> 00:40:31.480
see photos and it's kind of similar for us right now.


00:40:31.480 --> 00:40:32.480
Keep it simple.


00:40:32.480 --> 00:40:33.480
Right.


00:40:33.480 --> 00:40:37.720
And Jeffrin, does your app use online features or is it just offline?


00:40:37.720 --> 00:40:41.520
With the Lisa and the third thing is offline.


00:40:41.520 --> 00:40:44.120
In v3d we use offline images.


00:40:44.120 --> 00:40:45.120
Okay.


00:40:45.120 --> 00:40:46.120
Yeah.


00:40:46.120 --> 00:40:47.120
So no real internet.


00:40:47.120 --> 00:40:48.120
Excellent.


00:40:48.120 --> 00:40:49.120
All right.


00:40:49.120 --> 00:40:51.720
Let's do talk a little bit about some Python, about what's going on here.


00:40:51.720 --> 00:40:55.040
Since you know, we're just a little ways into the show, I guess we could talk some Python


00:40:55.040 --> 00:40:56.040
at this point.


00:40:56.040 --> 00:40:57.040
Yeah.


00:40:57.040 --> 00:40:58.040
It's been a great conversation.


00:40:58.040 --> 00:40:59.960
So let's go kind of top to bottom.


00:40:59.960 --> 00:41:04.200
And Andreas, it sounds like yours is very much an online application and has backend


00:41:04.200 --> 00:41:05.200
services.


00:41:05.200 --> 00:41:08.280
You already talked about the Ruby on Rails app and getting away from that.


00:41:08.280 --> 00:41:09.600
Tell us your story.


00:41:09.600 --> 00:41:14.360
Give us a little sense of like, what is your backend architecture and just, you know, what


00:41:14.360 --> 00:41:15.360
do you got going on with Python?


00:41:15.360 --> 00:41:17.560
Where some of the technologies and things there.


00:41:17.560 --> 00:41:20.560
Our backend architecture is actually just changed.


00:41:20.560 --> 00:41:25.400
We're really proud of it now because we've moved from our own installed servers that


00:41:25.400 --> 00:41:29.760
have been installed with via very long scripts that you've written down exactly what you


00:41:29.760 --> 00:41:34.520
need to do and everything and running our own MySQL servers and so on.


00:41:34.520 --> 00:41:39.480
And we've moved everything into AWS and we're currently running in a Kubernetes setup.


00:41:39.480 --> 00:41:43.680
So we are really proud of how that's running currently.


00:41:43.680 --> 00:41:45.040
But we are a Django shop.


00:41:45.040 --> 00:41:46.320
We've been running Django.


00:41:46.320 --> 00:41:51.400
The first version was written in 2013 and we've just iterated since then.


00:41:51.400 --> 00:41:55.880
And we're now currently on the latest versions of all of the dependencies that we have in


00:41:55.880 --> 00:41:59.560
PyPI as of last week, because we did a major upgrade.


00:41:59.560 --> 00:42:04.320
We need to update our Redis connections for certain reasons.


00:42:04.320 --> 00:42:09.200
But yeah, we've been running with Django and just doing a regular Django application really.


00:42:09.200 --> 00:42:13.000
And that's the main part of the admin for our customers.


00:42:13.000 --> 00:42:20.280
They use the Django app to do their administration for the memberships, sending out invoices,


00:42:20.280 --> 00:42:24.080
selecting activities that they need their members to join and so on.


00:42:24.080 --> 00:42:26.880
All of that is done more or less currently in the Django app.


00:42:26.880 --> 00:42:33.360
And then we have the mobile application is for the members to go in and check which activities


00:42:33.360 --> 00:42:39.160
are we going to go to, which invoices do we need to pay, connect to other members in the


00:42:39.160 --> 00:42:42.400
teams or in the clubs that they're members of.


00:42:42.400 --> 00:42:44.040
Primarily, you've got this Django app.


00:42:44.040 --> 00:42:47.680
And I would imagine that people can log into the Django app as well.


00:42:47.680 --> 00:42:52.680
Yeah, and previously, we had like a lot of Ruby on Rails servers that did certain parts


00:42:52.680 --> 00:42:54.200
of the application.


00:42:54.200 --> 00:42:58.440
For example, we have a lot of different payment solutions for the invoices you can pay via


00:42:58.440 --> 00:43:04.920
Swish, which is a comparison with I think it's called Venmo or Cash App in the States.


00:43:04.920 --> 00:43:08.840
What you do is you send money via your mobile phone number in Sweden.


00:43:08.840 --> 00:43:12.560
And so we have a backend for handling that that used to be written in Ruby.


00:43:12.560 --> 00:43:14.520
We've moved that into Django as well.


00:43:14.520 --> 00:43:18.680
We also have credit card payments, which was in Ruby on Rails moved into Django.


00:43:18.680 --> 00:43:22.920
And so we're trying to consolidate a lot in the backend and try to move everything back


00:43:22.920 --> 00:43:29.280
into the Django application and just have the mobile apps out for the members to use


00:43:29.280 --> 00:43:31.040
to talk to the backend.


00:43:31.040 --> 00:43:32.040
That's excellent.


00:43:32.040 --> 00:43:34.800
Yeah, there's a bit of a trend away from all that stuff, right?


00:43:34.800 --> 00:43:37.400
There's a great article, give me back my monolith.


00:43:37.400 --> 00:43:39.480
Yeah, exactly.


00:43:39.480 --> 00:43:45.280
Instead of all the microservices and different technologies, just give me one thing, just


00:43:45.280 --> 00:43:46.520
let me put it into the app.


00:43:46.520 --> 00:43:48.920
But it sounds like kind of like you embrace that with Django.


00:43:48.920 --> 00:43:50.720
We've got a lot of experience with Django.


00:43:50.720 --> 00:43:55.480
Me and the other main developer, we've been working with Django for, I've been working


00:43:55.480 --> 00:43:57.120
with about 10 years now.


00:43:57.120 --> 00:43:59.480
He has been working about 15.


00:43:59.480 --> 00:44:03.540
And it's our preferred go to solution for everything in the backend.


00:44:03.540 --> 00:44:05.280
You must have APIs and stuff, right?


00:44:05.280 --> 00:44:08.840
Do you use like, what do you use for the API side of things?


00:44:08.840 --> 00:44:10.160
Is it still just straight Django?


00:44:10.160 --> 00:44:12.760
Or do you have some REST frameworks?


00:44:12.760 --> 00:44:15.000
We use Django with Django REST framework.


00:44:15.000 --> 00:44:18.040
So it's really a simple solution for that as well.


00:44:18.040 --> 00:44:19.560
And we really enjoy working with that.


00:44:19.560 --> 00:44:24.480
We have another guy who's come in now who is a developer I've worked with a lot from


00:44:24.480 --> 00:44:25.480
the Ukraine.


00:44:25.480 --> 00:44:30.640
And he's been working with us now from Poland instead, just doing development with Django


00:44:30.640 --> 00:44:31.640
REST framework.


00:44:31.640 --> 00:44:32.640
And he's really good at those things.


00:44:32.640 --> 00:44:33.960
Yeah, it seems like a nice one.


00:44:33.960 --> 00:44:35.920
Have you considered Django Ninja?


00:44:35.920 --> 00:44:36.960
I've just read about it.


00:44:36.960 --> 00:44:38.800
I haven't actually done anything with it.


00:44:38.800 --> 00:44:40.320
I read about it the other week.


00:44:40.320 --> 00:44:44.760
If you like FastAPI, but you also like Django, then maybe Django Ninja is what you're looking


00:44:44.760 --> 00:44:45.760
for.


00:44:45.760 --> 00:44:46.760
Yeah, exactly.


00:44:46.760 --> 00:44:51.120
But that being said, I mean, the new releases with Django with version five with all of


00:44:51.120 --> 00:44:56.320
the now async views, everything that we're getting with that, I think Django is one of


00:44:56.320 --> 00:44:59.480
these things that you know that your code will always work.


00:44:59.480 --> 00:45:05.120
But you also get that you're starting to get all of these new features as well to get the


00:45:05.120 --> 00:45:07.320
systems working as well, which is really amazing.


00:45:07.320 --> 00:45:10.560
I think they're doing a great job with the Django community now.


00:45:10.560 --> 00:45:11.560
Excellent.


00:45:11.560 --> 00:45:13.160
So similar to Andres, we also use Django.


00:45:13.160 --> 00:45:16.440
So I'm just going to be basically talking building on top of a lot of the stuff that


00:45:16.440 --> 00:45:17.880
he said, big fan of the framework.


00:45:17.880 --> 00:45:19.760
I've been using it for years.


00:45:19.760 --> 00:45:24.120
I'm trying to think we mostly use Django REST framework.


00:45:24.120 --> 00:45:27.360
A lot of the stuff, a lot of the views are kind of custom built.


00:45:27.360 --> 00:45:29.720
The ORM is very helpful.


00:45:29.720 --> 00:45:30.720
Migrations are really helpful.


00:45:30.720 --> 00:45:34.040
We do write some raw SQL for some of the more trickier parts of the app, like the explore


00:45:34.040 --> 00:45:36.840
page where the queries need to be more performant.


00:45:36.840 --> 00:45:44.120
We use HTTPX to send notifications to APNS, which is Apple's push notification server.


00:45:44.120 --> 00:45:46.080
We are big fans of type hints.


00:45:46.080 --> 00:45:49.600
I have some of the stuff written down here, just to kind of point out.


00:45:49.600 --> 00:45:52.840
Post GIS for some of our geospatial calculations.


00:45:52.840 --> 00:45:57.720
And most of it runs on, I don't know why I'm saying most of it, all of it runs on AWS on


00:45:57.720 --> 00:45:59.760
pretty bare bones EC2 servers.


00:45:59.760 --> 00:46:03.420
I kind of like the simpler monolith approach where you kind of just like you have a bare


00:46:03.420 --> 00:46:07.240
bone server, you set up everything, and then you can use something like Ansible to help


00:46:07.240 --> 00:46:09.320
you bring it up and bring it back down.


00:46:09.320 --> 00:46:12.760
But it's just a lot easier to keep in mind.


00:46:12.760 --> 00:46:15.360
And deploy and version and all those things.


00:46:15.360 --> 00:46:20.200
Hey, while you're on, I did got a question on the audience I'll go ahead and ask.


00:46:20.200 --> 00:46:24.760
In your pin app, is it difficult to write code so that changes are saved?


00:46:24.760 --> 00:46:28.320
Lauren talked about the block thing, you kind of just make the changes to the state and


00:46:28.320 --> 00:46:29.960
they just stay.


00:46:29.960 --> 00:46:31.280
But what's the story for yours?


00:46:31.280 --> 00:46:33.820
I don't know if I fully understand the question.


00:46:33.820 --> 00:46:37.400
But I think there are two ways, two things that I could say to answer it.


00:46:37.400 --> 00:46:42.440
One is we use user defaults and Swift to take advantage of like saving stuff directly on


00:46:42.440 --> 00:46:43.480
the device.


00:46:43.480 --> 00:46:48.160
But actually, the main thing that we do is we push a lot of logic to the server.


00:46:48.160 --> 00:46:52.680
And this is like my favorite way to kind of get around the App Store nonsense.


00:46:52.680 --> 00:46:54.480
Just I guess is the nice way to say it.


00:46:54.480 --> 00:46:58.120
But the more and more logic that you push to the server means that whenever you need


00:46:58.120 --> 00:47:02.480
you find a bug or you have a feature or fix that you want to push out, you know, you can


00:47:02.480 --> 00:47:06.280
just change it on your server, redeploy and then boom, like it's available.


00:47:06.280 --> 00:47:10.880
So sometimes like when people on the app complain about issues with like, oh, this is not displaying


00:47:10.880 --> 00:47:12.960
correctly and then I'm like, oh, just refresh the app.


00:47:12.960 --> 00:47:14.280
And they're like, oh, that's crazy.


00:47:14.280 --> 00:47:15.580
I can't believe that just worked.


00:47:15.580 --> 00:47:19.880
And then other times certain things that I have to do on the device, I'm like, oh, well,


00:47:19.880 --> 00:47:23.560
here's a now I got to submit this to the App Store or wait a day for it to get approved,


00:47:23.560 --> 00:47:25.800
wait two weeks for everybody's phone to update.


00:47:25.800 --> 00:47:26.800
Yeah, absolutely.


00:47:26.800 --> 00:47:27.800
You can do it on the server.


00:47:27.800 --> 00:47:29.640
It's just have so much more control.


00:47:29.640 --> 00:47:32.120
And I mean, Lauren, that's how you and I worked a lot, right?


00:47:32.120 --> 00:47:36.040
A lot of the things were like, well, if we want something to be visible in this collection


00:47:36.040 --> 00:47:40.920
or not visible in that collection, or, you know, like for example, if you want, say the


00:47:40.920 --> 00:47:44.600
free courses to appear in a different section, but not in the main one, you could just not


00:47:44.600 --> 00:47:48.360
return them in the API rather than changing the app potentially.


00:47:48.360 --> 00:47:49.360
Right, exactly.


00:47:49.360 --> 00:47:54.240
Yeah, I was actually, I recall being impressed by how easy it was for you to make these changes,


00:47:54.240 --> 00:47:58.200
you know, as these requirements kind of popped up throughout the process, you'd be back in


00:47:58.200 --> 00:48:03.840
10 minutes, okay, it's ready, you know, and it was, I guess, Mongo is maybe partially


00:48:03.840 --> 00:48:05.480
a factor in that and how flexible it is.


00:48:05.480 --> 00:48:09.880
I made zero database schema changes explicitly on this.


00:48:09.880 --> 00:48:14.000
I just wrote code and it just started doing what it needed the whole thing through the


00:48:14.000 --> 00:48:15.000
app.


00:48:15.000 --> 00:48:16.000
Yeah, the whole app dev process.


00:48:16.000 --> 00:48:17.000
Yeah, it was fast.


00:48:17.000 --> 00:48:22.720
I remember telling you when I started my job, it was noticeably not as fast as your backend.


00:48:22.720 --> 00:48:25.280
And that's a big company with lots of money, that should be super fast.


00:48:25.280 --> 00:48:28.840
Well, yeah, to be fair, I think it's reasonable to assume an insurance company has a larger


00:48:28.840 --> 00:48:30.160
and more complex backend.


00:48:30.160 --> 00:48:32.320
I think the complexity is also crazy, right?


00:48:32.320 --> 00:48:36.520
Like probably you've got to, we got to apply a bunch of rules to this question, not just


00:48:36.520 --> 00:48:38.080
return the data.


00:48:38.080 --> 00:48:39.080
Yeah, sure.


00:48:39.080 --> 00:48:41.680
Nonetheless, I'll say it again, your backend is crazy fast.


00:48:41.680 --> 00:48:45.520
And you kind of got me hooked on the FastAPI Mongo situation.


00:48:45.520 --> 00:48:47.160
Yeah, really impressed with all that.


00:48:47.160 --> 00:48:49.080
I know you're not using FastAPI for your backend for that.


00:48:49.080 --> 00:48:52.680
I would if I got a choice actually, but I mean, no, no, no, no, I'll go ahead and say


00:48:52.680 --> 00:48:56.040
a little bit about what we're doing on our backend, just to kind of be fair to round


00:48:56.040 --> 00:48:57.040
it out.


00:48:57.040 --> 00:48:59.000
So the talk Python web app is written in pyramid.


00:48:59.000 --> 00:49:00.700
I love the pyramid framework.


00:49:00.700 --> 00:49:02.800
It has a lot of cool features.


00:49:02.800 --> 00:49:04.320
It's really, really fast.


00:49:04.320 --> 00:49:08.200
It was one of the very first ones to support Python three, like intentionally, not like


00:49:08.200 --> 00:49:10.960
it might run, but we embraced Python three.


00:49:10.960 --> 00:49:13.400
That was a huge reason that I chose it.


00:49:13.400 --> 00:49:16.960
I also love the chameleon framework for writing templates.


00:49:16.960 --> 00:49:18.440
It's, it's really nice.


00:49:18.440 --> 00:49:19.440
It's been great.


00:49:19.440 --> 00:49:23.920
I like the projects with ambitions, start small, but finish big and stay finished.


00:49:23.920 --> 00:49:24.920
Stay finished.


00:49:24.920 --> 00:49:26.240
So that's really good.


00:49:26.240 --> 00:49:32.080
And then it talks to MongoDB using Beanie and that combination is just great.


00:49:32.080 --> 00:49:37.640
And like Haru, it runs on digital ocean, not on, not on AWS, but it's just a couple of


00:49:37.640 --> 00:49:38.920
servers, right?


00:49:38.920 --> 00:49:42.480
One for the front end web server, one for the database and it's golden.


00:49:42.480 --> 00:49:43.480
It goes great.


00:49:43.480 --> 00:49:46.640
So yeah, that's, that's pretty much what we got going on there as well.


00:49:46.640 --> 00:49:52.000
Yeah, I probably would choose FastAPI if I were to start over, but rewriting the web


00:49:52.000 --> 00:49:55.000
app, it's like 20 or 30,000 lines of Python.


00:49:55.000 --> 00:49:59.440
And you know, it's, it would be cool if it was FastAPI, but I'm not sure that the benefits


00:49:59.440 --> 00:50:02.520
of making all those changes are really there.


00:50:02.520 --> 00:50:05.040
It's, it's like, I already liked the framework as it is.


00:50:05.040 --> 00:50:07.040
I also came across Litestar recently.


00:50:07.040 --> 00:50:10.280
I just interviewed those guys here on the show, but not yet published.


00:50:10.280 --> 00:50:14.760
So in the past, but also in the future, in a sense, and this is a really interesting


00:50:14.760 --> 00:50:19.360
thing also built on starlet that I'm really, really interested in and checking out more


00:50:19.360 --> 00:50:20.360
as well.


00:50:20.360 --> 00:50:24.040
So there's a lot of, there's so many good backend frameworks to choose from, but you


00:50:24.040 --> 00:50:25.640
know, you got to pick one and go with it.


00:50:25.640 --> 00:50:30.760
And then Jeffrin, I guess maybe it's worth pointing out that Kivy is while you don't


00:50:30.760 --> 00:50:35.240
have online capabilities for your app, Kivy itself is Python.


00:50:35.240 --> 00:50:39.160
So yours is the only mobile app that is all Python.


00:50:39.160 --> 00:50:41.600
Whereas everybody else's mobile app is something else.


00:50:41.600 --> 00:50:42.600
Yeah.


00:50:42.600 --> 00:50:48.560
So Kivy is a construal code Python and Kivy is building Python.


00:50:48.560 --> 00:50:52.160
Con servicios en la nube construidos en flask.


00:50:52.160 --> 00:50:58.240
With services on the cloud and flask.


00:50:58.240 --> 00:50:59.240
Okay.


00:50:59.240 --> 00:51:00.240
Flask.


00:51:00.240 --> 00:51:06.400
Y también utilizo Dropbox en Python para el almacenamiento de archivos en la nube.


00:51:06.400 --> 00:51:14.560
And I also use Dropbox to save data in the cloud with the same Python.


00:51:14.560 --> 00:51:18.800
What does your app use the flask online service for?


00:51:18.800 --> 00:51:25.040
Son utilizados para realizar la publicación de modelos 3D en la nube y que se puedan descargar


00:51:25.040 --> 00:51:28.000
desde cualquier otro lado del mundo.


00:51:28.000 --> 00:51:36.240
We use flask to upload everything in the cloud and in order to be downloaded in any part


00:51:36.240 --> 00:51:37.240
of the world.


00:51:37.240 --> 00:51:40.800
I said we would talk about the app store, but I also want to finish this on a positive


00:51:40.800 --> 00:51:41.800
note.


00:51:41.800 --> 00:51:46.240
So I think I'm going to not try to make it the focus of app store horror stories.


00:51:46.240 --> 00:51:51.080
Although I just don't get why they make it so hard to build apps for these frameworks,


00:51:51.080 --> 00:51:52.080
especially Google.


00:51:52.080 --> 00:51:56.640
I mean, especially Apple, but also Google in their own special way.


00:51:56.640 --> 00:52:02.960
So instead, let's just round this out with maybe like a piece of advice or your thoughts


00:52:02.960 --> 00:52:06.240
on going from having your app to get it in the app store.


00:52:06.240 --> 00:52:07.920
Andreas, you want to go first?


00:52:07.920 --> 00:52:13.040
From our point of view, the main thing that has been a bit of a hassle was if you want


00:52:13.040 --> 00:52:16.600
to publish an iOS app, you need to have a Macintosh.


00:52:16.600 --> 00:52:19.280
So we need to go out and buy a Mac.


00:52:19.280 --> 00:52:20.320
That was one of the things.


00:52:20.320 --> 00:52:26.040
But that being said, what we have done a lot now is we try to automate these things.


00:52:26.040 --> 00:52:31.840
We try to automate pushing the app into the various app stores from GitHub, which we use


00:52:31.840 --> 00:52:33.400
as a repository for it.


00:52:33.400 --> 00:52:40.200
I've successfully done that now for the Google Play, but I can't get the iOS app to build,


00:52:40.200 --> 00:52:41.200
unfortunately.


00:52:41.200 --> 00:52:44.000
Yeah, that does not sound practical.


00:52:44.000 --> 00:52:48.040
But that's one of the things I think you should invest some time in, because if you do get


00:52:48.040 --> 00:52:52.920
it working, you can get a lot of these hassle things out of the way.


00:52:52.920 --> 00:52:59.160
And building it on a Mac, it's four or five clicks that I need to do to build it.


00:52:59.160 --> 00:53:02.680
But I need to make sure that I have the right versions everywhere, and I make sure that


00:53:02.680 --> 00:53:09.080
I have set the new version of the application in all places I need to update that in, both


00:53:09.080 --> 00:53:15.000
on Android and on iOS, various config files I need to update.


00:53:15.000 --> 00:53:18.800
So really looking into automating all of that, I think would be a good thing to try and do


00:53:18.800 --> 00:53:19.800
as much as possible.


00:53:19.800 --> 00:53:21.800
Yeah, that sounds fantastic, actually.


00:53:21.800 --> 00:53:24.480
Even having one of the app stores automated is really nice.


00:53:24.480 --> 00:53:25.480
Yeah.


00:53:25.480 --> 00:53:28.200
Haru, you mentioned builds, Xcode, good times.


00:53:28.200 --> 00:53:29.960
We're going to try to end on a positive note.


00:53:29.960 --> 00:53:32.880
I don't want to rag on Xcode too much.


00:53:32.880 --> 00:53:33.880
Let's not talk about it.


00:53:33.880 --> 00:53:37.760
But you do need Xcode to build your app to get it in the app store.


00:53:37.760 --> 00:53:38.760
That's for sure.


00:53:38.760 --> 00:53:42.400
And if you're like right now, we're what, like four days?


00:53:42.400 --> 00:53:47.880
September 12th is the launch of iPhone 15, and iOS 17 will come out a few days after


00:53:47.880 --> 00:53:48.880
that.


00:53:48.880 --> 00:53:53.160
If you want to try to build something for iOS 17, you do need Xcode 15, which is still


00:53:53.160 --> 00:53:54.520
in beta, beta 8.


00:53:54.520 --> 00:53:57.720
And that can sometimes be tricky to build for, not everything.


00:53:57.720 --> 00:54:02.680
Because like the videos that Apple puts out in June for WWDC, the API has actually changed


00:54:02.680 --> 00:54:03.680
since then.


00:54:03.680 --> 00:54:05.120
And it's again, not clear sometimes.


00:54:05.120 --> 00:54:09.320
Yeah, we're a little spoiled in the Python world about how it, if something once worked,


00:54:09.320 --> 00:54:12.040
it generally continues to work.


00:54:12.040 --> 00:54:17.640
This next question here from Alan, maybe perfectly lines up your part, Lauren.


00:54:17.640 --> 00:54:20.280
I've not yet published a Flutter app.


00:54:20.280 --> 00:54:23.000
So really want to learn how this works, any automation available?


00:54:23.000 --> 00:54:27.080
Yeah, maybe just app store advice and chime in on that potentially.


00:54:27.080 --> 00:54:31.160
Short answer is yes, there are a few different CI CD platforms available for that.


00:54:31.160 --> 00:54:35.840
Like for example, GitHub actions, you can get that set up where you push a command from


00:54:35.840 --> 00:54:39.200
a terminal and it does all this stuff in the backend and pushes to the store.


00:54:39.200 --> 00:54:40.920
I personally have not, that's on my to do list.


00:54:40.920 --> 00:54:42.200
I have not actually done that yet.


00:54:42.200 --> 00:54:46.840
There's also CircleCI, there's CodeMagic, there's a few different services available.


00:54:46.840 --> 00:54:49.120
All that is probably a little time consuming to set up.


00:54:49.120 --> 00:54:51.800
Let's say you don't want to get into that, which you should, it's definitely worth it


00:54:51.800 --> 00:54:52.800
in the long run.


00:54:52.800 --> 00:54:56.120
But let's just say like, we're not for talk Python, we're doing it quote unquote manually,


00:54:56.120 --> 00:54:57.160
it's still not that bad.


00:54:57.160 --> 00:55:02.440
Like basically in Xcode, you create the archive, upload it within Xcode, go on the web app,


00:55:02.440 --> 00:55:03.440
submit, right?


00:55:03.440 --> 00:55:06.960
And it's more or less, you know, on the Android side, you're basically, as far as Flutter


00:55:06.960 --> 00:55:10.640
is concerned, it's when it comes to publish, you're publishing a native app, right?


00:55:10.640 --> 00:55:12.840
So you just got to go through both those processes.


00:55:12.840 --> 00:55:17.640
Android Studio, you build the APK and then upload, you know, and submit, right?


00:55:17.640 --> 00:55:18.760
The other respective web app.


00:55:18.760 --> 00:55:20.000
So even if you don't go there.


00:55:20.000 --> 00:55:23.680
Yeah, it's worth pointing out, like, there's, I think, zero difference from the way you


00:55:23.680 --> 00:55:26.520
publish a native app and the way you publish these.


00:55:26.520 --> 00:55:29.960
From what I do, like, I'll open up Android Studio and go through the steps or I'll go


00:55:29.960 --> 00:55:31.880
through Xcode and do this.


00:55:31.880 --> 00:55:36.560
It just happens to be what's running or compiling behind the scenes had some Flutter component


00:55:36.560 --> 00:55:39.000
at some point, but it's, they're identical.


00:55:39.000 --> 00:55:40.320
People should probably keep that in mind, right?


00:55:40.320 --> 00:55:42.480
Yeah, it does compile to native code.


00:55:42.480 --> 00:55:46.560
So as far as like the app stores are concerned, and as far, you know, it is a native app just


00:55:46.560 --> 00:55:49.320
with the UI being painted over top, right?


00:55:49.320 --> 00:55:52.720
But so, but yeah, lots of options out there if you want to go that route.


00:55:52.720 --> 00:55:53.720
Yeah.


00:55:53.720 --> 00:55:54.720
And cross your fingers when, yeah.


00:55:54.720 --> 00:55:55.720
Yeah.


00:55:55.720 --> 00:55:59.320
Jeffrin is, is your app in the app store?


00:55:59.320 --> 00:56:01.560
I know it's in the Google Play Store, right?


00:56:01.560 --> 00:56:02.560
Google Play Store.


00:56:02.560 --> 00:56:03.560
Yes.


00:56:04.560 --> 00:56:05.560
Yeah.


00:56:05.560 --> 00:56:08.640
We have online ship in app store, just only in Play Store.


00:56:08.640 --> 00:56:12.120
And do you have advice for people getting their apps into Google Play?


00:56:12.120 --> 00:56:24.680
Follow the guidelines of privacy.


00:56:24.680 --> 00:56:27.680
Overall archives exploration.


00:56:27.680 --> 00:56:39.320
Yes, that have given headaches for me since the updating of SDK.


00:56:39.320 --> 00:56:40.320
Excellent.


00:56:40.320 --> 00:56:43.640
Well, everyone, this has been really fun.


00:56:43.640 --> 00:56:48.000
And I said, we're not going to share app store, horror stories, horror stories.


00:56:48.000 --> 00:56:50.120
So we're going to finish this on a positive note.


00:56:50.120 --> 00:56:56.720
I think in general, there's just so much possibility in mobile app development these days.


00:56:56.720 --> 00:57:00.840
I don't know about you all, but when I first got first on iPhone or smartphone, like just


00:57:00.840 --> 00:57:04.560
my head was full of ideas of like, oh my gosh, you could do this, you could do that.


00:57:04.560 --> 00:57:07.920
This is just such an open world for interesting things.


00:57:07.920 --> 00:57:11.480
And it's really cool to hear how you're all building your different apps and putting them


00:57:11.480 --> 00:57:12.480
together.


00:57:12.480 --> 00:57:15.240
So thank you for being here and it's been great.


00:57:15.240 --> 00:57:16.240
Thanks for sharing your experiences.


00:57:16.240 --> 00:57:17.240
Thanks a lot.


00:57:17.240 --> 00:57:18.240
This was great.


00:57:18.240 --> 00:57:19.240
Thanks, Michael.


00:57:19.240 --> 00:57:20.240
This was a lot of fun.


00:57:20.240 --> 00:57:21.360
Thank you.


00:57:21.360 --> 00:57:24.560
This has been another episode of Talk Python to Me.


00:57:24.560 --> 00:57:25.560
Thank you to our sponsors.


00:57:25.560 --> 00:57:27.280
Be sure to check out what they're offering.


00:57:27.280 --> 00:57:29.380
It really helps support the show.


00:57:29.380 --> 00:57:31.120
Take some stress out of your life.


00:57:31.120 --> 00:57:35.880
Get notified immediately about errors and performance issues in your web or mobile applications


00:57:35.880 --> 00:57:37.160
with Sentry.


00:57:37.160 --> 00:57:41.920
Just visit talkpython.fm/Sentry and get started for free.


00:57:41.920 --> 00:57:45.400
And be sure to use the promo code Talk Python, all one word.


00:57:45.400 --> 00:57:47.440
Want to level up your Python?


00:57:47.440 --> 00:57:51.520
We have one of the largest catalogs of Python video courses over at Talk Python.


00:57:51.520 --> 00:57:56.620
Our content ranges from true beginners to deeply advanced topics like memory and async.


00:57:56.620 --> 00:57:59.320
And best of all, there's not a subscription in sight.


00:57:59.320 --> 00:58:02.440
Check it out for yourself at training.talkpython.fm.


00:58:02.440 --> 00:58:04.200
Be sure to subscribe to the show.


00:58:04.200 --> 00:58:07.060
Open your favorite podcast app and search for Python.


00:58:07.060 --> 00:58:08.420
You should be right at the top.


00:58:08.420 --> 00:58:13.520
You can also find the iTunes feed at /itunes, the Google Play feed at slash Play,


00:58:13.520 --> 00:58:18.040
and the direct RSS feed at /rss on talkpython.fm.


00:58:18.040 --> 00:58:20.560
We're live streaming most of our recordings these days.


00:58:20.560 --> 00:58:24.140
If you want to be part of the show and have your comments featured on the air, be sure


00:58:24.140 --> 00:58:29.080
to subscribe to our YouTube channel at talkpython.fm/youtube.


00:58:29.080 --> 00:58:30.600
This is your host, Michael Kennedy.


00:58:30.600 --> 00:58:31.600
Thanks so much for listening.


00:58:31.600 --> 00:58:32.760
I really appreciate it.


00:58:32.760 --> 00:58:48.980
Now get out there and write some Python code.


00:58:48.980 --> 00:58:51.040
you


00:58:55.160 --> 00:59:00.160
.

