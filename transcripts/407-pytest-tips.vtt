WEBVTT

00:00:00.000 --> 00:00:04.240
If you're like most people, the simplicity and ease of getting started is a big part


00:00:04.240 --> 00:00:06.200
of pytest's appeal.


00:00:06.200 --> 00:00:09.720
But beneath that simplicity, there's a lot of power and depth.


00:00:09.720 --> 00:00:14.160
We have Brian Auchin on this episode to dive into his latest pytest tips and tricks for


00:00:14.160 --> 00:00:16.680
beginners and power users.


00:00:16.680 --> 00:00:22.040
This is Talk Python to Me, episode 407, recorded February 27th, 2023.


00:00:22.040 --> 00:00:38.800
Welcome to Talk Python To Me, a weekly podcast on Python.


00:00:38.800 --> 00:00:40.660
This is your host, Michael Kennedy.


00:00:40.660 --> 00:00:45.560
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython,


00:00:45.560 --> 00:00:47.840
both on fosstodon.org.


00:00:47.840 --> 00:00:50.560
Be careful with impersonating accounts on other instances.


00:00:50.560 --> 00:00:51.560
There are many.


00:00:51.560 --> 00:00:57.200
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.


00:00:57.200 --> 00:01:00.680
We've started streaming most of our episodes live on YouTube.


00:01:00.680 --> 00:01:06.800
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be


00:01:06.800 --> 00:01:09.020
part of that episode.


00:01:09.020 --> 00:01:12.620
This episode is brought to you by Microsoft for Startups Founders Hub.


00:01:12.620 --> 00:01:17.320
Get early stage support for your startup without the requirement to be VC backed or verified


00:01:17.320 --> 00:01:20.920
at talkpython.fm/foundershub.


00:01:20.920 --> 00:01:23.520
It's also brought to you by brilliant.org.


00:01:23.520 --> 00:01:28.720
Stay on top of technology and raise your value to employers or just learn something fun in


00:01:28.720 --> 00:01:31.160
STEM at brilliant.org.


00:01:31.160 --> 00:01:36.280
Visit talkbython.fm/brilliant to get 20% off an annual premium subscription.


00:01:36.280 --> 00:01:39.160
Brian, welcome back to Talk Bython to me.


00:01:39.160 --> 00:01:40.160
- Well, thank you.


00:01:40.160 --> 00:01:41.160
It's good to be back.


00:01:41.160 --> 00:01:42.280
- It's really good to have you back.


00:01:42.280 --> 00:01:47.440
I don't know if you've noticed, but over on Talk Bython, I put up a guest page.


00:01:47.440 --> 00:01:53.220
And who is out of the 440 guests we've had, you are the most common guest and you are


00:01:53.220 --> 00:01:58.380
now pulling further away from Brett Cannon and Anthony Shaw who are hot on your tails


00:01:58.380 --> 00:01:59.380
there.


00:01:59.380 --> 00:02:04.780
So I'm sure people know you and are familiar with your work, but for those who don't, quick


00:02:04.780 --> 00:02:05.780
introduction.


00:02:05.780 --> 00:02:07.860
People probably know me from Python Bytes actually.


00:02:07.860 --> 00:02:13.740
And also I have a test podcast called Test & Code that's kind of on pause right now,


00:02:13.740 --> 00:02:16.180
but it'll start up again in a month or so.


00:02:16.180 --> 00:02:33.220
Okay, so I am a software developer, mostly embedded as so day job software embedded to C++ stuff. Work with RF test equipment. I got involved with Python and pytest around the testing part of that the the system level testing.


00:02:33.660 --> 00:02:37.020
And then I started writing about pytest and about test stuff,


00:02:37.020 --> 00:02:38.700
and then I started podcasting about it,


00:02:38.700 --> 00:02:41.420
and then I started writing books about it and all that sort of stuff.


00:02:41.420 --> 00:02:43.500
So all of this came from me,


00:02:43.500 --> 00:02:47.100
and my love for Python and pytest came from my embedded world.


00:02:47.100 --> 00:02:50.460
I suspect a lot of people don't really think about it that often,


00:02:50.460 --> 00:02:55.900
but Python is great for testing things that are not just other Python code.


00:02:55.900 --> 00:02:58.300
Yeah. I mean, there's a lot of people that, like, for instance,


00:02:58.300 --> 00:03:01.980
use it even to test websites that are not written in Python,


00:03:01.980 --> 00:03:05.860
just because or not written in Python or not written.


00:03:05.860 --> 00:03:08.560
Like you can test, you can really test any website.


00:03:08.560 --> 00:03:11.360
So if you can get access to it from Python,


00:03:11.360 --> 00:03:12.760
you can test it with pytest.


00:03:12.760 --> 00:03:15.060
>> Right on. We're going to see a whole bunch of


00:03:15.060 --> 00:03:18.140
cool tips and tricks and


00:03:18.140 --> 00:03:21.620
ideas about how to do that with pytest and do it better.


00:03:21.620 --> 00:03:23.180
Because as I said,


00:03:23.180 --> 00:03:24.700
you've been using it in your day job.


00:03:24.700 --> 00:03:29.220
You've also been using it in a semi non-standard way,


00:03:29.220 --> 00:03:33.460
like testing both C++ code and actual hardware,


00:03:33.460 --> 00:03:34.820
which is pretty awesome.


00:03:34.820 --> 00:03:37.380
And you've got a lot of exposure through your book and other things.


00:03:37.380 --> 00:03:38.420
So it's going to be really fun.


00:03:38.420 --> 00:03:40.740
I also wanted to say that early on,


00:03:40.740 --> 00:03:43.620
so getting started with podcasting is nerve-wracking.


00:03:43.620 --> 00:03:45.140
It's a stressful thing.


00:03:45.140 --> 00:03:49.300
And way back when, when I was just starting out on testing code,


00:03:49.300 --> 00:03:54.580
you were very encouraging and wanted me to be successful and keep going.


00:03:54.580 --> 00:03:56.820
And that's meant a lot. So thank you.


00:03:56.820 --> 00:03:58.420
No, thank you for saying that here on the show.


00:03:58.420 --> 00:03:59.420
I really appreciate it.


00:03:59.420 --> 00:04:03.220
And five, six years later, however long it's been,


00:04:03.220 --> 00:04:04.620
you're still going for sure.


00:04:04.620 --> 00:04:07.820
I mean, tomorrow we're doing another show on Python Bytes.


00:04:07.820 --> 00:04:08.920
- Yeah, it's been great.


00:04:08.920 --> 00:04:09.920
- Yeah, thanks.


00:04:09.920 --> 00:04:12.220
And I guess I did want to give a shout out to Python Bytes.


00:04:12.220 --> 00:04:14.320
I don't speak about it that often on Talk Python.


00:04:14.320 --> 00:04:17.120
Every now and then I do, but usually I'm speaking to guests


00:04:17.120 --> 00:04:18.620
who maybe are not familiar with it.


00:04:18.620 --> 00:04:20.520
But that's the show you and I do.


00:04:20.520 --> 00:04:22.920
And so I really want to encourage people who like the show


00:04:22.920 --> 00:04:25.320
to also check that one out.


00:04:25.320 --> 00:04:27.720
Tell people what Python Bytes is real quick, Brian.


00:04:27.720 --> 00:04:32.680
Well, it's Python headlines and news and headlines delivered directly to your earbuds.


00:04:32.680 --> 00:04:39.800
But the gist of it is, is we both pick a couple topics per week, and we don't even really talk


00:04:39.800 --> 00:04:44.280
about it ahead of time. We just pick a couple of Python related topics that we want to talk about.


00:04:44.280 --> 00:04:51.800
And could be like a new library, could be an old library or a tool or a blog post,


00:04:51.800 --> 00:04:56.120
or something happening in the news. And then we just talk about it for a few minutes.


00:04:56.120 --> 00:04:58.360
and then the other one asks questions.


00:04:58.360 --> 00:05:01.260
And when we have guests on, they come in too.


00:05:01.260 --> 00:05:04.060
One of the things I really like about it is it's always fresh.


00:05:04.060 --> 00:05:06.860
And then also, people have said,


00:05:06.860 --> 00:05:08.920
if a topic I'm not interested in,


00:05:08.920 --> 00:05:12.260
I just wait a few minutes and there'll be something else I can listen to.


00:05:12.260 --> 00:05:13.160
So that's cool.


00:05:13.160 --> 00:05:15.460
Exactly. That's really fantastic that it's just,


00:05:15.460 --> 00:05:16.520
it's always something new.


00:05:16.520 --> 00:05:18.460
And, you know, it's great for us.


00:05:18.460 --> 00:05:20.420
We are always on top of things, always learning,


00:05:20.420 --> 00:05:22.420
but it's, I think it's really cool.


00:05:22.420 --> 00:05:25.260
Way to stay on top of what's happening in the Python space.


00:05:25.260 --> 00:05:29.260
>> Yeah, and for me personally, it's an excuse to stay on top of things in the Python space.


00:05:29.260 --> 00:05:30.760
So, yeah.


00:05:30.760 --> 00:05:33.260
>> Not just an excuse, a requirement.


00:05:33.260 --> 00:05:36.760
You got to be on the microphone in two hours.


00:05:36.760 --> 00:05:38.260
We're going to figure it out.


00:05:38.260 --> 00:05:39.260
>> Yeah. >> Awesome.


00:05:39.260 --> 00:05:40.260
All right.


00:05:40.260 --> 00:05:44.760
Now, also, I do want to point out that over on Talk Python Training,


00:05:44.760 --> 00:05:48.760
you did a really great course calling Getting Started with pytest.


00:05:48.760 --> 00:05:53.260
And people can check that out, as well as for a couple years now,


00:05:53.260 --> 00:05:55.240
Now you've iterated on your book,


00:05:55.240 --> 00:05:57.840
Python Testing with pytest.


00:05:57.840 --> 00:05:59.060
On to the second edition.


00:05:59.060 --> 00:06:00.880
So those are two really good resources.


00:06:00.880 --> 00:06:02.980
I feel like you're probably gonna be drawing from


00:06:02.980 --> 00:06:04.440
for some of these tips, right?


00:06:04.440 --> 00:06:05.380
- Yeah, definitely.


00:06:05.380 --> 00:06:08.580
And the first book launched into having the ability


00:06:08.580 --> 00:06:10.040
to be able to teach more people.


00:06:10.040 --> 00:06:12.160
So I was able to teach other corporate people


00:06:12.160 --> 00:06:13.520
and individuals.


00:06:13.520 --> 00:06:18.260
And then I took that learning from like how to teach people


00:06:18.260 --> 00:06:21.820
how to use pytest and use that to influence


00:06:21.820 --> 00:06:24.500
the second edition, a complete rewrite,


00:06:24.500 --> 00:06:27.100
and then took all of that and leveraged it


00:06:27.100 --> 00:06:29.820
into the short three, it's like three and a half hours,


00:06:29.820 --> 00:06:31.380
it's really short, for the Getting Started


00:06:31.380 --> 00:06:32.860
with pytest course.


00:06:32.860 --> 00:06:34.660
I really kind of like what we've done with that.


00:06:34.660 --> 00:06:37.460
You helped out a lot with that course as well.


00:06:37.460 --> 00:06:40.700
- Yeah, I feel, I look back on my college career,


00:06:40.700 --> 00:06:41.860
I don't know how you feel about this, Brian,


00:06:41.860 --> 00:06:43.900
but I look back and think, you know,


00:06:43.900 --> 00:06:45.180
a lot of times there's sort of the meme,


00:06:45.180 --> 00:06:47.260
like that could have been an email for a meeting these days.


00:06:47.260 --> 00:06:50.560
Like, I kind of feel that way about college.


00:06:50.560 --> 00:06:52.720
Like a lot of stuff I did in college could have been,


00:06:52.720 --> 00:06:53.800
it could have been four hours.


00:06:53.800 --> 00:06:55.000
I could have been a four hour course


00:06:55.000 --> 00:06:56.000
that I spent a week on,


00:06:56.000 --> 00:06:58.520
but no, I spent a whole semester and you know.


00:06:58.520 --> 00:06:59.360
- Yeah, exactly.


00:06:59.360 --> 00:07:00.320
- Six hours.


00:07:00.320 --> 00:07:01.800
You feel the same way looking back?


00:07:01.800 --> 00:07:03.440
(laughing)


00:07:03.440 --> 00:07:06.200
- I do and yeah, there's a lot of stuff that I'm like,


00:07:06.200 --> 00:07:09.920
wow, that could have been like even a half an hour course.


00:07:09.920 --> 00:07:10.760
- Yeah, exactly.


00:07:10.760 --> 00:07:12.640
So I feel like you've condensed it down really well here.


00:07:12.640 --> 00:07:13.960
So people can check out the course


00:07:13.960 --> 00:07:16.400
and they can check out the book as well.


00:07:16.400 --> 00:07:19.480
So a lot of kind comments in the audience as well.


00:07:19.480 --> 00:07:21.320
I'm seeing for your book, so thank you folks.


00:07:21.320 --> 00:07:22.160
- Nice.


00:07:22.160 --> 00:07:24.640
- Yeah, well, I guess I envisioned us


00:07:24.640 --> 00:07:26.280
to kind of talk about this as a podcast,


00:07:26.280 --> 00:07:28.260
but you leveled this up a little bit here.


00:07:28.260 --> 00:07:30.580
You took this and put it together as an article,


00:07:30.580 --> 00:07:32.280
so people will be able to come back to it, right?


00:07:32.280 --> 00:07:34.560
This whole idea of these tips and tricks.


00:07:34.560 --> 00:07:38.240
- Yes, because we were bouncing around ideas for what to do,


00:07:38.240 --> 00:07:41.000
and you mentioned like maybe some tips and tricks


00:07:41.000 --> 00:07:45.040
from the course and pulling them together as an episode,


00:07:45.040 --> 00:07:46.920
and I'm like, you know what, I haven't ever done that.


00:07:46.920 --> 00:07:48.440
So I pulled together a blog post


00:07:48.440 --> 00:07:49.800
called pytest Tips and Tricks.


00:07:49.800 --> 00:07:53.680
And it is a blog post, but it's at pythontest.com.


00:07:53.680 --> 00:07:55.880
But I do want to keep it going.


00:07:55.880 --> 00:07:58.280
So I'll probably, some of these topics,


00:07:58.280 --> 00:08:01.920
I'll probably bring into, create full articles out of them.


00:08:01.920 --> 00:08:05.760
And some of them are just as good as is things.


00:08:05.760 --> 00:08:07.440
- It's a living blog post.


00:08:07.440 --> 00:08:08.680
- Yes.


00:08:08.680 --> 00:08:09.520
You started it.


00:08:09.520 --> 00:08:10.960
There was a bunch of the,


00:08:10.960 --> 00:08:13.360
you started a document that had some of the stuff


00:08:13.360 --> 00:08:14.200
that you pulled out.


00:08:14.200 --> 00:08:16.360
I don't know where you got all this stuff that you started.


00:08:16.360 --> 00:08:17.720
- I went through your course.


00:08:17.720 --> 00:08:18.720
- I paid attention.


00:08:18.720 --> 00:08:19.560
- Nice.


00:08:19.560 --> 00:08:20.380
- It's good.


00:08:20.380 --> 00:08:21.880
There's a lot of, you know, for a,


00:08:21.880 --> 00:08:23.840
like a getting started sort of story.


00:08:23.840 --> 00:08:26.080
There's a lot of really good tips that I think are,


00:08:26.080 --> 00:08:27.820
are useful for a lot of folks.


00:08:27.820 --> 00:08:29.320
All right, well, let's jump in.


00:08:29.320 --> 00:08:31.340
There's, you've broken into these different areas


00:08:31.340 --> 00:08:34.280
and I mean, let's, maybe I'll,


00:08:34.280 --> 00:08:37.040
I'll kick it over to your screen for you to, to follow along.


00:08:37.040 --> 00:08:37.880
Yeah.


00:08:37.880 --> 00:08:38.700
But yeah, let's kick it off.


00:08:38.700 --> 00:08:41.440
- I want to start out really with one of the things


00:08:41.440 --> 00:08:43.600
that it's so simple to start pytest.


00:08:43.600 --> 00:08:46.740
So they like the, and I think a lot of people get into it.


00:08:46.740 --> 00:08:48.620
So it's really simple and easy to use.


00:08:48.620 --> 00:08:51.360
If you, to start with, you can just write a file


00:08:51.360 --> 00:08:55.220
called test_something, and then stick a function in it


00:08:55.220 --> 00:08:59.340
called test_something, and that pytest will run that.


00:08:59.340 --> 00:09:02.120
And if you can access, whatever you can access with that,


00:09:02.120 --> 00:09:03.460
you can get started.


00:09:03.460 --> 00:09:06.540
And I think it's a really cool feature of pytest


00:09:06.540 --> 00:09:08.260
that you can get started that easily,


00:09:08.260 --> 00:09:11.420
but also I don't think very many people


00:09:11.420 --> 00:09:13.060
like learn too much more.


00:09:13.060 --> 00:09:15.300
They'll like look up, they'll like,


00:09:15.300 --> 00:09:16.540
somebody will mention fixtures,


00:09:16.540 --> 00:09:18.500
So they'll look that up or parameterization,


00:09:18.500 --> 00:09:19.340
they'll look that up.


00:09:19.340 --> 00:09:21.500
- Probably they'll say, how do you catch an exception?


00:09:21.500 --> 00:09:23.180
This is supposed to be an exception.


00:09:23.180 --> 00:09:24.500
Like, how do I do that?


00:09:24.500 --> 00:09:26.820
And maybe that part, that aspect of it


00:09:26.820 --> 00:09:29.020
confused me a little bit when I first did pytest.


00:09:29.020 --> 00:09:32.500
I'm like, well, how do I make it do pytest things?


00:09:32.500 --> 00:09:34.180
I just, it's just a file.


00:09:34.180 --> 00:09:36.760
And then I sure I can do Python asserts,


00:09:36.760 --> 00:09:39.420
but how do I do like tell pytest


00:09:39.420 --> 00:09:41.180
is it supposed to be greater than seven or not?


00:09:41.180 --> 00:09:42.020
- Yeah.


00:09:42.020 --> 00:09:43.660
- There's a lot of sort of implicit magic


00:09:43.660 --> 00:09:45.300
behind the scenes as part of that, right?


00:09:45.300 --> 00:09:47.100
- There is, and I, like for instance,


00:09:47.100 --> 00:09:50.120
just using normal asserts, because with like unit tests,


00:09:50.120 --> 00:09:53.280
you have to do a whole bunch of extra assert methods


00:09:53.280 --> 00:09:55.420
and helper methods and stuff, and you have to derive,


00:09:55.420 --> 00:09:58.060
with unit, it's often people coming from unit tests


00:09:58.060 --> 00:10:00.360
or some other X unit style that are confused


00:10:00.360 --> 00:10:04.060
at the simplicity, because people are used to deriving


00:10:04.060 --> 00:10:06.380
from a test class or something.


00:10:06.380 --> 00:10:10.000
And then I actually had saw the reverse of it.


00:10:10.000 --> 00:10:13.380
I saw people that were not used to X unit style.


00:10:13.380 --> 00:10:15.320
I just wanted to write some test code.


00:10:15.320 --> 00:10:18.420
And this whole notion on the unit test


00:10:18.420 --> 00:10:21.580
of deriving from a class,


00:10:21.580 --> 00:10:24.420
I saw a whole bunch of people that I tried to teach


00:10:24.420 --> 00:10:26.320
at unit test to say,


00:10:26.320 --> 00:10:28.340
oh, well, I'm gonna have to go and learn about


00:10:28.340 --> 00:10:31.100
like object oriented programming.


00:10:31.100 --> 00:10:33.540
And I'm like, oh, you don't, it's just the structure.


00:10:33.540 --> 00:10:35.860
That's all, you don't need to know how to use it.


00:10:35.860 --> 00:10:37.260
But so that's one of the nice things.


00:10:37.260 --> 00:10:40.180
So I have on the screen, just a simple test.


00:10:40.180 --> 00:10:42.140
I've also had a lot of people ask me,


00:10:42.140 --> 00:10:45.180
well, can you give me a template for what a default template


00:10:45.180 --> 00:10:46.860
for a unit test or a test?


00:10:46.860 --> 00:10:49.580
And I'm like, well, it's just test underscore,


00:10:49.580 --> 00:10:50.640
that's your template.


00:10:50.640 --> 00:10:54.140
I mean, there's nothing to put in it.


00:10:54.140 --> 00:10:56.820
I've said, okay, for my template,


00:10:56.820 --> 00:10:58.640
you get at the top of your test,


00:10:58.640 --> 00:10:59.780
you write getting ready,


00:10:59.780 --> 00:11:03.340
like a comment that's like getting ready for setup


00:11:03.340 --> 00:11:04.440
or something.


00:11:04.440 --> 00:11:06.980
And then you set up all the stuff.


00:11:06.980 --> 00:11:09.120
And then you do an action in the middle.


00:11:09.120 --> 00:11:11.460
And then at the end, you assert what,


00:11:11.460 --> 00:11:13.020
if the action worked.


00:11:13.020 --> 00:11:15.620
And there you go, there's a template.


00:11:15.620 --> 00:11:19.140
- There's two traditional styles of structuring this.


00:11:19.140 --> 00:11:22.420
The early testing days were the three A's,


00:11:22.420 --> 00:11:23.740
the arrange, act, and assert,


00:11:23.740 --> 00:11:27.240
which is kind of a little bit like what you got here.


00:11:27.240 --> 00:11:29.940
And then there's the given, when, then,


00:11:29.940 --> 00:11:34.380
which I feel like a little more BDD world, maybe.


00:11:34.380 --> 00:11:35.260
What do you prefer?


00:11:35.260 --> 00:11:36.600
- I learned given, when, then


00:11:36.600 --> 00:11:39.280
with some of the early writings around BDD.


00:11:39.280 --> 00:11:40.220
And I just liked it.


00:11:40.220 --> 00:11:44.160
I liked the notion of like, oh, given some state,


00:11:44.160 --> 00:11:47.260
if I do that, when I do something,


00:11:47.260 --> 00:11:50.900
then something happens and I can test that something.


00:11:50.900 --> 00:11:52.860
Now there wasn't any structure around it.


00:11:52.860 --> 00:11:53.700
There wasn't any code.


00:11:53.700 --> 00:11:57.500
So now BDD has these Gherkin syntaxes and stuff.


00:11:57.500 --> 00:12:00.020
And for people that that works for, awesome.


00:12:00.020 --> 00:12:01.380
It just doesn't work for me.


00:12:01.380 --> 00:12:04.180
But the notion of behavior-driven development,


00:12:04.180 --> 00:12:06.820
not the syntax, but the notion of,


00:12:06.820 --> 00:12:08.740
think about the different behaviors of the system


00:12:08.740 --> 00:12:09.900
and test for it.


00:12:09.900 --> 00:12:11.180
That I love.


00:12:11.180 --> 00:12:13.420
But the give and win then and arrange active search


00:12:13.420 --> 00:12:14.540
essentially the same thing.


00:12:14.540 --> 00:12:17.140
Do you feel like the nomenclature of BDD


00:12:17.140 --> 00:12:19.700
maybe hampered its adoption?


00:12:19.700 --> 00:12:24.620
Like talking about cucumber and gherkin and--


00:12:24.620 --> 00:12:27.100
you go to your boss and say, we're working on the gherkin


00:12:27.100 --> 00:12:29.060
fathering, and you need to do real work.


00:12:29.060 --> 00:12:31.260
I don't want to be a pessimist, but I really think what


00:12:31.260 --> 00:12:32.900
happened--


00:12:32.900 --> 00:12:37.540
my guess is that it's such a simple concept that there


00:12:37.540 --> 00:12:41.020
wasn't hardly anything to charge people for as a consultant.


00:12:41.020 --> 00:12:44.340
>> Yeah, or to give speeches and conference talks about or whatever.


00:12:44.340 --> 00:12:47.860
>> But if you add this extra gherkin layer on top of it,


00:12:47.860 --> 00:12:50.620
now you have something you can train people about.


00:12:50.620 --> 00:12:54.740
>> There you go. Way to productize it.


00:12:54.740 --> 00:12:58.220
>> Maybe. So I think it's all good, just don't pay for it.


00:12:58.220 --> 00:13:00.220
>> All right. Before we move on from this topic,


00:13:00.220 --> 00:13:02.100
I think the Arrange, Act,


00:13:02.100 --> 00:13:06.180
Assert or the Give and Win Then is a really nice way to think about it.


00:13:06.180 --> 00:13:13.220
I think there's still a large set of folks who struggle to know what scale should this be.


00:13:13.220 --> 00:13:19.380
Should I do 15 asserts? I've done all the work to get them ready. Should I do one assert? If I do


00:13:19.380 --> 00:13:23.780
two, am I failing? I was supposed to do one, now two is the wrong, you know, two is too many.


00:13:23.780 --> 00:13:28.580
How do you feel about what goes under those three comment sections?


00:13:28.580 --> 00:13:33.860
I'm glad you brought that up. Really the one action should be like one function call or one


00:13:34.500 --> 00:13:37.500
method call or something, if you can get away with that.


00:13:37.500 --> 00:13:39.500
And the getting ready stuff,


00:13:39.500 --> 00:13:42.100
it could be a lot, especially for the first time.


00:13:42.100 --> 00:13:44.100
So,


00:13:44.100 --> 00:13:47.380
one comment, dollar driven development, that's funny.


00:13:47.380 --> 00:13:50.580
We're going to get to fixtures later, but I think


00:13:50.580 --> 00:13:52.580
it's okay if it's a whole bunch of setup.


00:13:52.580 --> 00:13:54.580
So it could be like a ton of setup


00:13:54.580 --> 00:13:56.580
that you have, like most of your code of your function


00:13:56.580 --> 00:13:58.580
might be getting ready to test something.


00:13:58.580 --> 00:14:00.580
And especially for the first iteration


00:14:00.580 --> 00:14:02.580
of the test, that's fine, I think.


00:14:02.580 --> 00:14:04.780
And that's where it's good to have comments or a comment,


00:14:04.780 --> 00:14:06.780
even like a very visible comment block


00:14:06.780 --> 00:14:08.480
with a bunch of lines and stuff like that


00:14:08.480 --> 00:14:10.180
to separate the different parts.


00:14:10.180 --> 00:14:12.780
As far as the asserts, there's a lot of people that think,


00:14:12.780 --> 00:14:14.780
like, you have to do just one assert,


00:14:14.780 --> 00:14:16.680
and you're failing as a developer


00:14:16.680 --> 00:14:18.080
if you do more than one assert.


00:14:18.080 --> 00:14:20.480
And I think that's not true.


00:14:20.480 --> 00:14:22.980
There's problems with doing more than one assert.


00:14:22.980 --> 00:14:24.580
But am I doing an action?


00:14:24.580 --> 00:14:27.180
And if there's, like, several things I have to test


00:14:27.180 --> 00:14:30.280
about whether or not the action is right?


00:14:30.280 --> 00:14:32.780
Like in my world with the RF systems,


00:14:32.780 --> 00:14:36.220
if I'm setting up a signal and I'm measuring a signal,


00:14:36.220 --> 00:14:40.380
now, what is the, if I test that I got the right signal,


00:14:40.380 --> 00:14:43.120
at the end, I might be testing the power level


00:14:43.120 --> 00:14:45.420
and the burst width and the burst length,


00:14:45.420 --> 00:14:48.360
and I might be testing a whole bunch of stuff around it.


00:14:48.360 --> 00:14:51.020
And yes, I could separate those all into different tests,


00:14:51.020 --> 00:14:52.720
but if it's really just,


00:14:52.720 --> 00:14:55.920
it's really conceptually the same thing,


00:14:55.920 --> 00:14:58.060
I think it's fine to have multiple asserts.


00:14:58.060 --> 00:14:59.060
But if you really don't want to,


00:14:59.060 --> 00:15:01.460
there's ways to get around not doing multiple.


00:15:01.460 --> 00:15:03.420
- So you use semicolons, a lot of ands?


00:15:03.420 --> 00:15:06.300
- Well, you can, like you can stick like,


00:15:06.300 --> 00:15:07.460
for Booleans, for instance,


00:15:07.460 --> 00:15:09.900
if you had like six Booleans that you were testing,


00:15:09.900 --> 00:15:11.940
you could stick those in a list


00:15:11.940 --> 00:15:16.460
and compare the list to a list of expected Booleans.


00:15:16.460 --> 00:15:19.420
- Sure, you could, I mean, you're kind of like saying,


00:15:19.420 --> 00:15:20.620
like, how can we draw this out?


00:15:20.620 --> 00:15:22.060
But there are legitimate ways,


00:15:22.060 --> 00:15:25.540
like you could use the any iterator type of thing,


00:15:25.540 --> 00:15:26.940
or you could use the all, say,


00:15:26.940 --> 00:15:31.340
all of these things have to pass this or if any of them fail,


00:15:31.340 --> 00:15:34.460
then that's a certain not any, something like that.


00:15:34.460 --> 00:15:36.820
>> One of the problems of not doing that is


00:15:36.820 --> 00:15:40.460
that your test stops at the first failure.


00:15:40.460 --> 00:15:42.480
If that's a problem,


00:15:42.480 --> 00:15:44.460
and sometimes it is, you really do want to see


00:15:44.460 --> 00:15:47.020
the entire state of all of the,


00:15:47.020 --> 00:15:48.780
because it might help you debug it.


00:15:48.780 --> 00:15:53.100
Oh, the return code of a web page was like 400,


00:15:53.100 --> 00:15:55.220
and I expect it to be 200.


00:15:55.220 --> 00:15:58.720
But if you could see the message, it would be so much better.


00:15:58.720 --> 00:16:02.620
>> Yeah, if you could see more or if you're testing the title and that's wrong,


00:16:02.620 --> 00:16:04.820
but you know what I mean.


00:16:04.820 --> 00:16:08.380
If you see more than one bit of information, it helps.


00:16:08.380 --> 00:16:11.180
>> This portion of Talk Python to Me is brought to you by


00:16:11.180 --> 00:16:13.420
Microsoft for Startups Founders Hub.


00:16:13.420 --> 00:16:16.920
I'm here to tell you about a fantastic opportunity for startup founders,


00:16:16.920 --> 00:16:20.500
especially those of you interested in artificial intelligence.


00:16:20.500 --> 00:16:22.580
With over six figures and benefits,


00:16:22.580 --> 00:16:25.080
this program is a game changer for startups.


00:16:25.080 --> 00:16:27.960
you'll get $150,000 in Azure credits.


00:16:27.960 --> 00:16:30.760
And Founders Hub is offering a unique chance to access


00:16:30.760 --> 00:16:35.340
OpenAI's APIs as well as a new Azure OpenAI service,


00:16:35.340 --> 00:16:37.060
so you can easily infuse


00:16:37.060 --> 00:16:40.360
generative AI capabilities into your applications.


00:16:40.360 --> 00:16:42.840
The team at Microsoft will also provide you with


00:16:42.840 --> 00:16:46.380
one-on-one technical advice to help you with architectural plans,


00:16:46.380 --> 00:16:50.340
scalability, implementation best practices, and security.


00:16:50.340 --> 00:16:51.780
Plus, you'll have access to


00:16:51.780 --> 00:16:53.980
the network of mentors plugged into the startup world,


00:16:53.980 --> 00:16:56.420
which is a huge asset when building your network.


00:16:56.420 --> 00:16:59.140
You'll get expert help with topics like products,


00:16:59.140 --> 00:17:01.600
fundraising, go to market, and more.


00:17:01.600 --> 00:17:04.060
And the best part, the program is open to everyone


00:17:04.060 --> 00:17:05.860
and has no funding requirements,


00:17:05.860 --> 00:17:08.700
whether you're in idea phase or further along.


00:17:08.700 --> 00:17:10.580
It just takes five minutes to apply


00:17:10.580 --> 00:17:13.300
and you'll get massive benefits immediately.


00:17:13.300 --> 00:17:15.260
Harness the power of AI for your startup.


00:17:15.260 --> 00:17:18.060
Sign up for Microsoft for Startups Founders Hub today


00:17:18.060 --> 00:17:21.060
at talkbython.fm/foundershub.


00:17:21.060 --> 00:17:23.340
This is a no-brainer opportunity for startup founders,


00:17:23.340 --> 00:17:25.060
so don't miss out.


00:17:25.060 --> 00:17:26.720
Oh, and one more thing,


00:17:26.720 --> 00:17:29.860
just to make a point of how powerful these offerings are,


00:17:29.860 --> 00:17:32.240
I use the same AI on offer above


00:17:32.240 --> 00:17:34.440
to completely write that ad you just heard.


00:17:34.440 --> 00:17:35.780
It's incredibly powerful,


00:17:35.780 --> 00:17:37.780
and if you have the chance to incorporate OpenAI


00:17:37.780 --> 00:17:41.460
into your startup, you'd better not miss that chance.


00:17:41.460 --> 00:17:44.860
Sign up and get access today at talkbython.fm/foundershub.


00:17:44.860 --> 00:17:47.020
Thank you to Microsoft for sponsoring the show


00:17:47.020 --> 00:17:49.320
and to OpenAI for helping write this ad.


00:17:52.300 --> 00:17:54.860
- Now, I think that's also to be differentiated,


00:17:54.860 --> 00:17:56.800
as we'll get to later in some other tips,


00:17:56.800 --> 00:17:59.340
from, well, there's different cases,


00:17:59.340 --> 00:18:01.340
like what if I pass it a zero,


00:18:01.340 --> 00:18:04.060
and I pass it a 10, or something above 100,


00:18:04.060 --> 00:18:05.220
all these different inputs,


00:18:05.220 --> 00:18:07.700
and then I wanna test every, that's a different story.


00:18:07.700 --> 00:18:08.540
- Oh, yeah.


00:18:08.540 --> 00:18:10.300
- Right, right, so we'll get to that.


00:18:10.300 --> 00:18:11.660
All right, what's next?


00:18:11.660 --> 00:18:13.380
- Well, I wanted to, since we're talking


00:18:13.380 --> 00:18:15.340
about structuring a test function,


00:18:15.340 --> 00:18:17.980
I thought it'd be great to just remind people


00:18:17.980 --> 00:18:19.340
that you have a whole suite,


00:18:19.340 --> 00:18:21.100
so it's good to function,


00:18:21.100 --> 00:18:24.660
to think about how you're structuring your whole test suite.


00:18:24.660 --> 00:18:27.740
And by test suite, I just mean a directory of stuff


00:18:27.740 --> 00:18:29.220
that has tests in it.


00:18:29.220 --> 00:18:31.900
You can, being pytest allows you to have your tests


00:18:31.900 --> 00:18:33.580
interspersed with your code,


00:18:33.580 --> 00:18:35.060
but I haven't seen that for a long time.


00:18:35.060 --> 00:18:38.700
A lot of people just have really a tests directory


00:18:38.700 --> 00:18:40.460
and that's what I'm used to.


00:18:40.460 --> 00:18:42.460
Anyway, or a couple, a couple of directories.


00:18:42.460 --> 00:18:44.420
Like I often have an examples directory


00:18:44.420 --> 00:18:47.700
that I want to make sure all those examples still work,


00:18:47.700 --> 00:18:49.260
like for pytest plugins.


00:18:49.260 --> 00:18:52.180
And I also want to have the tests themselves pass.


00:18:52.180 --> 00:18:55.340
But anyway, structuring the test directory is good.


00:18:55.340 --> 00:18:57.340
I like, there's a bunch of ways to do it.


00:18:57.340 --> 00:19:00.300
I like to separate based on like functionality.


00:19:00.300 --> 00:19:03.700
So different like behaviors of a system


00:19:03.700 --> 00:19:07.140
and conceptual separations of the system


00:19:07.140 --> 00:19:08.940
into different functionality bits


00:19:08.940 --> 00:19:11.100
and separate those into directories.


00:19:11.100 --> 00:19:12.900
You can also structure it based on like


00:19:12.900 --> 00:19:17.660
some actual software subsystems in your software.


00:19:17.660 --> 00:19:19.920
And then some people do like the same code structure.


00:19:19.920 --> 00:19:22.400
So they have like the exact same directory structure


00:19:22.400 --> 00:19:24.760
in their tests as they do in their source code.


00:19:24.760 --> 00:19:26.300
But I think just thinking,


00:19:26.300 --> 00:19:29.120
making sure you think about it and don't just know,


00:19:29.120 --> 00:19:30.540
don't just think there's one answer.


00:19:30.540 --> 00:19:33.000
It's really how you wanna run the tests.


00:19:33.000 --> 00:19:34.640
And it helps me if I'm,


00:19:34.640 --> 00:19:37.320
like if I'm working on a behavior or sub,


00:19:37.320 --> 00:19:40.360
if you're normally working on a subsystem at that level,


00:19:40.360 --> 00:19:42.480
then subsystem makes sense to test.


00:19:42.480 --> 00:19:43.560
So you can just,


00:19:43.560 --> 00:19:46.720
like I'm working on my particular bit of code


00:19:46.720 --> 00:19:49.960
And so I'm running those tests related to that.


00:19:49.960 --> 00:19:52.160
You know, it's how you're running the test


00:19:52.160 --> 00:19:54.560
is how you're going to, anyway.


00:19:54.560 --> 00:19:55.760
- Depends how you think about it, right?


00:19:55.760 --> 00:19:57.800
And how it's organized in your brain.


00:19:57.800 --> 00:19:59.720
- Also, there's reporting considerations.


00:19:59.720 --> 00:20:03.080
So if you have to, if you're reporting to outside people


00:20:03.080 --> 00:20:06.380
that you're like tests are passing in different chunks,


00:20:06.380 --> 00:20:08.480
it might, the reporting might be easier


00:20:08.480 --> 00:20:10.560
if you're structured one way versus another.


00:20:10.560 --> 00:20:12.640
- Structured like your software or subsystems,


00:20:12.640 --> 00:20:13.800
that's straightforward to me.


00:20:13.800 --> 00:20:15.340
Like I've got a data access layer.


00:20:15.340 --> 00:20:18.180
So here's my test that tests the data access layer,


00:20:18.180 --> 00:20:21.300
presumably mocking out the database, but maybe not.


00:20:21.300 --> 00:20:24.700
When you think about having it in subdirectories,


00:20:24.700 --> 00:20:27.580
you would just have maybe subdirectories of those.


00:20:27.580 --> 00:20:29.900
And I guess another you could think about is


00:20:29.900 --> 00:20:33.580
like really, really slow integration style tests


00:20:33.580 --> 00:20:38.160
versus more units, for lack of a better word, tests.


00:20:38.160 --> 00:20:41.980
Right, like these are ones I can run now.


00:20:41.980 --> 00:20:44.520
These are the ones that take an hour.


00:20:44.520 --> 00:20:46.420
Let me run the ones I could take now.


00:20:46.420 --> 00:20:47.480
What's your style?


00:20:47.480 --> 00:20:49.720
- So I don't, not really that great


00:20:49.720 --> 00:20:51.080
at throwing in unit tests,


00:20:51.080 --> 00:20:53.900
'cause I don't really see much value in unit tests.


00:20:53.900 --> 00:20:55.640
I know that I have to have behavior


00:20:55.640 --> 00:21:00.520
and tests that test the end user functionality.


00:21:00.520 --> 00:21:03.640
At the point where that is testing all of my code,


00:21:03.640 --> 00:21:06.240
then I don't feel the need to add unit tests,


00:21:06.240 --> 00:21:10.540
but there are times where they are needed, which is great.


00:21:10.540 --> 00:21:12.760
I do think it's great to separate those.


00:21:12.760 --> 00:21:18.520
The top hierarchy of separating behavior versus unit tests into one big chunk.


00:21:18.520 --> 00:21:18.880
>> Yeah.


00:21:18.880 --> 00:21:23.300
>> The main reason why I like that is because I really want my behavior tests to be,


00:21:23.300 --> 00:21:24.800
if I'm going to do coverage,


00:21:24.800 --> 00:21:28.840
I really want to know if my behavior tests are covering all of my code.


00:21:28.840 --> 00:21:32.760
It doesn't really help me much to know that my unit tests are covering all my code


00:21:32.760 --> 00:21:37.560
because that could lead to dumb tests.


00:21:37.560 --> 00:21:42.280
There might be a corner case in my code that I can write a unit test for,


00:21:42.280 --> 00:21:46.960
but I can't reach otherwise, so I think it's better just to delete the code.


00:21:46.960 --> 00:21:53.080
We might get our Pytest certifications taken away, or our Agile certifications taken away.


00:21:53.080 --> 00:21:54.080
I don't really have one.


00:21:54.080 --> 00:21:59.480
But I agree with you completely that some of these larger scale tests


00:21:59.480 --> 00:22:04.680
that kind of test larger bits of code, they're really,


00:22:04.680 --> 00:22:08.160
they might not be 100% on catching all the little things you could test,


00:22:08.160 --> 00:22:13.160
But usually if I break something, many of those break.


00:22:13.160 --> 00:22:15.960
You know, it's usually enough to catch the mistakes.


00:22:15.960 --> 00:22:16.800
- Yeah.


00:22:16.800 --> 00:22:20.960
- They're easier to write 20 big scale tests


00:22:20.960 --> 00:22:22.640
than a thousand small ones.


00:22:22.640 --> 00:22:25.320
- I've also never had a customer reported issue


00:22:25.320 --> 00:22:27.920
that could be reproduced as a unit test.


00:22:27.920 --> 00:22:31.600
- Avaro out there says, "Pytest docs introduces,"


00:22:31.600 --> 00:22:34.560
or yeah, it talks about a slow mark just for that use case,


00:22:34.560 --> 00:22:37.840
which we will get to marks as well,


00:22:37.840 --> 00:22:39.960
but that's definitely a good recommendation.


00:22:39.960 --> 00:22:41.960
So maybe not actually using the directory structure


00:22:41.960 --> 00:22:43.800
for slow, but using marks.


00:22:43.800 --> 00:22:46.160
So coming back to that, but let's carry on.


00:22:46.160 --> 00:22:47.000
- Yeah.


00:22:47.000 --> 00:22:49.560
- That was structuring a test suite, which is excellent.


00:22:49.560 --> 00:22:54.160
- Well, okay, so I don't know how the transition is here,


00:22:54.160 --> 00:22:56.640
but I picked fixtures as the next thing.


00:22:56.640 --> 00:22:59.600
I think one of the first things people need to get used to


00:22:59.600 --> 00:23:01.160
with pytest is fixtures,


00:23:01.160 --> 00:23:04.120
because it is the big brain shift


00:23:04.120 --> 00:23:06.080
from any other test framework.


00:23:06.080 --> 00:23:07.920
And it's, they're pretty cool.


00:23:07.920 --> 00:23:11.480
It's really just a function that's split in half.


00:23:11.480 --> 00:23:14.000
We've got a setup half and a teardown half.


00:23:14.000 --> 00:23:16.580
And they're separated by a yield keyword


00:23:16.580 --> 00:23:18.840
that separates the setup and teardown.


00:23:18.840 --> 00:23:22.560
And pytest will call that before they're testing


00:23:22.560 --> 00:23:25.440
and then finish it up afterwards.


00:23:25.440 --> 00:23:26.280
That's about it.


00:23:26.280 --> 00:23:28.320
- Well, I think part of the transition is,


00:23:28.320 --> 00:23:31.240
you talked about the three A's,


00:23:31.240 --> 00:23:33.520
the arrange, act, and assert.


00:23:33.520 --> 00:23:36.500
The arrange part, if that's gonna get reused,


00:23:36.500 --> 00:23:39.780
well, fixtures are pretty well built for that.


00:23:39.780 --> 00:23:41.940
And you could have more than one fixture in a test, right?


00:23:41.940 --> 00:23:43.620
You could say this part arranges the database


00:23:43.620 --> 00:23:45.700
and this part arranges, I don't know,


00:23:45.700 --> 00:23:48.540
some set state of the app that you're gonna,


00:23:48.540 --> 00:23:50.500
you know, make them collide and see what happens.


00:23:50.500 --> 00:23:52.460
- Yeah, or connections to resources


00:23:52.460 --> 00:23:54.220
and all sorts of stuff, yeah.


00:23:54.220 --> 00:23:57.400
Or data, you can have fixtures that generate data for you.


00:23:57.400 --> 00:23:58.700
And there's many that do that.


00:23:58.700 --> 00:24:01.220
But one of the things, I guess I should have this


00:24:01.220 --> 00:24:07.460
one of the tips when writing a test, I recommend putting like, especially the first test for


00:24:07.460 --> 00:24:11.780
some something you write down, just write it in the test. Now, when you go to the right,


00:24:11.780 --> 00:24:17.720
the second one, that's a good time to go. How much of this setup is shared? And if the


00:24:17.720 --> 00:24:22.300
all of the setup is shared, mostly, then you can throw, maybe it makes sense to throw that


00:24:22.300 --> 00:24:27.660
in one or more fixture. I have seen people just copied it, just like take it and put


00:24:27.660 --> 00:24:29.980
into a fixture and I call the fixture setup.


00:24:29.980 --> 00:24:31.140
You can do that.


00:24:31.140 --> 00:24:32.740
It's a little dangerous though,


00:24:32.740 --> 00:24:34.380
because what are you setting up?


00:24:34.380 --> 00:24:37.660
I'd rather have it be maybe multiple different ones like


00:24:37.660 --> 00:24:43.200
setup database or configure the network or something like that.


00:24:43.200 --> 00:24:44.500
Have it be descriptive.


00:24:44.500 --> 00:24:45.480
You've got a word there,


00:24:45.480 --> 00:24:46.860
setup just doesn't say much,


00:24:46.860 --> 00:24:49.340
so say something, I guess.


00:24:49.340 --> 00:24:52.620
>> Well, that goes back to the whole part of


00:24:52.620 --> 00:24:55.780
testing that is documentation of how the system works.


00:24:55.780 --> 00:24:59.580
And part of that should be really good names for your tests.


00:24:59.580 --> 00:25:05.980
You have the advantage that no one is ever going to try to use your test code as an API.


00:25:05.980 --> 00:25:07.780
So it can be a ridiculous name.


00:25:07.780 --> 00:25:12.380
It's like 15, 20, 30 characters, because no one's going to be upset


00:25:12.380 --> 00:25:16.180
that the test runner doesn't care that the name is long, and no one's going to use it.


00:25:16.180 --> 00:25:19.980
The person that is going to look at it is either you or somebody else


00:25:19.980 --> 00:25:22.380
when something's broken and they're stressed out.


00:25:22.380 --> 00:25:26.540
So when they're trying to get done with their day and the test doesn't work,


00:25:26.540 --> 00:25:29.220
and they're looking at the code going, "What are we doing here?"


00:25:29.220 --> 00:25:31.860
So yeah, being verbose there is fine.


00:25:31.860 --> 00:25:33.780
In back to the RF world,


00:25:33.780 --> 00:25:38.780
like let's say I'm setting up both a transmitter and receiver before a test.


00:25:38.780 --> 00:25:42.780
I might be tempted to throw both of those in one fixture,


00:25:42.780 --> 00:25:44.140
and I have before,


00:25:44.140 --> 00:25:48.460
but I almost always end up splitting those up and have like setup transmitter,


00:25:48.460 --> 00:25:50.780
setup receiver, setup measurement system.


00:25:50.780 --> 00:25:57.500
have those separate because they're more reusable as parts later and stuff.


00:25:57.500 --> 00:25:59.500
>> Right. Maybe you need a receiver,


00:25:59.500 --> 00:26:02.580
not a transmitter for some particular reason somewhere.


00:26:02.580 --> 00:26:05.940
>> Another thing is, it's okay to not reuse fixtures,


00:26:05.940 --> 00:26:08.060
and they can be in the same file.


00:26:08.060 --> 00:26:14.380
If you just have this huge setup and a little tiny do something section,


00:26:14.380 --> 00:26:17.620
it's really nice to just throw that into a fixture.


00:26:17.620 --> 00:26:20.140
There's lots of reasons to throw that in the fixture.


00:26:20.140 --> 00:26:24.680
One of the great reasons is you can put asserts in the fixture.


00:26:24.680 --> 00:26:28.240
And you don't want to sprinkle asserts through your test


00:26:28.240 --> 00:26:30.240
because then your test fails and you're like,


00:26:30.240 --> 00:26:32.240
was the setup failure or not?


00:26:32.240 --> 00:26:36.240
But pytest is awesome that if the assert happens in the fixture,


00:26:36.240 --> 00:26:39.940
it doesn't report the test as a failure, it reports it as an error.


00:26:39.940 --> 00:26:43.040
So fixture asserts are errors and then


00:26:43.040 --> 00:26:45.940
so you can separate when you're seeing the whole, all of your


00:26:45.940 --> 00:26:47.740
your entire system's failing,


00:26:47.740 --> 00:26:50.740
But there's really only one failure and all the rest of them are errors.


00:26:50.740 --> 00:26:56.240
It might be that like you're just not connecting to the database or something like that.


00:26:56.240 --> 00:26:57.500
Yeah, interesting.


00:26:57.500 --> 00:27:00.500
Out in the audience, Jeff says, "One thing I missed on my first trials,


00:27:00.500 --> 00:27:03.580
pytest is the differentiation between error and fail."


00:27:03.580 --> 00:27:03.900
Yeah.


00:27:03.900 --> 00:27:06.740
Which sounds a lot like what you're talking about there.


00:27:06.740 --> 00:27:11.100
Oh yeah. And his comment around unit test, because unit test is a little different.


00:27:11.100 --> 00:27:16.100
Unit test makes the, I think it's the assertion error versus other exceptions.


00:27:16.100 --> 00:27:18.980
So I think that's the case in unit test,


00:27:18.980 --> 00:27:23.420
that if it's an assertion error, it's a failure.


00:27:23.420 --> 00:27:27.780
And if it's any other exception, it's an error.


00:27:27.780 --> 00:27:29.860
High test, completely different.


00:27:29.860 --> 00:27:32.080
Any exception, assertion or otherwise,


00:27:32.080 --> 00:27:35.300
that happens within the test itself is a failure.


00:27:35.300 --> 00:27:38.100
And any exception that happens that's uncaught


00:27:38.100 --> 00:27:40.900
in a setup or in a fixture, that's an error.


00:27:40.900 --> 00:27:41.740
- No, that's cool.


00:27:41.740 --> 00:27:43.180
I didn't realize that differentiation.


00:27:43.180 --> 00:27:45.260
Also a question from Thomas.


00:27:45.260 --> 00:27:48.520
If you're just having the fixture there to provide data,


00:27:48.520 --> 00:27:50.140
is it necessary to use yield


00:27:50.140 --> 00:27:52.580
instead of just returning the value, the data?


00:27:52.580 --> 00:27:54.300
- I usually just return the value.


00:27:54.300 --> 00:27:58.400
I only use yield if I have some work to do for a teardown.


00:27:58.400 --> 00:27:59.980
- I think also, it's just kind of interesting,


00:27:59.980 --> 00:28:02.620
just that yield.


00:28:02.620 --> 00:28:05.660
Now what a clever use of generators, right?


00:28:05.660 --> 00:28:07.860
- It's very clever and also very nice


00:28:07.860 --> 00:28:11.640
because you can have variables there


00:28:11.640 --> 00:28:13.880
that are needed for the cleanup,


00:28:13.880 --> 00:28:16.860
but you don't need to return to anybody or something


00:28:16.860 --> 00:28:18.580
or save them in a global variable.


00:28:18.580 --> 00:28:21.020
They can just be in the function and that's it.


00:28:21.020 --> 00:28:23.660
So like, you know, database, connect to the database,


00:28:23.660 --> 00:28:24.860
keep a handle to the database


00:28:24.860 --> 00:28:27.060
so that you can close it at the end.


00:28:27.060 --> 00:28:28.300
It's very, very clean.


00:28:28.300 --> 00:28:30.420
- Right, or start a transaction and roll it back.


00:28:30.420 --> 00:28:33.100
So it's whatever you did to it, it's unaffected, yeah.


00:28:33.100 --> 00:28:33.940
- Oh yeah.


00:28:33.940 --> 00:28:34.780
- All right, what's next?


00:28:34.780 --> 00:28:35.660
That was fixtures?


00:28:35.660 --> 00:28:36.500
- Well--


00:28:36.500 --> 00:28:37.940
- Or unless you got more fixture.


00:28:37.940 --> 00:28:40.140
- You made this comment and I'm like,


00:28:40.140 --> 00:28:42.940
I've been doing pytest so long that I forgot about it.


00:28:42.940 --> 00:28:46.140
- Old time pytest stuff had to add finalizer


00:28:46.140 --> 00:28:48.900
before we kind of settled on the yield system.


00:28:48.900 --> 00:28:50.900
I would say avoid add finalizer,


00:28:50.900 --> 00:28:53.980
it's just gonna confuse people, so don't do that.


00:28:53.980 --> 00:28:58.820
Also, you can nest them, so leveraging, using scopes.


00:28:58.820 --> 00:29:01.040
So you can have like, connect to a database


00:29:01.040 --> 00:29:04.780
by a session scope, and then cleaning up the database


00:29:04.780 --> 00:29:08.420
as a function scope thing, so that you, you know, save time.


00:29:08.420 --> 00:29:10.860
And then conf test files, if you wanna share in between,


00:29:10.860 --> 00:29:14.340
Just between tests, you can throw the fixture in a conf test file.


00:29:14.340 --> 00:29:17.540
>> Yeah, it's not necessarily obvious that if I put a fixture and then I have a bunch


00:29:17.540 --> 00:29:21.100
of tests below in the same file, it's obvious I can just use it.


00:29:21.100 --> 00:29:25.180
But then if I go to another one, I could be like, well, what about those over there?


00:29:25.180 --> 00:29:26.540
I want to share them across these files.


00:29:26.540 --> 00:29:28.900
So this conf test, this is what that's about, right?


00:29:28.900 --> 00:29:33.100
>> Yeah, and a lot of people think you can, or their first attempt is to throw them all


00:29:33.100 --> 00:29:35.260
into a different module and import the module.


00:29:35.260 --> 00:29:36.020
You can't do that.


00:29:36.020 --> 00:29:36.940
Don't do that.


00:29:36.940 --> 00:29:39.620
And you never want to import the conf test file.


00:29:39.620 --> 00:29:40.980
It's not an importable thing.


00:29:40.980 --> 00:29:42.820
It's just pytest deals with it.


00:29:42.820 --> 00:29:44.060
>> Yeah, indeed.


00:29:44.060 --> 00:29:48.460
>> Okay. On fixtures, there's a bunch of built-in ones that are super cool.


00:29:48.460 --> 00:29:50.140
In the long time,


00:29:50.140 --> 00:29:52.700
if you've used pytest for a while,


00:29:52.700 --> 00:29:55.140
we used to have, and we still do,


00:29:55.140 --> 00:29:58.300
a couple of fixtures called Tempter and TempterFactory.


00:29:58.300 --> 00:30:00.460
But there's newer ones,


00:30:00.460 --> 00:30:01.580
they've been in for a while,


00:30:01.580 --> 00:30:03.060
but some people don't know about them,


00:30:03.060 --> 00:30:05.460
called TempPath and TempPathFactory.


00:30:05.460 --> 00:30:09.060
They use pathlib path objects,


00:30:09.060 --> 00:30:11.660
which are awesome. So use that if you can.


00:30:11.660 --> 00:30:13.660
Took me a while to love path,


00:30:13.660 --> 00:30:16.100
the path class, but I love it now. It's really nice.


00:30:16.100 --> 00:30:18.500
I mean, the old one was like just this


00:30:18.500 --> 00:30:23.100
py.path.local object, which was very undocumented.


00:30:23.100 --> 00:30:24.900
So I don't recommend it.


00:30:24.900 --> 00:30:29.100
The temp files within pytest, so it's great. If you're like gonna


00:30:29.100 --> 00:30:31.100
you're generating a file or whatever,


00:30:31.100 --> 00:30:33.500
you want to save some CSV stuff, it's good.


00:30:33.500 --> 00:30:35.900
It sticks around too, which is kind of cool.


00:30:35.900 --> 00:30:37.900
It sticks around for a little while. So you can


00:30:37.900 --> 00:30:42.440
interrogate your temp files like after a test run is done.


00:30:42.440 --> 00:30:43.880
You can look at the,


00:30:43.880 --> 00:30:46.400
and if you're trying to debug the failures,


00:30:46.400 --> 00:30:48.120
those temp files will still be there.


00:30:48.120 --> 00:30:49.900
They're not cleaned up directly after,


00:30:49.900 --> 00:30:51.560
they're cleaned up in a future test run.


00:30:51.560 --> 00:30:52.480
>> That's interesting.


00:30:52.480 --> 00:30:52.800
>> Yeah.


00:30:52.800 --> 00:30:56.400
>> They're like a N minus one or N plus one lifespan.


00:30:56.400 --> 00:31:00.400
>> Yeah. There's a bunch of built-in fixtures.


00:31:00.400 --> 00:31:01.920
There's only a handful I use very much.


00:31:01.920 --> 00:31:03.960
I use a Tempath and Tempath.


00:31:03.960 --> 00:31:06.040
So there's Tempath and Tempath Factory.


00:31:06.040 --> 00:31:12.380
The factory versions are used because Tempath is a per test run,


00:31:12.380 --> 00:31:15.360
like every function, it gets generated.


00:31:15.360 --> 00:31:20.000
You can't use it if you've got a SessionScope fixture.


00:31:20.000 --> 00:31:22.760
The factory ones are SessionScope.


00:31:22.760 --> 00:31:26.060
If you want to use it, anything larger than FunctionScope,


00:31:26.060 --> 00:31:30.040
use the factory to generate a temp directory. Use that.


00:31:30.040 --> 00:31:30.320
>> Cool.


00:31:30.320 --> 00:31:32.840
>> Capsys, if you want to look at,


00:31:32.840 --> 00:31:34.160
if you're checking your output,


00:31:34.160 --> 00:31:37.560
Capsys is good for checking the output of something,


00:31:37.560 --> 00:31:39.120
the standard out or standard error.


00:31:39.120 --> 00:31:42.120
>> Because pytest captures and eats some of it, right?


00:31:42.120 --> 00:31:46.560
>> Yeah, by default, pytest will always capture the errors and output,


00:31:46.560 --> 00:31:50.360
and it prints it out for failing tests.


00:31:50.360 --> 00:31:53.880
It'll say, "Oh, here's the output for the test and it failed."


00:31:53.880 --> 00:31:57.360
That's helpful, but it's normally gone.


00:31:57.360 --> 00:32:00.920
You can use Capsys also just to disable


00:32:00.920 --> 00:32:02.980
that for temporary bits of your code.


00:32:02.980 --> 00:32:05.560
If you want to throw a log out there all the time or something,


00:32:05.560 --> 00:32:09.500
you can use that. But I usually use it just to look at the output.


00:32:09.500 --> 00:32:11.320
Especially with pytest plugins,


00:32:11.320 --> 00:32:13.580
I want to see if I've modified the output,


00:32:13.580 --> 00:32:14.580
I want to see the output,


00:32:14.580 --> 00:32:16.780
so I can use that to grab that.


00:32:16.780 --> 00:32:18.580
There's monkey patch as well.


00:32:18.580 --> 00:32:20.440
You can use this for all sorts of stuff,


00:32:20.440 --> 00:32:22.880
but if I'm doing fancy things,


00:32:22.880 --> 00:32:28.000
I usually actually use just mock, unit test mock.


00:32:28.000 --> 00:32:31.960
But for things like changing your environment, it's great.


00:32:31.960 --> 00:32:37.760
So you can change environmental variables or quick patches, it works great.


00:32:37.760 --> 00:32:39.480
The neat things about these,


00:32:39.480 --> 00:32:41.280
other than just doing yourself,


00:32:41.280 --> 00:32:42.780
is that it cleans up afterward.


00:32:42.780 --> 00:32:48.360
If you patch a system with a dummy bit of system or something,


00:32:48.360 --> 00:32:49.680
after your test is done,


00:32:49.680 --> 00:32:52.440
it goes back to what it was before. So that's pretty cool.


00:32:52.440 --> 00:32:54.440
>> Yeah. Because otherwise, you can end up with a problem


00:32:54.440 --> 00:32:57.760
of the order of operations that's left in


00:32:57.760 --> 00:33:01.400
this half patched state where if something else depends upon it, right?


00:33:01.400 --> 00:33:05.320
- pytest config is used for grabbing command line flags a lot.


00:33:05.320 --> 00:33:06.920
That's mostly what I use it for.


00:33:06.920 --> 00:33:10.480
And then the only thing I usually use request for anymore


00:33:10.480 --> 00:33:13.720
is if from a fixture, I want to know what the test name was.


00:33:13.720 --> 00:33:17.320
I can use, you can use request node name to grab the test name.


00:33:17.320 --> 00:33:20.240
I don't think I use it for anything else anymore,


00:33:20.240 --> 00:33:23.720
except for parameters to grab the parameter values.


00:33:23.720 --> 00:33:24.720
Yeah, anyway.


00:33:24.720 --> 00:33:25.480
- Nice.


00:33:25.480 --> 00:33:25.880
All right.


00:33:25.880 --> 00:33:28.640
I pointed out Mark or audience.


00:33:28.640 --> 00:33:31.320
They pointed out Mark and here we are.


00:33:31.320 --> 00:33:31.760
Mark.


00:33:31.760 --> 00:33:32.320
Markers.


00:33:32.320 --> 00:33:33.200
Markers.


00:33:33.200 --> 00:33:35.120
Pytest.mark.whatever.


00:33:35.120 --> 00:33:36.440
You can use custom markers.


00:33:36.440 --> 00:33:37.720
Markers are great, but don't.


00:33:37.720 --> 00:33:41.240
I, when I learned about markers, I put them everywhere and then I'm like,


00:33:41.240 --> 00:33:44.120
Oh, that's just sort of, it ends up being messy.


00:33:44.120 --> 00:33:49.280
So it can be, but it's a great way to, you just, it's like just adding a tag to a


00:33:49.280 --> 00:33:54.080
a test or a test case or something to say,


00:33:54.080 --> 00:33:55.520
you can use it to run it.


00:33:55.520 --> 00:33:58.020
So you can say, I want to run all the tests that are marked,


00:33:58.020 --> 00:34:01.280
like user interface, you can run all the UI tests.


00:34:01.280 --> 00:34:03.720
If you didn't separate them by directory.


00:34:03.720 --> 00:34:06.840
Or like somebody said, you can mark all the slow ones and


00:34:06.840 --> 00:34:10.680
only run the slow ones or avoid running the slow ones.


00:34:10.680 --> 00:34:13.040
>> You can do a not in your execution.


00:34:13.040 --> 00:34:15.280
You can say run the things not marked slow.


00:34:15.280 --> 00:34:16.740
>> Yeah. You just say,


00:34:16.740 --> 00:34:18.980
well, it's -m, I should throw that in there,


00:34:18.980 --> 00:34:22.380
-m, like, not slow.


00:34:22.380 --> 00:34:23.220
- Got it.


00:34:23.220 --> 00:34:25.300
- But it's two words, so you have to put it in quotes,


00:34:25.300 --> 00:34:27.460
like -m, quote, not slow.


00:34:27.460 --> 00:34:28.300
It'll work.


00:34:28.300 --> 00:34:31.100
And you can mark files with a magic word,


00:34:31.100 --> 00:34:34.740
magic keyword called pytestmark, with no spaces.


00:34:34.740 --> 00:34:37.300
If you throw that in your file, pytest will see it.


00:34:37.300 --> 00:34:38.780
There's a bunch of built-in ones.


00:34:38.780 --> 00:34:41.700
Marks, the ones that I think are probably most common


00:34:41.700 --> 00:34:43.500
are skip, skipif, and xfail.


00:34:43.500 --> 00:34:45.180
- X is you expect it to fail?


00:34:45.180 --> 00:34:47.740
Like, I know it's failing, but that's okay?


00:34:47.740 --> 00:34:49.740
- Yeah, so a lot of people might think,


00:34:49.740 --> 00:34:52.100
why would you ever expect a test to fail?


00:34:52.100 --> 00:34:52.940
You should just fix it.


00:34:52.940 --> 00:34:54.300
- No, I know, no, no, no, no.


00:34:54.300 --> 00:34:57.980
It's Friday, three o'clock, you got plans.


00:34:57.980 --> 00:34:59.420
What, you gotta fix the build.


00:34:59.420 --> 00:35:00.260
- Yeah.


00:35:00.260 --> 00:35:01.860
- No, seriously though, why would you use this?


00:35:01.860 --> 00:35:03.940
- Believe it or not, some people are not responsible


00:35:03.940 --> 00:35:04.980
for all the code.


00:35:04.980 --> 00:35:05.820
- Yeah.


00:35:05.820 --> 00:35:06.640
- There's teams.


00:35:06.640 --> 00:35:11.640
So one great reason to use XFail is to submit a defect,


00:35:11.640 --> 00:35:15.180
and then you say, I know this test is failing


00:35:15.180 --> 00:35:16.260
because of this issue.


00:35:16.260 --> 00:35:19.740
You've submitted defect, and then you throw the defect number


00:35:19.740 --> 00:35:23.180
in the XFail reason string and move on.


00:35:23.180 --> 00:35:26.240
Now your build is still working.


00:35:26.240 --> 00:35:28.800
And there's, but just be careful.


00:35:28.800 --> 00:35:30.360
I mean, XFail is this big thing.


00:35:30.360 --> 00:35:32.860
So I think as, whether or not you use XFail,


00:35:32.860 --> 00:35:35.220
it needs to be like your entire software team


00:35:35.220 --> 00:35:39.080
needs to understand it and agree on the process


00:35:39.080 --> 00:35:40.660
because there needs to be a process


00:35:40.660 --> 00:35:42.340
around how to utilize XFail


00:35:42.340 --> 00:35:45.460
because it can just sort of hide failures.


00:35:45.460 --> 00:35:46.460
and you don't want that.


00:35:46.460 --> 00:35:47.300
- Yeah.


00:35:47.300 --> 00:35:49.880
- That's one of the reasons why I really like XFailStrict.


00:35:49.880 --> 00:35:52.260
It makes it so that all,


00:35:52.260 --> 00:35:55.420
it makes it so that like, if they pass,


00:35:55.420 --> 00:36:00.340
if you mark it as fail and it passes, it'll just pass.


00:36:00.340 --> 00:36:04.060
But we want it to, well, it X passes.


00:36:04.060 --> 00:36:06.260
It expected, which means I expected it to fail,


00:36:06.260 --> 00:36:07.380
but it passed.


00:36:07.380 --> 00:36:09.580
But I like to just have it be a failure,


00:36:09.580 --> 00:36:12.020
which so that somebody can look at it and go,


00:36:12.020 --> 00:36:14.580
"Oh, yeah, we need to take these out of the test


00:36:14.580 --> 00:36:16.780
and close the defect or something like that.


00:36:16.780 --> 00:36:20.340
- This portion of Talk Python to Me


00:36:20.340 --> 00:36:22.340
is brought to you by Brilliant.org.


00:36:22.340 --> 00:36:23.360
You are a curious person


00:36:23.360 --> 00:36:25.020
who loves to learn about technology.


00:36:25.020 --> 00:36:27.180
I know because you're listening to my show.


00:36:27.180 --> 00:36:28.940
That's why you would also be interested


00:36:28.940 --> 00:36:31.980
in this episode's sponsor, Brilliant.org.


00:36:31.980 --> 00:36:35.140
Brilliant.org is entertaining, engaging, and effective.


00:36:35.140 --> 00:36:36.980
If you're like me and feel that binging


00:36:36.980 --> 00:36:40.100
yet another sitcom series is kind of missing out on life,


00:36:40.100 --> 00:36:41.840
then how about spending 30 minutes a day


00:36:41.840 --> 00:36:43.340
getting better at programming


00:36:43.340 --> 00:36:46.000
or deepen in your knowledge and foundations of topics


00:36:46.000 --> 00:36:47.960
you've always wanted to learn better,


00:36:47.960 --> 00:36:51.480
like chemistry or biology over on Brilliant.


00:36:51.480 --> 00:36:53.240
Brilliant has thousands of lessons,


00:36:53.240 --> 00:36:56.460
from foundational and advanced math to data science,


00:36:56.460 --> 00:36:58.320
algorithms, neural networks, and more,


00:36:58.320 --> 00:37:00.540
with new lessons added monthly.


00:37:00.540 --> 00:37:02.000
When you sign up for a free trial,


00:37:02.000 --> 00:37:03.180
they ask a couple of questions


00:37:03.180 --> 00:37:04.580
about what you're interested in,


00:37:04.580 --> 00:37:06.220
as well as your background knowledge.


00:37:06.220 --> 00:37:08.000
Then you're presented with a cool learning path


00:37:08.000 --> 00:37:10.360
to get you started right where you should be.


00:37:10.360 --> 00:37:13.120
Personally, I'm going back to some science foundations.


00:37:13.120 --> 00:37:14.400
I love chemistry and physics,


00:37:14.400 --> 00:37:16.900
but haven't touched them for 20 years.


00:37:16.900 --> 00:37:20.680
So I'm looking forward to playing with PV equals NRT,


00:37:20.680 --> 00:37:22.480
you know, the ideal gas law,


00:37:22.480 --> 00:37:25.000
and all the other foundations of our world.


00:37:25.000 --> 00:37:26.640
With Brilliant, you'll get hands-on


00:37:26.640 --> 00:37:29.520
on a whole universe of concepts in math, science,


00:37:29.520 --> 00:37:31.860
computer science, and solve fun problems


00:37:31.860 --> 00:37:34.240
while growing your critical thinking skills.


00:37:34.240 --> 00:37:36.760
Of course, you could just visit brilliant.org directly.


00:37:36.760 --> 00:37:38.760
Its URL is right there in the name, isn't it?


00:37:38.760 --> 00:37:41.720
But please use our link because you'll get something extra,


00:37:41.720 --> 00:37:44.820
20% off an annual premium subscription.


00:37:44.820 --> 00:37:47.600
So sign up today at talkbython.fm/brilliant


00:37:47.600 --> 00:37:49.660
and start a seven day free trial.


00:37:49.660 --> 00:37:51.960
That's talkbython.fm/brilliant.


00:37:51.960 --> 00:37:54.200
The link is in your podcast player show notes.


00:37:54.200 --> 00:37:56.800
Thank you to brilliant.org for supporting the show.


00:37:56.800 --> 00:38:00.720
- The other thing that people should be aware of


00:38:00.720 --> 00:38:02.620
that I don't think a lot of people know


00:38:02.620 --> 00:38:05.200
is the --run X fail flag.


00:38:05.200 --> 00:38:08.820
And this is especially useful like to just say,


00:38:08.820 --> 00:38:11.200
okay, screw it, ignore all the X fails


00:38:11.200 --> 00:38:13.400
and just run as if I haven't marked them X fail.


00:38:13.400 --> 00:38:15.540
>> Because maybe they are fixed and you don't know.


00:38:15.540 --> 00:38:17.220
Maybe they didn't take away the X fail.


00:38:17.220 --> 00:38:20.580
>> Yeah, but they might or you just want to make,


00:38:20.580 --> 00:38:23.180
like in a CI system for instance,


00:38:23.180 --> 00:38:25.660
like if you're running, most CI systems don't


00:38:25.660 --> 00:38:27.920
understand all of the different variations


00:38:27.920 --> 00:38:30.860
of outputs from pytest.


00:38:30.860 --> 00:38:32.340
They don't understand X passes,


00:38:32.340 --> 00:38:33.760
X fails, and skips,


00:38:33.760 --> 00:38:35.820
and all that sort of stuff.


00:38:35.820 --> 00:38:39.960
A lot of times then X fails and X passes just show up


00:38:39.960 --> 00:38:42.460
because it just passes and fails.


00:38:42.460 --> 00:38:45.260
So you don't want it just to pass everything.


00:38:45.260 --> 00:38:47.460
So run xfail, if you just want to say,


00:38:47.460 --> 00:38:49.700
I want to just run everything,


00:38:49.700 --> 00:38:51.960
and if there's any failure, I want to see it.


00:38:51.960 --> 00:38:53.980
So that's good.


00:38:53.980 --> 00:38:56.240
But anyway, just be careful with xfails.


00:38:56.240 --> 00:38:58.440
I've seen it confuse people.


00:38:58.440 --> 00:39:00.020
- Yeah, it makes sense.


00:39:00.020 --> 00:39:02.620
What's the story with skip and skipif?


00:39:02.620 --> 00:39:04.100
- I guess it's the same.


00:39:04.100 --> 00:39:05.860
I mean, like, why are you skipping something?


00:39:05.860 --> 00:39:07.480
I guess you have to be careful.


00:39:07.480 --> 00:39:10.040
So, skip is just skip this test.


00:39:10.040 --> 00:39:11.600
It doesn't run it at all.


00:39:11.600 --> 00:39:14.340
And skip if, you can put logic in there to say,


00:39:14.340 --> 00:39:15.820
like, well, if it's on,


00:39:15.820 --> 00:39:18.780
and so a great example of skip if is


00:39:18.780 --> 00:39:21.200
if you've got operating specific,


00:39:21.200 --> 00:39:24.000
like maybe if you have operating specific


00:39:24.000 --> 00:39:28.380
chunks of tests or chunks of code or something.


00:39:28.380 --> 00:39:31.000
- Skip if platform equals Darwin.


00:39:31.000 --> 00:39:31.840
- Yeah.


00:39:31.840 --> 00:39:32.660
- Skip the macOS ones.


00:39:32.660 --> 00:39:33.500
- Something like that.


00:39:33.500 --> 00:39:34.320
- You got no chance.


00:39:34.320 --> 00:39:38.220
Or if we're talking coverage in unit test again,


00:39:38.220 --> 00:39:41.040
for example, maybe you've got functionality


00:39:41.040 --> 00:39:44.520
that depends on Python 3.12,


00:39:44.520 --> 00:39:48.160
but you're also wanna test on Python 3.7.


00:39:48.160 --> 00:39:51.160
And so you know some code is only gonna run,


00:39:51.160 --> 00:39:52.400
you're running different code


00:39:52.400 --> 00:39:55.200
for the same functionality on two Pythons.


00:39:55.200 --> 00:39:57.620
You might wanna like have two tests


00:39:57.620 --> 00:40:00.240
and one of them gets run on Python 3.11


00:40:00.240 --> 00:40:02.480
and one of them or 12 and one of them gets run


00:40:02.480 --> 00:40:04.240
on all of the other versions.


00:40:04.240 --> 00:40:06.680
>> And you can use skip if to gate those.


00:40:06.680 --> 00:40:07.360
>> Interesting. >> Yeah.


00:40:07.360 --> 00:40:08.440
>> Okay, yeah, that's really cool.


00:40:08.440 --> 00:40:13.240
Hey, before we move on, we've got an interesting question or


00:40:13.240 --> 00:40:16.680
idea out here from Jeff in the audience, who also is a hardware tester.


00:40:16.680 --> 00:40:21.720
Said, I'd like to distribute fixtures in some way to people as a Python package.


00:40:21.720 --> 00:40:23.160
>> That's a great idea.


00:40:23.160 --> 00:40:24.600
>> Yeah, what do you think about that?


00:40:24.600 --> 00:40:25.920
>> I think that's a plugin.


00:40:25.920 --> 00:40:26.440
>> Okay.


00:40:26.440 --> 00:40:28.160
>> Let's jump to plugins then.


00:40:28.160 --> 00:40:30.000
>> Let's do it. >> Do I have a plugin section?


00:40:30.000 --> 00:40:31.320
I didn't, maybe I don't.


00:40:31.320 --> 00:40:33.840
Let's go to the top.


00:40:33.840 --> 00:40:35.380
- Notes for a new section?


00:40:35.380 --> 00:40:37.060
- Yeah, plugins.


00:40:37.060 --> 00:40:38.520
- It's a living blog post.


00:40:38.520 --> 00:40:39.800
- Yeah.


00:40:39.800 --> 00:40:41.760
Yes, I think it's important to be able


00:40:41.760 --> 00:40:43.320
to package them as plugins.


00:40:43.320 --> 00:40:46.040
And we don't cover, plugins are kind of


00:40:46.040 --> 00:40:47.520
a little advanced thing.


00:40:47.520 --> 00:40:51.760
I don't think we cover using plugins in the course,


00:40:51.760 --> 00:40:53.340
but in three and a half hours,


00:40:53.340 --> 00:40:55.420
I don't cover how to write a plugin.


00:40:55.420 --> 00:40:57.400
There's a ton of plugins on, yeah,


00:40:57.400 --> 00:41:00.160
you've got the pytest plugin list on pytest.


00:41:00.160 --> 00:41:01.920
But also you can search for,


00:41:01.920 --> 00:41:04.000
they're usually pytest dash something.


00:41:04.000 --> 00:41:06.320
So you can search for that on PyPI as well


00:41:06.320 --> 00:41:07.520
and see a bunch of plugins.


00:41:07.520 --> 00:41:09.740
- Yep, you even have some out there for yourself, right?


00:41:09.740 --> 00:41:10.660
- Quite a few, actually. - There's a lot.


00:41:10.660 --> 00:41:12.320
I mean, I'm scrolling and scrolling,


00:41:12.320 --> 00:41:14.360
I'm still in the dash A.


00:41:14.360 --> 00:41:16.000
(laughing)


00:41:16.000 --> 00:41:18.240
That's a lot of content there.


00:41:18.240 --> 00:41:20.240
So I guess one tip is people should just go


00:41:20.240 --> 00:41:21.600
scroll through that list and go,


00:41:21.600 --> 00:41:23.440
look at all these things they could just


00:41:23.440 --> 00:41:25.760
fixture into their code, right?


00:41:25.760 --> 00:41:29.920
- Or, one option is to go to PyCascades this year


00:41:29.920 --> 00:41:33.640
and watch my talk because I'm giving a talk at PyCascades


00:41:33.640 --> 00:41:36.720
for about packaging pytest fixtures.


00:41:36.720 --> 00:41:37.560
- That's cool.


00:41:37.560 --> 00:41:38.380
When is that?


00:41:38.380 --> 00:41:39.220
- It's in March.


00:41:39.220 --> 00:41:40.040
I should look it up.


00:41:40.040 --> 00:41:40.880
- Nice.


00:41:40.880 --> 00:41:41.720
- Real time.


00:41:41.720 --> 00:41:42.540
- Yeah, I'm pretty sure those videos will be online


00:41:42.540 --> 00:41:46.080
afterwards if people are not at the conference in Vancouver.


00:41:46.080 --> 00:41:47.360
Although Vancouver is lovely.


00:41:47.360 --> 00:41:48.560
- Oh yeah, they'll be online.


00:41:48.560 --> 00:41:51.000
And I'm also gonna publish the slides.


00:41:51.000 --> 00:41:52.600
I just got the slides done.


00:41:52.600 --> 00:41:55.320
So it's March 18th through the 20th.


00:41:55.320 --> 00:41:56.840
And I think mine's on the 19th.


00:41:56.840 --> 00:41:57.680
- All right, nice.


00:41:57.680 --> 00:41:58.500
- So anyway.


00:41:58.500 --> 00:41:59.680
- What section do you want to do next?


00:41:59.680 --> 00:42:01.040
we got a little bit more time.


00:42:01.040 --> 00:42:03.400
- So we talked about markers and fixtures.


00:42:03.400 --> 00:42:05.800
Parameterization is definitely something


00:42:05.800 --> 00:42:07.400
I think people should learn about.


00:42:07.400 --> 00:42:10.440
And because, especially if you,


00:42:10.440 --> 00:42:12.480
I've seen a lot of test writing,


00:42:12.480 --> 00:42:14.760
utilize copy, paste, modify.


00:42:14.760 --> 00:42:17.940
And it should be a red flag for all software engineers,


00:42:17.940 --> 00:42:20.560
but for some reason it happens a lot


00:42:20.560 --> 00:42:23.500
in test code of copy, paste, modify.


00:42:23.500 --> 00:42:26.920
You got a bunch of tests that are kind of the same,


00:42:26.920 --> 00:42:30.000
and you just take one that's similar to what you need


00:42:30.000 --> 00:42:31.320
and change it.


00:42:31.320 --> 00:42:34.440
And you end up with a lot of test code that way.


00:42:34.440 --> 00:42:38.200
And one way to fix it is to use parameterization.


00:42:38.200 --> 00:42:39.800
- Yeah, anytime you've got a lot of,


00:42:39.800 --> 00:42:42.560
you're like, this is happening over and over again


00:42:42.560 --> 00:42:45.120
in my code, it should be, it's a code smell, right?


00:42:45.120 --> 00:42:46.880
You should know there's some refactoring.


00:42:46.880 --> 00:42:49.600
Or alternatively, Brian, you could get


00:42:49.600 --> 00:42:52.040
this fancy new Stack Overflow keyboard.


00:42:52.040 --> 00:42:53.880
(Brian laughs)


00:42:53.880 --> 00:42:55.240
- That's awesome.


00:42:55.240 --> 00:42:56.580
>> Which has three keys.


00:42:56.580 --> 00:42:58.300
>> That's exactly. Go ahead.


00:42:58.300 --> 00:43:00.900
>> Three keys, one of them goes to Stack Overflow,


00:43:00.900 --> 00:43:02.860
one of them is copy,


00:43:02.860 --> 00:43:06.740
and one of them is C and V, so copy and paste.


00:43:06.740 --> 00:43:08.800
That's awesome.


00:43:08.800 --> 00:43:10.940
>> Power of copy and paste, indeed.


00:43:10.940 --> 00:43:13.460
>> I assume you have to have a mouse connected


00:43:13.460 --> 00:43:15.820
to select the stuff to.


00:43:15.820 --> 00:43:16.720
>> Yeah, probably.


00:43:16.720 --> 00:43:20.840
>> It really does happen a lot of people like copy another test,


00:43:20.840 --> 00:43:23.980
change what they need, and then run it.


00:43:23.980 --> 00:43:26.020
Now there's a bunch of problems with that.


00:43:26.020 --> 00:43:29.720
One is people sometimes forget to change the test name.


00:43:29.720 --> 00:43:34.600
And then the test, you can have two functions with the same name in Python


00:43:34.600 --> 00:43:37.760
and it just like, it just like runs the second one.


00:43:37.760 --> 00:43:41.520
So that's one of the reasons why I'd like to also run coverage.


00:43:41.520 --> 00:43:44.120
If I'm going to run coverage, I want coverage on my tests too.


00:43:44.120 --> 00:43:47.720
So I, and to make sure I have a hundred percent test code coverage.


00:43:47.720 --> 00:43:50.840
So what happens when you run into that scenario on pytest?


00:43:50.840 --> 00:43:53.480
Does it just pretend the first one wasn't there


00:43:53.480 --> 00:43:55.080
and it got overwritten before it got to it?


00:43:55.080 --> 00:43:57.640
- Yeah, just like in any other Python module,


00:43:57.640 --> 00:43:59.840
if you write the function name again,


00:43:59.840 --> 00:44:01.800
and even if you have different parameters--


00:44:01.800 --> 00:44:03.680
- It's so easy to do, it doesn't care.


00:44:03.680 --> 00:44:04.520
- Python doesn't care.


00:44:04.520 --> 00:44:07.360
- So different web frameworks will handle this differently.


00:44:07.360 --> 00:44:10.280
Flask will throw an error and say,


00:44:10.280 --> 00:44:12.880
you've tried to use this function before,


00:44:12.880 --> 00:44:15.800
no, and you do an app.get or something on it


00:44:15.800 --> 00:44:16.720
with the decorator.


00:44:16.720 --> 00:44:19.880
But for example, Pyramid, which I've used a lot,


00:44:19.880 --> 00:44:21.120
It just erases it.


00:44:21.120 --> 00:44:23.100
So you just end up getting like 404s


00:44:23.100 --> 00:44:24.200
for whatever was there before.


00:44:24.200 --> 00:44:26.280
You're like, "Whoa, it was just working.


00:44:26.280 --> 00:44:27.460
"Where did it go?


00:44:27.460 --> 00:44:29.320
"I didn't even touch that part of the program


00:44:29.320 --> 00:44:30.180
"and it's just gone.


00:44:30.180 --> 00:44:31.880
"It's like, I don't understand."


00:44:31.880 --> 00:44:35.640
You know, and it's, I can only see that it's even


00:44:35.640 --> 00:44:38.340
less obvious with pytest.


00:44:38.340 --> 00:44:40.240
Like that, you would, how much would you notice


00:44:40.240 --> 00:44:41.640
when it goes dot, dot, dot, dot, dot,


00:44:41.640 --> 00:44:44.440
that like it didn't increment a dot when you added a test?


00:44:44.440 --> 00:44:45.280
Might not.


00:44:45.280 --> 00:44:46.100
(laughing)


00:44:46.100 --> 00:44:49.040
- No, well, yeah, it's dangerous.


00:44:49.040 --> 00:44:51.200
But okay, so you get around that.


00:44:51.200 --> 00:44:53.720
It's the other thing of just like thinking about it.


00:44:53.720 --> 00:44:56.520
So if I write a test to begin with,


00:44:56.520 --> 00:44:59.360
and I think, well, I've set up like,


00:44:59.360 --> 00:45:01.760
okay, so if I go to this web,


00:45:01.760 --> 00:45:04.360
really I'm just making like a webpage thing.


00:45:04.360 --> 00:45:06.720
I just wanna make sure this page gets a 200.


00:45:06.720 --> 00:45:07.800
Is it 200, right?


00:45:07.800 --> 00:45:09.360
For the good? - Yeah, yep.


00:45:09.360 --> 00:45:10.320
Yep. - And I wanna make sure


00:45:10.320 --> 00:45:11.980
that gets 200 in the titles, right?


00:45:11.980 --> 00:45:13.200
Or something like that.


00:45:13.200 --> 00:45:14.960
Now, I might have just a list.


00:45:14.960 --> 00:45:16.200
I mean, that would be an easy test


00:45:16.200 --> 00:45:20.080
just to make sure all my pages, normal pages are alive,


00:45:20.080 --> 00:45:22.320
is to just go through and test all those.


00:45:22.320 --> 00:45:24.180
Now I could either just have a list


00:45:24.180 --> 00:45:25.920
of all the different pages I wanna go to


00:45:25.920 --> 00:45:27.480
and just ping through those.


00:45:27.480 --> 00:45:29.880
That could be a loop within my test,


00:45:29.880 --> 00:45:31.960
but that's a loop within a test


00:45:31.960 --> 00:45:32.940
at the assert at the bottom


00:45:32.940 --> 00:45:35.280
that doesn't count as the assert at the bottom


00:45:35.280 --> 00:45:37.200
because you're asserting through the whole thing.


00:45:37.200 --> 00:45:39.600
Mace will just make that a parameterization


00:45:39.600 --> 00:45:43.840
and go through all the different pages you wanna hit.


00:45:43.840 --> 00:45:45.040
And for each of those pages,


00:45:45.040 --> 00:45:46.760
make sure it's a 200.


00:45:46.760 --> 00:45:48.960
And then you can also like have the title


00:45:48.960 --> 00:45:50.960
in the parameterization to say,


00:45:50.960 --> 00:45:52.880
this is the page, this is the title.


00:45:52.880 --> 00:45:55.640
Now for each of those, go through and test it.


00:45:55.640 --> 00:45:57.020
And those are different tests.


00:45:57.020 --> 00:46:00.240
And it's gonna be almost as easy to write one test


00:46:00.240 --> 00:46:04.360
as it is to write now a bunch of test cases


00:46:04.360 --> 00:46:05.680
with parameterization.


00:46:05.680 --> 00:46:09.320
But pytest has a whole bunch of cool parameterization tricks.


00:46:09.320 --> 00:46:11.680
You can do function parameterization,


00:46:11.680 --> 00:46:13.680
you can parameterize a fixture,


00:46:13.680 --> 00:46:16.360
You can even use pytest generate tests


00:46:16.360 --> 00:46:18.920
to do some fancy parameterization.


00:46:18.920 --> 00:46:20.360
For the most part, if you're new to it,


00:46:20.360 --> 00:46:22.480
stick with function parameterization.


00:46:22.480 --> 00:46:24.760
It's powerful and hopefully that's all you need.


00:46:24.760 --> 00:46:27.040
- Yeah, if you've got all these different cases to test.


00:46:27.040 --> 00:46:30.400
I mean, the value of testing often


00:46:30.400 --> 00:46:31.700
is to give it the good value


00:46:31.700 --> 00:46:33.240
and see the good value comes out.


00:46:33.240 --> 00:46:34.080
- Yeah. - That's true.


00:46:34.080 --> 00:46:35.240
But it's also really valuable


00:46:35.240 --> 00:46:36.840
to give it all those weird edge cases


00:46:36.840 --> 00:46:38.920
where you wanna check boundaries.


00:46:38.920 --> 00:46:41.320
Like if I give it one less than it should have,


00:46:41.320 --> 00:46:43.280
it should tell me that's an error instead of crash.


00:46:43.280 --> 00:46:45.600
if I give it something, you know,


00:46:45.600 --> 00:46:47.720
like just all the little weird situations.


00:46:47.720 --> 00:46:49.200
So testing all the failing cases


00:46:49.200 --> 00:46:54.200
and having those scenarios as a parameterized story is nice.


00:46:54.200 --> 00:46:56.720
- And one of the comments, which I have seen before,


00:46:56.720 --> 00:46:59.780
and I kind of agree with, is that my code is dry


00:46:59.780 --> 00:47:00.960
and my tests are wet.


00:47:00.960 --> 00:47:05.280
What that means is because dry testing,


00:47:05.280 --> 00:47:09.120
people can go overboard with dry


00:47:09.120 --> 00:47:12.320
to the point where you can't understand what's going on.


00:47:12.320 --> 00:47:14.420
And so for, especially for tests,


00:47:14.420 --> 00:47:19.240
you want tests to tell a story of I'm doing this thing


00:47:19.240 --> 00:47:21.460
and I did this other action.


00:47:21.460 --> 00:47:24.480
And then now I can tell that it works because of this.


00:47:24.480 --> 00:47:26.840
And if you break that story up too much,


00:47:26.840 --> 00:47:30.640
then you don't know, you don't know what the story is.


00:47:30.640 --> 00:47:33.280
If you hide all of your asserts in a helper function


00:47:33.280 --> 00:47:36.060
that just says like check stuff,


00:47:36.060 --> 00:47:37.840
you don't know what you're checking


00:47:37.840 --> 00:47:39.420
and it hides it too much.


00:47:39.420 --> 00:47:40.520
If you're gonna do that,


00:47:40.520 --> 00:47:44.520
make sure that you like name it something that is meaningful.


00:47:44.520 --> 00:47:47.280
And I like to have all of my assert helpers


00:47:47.280 --> 00:47:48.340
be start with assert.


00:47:48.340 --> 00:47:52.600
So like I could say, assert 200 and correct title,


00:47:52.600 --> 00:47:53.660
for instance, you could do that.


00:47:53.660 --> 00:47:54.720
That'd be fine.


00:47:54.720 --> 00:47:57.080
But one of the reasons for parameterization


00:47:57.080 --> 00:48:00.040
isn't just to type less,


00:48:00.040 --> 00:48:02.000
it's to be focused on what's failing.


00:48:02.000 --> 00:48:05.200
So let's say in that case I had before,


00:48:05.200 --> 00:48:08.400
my test failed with the loop and I could say, well, okay,


00:48:08.400 --> 00:48:12.880
So one page on my website isn't working.


00:48:12.880 --> 00:48:13.720
Which one?


00:48:13.720 --> 00:48:14.540
I have to go figure that out.


00:48:14.540 --> 00:48:15.940
I have to look at the error message.


00:48:15.940 --> 00:48:18.960
But if I had them iterated on the page name,


00:48:18.960 --> 00:48:21.920
I could go, oh, my contact one isn't returning.


00:48:21.920 --> 00:48:23.960
So there's something wrong with my contact page.


00:48:23.960 --> 00:48:25.520
And I know exactly where to go.


00:48:25.520 --> 00:48:27.240
Isolating the test failure is good.


00:48:27.240 --> 00:48:29.580
- Yeah, there was a comment before about


00:48:29.580 --> 00:48:31.000
if you have multiple search,


00:48:31.000 --> 00:48:33.400
you might not see all of the errors,


00:48:33.400 --> 00:48:34.640
all the details about that.


00:48:34.640 --> 00:48:35.960
And we talked a little bit about that too.


00:48:35.960 --> 00:48:40.960
And this helps show the status for the different parameters.


00:48:40.960 --> 00:48:43.480
Instead of I just loop through all the options


00:48:43.480 --> 00:48:45.080
and make sure they all pass or there's an error.


00:48:45.080 --> 00:48:47.880
- Yeah, and look like a website, for instance,


00:48:47.880 --> 00:48:50.400
there might be two pages.


00:48:50.400 --> 00:48:51.920
Whereas if you had them all in a loop,


00:48:51.920 --> 00:48:52.840
you'd only see the one.


00:48:52.840 --> 00:48:55.160
You're like, oh, contact pages for it was broken.


00:48:55.160 --> 00:48:56.000
I'll go fix that.


00:48:56.000 --> 00:48:58.380
And you come back, oh, something else is broken.


00:48:58.380 --> 00:49:01.360
Whereas if it had like three failures,


00:49:01.360 --> 00:49:04.280
you'd be like, oh, like seven of them are failing?


00:49:04.280 --> 00:49:06.480
all of a sudden something else must be wrong.


00:49:06.480 --> 00:49:09.840
>> Yeah, related on that same side.


00:49:09.840 --> 00:49:14.600
In my mind, this is like it taken to the maximum of parameterization is


00:49:14.600 --> 00:49:18.160
things like hypothesis where you don't even tell what the parameters.


00:49:18.160 --> 00:49:22.680
You're like, "Vary some ideas and give it to the test."


00:49:22.680 --> 00:49:24.920
What do you think about this? Do you find this useful for you?


00:49:24.920 --> 00:49:27.640
>> I do. Hypothesis is an awesome tool.


00:49:27.640 --> 00:49:33.200
It helps you think about a problem differently because you have to think about,


00:49:33.200 --> 00:49:37.000
what are the, because you can't say, like, add,


00:49:37.000 --> 00:49:40.040
you can't test add by making sure that it returns four,


00:49:40.040 --> 00:49:43.080
because it's only going to return four in particular cases.


00:49:43.080 --> 00:49:44.460
But you can say,


00:49:44.460 --> 00:49:48.400
"Hmm, maybe test a whole bunch of positive numbers,


00:49:48.400 --> 00:49:51.320
and I want to make sure that the result is positive."


00:49:51.320 --> 00:49:55.360
There's like these aspects of your system that you can test for.


00:49:55.360 --> 00:49:58.880
But the other thing that Pythopothesis is awesome at,


00:49:58.880 --> 00:50:01.160
isn't actually testing the output,


00:50:01.160 --> 00:50:04.040
it's just making sure your code doesn't blow up.


00:50:04.040 --> 00:50:06.200
So throwing a hypothesis at systems,


00:50:06.200 --> 00:50:09.240
I think the first awesome thing about it


00:50:09.240 --> 00:50:11.640
is just it tests some corner cases


00:50:11.640 --> 00:50:13.640
that your code might not handle right.


00:50:13.640 --> 00:50:16.760
So anything that throws an exception


00:50:16.760 --> 00:50:19.440
is gonna get dealt with, as you know,


00:50:19.440 --> 00:50:22.160
pytest is gonna fail because an exception's hit.


00:50:22.160 --> 00:50:23.440
So that helps.


00:50:23.440 --> 00:50:25.520
- Maybe not everyone is familiar with the hypothesis.


00:50:25.520 --> 00:50:27.160
Maybe just tell them like a little bit


00:50:27.160 --> 00:50:29.360
how it works and how it's like primitization,


00:50:29.360 --> 00:50:30.200
but not exactly.


00:50:30.200 --> 00:50:32.360
- Well, hypothesis is just going,


00:50:32.360 --> 00:50:36.160
so you set up strategies and different things around,


00:50:36.160 --> 00:50:38.440
and they're decorators you put on top of your test.


00:50:38.440 --> 00:50:41.140
And then like, you've got an example of like,


00:50:41.140 --> 00:50:45.800
given a string that's text, and then you have S.


00:50:45.800 --> 00:50:50.160
So somehow hypothesis will fill in the variables


00:50:50.160 --> 00:50:52.040
that you put there.


00:50:52.040 --> 00:50:54.440
Like normally if a test had a parameter,


00:50:54.440 --> 00:50:57.220
it would either be a parameterization or a fixture.


00:50:57.220 --> 00:51:00.040
But hypothesis utilizes that also


00:51:00.040 --> 00:51:03.120
and fills it in with hypothesis values.


00:51:03.120 --> 00:51:06.240
And so if you give it, if you say it's a string,


00:51:06.240 --> 00:51:07.640
it'll come up with a whole bunch of them


00:51:07.640 --> 00:51:10.600
and it'll run your test a whole bunch of times based on,


00:51:10.600 --> 00:51:12.120
and I don't remember what the default is,


00:51:12.120 --> 00:51:13.760
but it's quite a few.


00:51:13.760 --> 00:51:16.160
It also checks the time, I think.


00:51:16.160 --> 00:51:18.520
It doesn't make sure it doesn't like run for hours


00:51:18.520 --> 00:51:19.340
or something like that,


00:51:19.340 --> 00:51:22.020
but you can tell it how robust to do.


00:51:22.020 --> 00:51:24.440
And it just like makes up stuff.


00:51:24.440 --> 00:51:26.440
But the people behind the hypothesis


00:51:26.440 --> 00:51:28.060
actually are pretty good at coming up


00:51:28.060 --> 00:51:31.620
with some decent test cases that break a lot of kinds of software.


00:51:31.620 --> 00:51:36.820
That bit that we think of as the old style that you think of as


00:51:36.820 --> 00:51:39.860
a test engineer of coming up with wacky values,


00:51:39.860 --> 00:51:41.180
you don't need that anymore.


00:51:41.180 --> 00:51:44.380
You can just have hypothesis come up with wacky values for you.


00:51:44.380 --> 00:51:46.500
>> Right. Think of strategies of,


00:51:46.500 --> 00:51:50.980
well, these scenarios we should try to run through and just have it automatic.


00:51:50.980 --> 00:51:54.300
>> Things that you don't know that are constraints on your system,


00:51:54.300 --> 00:51:59.020
Like maybe your input system, hypothesis tells you,


00:51:59.020 --> 00:52:01.460
guess what, it like breaks on all German names


00:52:01.460 --> 00:52:05.220
or something like that, or Unicode.


00:52:05.220 --> 00:52:07.580
And you're like, oh, yeah, actually I don't,


00:52:07.580 --> 00:52:10.260
that's neat, but I don't actually expect it


00:52:10.260 --> 00:52:11.900
to ever get called with Unicode.


00:52:11.900 --> 00:52:15.060
So you can restrict the strategies and stuff.


00:52:15.060 --> 00:52:17.100
- Yeah, last thing on this one.


00:52:17.100 --> 00:52:18.860
Jeff asks, how reproducible are these?


00:52:18.860 --> 00:52:20.300
And I see that hypothesis says,


00:52:20.300 --> 00:52:23.140
it'll remember failing tests, yeah.


00:52:23.140 --> 00:52:23.980
- I can't hear you.


00:52:23.980 --> 00:52:27.260
- Yeah, just maybe the last thing on hypothesis here is,


00:52:27.260 --> 00:52:28.100
you know, Jeff asks,


00:52:28.100 --> 00:52:29.900
"How reproducible are tests with hypothesis?"


00:52:29.900 --> 00:52:30.740
- I don't know.


00:52:30.740 --> 00:52:33.100
- They do say that it remembers the failing examples,


00:52:33.100 --> 00:52:36.100
so into like SQLite database or something.


00:52:36.100 --> 00:52:40.260
So maybe it'll replay that, essentially.


00:52:40.260 --> 00:52:41.620
And I'll try the failing ones before,


00:52:41.620 --> 00:52:42.580
but I haven't played with that either.


00:52:42.580 --> 00:52:45.780
- I think it reports like some seed thing or something


00:52:45.780 --> 00:52:49.060
that you can reseed it to be the same run


00:52:49.060 --> 00:52:49.900
or something like that.


00:52:49.900 --> 00:52:51.940
- There's a whole section on reproducing failures here.


00:52:51.940 --> 00:52:53.180
And it does say you can provide,


00:52:53.180 --> 00:52:55.720
one of the things you can say is provide examples of,


00:52:55.720 --> 00:52:57.520
in addition to the random stuff you pick,


00:52:57.520 --> 00:52:58.540
please do these things.


00:52:58.540 --> 00:53:00.900
And so I suppose you could take a failing one


00:53:00.900 --> 00:53:01.740
and put it in there,


00:53:01.740 --> 00:53:04.960
or if you always do it with the same seed,


00:53:04.960 --> 00:53:07.960
it's randomness becomes deterministic.


00:53:07.960 --> 00:53:12.260
Which is kind of odd, but.


00:53:12.260 --> 00:53:14.840
- Pseudo-random is part of CS, yes.


00:53:14.840 --> 00:53:15.740
- Yes, indeed.


00:53:15.740 --> 00:53:18.840
All right, well, Brian, we're pretty short on time.


00:53:18.840 --> 00:53:20.380
What else do you want to throw out there real quick


00:53:20.380 --> 00:53:21.220
before we--


00:53:21.220 --> 00:53:25.000
I want to circle back to the beginning and just say,


00:53:25.000 --> 00:53:27.800
pytest can do a whole bunch of cool stuff.


00:53:27.800 --> 00:53:29.800
Don't do it all at once.


00:53:29.800 --> 00:53:32.060
Gradually add bells and whistles,


00:53:32.060 --> 00:53:34.060
especially if you're working on a team,


00:53:34.060 --> 00:53:36.560
because it's a different mindset.


00:53:36.560 --> 00:53:39.800
So make sure that the team is all up to speed.


00:53:39.800 --> 00:53:42.300
You want to make sure that, like all software,


00:53:42.300 --> 00:53:44.300
don't design a system so complex


00:53:44.300 --> 00:53:45.720
that you're not smart enough to debug it.


00:53:45.720 --> 00:53:46.720
I love thinking about that.


00:53:46.720 --> 00:53:47.800
That's a really good way to put it,


00:53:47.800 --> 00:53:50.920
because if you write the most clever code


00:53:50.920 --> 00:53:54.920
that you can, you're right at the limit of your ability to like keep it in your mind


00:53:54.920 --> 00:53:57.620
and understand it and debugging code is harder than writing code.


00:53:57.620 --> 00:54:03.860
So you're not qualified to write in codes that you can't write code that your body can't


00:54:03.860 --> 00:54:05.460
handle, pay the check for or whatever.


00:54:05.460 --> 00:54:10.060
Yeah, I can't remember who said that first, but it's definitely very true.


00:54:10.060 --> 00:54:11.060
It is indeed.


00:54:11.060 --> 00:54:12.060
Yeah.


00:54:12.060 --> 00:54:13.060
Awesome.


00:54:13.060 --> 00:54:14.060
Well, thank you for putting this together.


00:54:14.060 --> 00:54:15.060
Obviously, I'll link to this in the show notes.


00:54:15.060 --> 00:54:18.340
People can check out your course, they can check out your book.


00:54:18.340 --> 00:54:21.860
And yeah, it's all your other pytest things.


00:54:21.860 --> 00:54:24.500
I'm looking forward to having test and code back.


00:54:24.500 --> 00:54:28.380
And also everybody should, that's listening here, should be listening on Python Bytes.


00:54:28.380 --> 00:54:29.380
I think you'll enjoy it.


00:54:29.380 --> 00:54:30.380
I agree.


00:54:30.380 --> 00:54:31.380
A lot of fun over there.


00:54:31.380 --> 00:54:32.380
All right.


00:54:32.380 --> 00:54:33.380
Thanks a lot, Michael.


00:54:33.380 --> 00:54:34.380
Yeah.


00:54:34.380 --> 00:54:35.380
Thank you for being here, Brian.


00:54:35.380 --> 00:54:36.380
Thank you everyone for listening.


00:54:36.380 --> 00:54:37.380
See y'all later.


00:54:37.380 --> 00:54:39.740
This has been another episode of Talk Python to Me.


00:54:39.740 --> 00:54:41.660
Thank you to our sponsors.


00:54:41.660 --> 00:54:43.020
Be sure to check out what they're offering.


00:54:43.020 --> 00:54:45.400
It really helps support the show.


00:54:45.400 --> 00:54:48.640
Don't miss out on the opportunity to level up your startup game with Microsoft for Startups


00:54:48.640 --> 00:54:49.720
Founders Hub.


00:54:49.720 --> 00:54:55.080
Get over six figures in benefits including Azure credits and access to open AIs, APIs.


00:54:55.080 --> 00:54:58.480
Apply now at talkpython.fm/foundershub.


00:54:58.480 --> 00:55:03.520
Stay on top of technology and raise your value to employers or just learn something fun in


00:55:03.520 --> 00:55:05.800
STEM at brilliant.org.


00:55:05.800 --> 00:55:11.760
Visit talkpython.fm/brilliant to get 20% off an annual premium subscription.


00:55:11.760 --> 00:55:14.040
Want to level up your Python?


00:55:14.040 --> 00:55:18.160
We have one of the largest catalogs of Python video courses over at Talk Python.


00:55:18.160 --> 00:55:23.240
Our content ranges from true beginners to deeply advanced topics like memory and async.


00:55:23.240 --> 00:55:25.800
And best of all, there's not a subscription in sight.


00:55:25.800 --> 00:55:28.880
Check it out for yourself at training.talkpython.fm.


00:55:28.880 --> 00:55:33.520
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.


00:55:33.520 --> 00:55:34.880
We should be right at the top.


00:55:34.880 --> 00:55:40.400
You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the Direct


00:55:40.400 --> 00:55:47.200
rss feed at /rss on talkpython.fm. We're live streaming most of our recordings these days.


00:55:47.200 --> 00:55:50.640
If you want to be part of the show and have your comments featured on the air,


00:55:50.640 --> 00:55:56.160
be sure to subscribe to our YouTube channel at talkpython.fm/youtube. This is your host,


00:55:56.160 --> 00:56:00.080
Michael Kennedy. Thanks so much for listening. I really appreciate it. Now get out there and


00:56:00.080 --> 00:56:01.360
and write some Python code.


00:56:01.360 --> 00:56:04.720
[MUSIC PLAYING]


00:56:04.720 --> 00:56:18.720
[Music]


00:56:18.720 --> 00:56:21.300
(upbeat music)


00:56:21.300 --> 00:56:31.300
[BLANK_AUDIO]

