WEBVTT

00:00:00.000 --> 00:00:03.120
Have you ever waited around for a pip to do its thing

00:00:03.120 --> 00:00:06.280
while installing packages or syncing virtual environments

00:00:06.280 --> 00:00:09.760
or even through some higher level tools such as pip tools?

00:00:09.760 --> 00:00:12.160
Then you'll be very excited to hear about

00:00:12.160 --> 00:00:14.740
what just got announced from Astral,

00:00:14.740 --> 00:00:18.080
a pip compatible CLI tool called UV.

00:00:18.080 --> 00:00:20.640
It's like pip, but a hundred times faster.

00:00:20.640 --> 00:00:22.320
Charlie Marsh from Ruff fame

00:00:22.320 --> 00:00:24.840
and the founder of Astral is here to dive in.

00:00:24.840 --> 00:00:26.120
Let's go.

00:00:26.120 --> 00:00:28.680
This is "Talk Python to Me" episode 453

00:00:28.680 --> 00:00:31.640
recorded March 12th, 2024.

00:00:31.640 --> 00:00:34.220
(upbeat music)

00:00:34.220 --> 00:00:47.800
Welcome to "Talk Python to Me"

00:00:47.800 --> 00:00:49.720
a weekly podcast on Python.

00:00:49.720 --> 00:00:51.520
This is your host, Michael Kennedy.

00:00:51.520 --> 00:00:53.880
Follow me on Mastodon where I'm @mkennedy

00:00:53.880 --> 00:00:56.600
and follow the podcast using @talkpython

00:00:56.600 --> 00:00:59.160
both on mastodon.org.

00:00:59.160 --> 00:01:01.280
Keep up with the show and listen to over seven years

00:01:01.280 --> 00:01:04.400
of past episodes at talkpython.fm.

00:01:04.400 --> 00:01:06.480
We've started streaming most of our episodes

00:01:06.480 --> 00:01:07.880
live on YouTube.

00:01:07.880 --> 00:01:09.100
Subscribe to our YouTube channel

00:01:09.100 --> 00:01:11.500
over at talkpython.fm/youtube

00:01:11.500 --> 00:01:13.700
to get notified about upcoming shows

00:01:13.700 --> 00:01:15.880
and be part of that episode.

00:01:15.880 --> 00:01:18.680
This episode is sponsored by Neo4j.

00:01:18.680 --> 00:01:21.520
It's time to stop asking relational databases

00:01:21.520 --> 00:01:23.320
to do more than they were made for

00:01:23.320 --> 00:01:26.860
and simplify complex data models with graphs.

00:01:26.860 --> 00:01:29.200
Check out the sample FastAPI project

00:01:29.200 --> 00:01:33.440
and see what Neo4j native graph database can do for you.

00:01:33.440 --> 00:01:38.320
Find out more at talkpython.fm/neo4j.

00:01:38.320 --> 00:01:40.440
And it's also brought to you by us

00:01:40.440 --> 00:01:42.300
over at Talk Python Training.

00:01:42.300 --> 00:01:47.200
Did you know that we have over 250 hours of Python courses?

00:01:47.200 --> 00:01:48.040
Yeah, that's right.

00:01:48.040 --> 00:01:50.640
Check them out at talkpython.fm/courses.

00:01:52.040 --> 00:01:53.540
Hey all, I have a quick announcement

00:01:53.540 --> 00:01:55.460
before we jump into the conversation with Charlie

00:01:55.460 --> 00:01:57.160
and sticking with the theme of the episode,

00:01:57.160 --> 00:01:58.320
I'll keep it quick.

00:01:58.320 --> 00:02:01.600
Over at Talk Python, we just released a new free course.

00:02:01.600 --> 00:02:04.200
It's all about working with audio in Python,

00:02:04.200 --> 00:02:05.600
converting it to text,

00:02:05.600 --> 00:02:08.960
applying all sorts of AI awesome sauce and more.

00:02:08.960 --> 00:02:10.560
We end up with a dynamic web app

00:02:10.560 --> 00:02:14.180
that lets you have a ChatGPT style Q&A

00:02:14.180 --> 00:02:16.940
with a podcast, guests and hosts

00:02:16.940 --> 00:02:19.200
starting from just the RSS feed.

00:02:19.200 --> 00:02:20.920
It's really mind blowing.

00:02:20.920 --> 00:02:22.640
As a sweet bonus, the course shows you

00:02:22.640 --> 00:02:25.280
a bunch of hands-on examples of FastAPI,

00:02:25.280 --> 00:02:28.120
HTMX, Beanie, MongoDB and more.

00:02:28.120 --> 00:02:29.020
I hope you love it.

00:02:29.020 --> 00:02:33.120
Give it a look as it is 100% free, no strings attached.

00:02:33.120 --> 00:02:34.800
The link is on the episode page,

00:02:34.800 --> 00:02:36.160
in your podcast player show notes

00:02:36.160 --> 00:02:38.660
and at talkpython.fm/courses.

00:02:38.660 --> 00:02:41.340
Hey Charlie.

00:02:41.340 --> 00:02:42.160
- Hey.

00:02:42.160 --> 00:02:43.000
- Welcome.

00:02:43.000 --> 00:02:44.360
- Yeah, thanks so much for having me back on the show.

00:02:44.360 --> 00:02:45.340
I really appreciate it.

00:02:45.340 --> 00:02:48.340
- Yes, it's really great to have you back on the show.

00:02:48.340 --> 00:02:51.680
You and your team are doing awesome work these days

00:02:51.680 --> 00:02:53.840
and making a big dent in Python.

00:02:53.840 --> 00:02:55.160
- Thank you, thank you.

00:02:55.160 --> 00:02:56.720
Hopefully a good dent, I guess.

00:02:56.720 --> 00:02:58.080
(laughing)

00:02:58.080 --> 00:03:00.400
- Yeah, I guess you could make a good dent or a bad dent.

00:03:00.400 --> 00:03:02.040
But no, I meant that in a good way.

00:03:02.040 --> 00:03:03.160
Definitely in a good way.

00:03:03.160 --> 00:03:04.000
- I appreciate it.

00:03:04.000 --> 00:03:05.860
- Yeah, yeah, I think excellent work.

00:03:05.860 --> 00:03:08.240
It's really, it's kind of surprising

00:03:08.240 --> 00:03:10.520
how some of these tools just come in

00:03:10.520 --> 00:03:12.680
and just catch fire in a way.

00:03:12.680 --> 00:03:13.800
I don't know how you felt about it,

00:03:13.800 --> 00:03:16.880
but it seemed more than I would have expected.

00:03:16.880 --> 00:03:19.360
I mean, I did not expect your things to be popular,

00:03:19.360 --> 00:03:22.220
but they became really popular really quickly.

00:03:22.220 --> 00:03:23.120
(laughing)

00:03:23.120 --> 00:03:26.680
- Yeah, yeah, I mean, it was different with Ruff and with UV.

00:03:26.680 --> 00:03:30.340
This sort of context around it has been pretty different

00:03:30.340 --> 00:03:33.420
because with Ruff, like when I started working on Ruff,

00:03:33.420 --> 00:03:35.380
no one knew who I was or had any reason

00:03:35.380 --> 00:03:37.300
to care about what I was doing.

00:03:37.300 --> 00:03:41.140
And the project just grew over time.

00:03:41.140 --> 00:03:44.220
And then I knew that when we were working on UV,

00:03:44.220 --> 00:03:46.140
there would just be a lot more of an expectation

00:03:46.140 --> 00:03:47.620
around like anything we build.

00:03:47.620 --> 00:03:49.660
- Yeah, the spotlight was already shining, right?

00:03:49.660 --> 00:03:51.140
- A little bit, yeah, yeah.

00:03:51.140 --> 00:03:53.860
And that's awesome 'cause it means our stuff gets traction.

00:03:53.860 --> 00:03:55.980
Also, it comes with a lot of responsibility.

00:03:55.980 --> 00:03:58.060
It means anything we release,

00:03:58.060 --> 00:03:59.980
we're kind of committed to maintaining.

00:03:59.980 --> 00:04:04.640
So like, it's been very interesting,

00:04:04.640 --> 00:04:06.380
like this kind of release cadence

00:04:06.380 --> 00:04:07.560
versus what happened with Ruff.

00:04:07.560 --> 00:04:10.060
- Well, you have more people behind the scenes

00:04:10.060 --> 00:04:11.020
helping you out, right?

00:04:11.020 --> 00:04:12.340
- I do, yeah, thankfully.

00:04:12.340 --> 00:04:15.580
- Yeah, tell us, maybe that's a good place

00:04:15.580 --> 00:04:18.060
to just kick off our conversation is,

00:04:18.060 --> 00:04:20.740
you know, we're talking a bit about Ruff for everyone,

00:04:20.740 --> 00:04:24.100
but in Ruff was the thing that really launched all of this,

00:04:24.100 --> 00:04:27.580
but you started a company, Astral,

00:04:27.580 --> 00:04:30.540
got some funding behind it, building awesome tools.

00:04:30.540 --> 00:04:32.100
Yeah, just give people the broad view

00:04:32.100 --> 00:04:33.260
of your world these days.

00:04:33.260 --> 00:04:34.100
- Yeah, totally.

00:04:34.100 --> 00:04:38.580
So yeah, I started, this all started when I released Ruff

00:04:38.580 --> 00:04:42.380
probably like a year and a half ago, maybe at this point.

00:04:43.460 --> 00:04:47.660
And at that point it was really not just a side project

00:04:47.660 --> 00:04:50.100
for me, but very much an exploratory project.

00:04:50.100 --> 00:04:52.620
Like I was kind of curious about building

00:04:52.620 --> 00:04:55.580
faster Python tooling really,

00:04:55.580 --> 00:04:57.300
and curious about getting better at Rust

00:04:57.300 --> 00:04:58.940
and all this stuff.

00:04:58.940 --> 00:05:03.260
And Ruff, when I released it, it's, you know,

00:05:03.260 --> 00:05:05.660
it was a lint or it is a linter,

00:05:05.660 --> 00:05:07.580
but it kind of brings a lot of different tools together.

00:05:07.580 --> 00:05:11.980
So if you're familiar with like Flake 8 or Pylint,

00:05:11.980 --> 00:05:15.500
but also Black, Ruff is designed to kind of bundle

00:05:15.500 --> 00:05:17.260
all those tools together.

00:05:17.260 --> 00:05:19.260
So it can detect problems with your code,

00:05:19.260 --> 00:05:23.500
it can fix them automatically, it can reformat your code.

00:05:23.500 --> 00:05:26.060
So often when we see people like adopting Ruff,

00:05:26.060 --> 00:05:29.620
they're replacing like 20 or 30 tools with Ruff.

00:05:29.620 --> 00:05:32.420
And, you know, it has, there's a bunch of nice things

00:05:32.420 --> 00:05:34.860
about it, but ultimately it's very, very fast

00:05:34.860 --> 00:05:37.020
and hopefully a lot simpler for users.

00:05:37.020 --> 00:05:39.780
- Yeah. - But, go ahead.

00:05:39.780 --> 00:05:41.940
- I was gonna say, it's really nice that it's just,

00:05:41.940 --> 00:05:44.100
one tool that brings that all together.

00:05:44.100 --> 00:05:45.220
You know, it's not a patch where,

00:05:45.220 --> 00:05:47.020
well, here's how we use isort,

00:05:47.020 --> 00:05:48.420
and here's how we use Flake 8,

00:05:48.420 --> 00:05:49.380
and here's how we use this,

00:05:49.380 --> 00:05:50.940
and here's how we use that, you know?

00:05:50.940 --> 00:05:52.740
- Right, I think isort's a really good example,

00:05:52.740 --> 00:05:55.020
because instead of having a, and isort's a great tool,

00:05:55.020 --> 00:05:56.380
but instead of having a separate tool

00:05:56.380 --> 00:05:57.860
to do your import sorting,

00:05:57.860 --> 00:06:01.300
Ruff frames import sorting as just a lint rule.

00:06:01.300 --> 00:06:03.740
And so you don't have to learn a bunch of different tools

00:06:03.740 --> 00:06:06.580
and figure out how to sort of merge them together.

00:06:06.580 --> 00:06:10.340
And, you know, Ruff, again, when I released it,

00:06:10.340 --> 00:06:11.620
it was just a side project.

00:06:11.620 --> 00:06:15.180
And it sort of took off, you know, there were,

00:06:15.180 --> 00:06:19.580
it was originally, you know, I released it in part

00:06:19.580 --> 00:06:22.220
because I had this thesis that like Python tooling

00:06:22.220 --> 00:06:25.580
could be much faster, and Ruff was meant to evidence that.

00:06:25.580 --> 00:06:27.340
It was meant to be an example of what I saw

00:06:27.340 --> 00:06:29.500
as like this potential to build

00:06:29.500 --> 00:06:31.860
really different Python tooling.

00:06:31.860 --> 00:06:35.660
And took off a couple big projects,

00:06:35.660 --> 00:06:39.460
like FastAPI and such were kind of early adopters,

00:06:39.460 --> 00:06:41.820
and it just grew and grew and grew from there.

00:06:41.820 --> 00:06:45.100
And I started a company, Astral, you know,

00:06:45.100 --> 00:06:47.220
shortly after based on a lot of these ideas.

00:06:47.220 --> 00:06:50.140
So again, Ruff in this context was meant to be,

00:06:50.140 --> 00:06:53.340
you know, the goal wasn't necessarily to start a company

00:06:53.340 --> 00:06:55.020
just based around Ruff.

00:06:55.020 --> 00:06:57.980
The goal was to start a company based around,

00:06:57.980 --> 00:06:59.700
you know, the ideas behind Ruff,

00:06:59.700 --> 00:07:04.700
which is can we build really different Python tooling by,

00:07:04.700 --> 00:07:07.900
well, it's all written in Rust.

00:07:07.900 --> 00:07:09.500
It's sort of an implementation detail, right?

00:07:09.500 --> 00:07:11.460
But ultimately what we're trying to do is build

00:07:11.460 --> 00:07:13.580
like really high performance Python tooling,

00:07:13.580 --> 00:07:15.820
but also tooling that works together really well

00:07:15.820 --> 00:07:16.940
and simplifies things.

00:07:16.940 --> 00:07:19.220
So tackle, it's not just about performance.

00:07:19.220 --> 00:07:20.860
It's also about tackling a lot of,

00:07:20.860 --> 00:07:24.060
I guess what I see as the complexity in Python tooling today

00:07:24.060 --> 00:07:27.380
and really trying to, I guess, challenge

00:07:27.380 --> 00:07:30.420
certain status quos and respect others,

00:07:30.420 --> 00:07:33.100
but challenge some status quos

00:07:33.100 --> 00:07:37.060
in what it feels like to work with and use Python.

00:07:37.060 --> 00:07:39.860
And so, you know, our focus as a company,

00:07:39.860 --> 00:07:43.180
you know, right now we're very, very focused

00:07:43.180 --> 00:07:47.740
on our open source roadmap and our open source tooling.

00:07:47.740 --> 00:07:52.100
So that's Ruff, now UV, which we'll talk about in a bit.

00:07:52.100 --> 00:07:56.100
And these are, you know, MIT licensed, you know,

00:07:56.100 --> 00:07:59.020
fully open source tools that we build.

00:07:59.020 --> 00:08:03.260
And ultimately our goal is to build and sell paid services

00:08:03.260 --> 00:08:05.060
that integrate really well with the tooling

00:08:05.060 --> 00:08:07.140
and are kind of like the natural next thing you need

00:08:07.140 --> 00:08:08.700
when you're building with Python.

00:08:08.700 --> 00:08:10.820
So, you know, we'll never charge money

00:08:10.820 --> 00:08:12.660
for like the tools themselves,

00:08:12.660 --> 00:08:14.740
those remain free permissively licensed.

00:08:14.740 --> 00:08:17.460
But our goal is to kind of build, you know,

00:08:17.460 --> 00:08:18.580
imagine you're building with Python,

00:08:18.580 --> 00:08:19.860
you need to deploy a web server.

00:08:19.860 --> 00:08:22.380
There's a lot of things that you need naturally to do that.

00:08:22.380 --> 00:08:24.460
So for people who are already using our tools,

00:08:24.460 --> 00:08:25.940
what are the natural next things they need

00:08:25.940 --> 00:08:28.220
and how can we build really good services

00:08:28.220 --> 00:08:29.180
on top of the tooling

00:08:29.180 --> 00:08:30.780
that just integrate with it really well?

00:08:30.780 --> 00:08:32.580
So that's kind of the premise of the company.

00:08:32.580 --> 00:08:35.020
There's like really two focuses to the roadmap.

00:08:35.020 --> 00:08:37.620
It's like the open source and the commercial.

00:08:37.620 --> 00:08:40.460
And our goal is to have an incentive structure

00:08:40.460 --> 00:08:41.900
where we're just continuously aligned

00:08:41.900 --> 00:08:43.860
to like invest a ton in the open source

00:08:43.860 --> 00:08:46.340
and grow it as much as possible in a really natural way.

00:08:46.340 --> 00:08:49.420
- So you're not gonna do like per line fix pricing.

00:08:49.420 --> 00:08:51.740
You get a million line fixes a month free

00:08:51.740 --> 00:08:52.660
and then, no, just kidding.

00:08:52.660 --> 00:08:55.300
I think it's an awesome model.

00:08:55.300 --> 00:08:59.300
And, you know, open source 10 years ago,

00:08:59.300 --> 00:09:03.020
it really looked, it was already super vibrant

00:09:03.020 --> 00:09:07.940
and super making huge dents in the space, right?

00:09:07.940 --> 00:09:10.140
Really a lot of people adopting it.

00:09:10.140 --> 00:09:13.580
But I think there was kind of a funding side

00:09:13.580 --> 00:09:14.580
that was a little bit missing.

00:09:14.580 --> 00:09:16.260
I still remember like, you know,

00:09:16.260 --> 00:09:17.900
buy me a coffee type of links,

00:09:17.900 --> 00:09:21.180
like send me 10 bucks if you like this.

00:09:21.180 --> 00:09:22.700
And that's just, it's not a job.

00:09:22.700 --> 00:09:26.660
That's hardly a hobby type of thing to get stuff done.

00:09:26.660 --> 00:09:28.900
You can't have a team of people focused on it.

00:09:28.900 --> 00:09:32.100
And it had traditionally really been around

00:09:32.100 --> 00:09:36.380
kind of a beneficial, I need to find a big tech company

00:09:36.380 --> 00:09:38.940
that's willing to give me sufficient amount of time

00:09:38.940 --> 00:09:42.260
to work on this project to sort of fund its existence.

00:09:42.260 --> 00:09:45.380
Or maybe I'm a consultant and I create Flask,

00:09:45.380 --> 00:09:48.220
but I consult on Flask, that type of thing, right?

00:09:48.220 --> 00:09:50.180
And I think it's just super positive

00:09:50.180 --> 00:09:53.060
to see more direct ways people

00:09:53.060 --> 00:09:54.900
are making open source successful.

00:09:54.900 --> 00:09:55.740
You know, I think-

00:09:55.740 --> 00:09:56.580
- Yeah, I appreciate that.

00:09:56.580 --> 00:09:59.460
And I wish, you know, I sort of wish

00:09:59.460 --> 00:10:03.260
that there were more good examples of that working.

00:10:03.260 --> 00:10:04.660
There are some for sure.

00:10:04.660 --> 00:10:07.300
You know, for me, it was pretty clear.

00:10:07.300 --> 00:10:08.500
Like it was immediately clear to me

00:10:08.500 --> 00:10:10.100
I needed to be working on a rough full time

00:10:10.100 --> 00:10:11.900
if I wanted the project to succeed.

00:10:11.900 --> 00:10:15.540
And that's kind of a microcosm of the bigger challenge,

00:10:15.540 --> 00:10:16.900
which is like we wanted to build,

00:10:16.900 --> 00:10:19.740
like we really wanted to like professionalize

00:10:19.740 --> 00:10:22.380
the building of this, you know, the work on this project

00:10:22.380 --> 00:10:24.420
and bring in more people to help build it.

00:10:24.420 --> 00:10:26.980
And so, you know, ultimately it's not,

00:10:26.980 --> 00:10:28.780
obviously it's not charity.

00:10:28.780 --> 00:10:29.860
It is venture funding.

00:10:29.860 --> 00:10:32.580
And ultimately we need to build a business,

00:10:32.580 --> 00:10:35.460
you know, around the tooling to make it,

00:10:35.460 --> 00:10:37.100
you know, to make it sustainable.

00:10:37.100 --> 00:10:40.420
But, you know, again, for me,

00:10:40.420 --> 00:10:42.700
I want the incentive structure to be such that like

00:10:42.700 --> 00:10:44.820
the open source is obviously free,

00:10:44.820 --> 00:10:47.660
open source, extremely permissively licensed,

00:10:47.660 --> 00:10:50.780
and truly open source.

00:10:50.780 --> 00:10:52.820
Like we have tons and tons of contributors.

00:10:52.820 --> 00:10:54.580
We have a huge community around it.

00:10:54.580 --> 00:10:58.220
And I'm just glad that we've been able

00:10:58.220 --> 00:11:01.340
to bring in more people to kind of supercharge

00:11:01.340 --> 00:11:02.500
the development of it all.

00:11:02.500 --> 00:11:04.940
So yeah, so I guess you talked on this before,

00:11:04.940 --> 00:11:08.660
but we're now eight people.

00:11:08.660 --> 00:11:11.780
So we've grown, you know, it was,

00:11:11.780 --> 00:11:14.900
I guess a year ago it was just me in March.

00:11:14.900 --> 00:11:17.260
So over the past, yeah,

00:11:17.260 --> 00:11:20.020
our first two team members joined actually in March

00:11:20.020 --> 00:11:22.700
of last year, so almost exactly a year.

00:11:22.700 --> 00:11:24.980
And yeah, we're completely distributed.

00:11:24.980 --> 00:11:28.860
So we're, you know, we have people in US Pacific time

00:11:28.860 --> 00:11:31.660
all the way to Bangalore.

00:11:31.660 --> 00:11:35.300
So we're just, you know, around the like open source,

00:11:35.300 --> 00:11:37.900
like we're kind of all over the world

00:11:37.900 --> 00:11:40.060
and just building, you know,

00:11:40.060 --> 00:11:41.540
building all this stuff out in the open.

00:11:41.540 --> 00:11:44.340
- It's such a good fit to be a distributed company

00:11:44.340 --> 00:11:47.020
as an open source with open source roots,

00:11:47.020 --> 00:11:49.740
because the tools of open source,

00:11:49.740 --> 00:11:51.460
in some degree for software in general,

00:11:51.460 --> 00:11:54.980
but especially for open source is asynchronous,

00:11:54.980 --> 00:11:58.340
semi-connected, you know, kind of the Zen of get,

00:11:58.340 --> 00:12:00.140
but for the way you work, right.

00:12:00.140 --> 00:12:02.380
And it makes it super easy to hire

00:12:02.380 --> 00:12:04.340
just the most engaged people, regardless of where they are.

00:12:04.340 --> 00:12:05.180
- Yeah, exactly.

00:12:05.180 --> 00:12:07.100
- Rather than the people who are willing to commute

00:12:07.100 --> 00:12:08.820
to my office in the office park.

00:12:08.820 --> 00:12:13.460
- Yeah, it was, I would be pretty surprised

00:12:13.460 --> 00:12:14.820
if a single person I've hired

00:12:14.820 --> 00:12:17.500
would have been willing to move to New York,

00:12:17.500 --> 00:12:19.340
which is where I'm based.

00:12:19.340 --> 00:12:23.220
So from that perspective, it was a no brainer, which is,

00:12:23.220 --> 00:12:26.140
and actually, you know, multiple people we've hired,

00:12:26.140 --> 00:12:29.420
our relationship with them started on the repo.

00:12:29.420 --> 00:12:30.260
- Yeah.

00:12:30.260 --> 00:12:32.020
- In rough itself.

00:12:32.020 --> 00:12:34.060
And then almost everyone we've hired,

00:12:34.060 --> 00:12:38.020
we discovered through open source in some way

00:12:38.020 --> 00:12:40.860
or had some relationship through open source in some way.

00:12:40.860 --> 00:12:41.700
- Yeah.

00:12:41.700 --> 00:12:43.580
- So yeah, it's been a really, it's very much in,

00:12:43.580 --> 00:12:45.940
it's also very much in the DNA of the company,

00:12:46.780 --> 00:12:49.820
which is, you know, we actually also intentionally try

00:12:49.820 --> 00:12:51.580
to hire people who have been maintainers, right?

00:12:51.580 --> 00:12:53.340
And have a lot of experience with that too.

00:12:53.340 --> 00:12:55.260
We view that as a really important skill.

00:12:55.260 --> 00:12:56.500
- Yeah, that's excellent.

00:12:56.500 --> 00:12:59.900
So we talked about rough.

00:12:59.900 --> 00:13:02.940
One thing I do wanna give a bit of a shout out to is,

00:13:02.940 --> 00:13:05.540
I don't remember, I think I found this on Mastodon,

00:13:05.540 --> 00:13:07.580
I can't remember where somebody talked about it,

00:13:07.580 --> 00:13:10.340
but one of the things that rough does,

00:13:10.340 --> 00:13:12.460
one, it changes code, which is awesome.

00:13:12.460 --> 00:13:14.460
I love your rough format story,

00:13:14.460 --> 00:13:16.900
but it also just tells you, hey, this could be better.

00:13:16.900 --> 00:13:17.900
You're violating PEP 8,

00:13:17.900 --> 00:13:20.180
you're violating this other convention

00:13:20.180 --> 00:13:22.060
or even a security thing, right?

00:13:22.060 --> 00:13:25.140
But the why of that,

00:13:25.140 --> 00:13:26.780
I think requires a little bit of experience.

00:13:26.780 --> 00:13:29.580
Like, why should I use this kind of loop

00:13:29.580 --> 00:13:34.260
or that kind of comprehension over another, right?

00:13:34.260 --> 00:13:36.620
People told me that who are much better

00:13:36.620 --> 00:13:38.500
have been doing this longer, I shouldn't do it.

00:13:38.500 --> 00:13:39.340
Why?

00:13:39.340 --> 00:13:42.740
When you have 700 rules, there's a lot of why.

00:13:42.740 --> 00:13:44.140
And so you guys came up with this thing

00:13:44.140 --> 00:13:47.220
at docs.astral.sh/ruff/rules,

00:13:47.220 --> 00:13:51.220
put in links that literally for each one of these

00:13:51.220 --> 00:13:55.620
has like a little example and what is good and what is bad

00:13:55.620 --> 00:13:57.820
and when you should use it and so on.

00:13:57.820 --> 00:13:59.340
You wanna just tell people about this a bit?

00:13:59.340 --> 00:14:00.180
I think it's a massive--

00:14:00.180 --> 00:14:01.020
- Yeah, totally.

00:14:01.020 --> 00:14:02.980
So we didn't have, I mean, we obviously didn't have this

00:14:02.980 --> 00:14:04.780
when we started the project

00:14:04.780 --> 00:14:08.340
and then we accumulated a lot of rules.

00:14:08.340 --> 00:14:10.580
When we decided to add this,

00:14:10.580 --> 00:14:12.940
I think we already had like hundreds of rules

00:14:12.940 --> 00:14:17.460
and the motivation for the format really comes from Clippy,

00:14:17.460 --> 00:14:20.900
which is the linter used in Rust.

00:14:20.900 --> 00:14:21.740
- Okay.

00:14:21.740 --> 00:14:22.580
- And they have really,

00:14:22.580 --> 00:14:25.060
Rust in general has a really good documentation culture

00:14:25.060 --> 00:14:27.820
and Clippy has this nice format, very similar to ours.

00:14:27.820 --> 00:14:28.900
We've made some adjustments,

00:14:28.900 --> 00:14:32.140
but it's pretty similar around how you document lint rules,

00:14:32.140 --> 00:14:35.220
like what's the motivation and giving examples.

00:14:35.220 --> 00:14:37.340
And so we were like, all right, let's, we wanna do this.

00:14:37.340 --> 00:14:39.740
And we just over a very long period of time

00:14:39.740 --> 00:14:43.140
and a lot of contributors contributed on this documentation,

00:14:43.140 --> 00:14:46.060
but it took like six months or something probably

00:14:46.060 --> 00:14:46.900
to document it all. - I can imagine.

00:14:46.900 --> 00:14:48.100
- And now, yeah, now we can,

00:14:48.100 --> 00:14:49.780
now we require it for all rules.

00:14:49.780 --> 00:14:51.900
So it's much easier to add going forward,

00:14:51.900 --> 00:14:54.220
but it was a huge effort to add this.

00:14:54.220 --> 00:14:58.580
And some of the explanations too are very extensive

00:14:58.580 --> 00:15:01.060
and detailed with lots of references.

00:15:01.060 --> 00:15:02.060
- Yeah.

00:15:02.060 --> 00:15:05.060
Yeah, I pulled the one up for isort, unsorted imports,

00:15:05.060 --> 00:15:08.100
which is error I001.

00:15:08.100 --> 00:15:11.820
And it also talks about whether it can automatically fix it,

00:15:11.820 --> 00:15:13.740
what this does, why is it bad?

00:15:13.740 --> 00:15:15.860
So it says things like consistency is good.

00:15:15.860 --> 00:15:17.500
Use a common convention for imports

00:15:17.500 --> 00:15:20.820
to make your code more readable and idiomatic or Pythonic.

00:15:20.820 --> 00:15:23.580
And it just gives an example, bad, good.

00:15:23.580 --> 00:15:24.420
- Right, right.

00:15:24.420 --> 00:15:25.660
- I think that's nice.

00:15:25.660 --> 00:15:28.020
- Yeah, and we've started to put more stuff in here

00:15:28.020 --> 00:15:30.500
over time too, like whether, like in some cases,

00:15:30.500 --> 00:15:33.420
we let users apply automatic fixes

00:15:33.420 --> 00:15:36.980
that aren't completely safe, like by opting in,

00:15:36.980 --> 00:15:38.660
like it might change the meaning of your code

00:15:38.660 --> 00:15:39.820
and you kind of need to be careful.

00:15:39.820 --> 00:15:42.300
And so over time, we've started to document that here too,

00:15:42.300 --> 00:15:44.700
like rules that have unsafe fixes, why?

00:15:44.700 --> 00:15:46.500
Like in what case might it break your code

00:15:46.500 --> 00:15:48.060
and what should you look out for?

00:15:48.060 --> 00:15:51.860
So yeah, we want it to be a tool with really good,

00:15:51.860 --> 00:15:56.100
like we're kind of inspired by Rust in this way

00:15:56.100 --> 00:15:58.060
'cause Rust has a really good documentation culture

00:15:58.060 --> 00:16:00.220
and also the Rust like compiler itself

00:16:00.220 --> 00:16:02.300
has really good error messages.

00:16:02.300 --> 00:16:03.580
It's sort of famous for that.

00:16:03.580 --> 00:16:04.820
Like when your code doesn't work,

00:16:04.820 --> 00:16:06.700
it's really good at telling you why.

00:16:06.700 --> 00:16:07.540
Doesn't always get it right,

00:16:07.540 --> 00:16:09.900
but it has famously good error messages.

00:16:09.900 --> 00:16:11.660
And that's something that we try and channel too,

00:16:11.660 --> 00:16:14.500
to like when we make changes to configuration,

00:16:14.500 --> 00:16:16.620
like just putting extra effort into trying to make

00:16:16.620 --> 00:16:19.980
like those like error messages and those hints helpful.

00:16:19.980 --> 00:16:20.820
But yeah, it's a lot of work.

00:16:20.820 --> 00:16:22.980
So I appreciate that you called it out.

00:16:22.980 --> 00:16:25.660
- I'm sure it looks like a lot of work,

00:16:25.660 --> 00:16:28.380
but it's one of those things that's,

00:16:28.380 --> 00:16:29.860
where else are you gonna get this knowledge, right?

00:16:29.860 --> 00:16:32.940
I mean, I know you can go search for one at a time,

00:16:32.940 --> 00:16:34.580
but in this aggregate, this is really good.

00:16:34.580 --> 00:16:35.740
- Right, right, right.

00:16:36.740 --> 00:16:38.500
This portion of Talk Python to Me

00:16:38.500 --> 00:16:40.940
is brought to you by Neo4j.

00:16:40.940 --> 00:16:42.460
Do you know Neo4j?

00:16:42.460 --> 00:16:45.420
Neo4j is a native graph database.

00:16:45.420 --> 00:16:48.180
And if the slowest part of your data access patterns

00:16:48.180 --> 00:16:50.300
involves computing relationships,

00:16:50.300 --> 00:16:53.420
why not use a database that stores those relationships

00:16:53.420 --> 00:16:55.140
directly in the database,

00:16:55.140 --> 00:16:57.340
unlike your typical relational one.

00:16:57.340 --> 00:16:59.420
A graph database lets you model the data

00:16:59.420 --> 00:17:00.860
the way it looks in the real world,

00:17:00.860 --> 00:17:04.300
instead of forcing it into rows and columns.

00:17:04.300 --> 00:17:07.260
It's time to stop asking a relational database

00:17:07.260 --> 00:17:08.820
to do more than they were made for

00:17:08.820 --> 00:17:12.620
and simplify complex data models with graphs.

00:17:12.620 --> 00:17:14.540
If you haven't used a graph database before,

00:17:14.540 --> 00:17:16.820
you might be wondering about common use cases.

00:17:16.820 --> 00:17:18.140
You know, what's it for?

00:17:18.140 --> 00:17:19.340
Here are just a few.

00:17:19.340 --> 00:17:23.760
Detecting fraud, enhancing AI, managing supply chains,

00:17:23.760 --> 00:17:26.700
gaining a 360 degree view of your data

00:17:26.700 --> 00:17:30.140
and anywhere else you have highly connected data.

00:17:30.140 --> 00:17:32.620
To use Neo4j from Python,

00:17:32.620 --> 00:17:35.900
it's a simple pip install Neo4j.

00:17:35.900 --> 00:17:37.100
And to help you get started,

00:17:37.100 --> 00:17:38.980
their docs include a sample web app

00:17:38.980 --> 00:17:43.000
demonstrating how to use it both from Flask and FastAPI.

00:17:43.000 --> 00:17:44.820
Find it in their docs or search GitHub

00:17:44.820 --> 00:17:47.740
for Neo4j movies application quick start.

00:17:47.740 --> 00:17:49.980
Developers are solving some of the world's

00:17:49.980 --> 00:17:51.860
biggest problems with graphs.

00:17:51.860 --> 00:17:52.880
Now it's your turn.

00:17:52.880 --> 00:17:57.460
Visit talkpython.fm/neo4j to get started.

00:17:57.460 --> 00:18:02.340
That's talkpython.fm/neo, the number four and the letter J.

00:18:02.340 --> 00:18:05.260
Thank you to Neo4j for supporting Talk Python to Me.

00:18:05.260 --> 00:18:09.400
So Ruff will fix a lot of these things for you.

00:18:09.400 --> 00:18:11.860
And one of the things that I like to do

00:18:11.860 --> 00:18:15.060
is I just have it integrated into my editor these days.

00:18:15.060 --> 00:18:18.060
So both with PyCharm and with VS Code,

00:18:18.060 --> 00:18:21.420
if I just say format this document, that's Ruff format.

00:18:21.420 --> 00:18:22.460
- Nice.

00:18:22.460 --> 00:18:23.300
Yeah, yeah.

00:18:23.300 --> 00:18:25.820
So we have a VS Code extension

00:18:25.820 --> 00:18:29.980
and it supports formatting, auto fixing,

00:18:29.980 --> 00:18:31.900
all that kind of stuff.

00:18:31.900 --> 00:18:33.820
- The PyCharm one's a,

00:18:33.820 --> 00:18:35.460
JetBrains one's a third party one, right?

00:18:35.460 --> 00:18:36.900
Someone else decided to make that?

00:18:36.900 --> 00:18:40.160
- Yeah, the JetBrains one is by Udai.

00:18:40.160 --> 00:18:45.460
And it's, yeah, that's like a community extension.

00:18:45.460 --> 00:18:47.800
We're considering doing our own at some point

00:18:47.800 --> 00:18:50.160
because there's a lot of demand for,

00:18:50.160 --> 00:18:52.420
obviously we have a lot of users who use

00:18:52.420 --> 00:18:53.700
the JetBrains stuff.

00:18:53.700 --> 00:18:55.020
I mean, I use it.

00:18:55.020 --> 00:18:56.460
So we may do it and do our own at some point,

00:18:56.460 --> 00:18:58.660
but there's a community maintained one right now.

00:18:58.660 --> 00:19:00.340
And that's based on,

00:19:00.340 --> 00:19:02.860
we have a sort of like a language server.

00:19:02.860 --> 00:19:05.620
So there's kind of like an underlying piece of technology

00:19:05.620 --> 00:19:08.680
that wraps Ruff that powers all of these editor integrations.

00:19:08.680 --> 00:19:11.580
So like, you can also use that from like NeoVim

00:19:11.580 --> 00:19:13.340
or like Sublime Text or Emacs,

00:19:13.340 --> 00:19:16.300
like all of those editors support the LSP.

00:19:16.300 --> 00:19:18.880
And so you can actually,

00:19:18.880 --> 00:19:20.900
it's the same thing that powers the VS Code extension,

00:19:20.900 --> 00:19:23.780
just that's wrapped in some VS Code specific stuff,

00:19:23.780 --> 00:19:26.300
but like it's the same piece of technology.

00:19:26.300 --> 00:19:30.180
And we're actually rewriting that right now

00:19:30.180 --> 00:19:33.100
to make it sort of like more natively integrated into Ruff,

00:19:33.100 --> 00:19:34.420
which will let us do some cool things.

00:19:34.420 --> 00:19:37.840
So it should get like actually significantly better,

00:19:37.840 --> 00:19:39.140
I think over the course of this year,

00:19:39.140 --> 00:19:42.260
'cause it's becoming more and more of a priority for us.

00:19:42.260 --> 00:19:43.300
- Yeah, cool.

00:19:43.300 --> 00:19:45.100
The whole LSP thing is pretty interesting.

00:19:45.100 --> 00:19:46.420
I think it's really opened up

00:19:46.420 --> 00:19:48.180
a lot of editors being better.

00:19:48.180 --> 00:19:49.860
- Yeah, it has.

00:19:49.860 --> 00:19:52.580
And it made it like from our perspective,

00:19:52.580 --> 00:19:55.760
it made it way easier to build like editor integrations

00:19:55.760 --> 00:19:57.500
because we just built an LSP

00:19:57.500 --> 00:20:01.920
and then it like works for like everyone almost.

00:20:01.920 --> 00:20:04.260
- Yeah.

00:20:04.260 --> 00:20:08.660
- Like the JetBrains stuff, it does support the LSP,

00:20:08.660 --> 00:20:10.300
but I think only in the paid version,

00:20:10.300 --> 00:20:11.520
not in the community version.

00:20:11.520 --> 00:20:13.500
So like there's some limitations around it,

00:20:13.500 --> 00:20:15.940
but in general, like if you support the LSP,

00:20:15.940 --> 00:20:18.260
like it's actually very easy to build editor integrations

00:20:18.260 --> 00:20:21.100
that work with everyone, which is like super, super useful.

00:20:21.100 --> 00:20:23.720
- Yeah, sort of rebuilding your own integration

00:20:23.720 --> 00:20:26.320
for every single thing, which is not fun.

00:20:26.320 --> 00:20:27.360
- Yeah, it's a lot.

00:20:27.360 --> 00:20:28.300
- All right.

00:20:28.300 --> 00:20:32.420
Well, let's talk about the main project here.

00:20:32.420 --> 00:20:36.460
The main reason for being here today is UV.

00:20:36.460 --> 00:20:37.340
Tell people what UV is.

00:20:37.340 --> 00:20:40.580
This is your next big project, next big tool.

00:20:40.580 --> 00:20:41.660
- Yes, yeah.

00:20:41.660 --> 00:20:46.560
UV, we released UV a little under a month ago.

00:20:46.560 --> 00:20:50.520
And this is something that I've wanted to do,

00:20:50.520 --> 00:20:53.260
like basically since we started the company,

00:20:53.260 --> 00:20:54.420
I wanted to start,

00:20:54.420 --> 00:20:55.700
I thought there was an opportunity

00:20:55.700 --> 00:20:58.880
to build some really interesting tooling

00:20:58.880 --> 00:21:00.820
in Python packaging.

00:21:00.820 --> 00:21:03.460
And UV is kind of the first milestone in that.

00:21:03.460 --> 00:21:07.240
So UV in its current form,

00:21:07.240 --> 00:21:12.240
it's designed as a sort of drop-in alternative

00:21:12.240 --> 00:21:15.860
to pip, pip tools, like if you use pip compile,

00:21:15.860 --> 00:21:17.960
pip sync and virtualenv.

00:21:17.960 --> 00:21:19.580
So it takes those three tools

00:21:19.580 --> 00:21:21.520
and tries to bundle them into one.

00:21:22.760 --> 00:21:25.100
And so it can do things like,

00:21:25.100 --> 00:21:27.460
given a set of input requirements,

00:21:27.460 --> 00:21:30.900
generate a requirements.txt file,

00:21:30.900 --> 00:21:33.220
similar to what you'd get from pip compile.

00:21:33.220 --> 00:21:38.680
It can, you can do UV pip install -r requirements.txt,

00:21:38.680 --> 00:21:40.980
UV pip install black.

00:21:40.980 --> 00:21:45.680
So it's really intended right now to be a sort of,

00:21:45.680 --> 00:21:48.160
it won't always,

00:21:48.160 --> 00:21:51.140
we don't support absolutely 100% of what pip does,

00:21:51.140 --> 00:21:53.680
but it's, we try to be pretty close.

00:21:53.680 --> 00:21:55.520
And so in many cases,

00:21:55.520 --> 00:21:59.620
the intention is that people can basically drop in UV

00:21:59.620 --> 00:22:01.300
in their project that uses pip today

00:22:01.300 --> 00:22:04.260
and get in many cases,

00:22:04.260 --> 00:22:08.020
like very, very significant performance improvements.

00:22:08.020 --> 00:22:09.540
So similar to rough,

00:22:09.540 --> 00:22:12.260
like some of the goals we had for this project were one,

00:22:12.260 --> 00:22:15.080
it should be very, very fast.

00:22:15.080 --> 00:22:18.780
And UV, it's really fast.

00:22:18.780 --> 00:22:23.780
In particular, there's like a benchmarks.md in here,

00:22:23.780 --> 00:22:26.740
actually, if you want to click on that.

00:22:26.740 --> 00:22:27.580
Now scroll up.

00:22:27.580 --> 00:22:28.720
- Does that do it?

00:22:28.720 --> 00:22:30.240
- Oh yeah, that works too, I guess.

00:22:30.240 --> 00:22:31.660
That was smart of me.

00:22:31.660 --> 00:22:35.860
Yeah, so it's really, really fast,

00:22:35.860 --> 00:22:38.340
especially if you've already have,

00:22:38.340 --> 00:22:41.020
if you're, if you have things cached,

00:22:41.020 --> 00:22:41.960
which is pretty common.

00:22:41.960 --> 00:22:43.700
So like often on your machine,

00:22:43.700 --> 00:22:47.260
when you're doing like pip install -r, whatever,

00:22:47.260 --> 00:22:48.140
a lot of those packages,

00:22:48.140 --> 00:22:50.740
you've probably installed them at least like once before

00:22:50.740 --> 00:22:51.680
on your machine,

00:22:51.680 --> 00:22:54.580
or maybe you deleted your virtual environment

00:22:54.580 --> 00:22:57.140
and you're recreating it with the exact same dependencies

00:22:57.140 --> 00:22:58.180
or something like that.

00:22:58.180 --> 00:23:02.620
UV is like very, very well optimized for that case.

00:23:02.620 --> 00:23:04.900
So if you have a package

00:23:04.900 --> 00:23:06.180
that you're installing multiple times,

00:23:06.180 --> 00:23:09.240
like the installation is effectively free.

00:23:09.240 --> 00:23:12.540
And it's also a lot more like disk space efficient.

00:23:12.540 --> 00:23:13.600
We use kind of like,

00:23:13.600 --> 00:23:15.140
we store all of them in one place

00:23:15.140 --> 00:23:17.220
and kind of copy them into your virtual environment

00:23:17.220 --> 00:23:18.420
so that you don't have like many,

00:23:18.420 --> 00:23:20.460
many different copies of the package too.

00:23:20.460 --> 00:23:24.780
So this was all kind of taking techniques

00:23:24.780 --> 00:23:27.380
and inspiration from like other ecosystems

00:23:27.380 --> 00:23:28.580
and other package managers

00:23:28.580 --> 00:23:32.420
and kind of molding them to fit Python's model

00:23:32.420 --> 00:23:35.380
for how packaging and dependencies work

00:23:35.380 --> 00:23:37.620
and all the specifications.

00:23:37.620 --> 00:23:39.780
And so again, the end result is like you,

00:23:39.780 --> 00:23:42.380
installing into a virtual environment,

00:23:42.380 --> 00:23:43.740
a package that you've already installed before

00:23:43.740 --> 00:23:45.660
is basically free.

00:23:45.660 --> 00:23:48.820
And yeah, a lot of these things are just like way,

00:23:48.820 --> 00:23:49.960
way, way faster.

00:23:49.960 --> 00:23:51.820
Similar to rough like-

00:23:51.820 --> 00:23:53.220
- Dramatically faster, yeah.

00:23:53.220 --> 00:23:54.060
- Yeah, and similar to rough like-

00:23:54.060 --> 00:23:55.900
- Dramatically, and I think, you know,

00:23:55.900 --> 00:23:59.020
it's worth pointing out that like on one hand,

00:23:59.020 --> 00:24:01.700
we all have an extra 10 seconds, right?

00:24:01.700 --> 00:24:04.540
Or whatever. - Of course.

00:24:04.540 --> 00:24:05.540
- But in the aggregate,

00:24:05.540 --> 00:24:08.560
all of these things are just like little paper cuts

00:24:08.560 --> 00:24:09.980
over your day, you know?

00:24:09.980 --> 00:24:12.020
And so, yeah, sure, I can format the code

00:24:12.020 --> 00:24:13.860
and I could use something nice

00:24:13.860 --> 00:24:16.180
and sure if it takes 20 seconds, okay.

00:24:16.180 --> 00:24:17.300
But then you stop running it

00:24:17.300 --> 00:24:18.820
'cause it's kind of a hassle and you're just,

00:24:18.820 --> 00:24:20.500
you're in your flow.

00:24:20.500 --> 00:24:22.000
And this is kind of the same way.

00:24:22.000 --> 00:24:25.420
It's like, oh, I wanted maybe see if there's a new,

00:24:25.420 --> 00:24:26.980
some new packages for this project

00:24:26.980 --> 00:24:28.300
as I'm sitting down to work on it.

00:24:28.300 --> 00:24:31.860
Like, okay, well, wait for a pip compile to run

00:24:31.860 --> 00:24:33.780
and you wait and you wait and then like,

00:24:33.780 --> 00:24:36.540
okay, now it's done onto the development version

00:24:36.540 --> 00:24:37.820
and you wait and you wait.

00:24:37.820 --> 00:24:40.220
And like, you know, it's just some of these things

00:24:40.220 --> 00:24:41.060
that are instant.

00:24:41.060 --> 00:24:42.820
- Just ask the question more

00:24:42.820 --> 00:24:45.580
and it just doesn't break your train of thought, you know?

00:24:45.580 --> 00:24:46.420
- Totally.

00:24:46.420 --> 00:24:48.540
I think there's like, maybe like three different things

00:24:48.540 --> 00:24:51.000
that come to mind here when we think about performance.

00:24:51.000 --> 00:24:53.000
'Cause like, yeah, okay, in this case,

00:24:53.000 --> 00:24:55.520
like it may not seem to change your life

00:24:55.520 --> 00:24:58.020
if you're going from one second to, you know,

00:24:58.020 --> 00:24:59.340
50 milliseconds.

00:24:59.340 --> 00:25:00.900
But I think three things come to mind.

00:25:00.900 --> 00:25:04.300
So one, like for companies and large projects,

00:25:04.300 --> 00:25:06.800
this can actually be like a really big difference.

00:25:06.800 --> 00:25:10.100
And so if you're at a company

00:25:10.100 --> 00:25:11.460
and you have like a big monorepo

00:25:11.460 --> 00:25:13.300
with like a bunch of different sub projects

00:25:13.300 --> 00:25:14.620
and they all have requirements files

00:25:14.620 --> 00:25:16.260
and you wanna bump a dependency,

00:25:16.260 --> 00:25:18.820
that can be like, at that point you're talking

00:25:18.820 --> 00:25:22.240
like 15 plus minutes for a command.

00:25:22.240 --> 00:25:24.740
And so like, the larger the project gets,

00:25:24.740 --> 00:25:26.580
obviously the more performance matters

00:25:26.580 --> 00:25:28.380
and the more it helps out.

00:25:28.380 --> 00:25:30.780
And we're trying to build tooling that can basically scale,

00:25:30.780 --> 00:25:32.900
I don't know about like to arbitrarily large projects,

00:25:32.900 --> 00:25:35.860
but like to large projects and useful for companies too.

00:25:35.860 --> 00:25:39.140
You know, the other thing I'd say is

00:25:39.140 --> 00:25:42.500
I think there's something that happens like when tools,

00:25:42.500 --> 00:25:44.580
when you make something like way faster,

00:25:44.580 --> 00:25:46.420
it just changes a lot of the ergonomics

00:25:46.420 --> 00:25:48.860
around what it's like to do things.

00:25:48.860 --> 00:25:52.380
And so, you know, in this case, like, okay,

00:25:52.380 --> 00:25:54.420
so installing into a virtual environment,

00:25:54.420 --> 00:25:56.260
a package that you've already installed before

00:25:56.260 --> 00:25:57.880
is free now.

00:25:57.880 --> 00:25:59.540
And so how does that change things?

00:25:59.540 --> 00:26:00.580
It's nearly instant.

00:26:00.580 --> 00:26:01.700
So how does that change things, right?

00:26:01.700 --> 00:26:04.300
So that means like, if you mess up your virtual environment

00:26:04.300 --> 00:26:06.100
and have to delete it and recreate it,

00:26:06.100 --> 00:26:07.440
it doesn't cost you anything.

00:26:07.440 --> 00:26:09.180
It's totally ephemeral.

00:26:09.180 --> 00:26:11.100
You can throw it away and recreate it at any time.

00:26:11.100 --> 00:26:12.820
And like, that's just like a different,

00:26:12.820 --> 00:26:13.660
like it sounds small,

00:26:13.660 --> 00:26:15.100
but that's kind of like a different relationship

00:26:15.100 --> 00:26:16.580
to a virtual environments than before,

00:26:16.580 --> 00:26:18.780
where it's like, okay, I created the virtual environment now.

00:26:18.780 --> 00:26:20.300
Oh no, my virtual environments have messed up.

00:26:20.300 --> 00:26:21.140
I got to recreate it.

00:26:21.140 --> 00:26:23.280
Like we want to just change a lot of the dynamics

00:26:23.280 --> 00:26:25.660
around some of those like abstractions.

00:26:25.660 --> 00:26:28.460
And then the other thing is this performance budget

00:26:28.460 --> 00:26:30.580
or this, if you think of performance like a budget,

00:26:30.580 --> 00:26:32.940
this buys us a lot of room.

00:26:32.940 --> 00:26:36.020
And so like the fact that we are so fast

00:26:36.020 --> 00:26:39.000
on some of these things means that we can do things

00:26:39.000 --> 00:26:41.640
that otherwise might be like prohibitively slow.

00:26:41.640 --> 00:26:44.320
And this is more sort of forward-looking and for the future.

00:26:44.320 --> 00:26:46.360
Like one thing that we're thinking about a lot right now

00:26:46.360 --> 00:26:49.440
is this idea of like resolving Python dependencies

00:26:49.440 --> 00:26:53.180
for many platforms, because it's a little bit complicated,

00:26:53.180 --> 00:26:56.800
but you know, pip compile and pip and UV,

00:26:56.800 --> 00:26:58.640
they're really designed to only work on like

00:26:58.640 --> 00:27:00.400
the current Python platform

00:27:00.400 --> 00:27:02.320
and the current Python that you're using.

00:27:02.320 --> 00:27:06.000
So if you're on like macOS and you run pip compile,

00:27:06.000 --> 00:27:08.580
or UV pip compile, it will give you dependencies

00:27:08.580 --> 00:27:10.940
that are correct for like macOS

00:27:10.940 --> 00:27:12.480
and your current Python version,

00:27:12.480 --> 00:27:16.180
but they might be wrong on Windows because Python,

00:27:16.180 --> 00:27:18.440
in Python you can have dependencies that vary based

00:27:18.440 --> 00:27:20.700
on things like the current Python version

00:27:20.700 --> 00:27:22.920
or the current operating system.

00:27:22.920 --> 00:27:26.420
- Yeah, so one example would be a UV loop, right?

00:27:26.420 --> 00:27:27.260
For people who are trying to speed up.

00:27:27.260 --> 00:27:29.140
- I think it doesn't work on Windows.

00:27:29.140 --> 00:27:31.140
- It doesn't work at all on Windows, that's right.

00:27:31.140 --> 00:27:31.980
And so.

00:27:31.980 --> 00:27:33.540
- Yeah, so that's a very common one.

00:27:33.540 --> 00:27:34.740
- Yeah.

00:27:34.740 --> 00:27:36.580
And it is, I think very common that this hap,

00:27:36.580 --> 00:27:38.820
that, you know, this is a very common thing,

00:27:38.820 --> 00:27:42.060
like on like lots of really, really popular packages

00:27:42.060 --> 00:27:43.260
have these kinds of marker.

00:27:43.260 --> 00:27:45.020
These were called markers,

00:27:45.020 --> 00:27:47.620
which basically makes the dependencies conditional

00:27:47.620 --> 00:27:49.020
based on the current Python.

00:27:49.020 --> 00:27:52.980
And so, you know, like again, like in pip and pip tools,

00:27:52.980 --> 00:27:57.060
UV right now just locks for the current Python.

00:27:57.060 --> 00:28:01.540
Poetry and I think PDM, but poetry for sure

00:28:01.540 --> 00:28:03.260
does this very interesting thing

00:28:03.260 --> 00:28:05.420
where they actually try to lock,

00:28:05.420 --> 00:28:08.400
they try to resolve for like all possible platforms.

00:28:08.400 --> 00:28:12.140
And that's something, it's really convenient

00:28:12.140 --> 00:28:14.580
because it means that like you kind of do one lock

00:28:14.580 --> 00:28:18.260
and then any user anywhere can like use that and it works.

00:28:18.260 --> 00:28:20.880
And it's kind of like guaranteed to be right

00:28:20.880 --> 00:28:24.080
as opposed to maybe it doesn't work on Windows

00:28:24.080 --> 00:28:24.920
or whatever else.

00:28:24.920 --> 00:28:26.460
And so we're pretty interested in like that,

00:28:26.460 --> 00:28:28.340
adding that behavior

00:28:28.340 --> 00:28:30.380
and that's gonna be like more expensive.

00:28:30.380 --> 00:28:33.780
And so if we have something that's really fast right now,

00:28:33.780 --> 00:28:35.640
it kind of like opens up a design space

00:28:35.640 --> 00:28:39.060
of interesting things we can do to solve that problem

00:28:39.060 --> 00:28:41.580
while still being, you know, very fast.

00:28:41.580 --> 00:28:44.420
So that's kind of how I think about performance.

00:28:44.420 --> 00:28:48.580
Like I think people like a little bit underrate

00:28:48.580 --> 00:28:49.780
how much of an impact it can have

00:28:49.780 --> 00:28:51.660
on even small interactions.

00:28:51.660 --> 00:28:53.300
'Cause once you try something that's much faster,

00:28:53.300 --> 00:28:55.660
it's often hard to go back to the other thing.

00:28:55.660 --> 00:28:59.700
But I'm glad you've had that experience at least.

00:28:59.700 --> 00:29:00.660
- Yeah, absolutely.

00:29:00.660 --> 00:29:02.980
A couple of interesting comments.

00:29:02.980 --> 00:29:04.860
Dane says, "If it takes 10 seconds,

00:29:04.860 --> 00:29:06.600
"I go to triage that issue on GitHub

00:29:06.600 --> 00:29:07.900
"and come back five minutes later."

00:29:07.900 --> 00:29:09.340
Right, like that's kind of where I was getting at

00:29:09.340 --> 00:29:10.460
with the flow stuff.

00:29:10.460 --> 00:29:12.900
It's like, okay, I'm ready to go.

00:29:12.900 --> 00:29:15.100
Mind wonders and you're kind of like starting over.

00:29:15.100 --> 00:29:16.700
- Yeah, yeah, yeah.

00:29:16.700 --> 00:29:19.060
- And then Henry out in the audience also says,

00:29:19.060 --> 00:29:20.860
"Hey Henry," it says,

00:29:20.860 --> 00:29:23.080
"It also, this doing things so quickly,

00:29:23.080 --> 00:29:24.860
"it encourages good environment usage

00:29:24.860 --> 00:29:26.180
"because if doing things the right way

00:29:26.180 --> 00:29:28.660
"is just as easy and as fast as doing it the wrong way,

00:29:28.660 --> 00:29:29.500
"you might as well do it the right way."

00:29:29.500 --> 00:29:30.420
- That's a nice thought.

00:29:30.420 --> 00:29:31.260
That's a nice thought.

00:29:31.260 --> 00:29:32.300
- Yeah, it is.

00:29:32.300 --> 00:29:34.780
- Yeah, I mean, I think there's,

00:29:34.780 --> 00:29:35.940
yeah, there are certain things though

00:29:35.940 --> 00:29:39.660
where like we aren't any faster

00:29:39.660 --> 00:29:43.180
and I'm interested in thinking about like those

00:29:43.180 --> 00:29:44.420
and what we can do about them.

00:29:44.420 --> 00:29:47.740
Like a common one or the most obvious one is

00:29:47.740 --> 00:29:51.000
in Python sometimes when you install a dependency,

00:29:51.000 --> 00:29:54.100
you might have to build it from source.

00:29:54.100 --> 00:29:58.620
And in Python, you often are installing things like NumPy,

00:29:58.620 --> 00:30:01.180
which have include some native code.

00:30:01.180 --> 00:30:03.180
And so actually turning that into something

00:30:03.180 --> 00:30:06.180
that your system can run is kind of expensive.

00:30:06.180 --> 00:30:09.860
And you typically don't have to think about this with NumPy

00:30:09.860 --> 00:30:11.940
because they ship what are called wheels,

00:30:11.940 --> 00:30:15.120
which are kind of like these pre-compiled artifacts.

00:30:15.120 --> 00:30:19.700
But not all packages ship wheels.

00:30:19.700 --> 00:30:21.820
You could be on a platform that doesn't have a wheel

00:30:21.820 --> 00:30:22.900
for a variety of reasons.

00:30:22.900 --> 00:30:25.660
You might get the raw NumPy source code

00:30:25.660 --> 00:30:26.700
and then have to,

00:30:26.700 --> 00:30:30.420
you get the raw NumPy source code

00:30:30.420 --> 00:30:33.500
and then have to compile it down into a build distribution.

00:30:33.500 --> 00:30:36.880
And like for us, if we get into that situation,

00:30:36.880 --> 00:30:38.500
it's like not gonna be any faster

00:30:38.500 --> 00:30:41.660
because like we still have to build the thing from source.

00:30:41.660 --> 00:30:42.500
Like just like that.

00:30:42.500 --> 00:30:44.420
- That's the slowest part of the whole process.

00:30:44.420 --> 00:30:46.500
- Yeah, and so there's like some,

00:30:46.500 --> 00:30:48.540
you know, there are some cases and some bottlenecks

00:30:48.540 --> 00:30:50.700
where like it's, I'm kind of thinking about

00:30:50.700 --> 00:30:52.060
how could we do even better there?

00:30:52.060 --> 00:30:53.340
And there are actually things that are changing

00:30:53.340 --> 00:30:55.520
in the standards that have made this a little easier.

00:30:55.520 --> 00:30:58.660
Like there's this new thing called metadata 2.2.

00:30:58.660 --> 00:30:59.940
It sounds cool, I know.

00:30:59.940 --> 00:31:03.900
It basically lets you like read the metadata.

00:31:03.900 --> 00:31:05.580
- You like metadata 2.1.

00:31:05.580 --> 00:31:07.980
- Yeah, if you, yeah, I'm on,

00:31:07.980 --> 00:31:09.620
yeah, we're actually on 2.3 now.

00:31:09.620 --> 00:31:12.020
- I just get it.

00:31:12.020 --> 00:31:15.420
- But the point of that is like,

00:31:15.420 --> 00:31:17.460
it's a standard that makes it so

00:31:17.460 --> 00:31:19.060
you don't have to build the thing as often.

00:31:19.060 --> 00:31:21.260
Like if you just wanna know the metadata of NumPy,

00:31:21.260 --> 00:31:24.420
for example, you may no longer need to build it

00:31:24.420 --> 00:31:25.280
and before you did.

00:31:25.280 --> 00:31:28.020
And so the standards are moving in a helpful direction here,

00:31:28.020 --> 00:31:29.540
but I just thought I'd call it out

00:31:29.540 --> 00:31:31.860
because like the source distribution,

00:31:31.860 --> 00:31:33.820
there are cases where it won't be faster

00:31:33.820 --> 00:31:35.500
and I'm pretty interested in those,

00:31:35.500 --> 00:31:38.460
but people should know that they also exist.

00:31:38.460 --> 00:31:40.580
- There's also, it's not just time,

00:31:40.580 --> 00:31:43.100
there's also security issues around that, right?

00:31:43.100 --> 00:31:48.060
If things are still based on building source from source

00:31:48.060 --> 00:31:51.020
and then running the setup py to see what the metadata is,

00:31:51.020 --> 00:31:54.100
it's both slow and also potentially running arbitrary code

00:31:54.100 --> 00:31:56.880
just to install a thing, which can make you,

00:31:56.880 --> 00:31:59.640
I mean, I don't know, rarely has anything gone wrong

00:31:59.640 --> 00:32:01.440
with just installing and running arbitrary code

00:32:01.440 --> 00:32:03.920
off the internet, but sometimes it could go wrong.

00:32:03.920 --> 00:32:06.360
- Yeah, it would be nice to get to a world

00:32:06.360 --> 00:32:07.800
where that's not required

00:32:07.800 --> 00:32:11.800
or at least for dependency resolution

00:32:11.800 --> 00:32:14.080
and like the standards are moving in that direction.

00:32:14.080 --> 00:32:14.920
- Yeah, exactly.

00:32:14.920 --> 00:32:15.920
I mean, you might, if you're gonna use it,

00:32:15.920 --> 00:32:16.760
you're gonna have to get it,

00:32:16.760 --> 00:32:17.800
but if you just wanna know,

00:32:17.800 --> 00:32:19.280
well, what versions do I need

00:32:19.280 --> 00:32:20.600
to put these two things together?

00:32:20.600 --> 00:32:21.440
You shouldn't have to do that.

00:32:21.440 --> 00:32:22.260
- Yeah, exactly.

00:32:22.260 --> 00:32:24.280
Because today for NumPy, for example,

00:32:24.280 --> 00:32:25.680
if you didn't have a wheel,

00:32:25.680 --> 00:32:27.440
you would have to run some arbitrary code

00:32:27.440 --> 00:32:29.220
to ask it for its dependencies.

00:32:29.220 --> 00:32:30.120
- Yeah, exactly.

00:32:30.120 --> 00:32:32.960
Well, let's talk about some of the usages here.

00:32:32.960 --> 00:32:35.160
Let's see some more interesting comments in the chat.

00:32:35.160 --> 00:32:36.780
We'll get back to them.

00:32:36.780 --> 00:32:40.920
First of all, is it like Highlander, the movie,

00:32:40.920 --> 00:32:42.400
should there just be one?

00:32:42.400 --> 00:32:45.280
Is this, is UPI a thing that I put into,

00:32:45.280 --> 00:32:47.600
say my requirements file if I wanna use it

00:32:47.600 --> 00:32:50.040
or do I install it just once for my machine?

00:32:50.040 --> 00:32:51.840
Like what's the scale?

00:32:51.840 --> 00:32:54.360
- Yeah, so there's a lot of different ways.

00:32:54.360 --> 00:32:56.380
You can, there's a lot of different ways to install it.

00:32:56.380 --> 00:32:59.460
You definitely can install it into a virtual environment.

00:32:59.460 --> 00:33:01.620
My general recommendation would be to install it

00:33:01.620 --> 00:33:03.480
on your machine once,

00:33:03.480 --> 00:33:06.080
because an interesting thing about UV

00:33:06.080 --> 00:33:10.040
is you don't need Python to install it.

00:33:10.040 --> 00:33:11.600
And it doesn't have,

00:33:11.600 --> 00:33:13.440
you need to have Python on your machine

00:33:13.440 --> 00:33:16.120
because we need to be able to, for example,

00:33:16.120 --> 00:33:17.560
build source distributions

00:33:17.560 --> 00:33:19.600
or know where to install the thing, right?

00:33:19.600 --> 00:33:21.720
We have to install into a virtual environment

00:33:21.720 --> 00:33:22.560
somewhere.

00:33:22.560 --> 00:33:26.240
And so you have to have Python installed on your machine,

00:33:26.240 --> 00:33:28.080
but UV does not depend on Python.

00:33:28.080 --> 00:33:31.320
So like it can install into arbitrary virtual environments

00:33:31.320 --> 00:33:34.280
or into arbitrary other Python interpreters.

00:33:34.280 --> 00:33:36.800
So that's why we generally recommend

00:33:36.800 --> 00:33:38.600
using like the,

00:33:38.600 --> 00:33:40.720
these standalone installers that we have at the top

00:33:40.720 --> 00:33:42.160
of the snippet on the screen.

00:33:42.160 --> 00:33:45.720
They're like the curl and the PowerShell invocations.

00:33:45.720 --> 00:33:48.600
Those will install a binary,

00:33:48.600 --> 00:33:50.720
a single binary on your machine that's UV.

00:33:51.680 --> 00:33:54.880
And from there you can use UV to install

00:33:54.880 --> 00:33:57.680
into virtual environments that it creates,

00:33:57.680 --> 00:34:01.080
to install into your system Python, to do whatever.

00:34:01.080 --> 00:34:03.360
So like I would say most people,

00:34:03.360 --> 00:34:04.600
based on the statistics,

00:34:04.600 --> 00:34:06.640
based on our download statistics,

00:34:06.640 --> 00:34:08.480
most people still install UV with pip,

00:34:08.480 --> 00:34:09.400
which makes sense,

00:34:09.400 --> 00:34:11.280
which is not that surprising to me.

00:34:11.280 --> 00:34:15.360
But I would generally recommend having like one UV install

00:34:15.360 --> 00:34:16.200
on your machine.

00:34:16.200 --> 00:34:18.120
Although if you do install into a virtual environment,

00:34:18.120 --> 00:34:19.400
like that's also totally fine.

00:34:19.400 --> 00:34:21.440
Like nothing's gonna go wrong.

00:34:21.440 --> 00:34:23.280
It's just not completely necessary

00:34:23.280 --> 00:34:25.080
because a single UV can already install

00:34:25.080 --> 00:34:26.480
into that virtual environment.

00:34:26.480 --> 00:34:27.320
- Right.

00:34:27.320 --> 00:34:29.480
You're never going to import UV.

00:34:29.480 --> 00:34:30.560
- No. - I mean, you might,

00:34:30.560 --> 00:34:33.600
but in general, people are not going to.

00:34:33.600 --> 00:34:34.880
- I think you can.

00:34:34.880 --> 00:34:36.800
I'm trying to think what would happen.

00:34:36.800 --> 00:34:38.200
(laughs)

00:34:38.200 --> 00:34:40.160
- It's not like,

00:34:40.160 --> 00:34:42.840
like things like pytest and other things.

00:34:42.840 --> 00:34:45.880
A lot of times there could be just one of those,

00:34:45.880 --> 00:34:47.400
but then you wanna use fixtures

00:34:47.400 --> 00:34:49.040
and you need to import something out.

00:34:49.040 --> 00:34:51.080
So then it really needs to be in the virtual environment

00:34:51.080 --> 00:34:52.720
and accessible like a library.

00:34:52.720 --> 00:34:54.240
But this is just something you run

00:34:54.240 --> 00:34:55.880
maybe even before your codes,

00:34:55.880 --> 00:34:57.680
before your virtual environment exists, right?

00:34:57.680 --> 00:35:01.280
Like it really kind of does ideally exist outside it,

00:35:01.280 --> 00:35:02.120
I think.

00:35:02.120 --> 00:35:03.200
- Yeah, ideally it exists outside of it.

00:35:03.200 --> 00:35:05.200
And there are some cases where you'd wanna install it

00:35:05.200 --> 00:35:06.160
within the virtual environment,

00:35:06.160 --> 00:35:07.720
but ideally it exists outside of it.

00:35:07.720 --> 00:35:09.200
The other thing that's nice

00:35:09.200 --> 00:35:10.760
about using the standalone installers,

00:35:10.760 --> 00:35:13.040
like at the top here is,

00:35:13.040 --> 00:35:16.080
soon we're gonna ship like a self update command.

00:35:16.080 --> 00:35:18.200
So you can do like UV self update

00:35:18.200 --> 00:35:20.840
and it will update UV to the latest version.

00:35:20.840 --> 00:35:22.600
And we can't really support that

00:35:22.600 --> 00:35:24.680
if you install it with a different package manager

00:35:24.680 --> 00:35:25.960
like pip or Brew.

00:35:25.960 --> 00:35:28.080
Those have their own upgrade commands obviously,

00:35:28.080 --> 00:35:30.720
but like if you install it with our installer,

00:35:30.720 --> 00:35:33.760
then like we can control the upgrades and stuff like that

00:35:33.760 --> 00:35:36.360
and provide some other features.

00:35:36.360 --> 00:35:38.200
So that's generally what we recommend,

00:35:38.200 --> 00:35:39.960
but obviously we're always gonna support

00:35:39.960 --> 00:35:41.640
like installing with pip and stuff too.

00:35:41.640 --> 00:35:44.600
- Yeah, I'm all about PipX these days.

00:35:44.600 --> 00:35:45.520
I really like--

00:35:45.520 --> 00:35:47.520
- Yeah, we're PipX, that's mine.

00:35:47.520 --> 00:35:49.040
- Yeah, yeah, PipX really,

00:35:49.040 --> 00:35:51.120
you can just say up, kind of like Brew,

00:35:51.120 --> 00:35:54.040
you can say upgrade all my Python CLI tools,

00:35:54.040 --> 00:35:56.280
PipX upgrade all.

00:35:56.280 --> 00:35:59.960
Basically I find rough and UV is just,

00:35:59.960 --> 00:36:01.400
you guys are moving super fast

00:36:01.400 --> 00:36:03.200
and there's frequently an update.

00:36:03.200 --> 00:36:05.040
- There are often updates, yeah.

00:36:05.040 --> 00:36:08.680
Yeah, and then the UV interface,

00:36:08.680 --> 00:36:11.800
like it's meant to be pretty familiar to,

00:36:11.800 --> 00:36:12.800
or it's meant to be, I guess,

00:36:12.800 --> 00:36:15.480
hopefully very familiar to people who have used,

00:36:16.360 --> 00:36:18.800
who are already using pip and other tools.

00:36:18.800 --> 00:36:22.560
And so like UVVM creates a virtual environment.

00:36:22.560 --> 00:36:27.280
And then there's, we have this sort of pip sub command.

00:36:27.280 --> 00:36:30.520
So like UVPip install Flask,

00:36:30.520 --> 00:36:33.440
and that doesn't call or use pip in any way.

00:36:33.440 --> 00:36:36.080
We're just using pip here to convey

00:36:36.080 --> 00:36:38.240
what the interface looks like.

00:36:38.240 --> 00:36:40.480
And part of the motivation there is at some point

00:36:40.480 --> 00:36:45.120
in the future, we probably wanna add a new interface to UV

00:36:46.080 --> 00:36:50.480
that's a little bit more high level.

00:36:50.480 --> 00:36:53.640
So you could think of something like Poetry,

00:36:53.640 --> 00:36:55.840
where they have like Poetry install,

00:36:55.840 --> 00:36:59.040
they have this sort of higher level interface

00:36:59.040 --> 00:37:00.800
for interfacing with packages.

00:37:00.800 --> 00:37:02.400
We wanna do something like that.

00:37:02.400 --> 00:37:06.160
And so that's why we left the top level

00:37:06.160 --> 00:37:07.200
of the interface clear,

00:37:07.200 --> 00:37:10.440
because we might kind of like integrate and,

00:37:10.440 --> 00:37:12.680
sorry, innovate and like ship a bunch of stuff

00:37:12.680 --> 00:37:14.560
that would otherwise break this interface.

00:37:14.560 --> 00:37:16.840
So like by putting this stuff under Pip,

00:37:16.840 --> 00:37:19.160
we basically created this like isolated space

00:37:19.160 --> 00:37:21.200
where we can make sure that those commands

00:37:21.200 --> 00:37:23.400
like keep working no matter what we choose to change

00:37:23.400 --> 00:37:24.240
in the future.

00:37:24.240 --> 00:37:27.720
And it's very similar to Pip's interface, right?

00:37:27.720 --> 00:37:29.680
It's like pip install, then it could be a package name.

00:37:29.680 --> 00:37:32.200
It could be a dash R requirements file.

00:37:32.200 --> 00:37:34.240
We support editable installs.

00:37:34.240 --> 00:37:36.520
We support like URL dependencies,

00:37:36.520 --> 00:37:39.160
get dependencies, all that kind of stuff.

00:37:39.160 --> 00:37:41.520
- Right, all the stuff you might normally do,

00:37:41.520 --> 00:37:44.360
Pip install something for the most part, that's the same.

00:37:44.360 --> 00:37:45.560
- Yep, yeah, exactly.

00:37:45.560 --> 00:37:47.320
And we support a lot of the same flags too

00:37:47.320 --> 00:37:48.360
that like pip supports.

00:37:48.360 --> 00:37:49.880
So like --index URL,

00:37:49.880 --> 00:37:51.840
--extra index URL,

00:37:51.840 --> 00:37:54.800
like --no binary, like all that stuff.

00:37:54.800 --> 00:37:55.640
Like we've put a lot of,

00:37:55.640 --> 00:37:56.920
we don't support every flag,

00:37:56.920 --> 00:38:00.320
but we've put a lot of effort into supporting a lot of them.

00:38:00.320 --> 00:38:01.600
And we've added more over time.

00:38:01.600 --> 00:38:04.680
Like now we support like --no build isolation

00:38:04.680 --> 00:38:05.520
and stuff like that,

00:38:05.520 --> 00:38:08.880
that maybe most listeners have never even had to look at,

00:38:08.880 --> 00:38:10.440
but like, yeah, these things matter

00:38:10.440 --> 00:38:12.080
in some circumstances.

00:38:12.080 --> 00:38:13.280
And so like over time,

00:38:13.280 --> 00:38:15.560
our goal is to add like more of the interface.

00:38:15.560 --> 00:38:21.320
But, you know, I would say for common use cases,

00:38:21.320 --> 00:38:22.880
I would expect that it just works.

00:38:22.880 --> 00:38:24.480
Like just adding UV up front,

00:38:24.480 --> 00:38:26.520
like it should just work.

00:38:26.520 --> 00:38:28.480
Now as you become more complex,

00:38:28.480 --> 00:38:30.760
it won't and you'll run into some.

00:38:30.760 --> 00:38:34.200
We have a whole document of like subtle ways that we deviate

00:38:34.200 --> 00:38:35.040
some are intentional,

00:38:35.040 --> 00:38:36.440
some I consider bugs, right?

00:38:36.440 --> 00:38:38.480
Like some we want to fix over time.

00:38:38.480 --> 00:38:40.280
But the intention is that for most people,

00:38:40.280 --> 00:38:41.480
we want it to just work.

00:38:41.480 --> 00:38:43.200
- Once we fix the first round of bugs

00:38:43.200 --> 00:38:44.560
following the release, of course.

00:38:44.560 --> 00:38:46.040
- Yeah, yeah, sure.

00:38:46.040 --> 00:38:49.720
So you've got a UV, VENV, VIMP

00:38:49.720 --> 00:38:51.280
for creating a virtual environment.

00:38:51.280 --> 00:38:54.160
And it has a lot of the flags that Python dash MVNV

00:38:54.160 --> 00:38:57.120
would have where you can say, you know,

00:38:57.120 --> 00:39:01.320
bring along pip or upgrade things or set the prompt name,

00:39:01.320 --> 00:39:02.360
that kind of stuff, right?

00:39:02.360 --> 00:39:03.600
- Yeah, yeah, exactly.

00:39:03.600 --> 00:39:04.440
Yep.

00:39:04.440 --> 00:39:06.960
- Similar for UV pip and then stuff.

00:39:06.960 --> 00:39:09.200
What I find I do for most of my work,

00:39:09.200 --> 00:39:12.160
at least if I'm not trying to teach or do a presentation

00:39:12.160 --> 00:39:14.040
where people are like, what did you just do?

00:39:14.040 --> 00:39:15.800
These all have kind of aliases, right?

00:39:15.800 --> 00:39:20.480
Like UV pip install -r requirements on TXT is just PIR,

00:39:20.480 --> 00:39:22.440
PIP install requirements, you know, things like that.

00:39:22.440 --> 00:39:23.280
- Yeah, yeah, yeah.

00:39:23.280 --> 00:39:26.000
- And so try to just take the common stuff

00:39:26.000 --> 00:39:30.480
and it doesn't matter if it's pip or UV really backing it

00:39:30.480 --> 00:39:33.800
from my CLI ergonomics, right?

00:39:33.800 --> 00:39:35.680
I'm just, I use my alias.

00:39:35.680 --> 00:39:38.520
And if I want to change that, I just go and edit it.

00:39:38.520 --> 00:39:40.880
And so for me, it was super easy to switch

00:39:40.880 --> 00:39:43.000
to adopt these things because I'm like,

00:39:43.000 --> 00:39:47.960
I added my ZSH RC file once and now everything just,

00:39:47.960 --> 00:39:49.760
I just do the same stuff and it works,

00:39:49.760 --> 00:39:51.200
but the new way, way faster.

00:39:51.200 --> 00:39:54.440
- Yeah, and you know, the goal of like pip compatibility

00:39:54.440 --> 00:39:57.720
has been interesting because there are actually like

00:39:57.720 --> 00:39:59.760
some things that we very intentionally want to do

00:39:59.760 --> 00:40:03.600
differently and like, I won't speak for the pip maintainers

00:40:03.600 --> 00:40:05.160
like, but I think in some cases,

00:40:05.160 --> 00:40:07.480
there are probably things that they would do differently too

00:40:07.480 --> 00:40:08.320
if they could.

00:40:08.320 --> 00:40:09.920
- I think so too, yeah.

00:40:09.920 --> 00:40:13.000
- Yeah, 'cause like PIP, I mean, PIP's number one,

00:40:13.000 --> 00:40:16.320
PIP is extremely important and its number one goal is like,

00:40:16.320 --> 00:40:19.280
it needs to be like robust, right?

00:40:19.280 --> 00:40:22.680
It needs to keep working and it needs to be compatible

00:40:22.680 --> 00:40:25.440
and 'cause it's like, it's truly like the cornerstone

00:40:25.440 --> 00:40:28.000
of like a lot of the Python ecosystem.

00:40:28.000 --> 00:40:31.680
And so PIP, it's very, it's harder for them to change things

00:40:31.680 --> 00:40:32.880
especially in a breaking way.

00:40:32.880 --> 00:40:34.560
And they have to be really thoughtful

00:40:34.560 --> 00:40:36.880
and do that over a long period of time.

00:40:36.880 --> 00:40:39.400
And so we're in kind of a privileged position, honestly,

00:40:39.400 --> 00:40:41.720
because we come in with a new tool,

00:40:41.720 --> 00:40:43.080
we can actually do a bunch of,

00:40:43.080 --> 00:40:44.760
choose to do things differently.

00:40:44.760 --> 00:40:47.200
And some people get upset about it obviously,

00:40:47.200 --> 00:40:49.880
'cause they're like, this isn't exactly how pip does it.

00:40:49.880 --> 00:40:51.640
I'm trying to hold firm on some of those things

00:40:51.640 --> 00:40:53.520
and also be open-minded on others, right?

00:40:53.520 --> 00:40:55.840
But like, you know, like one thing that we do

00:40:55.840 --> 00:40:59.200
that's different, that's, I guess maybe it's not evident

00:40:59.200 --> 00:41:01.920
from this screen exactly, or I guess it sort of is.

00:41:01.920 --> 00:41:05.800
So when you do UVVM, we default the name .vm.

00:41:05.800 --> 00:41:07.200
So like, if you don't provide a name,

00:41:07.200 --> 00:41:09.280
we just default to .vm.

00:41:09.280 --> 00:41:11.840
And there was a PEP to make that a standard

00:41:11.840 --> 00:41:14.240
that got pulled back, but like,

00:41:14.240 --> 00:41:15.560
it's not like we're trying to make it a standard,

00:41:15.560 --> 00:41:17.000
but I just think it's a good default.

00:41:17.000 --> 00:41:18.960
Like we want to abstract away some of this stuff.

00:41:18.960 --> 00:41:20.640
And so you can just like have a virtual,

00:41:20.640 --> 00:41:22.000
you can obviously pass a name if you want,

00:41:22.000 --> 00:41:23.320
but we default to .vm.

00:41:23.320 --> 00:41:24.600
That's different from other tools.

00:41:24.600 --> 00:41:26.680
And then, you know, the other thing is

00:41:26.680 --> 00:41:28.520
when you do UVPIP install,

00:41:28.520 --> 00:41:31.320
by default we require a virtual environment.

00:41:31.320 --> 00:41:34.640
And so if you do UVPIP install Flask

00:41:34.640 --> 00:41:36.080
and there's no virtual environment,

00:41:36.080 --> 00:41:38.520
like we'll throw, we'll error.

00:41:38.520 --> 00:41:40.080
And it doesn't have to be active.

00:41:40.080 --> 00:41:41.760
We'll look for it in the current directory,

00:41:41.760 --> 00:41:42.760
even if it's not active.

00:41:42.760 --> 00:41:45.840
So like, if you do UVVM, then UVPIP install Flask,

00:41:45.840 --> 00:41:46.840
like it will work.

00:41:46.840 --> 00:41:48.600
And in my opinion, it will do the intuitive thing,

00:41:48.600 --> 00:41:50.160
which is it will install it into the environment

00:41:50.160 --> 00:41:51.320
in the current directory.

00:41:51.320 --> 00:41:52.800
So it's like, it's trying to provide-

00:41:52.800 --> 00:41:53.640
- It'll traverse up?

00:41:53.640 --> 00:41:55.400
Like if I'm a little farther down,

00:41:55.400 --> 00:41:58.200
it'll go up and say, "Oh, just, oh, that's amazing."

00:41:58.200 --> 00:41:59.040
- Exactly.

00:41:59.040 --> 00:42:00.040
So it'll find the virtual environment

00:42:00.040 --> 00:42:02.440
in the current directory or any parent directory.

00:42:02.440 --> 00:42:06.720
So like, for me, that's just like a nice default workflow

00:42:06.720 --> 00:42:10.400
that encourages virtual environments

00:42:10.400 --> 00:42:11.920
and like doesn't get in your way about it.

00:42:11.920 --> 00:42:13.040
And we do have a flag

00:42:13.040 --> 00:42:14.840
for installing outside virtual environments,

00:42:14.840 --> 00:42:17.800
but the difference is in UV, you have to opt in

00:42:17.800 --> 00:42:19.800
if you want to do something like install

00:42:19.800 --> 00:42:21.160
into the system Python.

00:42:21.160 --> 00:42:22.600
The virtual environment,

00:42:22.600 --> 00:42:24.160
it's a very virtual environment first

00:42:24.160 --> 00:42:25.880
while abstracting away a lot of the details

00:42:25.880 --> 00:42:27.280
of virtual environments.

00:42:27.280 --> 00:42:28.800
So, you know, there are things like that

00:42:28.800 --> 00:42:30.800
where we made intentional decisions.

00:42:30.800 --> 00:42:32.400
- Yeah. - In my opinion, yeah.

00:42:32.400 --> 00:42:33.680
- Yeah.

00:42:33.680 --> 00:42:34.520
- Yeah.

00:42:34.520 --> 00:42:35.360
And I think, and it's nice

00:42:35.360 --> 00:42:37.920
because we can start with that behavior

00:42:37.920 --> 00:42:40.800
and, you know, we're in a privileged position

00:42:40.800 --> 00:42:42.560
'cause we can start with different defaults.

00:42:42.560 --> 00:42:43.640
- Yeah, for sure.

00:42:43.640 --> 00:42:47.040
So if I do, excuse me,

00:42:47.040 --> 00:42:49.920
if I do a UV, VNV for a virtual environment,

00:42:49.920 --> 00:42:54.400
then maybe I UV pip install something,

00:42:54.400 --> 00:42:58.720
but then I forget and I pip install something else.

00:42:58.720 --> 00:42:59.540
Does it break?

00:42:59.540 --> 00:43:00.520
Is it okay?

00:43:00.520 --> 00:43:02.520
- As in the third time there's no UV?

00:43:02.520 --> 00:43:03.440
- Well, yeah, exactly.

00:43:03.440 --> 00:43:06.520
Like, so I'm in UV pip install something,

00:43:06.520 --> 00:43:07.360
UV pip install that.

00:43:07.360 --> 00:43:08.600
And I was, oh, I forgot this thing.

00:43:08.600 --> 00:43:09.920
I was pip install.

00:43:09.920 --> 00:43:11.520
Oh, I forgot the UV.

00:43:11.520 --> 00:43:13.800
To the state-- - No, it shouldn't break.

00:43:13.800 --> 00:43:15.400
Assuming, so let's say you activate

00:43:15.400 --> 00:43:16.480
the virtual environment.

00:43:16.480 --> 00:43:17.520
- Yeah, yeah, it's already activated.

00:43:17.520 --> 00:43:18.360
- Okay, cool.

00:43:18.360 --> 00:43:20.600
So you do UV VM, you activate the virtual environment,

00:43:20.600 --> 00:43:22.120
you do UV pip install flask,

00:43:22.120 --> 00:43:24.800
and then you do pip install black or whatever.

00:43:24.800 --> 00:43:25.920
- Yeah, something, yeah.

00:43:25.920 --> 00:43:26.760
- That should work just fine

00:43:26.760 --> 00:43:30.440
because like the thing that we ultimately create

00:43:30.440 --> 00:43:31.520
in the virtual environment,

00:43:31.520 --> 00:43:33.400
like that's all based on standards.

00:43:33.400 --> 00:43:36.320
So like the stuff that we do in the virtual environment

00:43:36.320 --> 00:43:37.640
to install packages,

00:43:37.640 --> 00:43:40.120
it should look like roughly indistinguishable

00:43:40.120 --> 00:43:41.240
from what pip would do.

00:43:41.240 --> 00:43:43.200
And it's totally interoperable with pip.

00:43:43.200 --> 00:43:45.600
So like similarly, if you did pip install

00:43:45.600 --> 00:43:47.640
and then like pip install flask

00:43:47.640 --> 00:43:50.240
and then UV pip uninstall flask,

00:43:50.240 --> 00:43:51.480
like that would work correctly.

00:43:51.480 --> 00:43:53.520
Like pip would install flask and we would remove it

00:43:53.520 --> 00:43:55.800
because everything that pip and UV are doing

00:43:55.800 --> 00:43:58.960
in the virtual environment is based on standards.

00:43:58.960 --> 00:44:01.080
So the way that we add and remove packages,

00:44:01.080 --> 00:44:01.920
all that kind of stuff,

00:44:01.920 --> 00:44:04.240
it should be totally interoperable with other tools.

00:44:04.240 --> 00:44:05.080
- Okay, cool.

00:44:05.080 --> 00:44:08.320
PyPI is pretty good at having analytics

00:44:08.320 --> 00:44:10.920
around what packages are being downloaded,

00:44:10.920 --> 00:44:13.240
what's popular, what platforms.

00:44:13.240 --> 00:44:16.400
Do you do anything like send a user agent or something

00:44:16.400 --> 00:44:18.440
so that people could answer the question

00:44:18.440 --> 00:44:20.560
or how many people are using straight pip

00:44:20.560 --> 00:44:23.520
and how many people are using UV in a year?

00:44:23.520 --> 00:44:26.360
- Yeah, we sent a UV user agent

00:44:26.400 --> 00:44:29.600
and it's right now it's just UV in the UV version.

00:44:29.600 --> 00:44:33.960
There's an open issue in the repo from Pradyan

00:44:33.960 --> 00:44:37.680
who works on pip that outlines all this stuff

00:44:37.680 --> 00:44:40.600
that pip includes in its own user agent,

00:44:40.600 --> 00:44:41.760
which we wanna add,

00:44:41.760 --> 00:44:43.480
which is pretty interesting.

00:44:43.480 --> 00:44:44.920
I actually didn't know this.

00:44:44.920 --> 00:44:47.960
So pip and its user agent includes a lot of things

00:44:47.960 --> 00:44:50.040
about the current Python platform,

00:44:50.040 --> 00:44:56.120
data that they use in PyPI basically to inform decisions.

00:44:57.040 --> 00:44:58.560
Oh, no one's using Py...

00:44:58.560 --> 00:45:00.360
This is just, I don't think this is actually how it's used,

00:45:00.360 --> 00:45:01.520
but just an example.

00:45:01.520 --> 00:45:03.840
Oh, no one's using Python 3.7 anymore.

00:45:03.840 --> 00:45:05.720
Let's lower priority on that

00:45:05.720 --> 00:45:08.400
because no one's installing Python with Python 3.7.

00:45:08.400 --> 00:45:11.440
And so we wanna add, we don't have that right now.

00:45:11.440 --> 00:45:12.640
We're planning to add it.

00:45:12.640 --> 00:45:16.920
But yeah, it will be interesting to see.

00:45:16.920 --> 00:45:19.680
We can get statistics over time too on UV and pip

00:45:19.680 --> 00:45:22.040
and how common they are in different dimensions.

00:45:22.040 --> 00:45:22.880
- Yeah.

00:45:22.880 --> 00:45:25.840
One thing that would be kind of fun to have is,

00:45:25.840 --> 00:45:28.160
I'm not sure if it's at all interesting to you,

00:45:28.160 --> 00:45:32.840
but to have some kind of cron job or background thing,

00:45:32.840 --> 00:45:34.200
if you just interact with UV,

00:45:34.200 --> 00:45:36.440
if it kind of kicked off sort of a background process

00:45:36.440 --> 00:45:37.280
that did its thing.

00:45:37.280 --> 00:45:41.880
But take the history of maybe the top 500 packages

00:45:41.880 --> 00:45:43.400
plus the ones you've used

00:45:43.400 --> 00:45:46.680
and just kind of keep a cache up to date on your system.

00:45:46.680 --> 00:45:49.720
So you're on an airplane or you're in a coffee shop

00:45:49.720 --> 00:45:51.920
or for some reason, the internet's not great.

00:45:51.920 --> 00:45:54.960
Like it's kind of pre-filled the cache

00:45:54.960 --> 00:45:55.800
and everything's there.

00:45:55.800 --> 00:45:59.360
And I kind of, that might be fun.

00:45:59.360 --> 00:46:01.680
- Yeah, we do have a --offline flag,

00:46:01.680 --> 00:46:05.440
which will like, it forbids network requests obviously,

00:46:05.440 --> 00:46:08.480
but it, so like it'll try and do the full install

00:46:08.480 --> 00:46:10.000
without accessing the network.

00:46:10.000 --> 00:46:10.840
- Yeah, that's cool.

00:46:10.840 --> 00:46:12.440
- It would be cool to pre-fill the cache.

00:46:12.440 --> 00:46:13.800
- Yeah, but it's just like, you know,

00:46:13.800 --> 00:46:16.480
if you're a UV user and you sit down on your computer

00:46:16.480 --> 00:46:17.840
and for some reason the internet's out,

00:46:17.840 --> 00:46:19.400
I'm at a conference, I'm doing a talk

00:46:19.400 --> 00:46:21.760
and it's got the dreaded terrible conference wifi.

00:46:21.760 --> 00:46:22.840
It's not the end of your demo.

00:46:22.840 --> 00:46:24.280
It's just like, yeah, see how fast this is.

00:46:24.280 --> 00:46:25.120
It's amazing.

00:46:25.120 --> 00:46:26.680
- Yeah, yeah.

00:46:26.680 --> 00:46:28.120
Yeah, it was actually, it's actually funny

00:46:28.120 --> 00:46:31.320
'cause like the benchmarking, like when we do benchmarks,

00:46:31.320 --> 00:46:34.280
like benchmarks can just vary so dramatically

00:46:34.280 --> 00:46:36.560
based on like internet connectivity, right?

00:46:36.560 --> 00:46:38.600
Like that's often, that is often the bottleneck.

00:46:38.600 --> 00:46:41.360
I mean, it's not, it's clearly not always the bottleneck

00:46:41.360 --> 00:46:44.320
because we're able to be faster than other tools.

00:46:44.320 --> 00:46:46.480
So like if it was always the bottleneck,

00:46:46.480 --> 00:46:47.960
I don't think that wouldn't really be true,

00:46:47.960 --> 00:46:49.360
but it matters a lot.

00:46:49.360 --> 00:46:51.520
And so sometimes I'll throw on, on macOS,

00:46:51.520 --> 00:46:54.440
they have a tool called network link conditioner.

00:46:54.440 --> 00:46:56.720
So you can actually force-

00:46:56.720 --> 00:46:58.360
- Drag your network out.

00:46:58.360 --> 00:46:59.920
- Yeah, you can force it down.

00:46:59.920 --> 00:47:01.800
And the categories are like,

00:47:01.800 --> 00:47:04.440
it's not literally called like bad mobile phone

00:47:04.440 --> 00:47:06.600
or something, but it's, that's like basically what it is.

00:47:06.600 --> 00:47:07.440
Yeah, it's like, it's like,

00:47:07.440 --> 00:47:09.400
it's like very lossy edge network.

00:47:09.400 --> 00:47:11.200
Like those are like the pre-built category.

00:47:11.200 --> 00:47:13.240
It's pretty funny, but like it is actually,

00:47:13.240 --> 00:47:15.120
that's a very helpful thing for benchmarking.

00:47:15.120 --> 00:47:15.960
- Yeah.

00:47:15.960 --> 00:47:16.800
- And sometimes actually,

00:47:16.800 --> 00:47:17.760
if you have a really good network connection,

00:47:17.760 --> 00:47:20.880
sometimes it's actually helpful to set that anyway

00:47:20.880 --> 00:47:23.640
to a pretty good level,

00:47:23.640 --> 00:47:25.880
because then at least it will be like very consistent

00:47:25.880 --> 00:47:27.480
across your executions.

00:47:27.480 --> 00:47:29.160
Anyway, it's something I've learned over time.

00:47:29.160 --> 00:47:31.680
- Yeah, that is super interesting.

00:47:31.680 --> 00:47:35.080
So one of the things I think is interesting to consider here

00:47:35.080 --> 00:47:37.840
is obviously this is way faster.

00:47:37.840 --> 00:47:40.080
I saw some of the announcements

00:47:40.080 --> 00:47:42.320
and some of the discussion around the announcements

00:47:42.320 --> 00:47:45.360
and the people were really surprised how fast this is.

00:47:45.360 --> 00:47:48.400
And I think, I don't think Rust is the full answer.

00:47:48.400 --> 00:47:49.440
You mean, you tell me if I'm wrong,

00:47:49.440 --> 00:47:53.600
but like one part, obviously making the code run ultra fast,

00:47:53.600 --> 00:47:55.320
that is an important part of it.

00:47:55.320 --> 00:47:58.280
But it also seems like you all have rethought

00:47:58.280 --> 00:48:01.160
some of the internal algorithms and some of the caching

00:48:01.160 --> 00:48:02.600
and some of the ways things work,

00:48:02.600 --> 00:48:04.160
maybe with a fresh take on it,

00:48:04.160 --> 00:48:06.360
or you're not constrained by the way it's been done

00:48:06.360 --> 00:48:07.520
for many, many years.

00:48:07.520 --> 00:48:12.040
So what elements are at play to make it as fast as it is?

00:48:12.040 --> 00:48:14.000
Is it just Rust or is it something else?

00:48:14.000 --> 00:48:16.080
- So Rust is important,

00:48:16.080 --> 00:48:18.560
but like the way I typically talk about,

00:48:18.560 --> 00:48:21.440
like frame it is that Rust is kind of like an enabler

00:48:21.440 --> 00:48:23.520
to writing really fast programs.

00:48:23.520 --> 00:48:28.000
Like it lets you, it forces you slash lets you care,

00:48:28.000 --> 00:48:31.040
it forces you to slash lets you care about certain things

00:48:31.040 --> 00:48:34.040
that matter a lot for performance that like in Python,

00:48:34.040 --> 00:48:35.600
you just act, there's actually just no way

00:48:35.600 --> 00:48:37.160
to care about them.

00:48:37.160 --> 00:48:38.760
Like I'm talking specifically here

00:48:38.760 --> 00:48:40.000
about like memory allocation,

00:48:40.000 --> 00:48:42.560
like in Python that all just kind of happens.

00:48:42.560 --> 00:48:44.240
In Rust, you're forced to think about,

00:48:44.240 --> 00:48:45.960
am I gonna allocate memory here or not?

00:48:45.960 --> 00:48:48.000
And like, when is it gonna be deallocated

00:48:48.000 --> 00:48:49.120
and all that kind of stuff.

00:48:49.120 --> 00:48:52.800
And so that unlocks the ability to care

00:48:52.800 --> 00:48:54.960
and like be really careful in how you manage it.

00:48:54.960 --> 00:48:56.680
And so Rust is like a really important,

00:48:56.680 --> 00:48:59.360
Rust is an important part of the success story here,

00:48:59.360 --> 00:49:01.600
but I think it's like really,

00:49:01.600 --> 00:49:04.920
I think it would be really like very incorrect to say

00:49:04.920 --> 00:49:06.680
that it's like all about Rust

00:49:06.680 --> 00:49:08.640
and it's not a Rust versus Python thing.

00:49:08.640 --> 00:49:09.480
Like-- - Right.

00:49:09.480 --> 00:49:11.840
Like if we could just recompile pip with--

00:49:11.840 --> 00:49:13.240
(laughing)

00:49:13.240 --> 00:49:14.080
- Yeah, so if you took--

00:49:14.080 --> 00:49:17.000
- With a Cython or something and boom, it would just be,

00:49:17.000 --> 00:49:19.480
no, it wouldn't be as big of a deal, right?

00:49:19.480 --> 00:49:21.920
- If you took pip and just like rewrote it line by line

00:49:21.920 --> 00:49:23.840
as close as you could in Rust,

00:49:23.840 --> 00:49:26.200
like it would probably be faster than Pip,

00:49:26.200 --> 00:49:28.600
but it would not be nearly as fast as UV.

00:49:28.600 --> 00:49:31.000
Like we just do a lot of things differently.

00:49:31.000 --> 00:49:34.000
And part of like, I guess evidence for this too,

00:49:34.000 --> 00:49:36.160
is like throughout the development of UV,

00:49:36.160 --> 00:49:38.080
there were like multiple pull requests

00:49:38.080 --> 00:49:41.800
that sped up like UV as a whole by like 30 to 50%.

00:49:41.800 --> 00:49:42.720
So what does that say?

00:49:42.720 --> 00:49:44.920
That says that like there's lots of different,

00:49:44.920 --> 00:49:46.720
those were all Rust programs, right?

00:49:46.720 --> 00:49:49.480
So like we were able to write the same Rust program

00:49:49.480 --> 00:49:52.520
many times, optimizing it more and more and more.

00:49:52.520 --> 00:49:53.360
- Right.

00:49:53.360 --> 00:49:55.240
- And so there's like so much engineering

00:49:55.240 --> 00:49:57.160
that went into making it fast.

00:49:57.160 --> 00:49:59.040
Some of it's like how the cache is designed.

00:49:59.040 --> 00:50:01.000
That was like a really important piece.

00:50:01.000 --> 00:50:04.600
And that's actually something that like pip could also do.

00:50:04.600 --> 00:50:08.920
And I think like it's possible a good outcome here actually

00:50:08.920 --> 00:50:11.440
is that like pip is able to take some of these changes

00:50:11.440 --> 00:50:13.320
and incorporate them over time.

00:50:13.320 --> 00:50:17.920
And we are kind of the Guinea pig for that.

00:50:17.920 --> 00:50:19.960
Like we're gonna kind of change user expectations

00:50:19.960 --> 00:50:21.720
a little bit about how the cache is set up.

00:50:21.720 --> 00:50:26.200
Like we're gonna run into bugs about platform compatibility.

00:50:26.200 --> 00:50:27.920
Like we're gonna run into bugs

00:50:27.920 --> 00:50:29.280
based on this cache design, right?

00:50:29.280 --> 00:50:31.720
And like hopefully that could at some point help inform Pip

00:50:31.720 --> 00:50:34.360
if they choose to redesign their cache this way.

00:50:34.360 --> 00:50:35.920
The cache design is really big thing.

00:50:35.920 --> 00:50:40.840
And then just a lot of like profiling the program,

00:50:40.840 --> 00:50:42.360
figuring out what the bottleneck is,

00:50:42.360 --> 00:50:44.000
and then like solving the bottleneck

00:50:44.000 --> 00:50:46.280
and just like really intense engineering work

00:50:46.280 --> 00:50:48.280
that was not me, but it was like other people on the team

00:50:48.280 --> 00:50:49.240
to optimize some of that.

00:50:49.240 --> 00:50:53.080
Like a good example is, it's okay, it sounds silly,

00:50:53.080 --> 00:50:55.120
but like we found that a bottleneck

00:50:55.120 --> 00:50:56.440
when all the data is cached

00:50:56.440 --> 00:50:57.720
and you're trying to do a resolution.

00:50:57.720 --> 00:51:00.560
So there's no network requests, everything's local.

00:51:00.560 --> 00:51:02.880
One of the bottlenecks that we kept running into

00:51:02.880 --> 00:51:07.800
was parsing and comparing versions, version specifiers.

00:51:07.800 --> 00:51:10.400
So like in Python, when you have a requirements file,

00:51:10.400 --> 00:51:14.600
you have like FastAPI is greater than version one

00:51:14.600 --> 00:51:15.800
or whatever.

00:51:15.800 --> 00:51:17.160
And then in the FastAPI file,

00:51:17.160 --> 00:51:20.040
you have like FastAPI version 1.0.0, blah, blah, blah.

00:51:20.040 --> 00:51:22.680
So like those, like parsing those,

00:51:22.680 --> 00:51:25.080
and then we were comparing those.

00:51:25.080 --> 00:51:28.080
We were doing comparisons between version markers

00:51:28.080 --> 00:51:30.640
like so many times,

00:51:30.640 --> 00:51:32.000
because it was just a constant thing

00:51:32.000 --> 00:51:32.880
in dependency resolution.

00:51:32.880 --> 00:51:34.280
It's like, can I use this dependency?

00:51:34.280 --> 00:51:36.200
Well, does it fit to this range?

00:51:36.200 --> 00:51:40.040
- So Andrew Gallant from our team,

00:51:40.040 --> 00:51:42.680
like rewrote that parser

00:51:42.680 --> 00:51:44.560
and the version comparison specifier.

00:51:44.560 --> 00:51:46.840
And it's like one of the most incredible pull requests

00:51:46.840 --> 00:51:47.680
I've ever seen.

00:51:47.680 --> 00:51:48.600
Like it's like so interesting.

00:51:48.600 --> 00:51:51.200
Like every commitment is like so interesting.

00:51:51.200 --> 00:51:54.160
And he like optimized it so massively that it was like,

00:51:54.160 --> 00:51:56.120
he's basically representing the version in the end

00:51:56.120 --> 00:52:01.120
by like a 64 bit, like a U64 integer.

00:52:01.120 --> 00:52:03.520
And comparisons is just like compare the two integers.

00:52:03.520 --> 00:52:05.240
And like, there was just so much engineering

00:52:05.240 --> 00:52:06.080
that went into it.

00:52:06.080 --> 00:52:07.800
And it sped up the cache case by like 30%.

00:52:07.800 --> 00:52:10.440
And so there's a lot of,

00:52:10.440 --> 00:52:12.840
there's just a lot of engineering that went into it.

00:52:12.840 --> 00:52:14.920
And, you know, again,

00:52:14.920 --> 00:52:16.640
it's harder for pip to do some of those things

00:52:16.640 --> 00:52:18.720
'cause the code bases,

00:52:18.720 --> 00:52:20.640
they have a lot,

00:52:20.640 --> 00:52:22.320
they have actual users to support, right?

00:52:22.320 --> 00:52:25.200
Like we were able to do this before we launched publicly,

00:52:25.200 --> 00:52:26.760
like we could break things,

00:52:26.760 --> 00:52:28.360
like we can do things, you know,

00:52:28.360 --> 00:52:30.720
we can make massive changes to the code base

00:52:30.720 --> 00:52:31.760
in short periods of time.

00:52:31.760 --> 00:52:34.240
So, you know, we're in kind of a privileged position

00:52:34.240 --> 00:52:36.400
to be able to really optimize the performance like that.

00:52:36.400 --> 00:52:39.000
But, you know, it's a big part culturally

00:52:39.000 --> 00:52:40.400
of what we wanted to do too,

00:52:40.400 --> 00:52:42.960
is like, we're gonna make this thing extremely fast.

00:52:42.960 --> 00:52:46.520
- Yeah, I'm seeing also interesting secondary effects,

00:52:46.520 --> 00:52:48.880
you know, talks and not, not,

00:52:48.880 --> 00:52:52.480
I guess talks, talking about using it, making it faster.

00:52:52.480 --> 00:52:54.200
Just now I hear Henry says,

00:52:54.200 --> 00:52:56.960
"Build 1.1 is faster from looking at UV."

00:52:56.960 --> 00:52:59.880
And the next version will also add UV as an installer choice,

00:52:59.880 --> 00:53:01.480
which is pretty impressive.

00:53:01.480 --> 00:53:03.840
- Yeah, that's been a really cool,

00:53:03.840 --> 00:53:05.680
that's actually something I didn't really anticipate,

00:53:05.680 --> 00:53:08.080
but I'm really glad has happened,

00:53:08.080 --> 00:53:10.560
which is that there's a little bit of like,

00:53:10.560 --> 00:53:12.560
we ended up building something pretty modular.

00:53:12.560 --> 00:53:14.920
And so there's been a little bit of,

00:53:14.920 --> 00:53:17.400
or a lot of like integrations with UV

00:53:17.400 --> 00:53:18.480
that people have been building.

00:53:18.480 --> 00:53:22.400
Like, like Bernat had the talks UV thing

00:53:22.400 --> 00:53:25.000
that was out like within a week, I think,

00:53:25.000 --> 00:53:29.280
which was like use UV to power talks in different ways.

00:53:29.280 --> 00:53:32.760
Yeah, Knox, I think supports it, build, pypi/build.

00:53:33.760 --> 00:53:34.920
- Ah.

00:53:34.920 --> 00:53:37.840
- You know, I've talked to the Hatch maintainer,

00:53:37.840 --> 00:53:41.840
you know, like he's pretty interested in making UV

00:53:41.840 --> 00:53:43.720
like an optional backend for Hatch.

00:53:43.720 --> 00:53:45.920
So like, that's really cool to me

00:53:45.920 --> 00:53:48.880
'cause it's all just like magnifying the impact.

00:53:48.880 --> 00:53:53.880
And again, I don't know how much of that I anticipated,

00:53:53.880 --> 00:53:55.720
but it's really cool to see that like,

00:53:55.720 --> 00:53:57.160
you could plug it into these other tools

00:53:57.160 --> 00:53:59.200
and they can just like go much faster.

00:53:59.200 --> 00:54:02.120
So I don't know, for me, that's been like,

00:54:02.120 --> 00:54:03.440
that's actually been like a big highlight

00:54:03.440 --> 00:54:04.360
from the release, honestly,

00:54:04.360 --> 00:54:06.760
has been the reception from like other maintainers

00:54:06.760 --> 00:54:08.280
of other tools who have been excited

00:54:08.280 --> 00:54:09.880
to integrate it in different ways.

00:54:09.880 --> 00:54:12.080
'Cause it's just not, it just didn't happen.

00:54:12.080 --> 00:54:14.280
Like rough wasn't nearly as much of a fit

00:54:14.280 --> 00:54:16.040
for that kind of thing.

00:54:16.040 --> 00:54:17.920
Like there just aren't as nearly, there are some,

00:54:17.920 --> 00:54:20.440
but it's just not as natural to have like integrations

00:54:20.440 --> 00:54:22.040
with rough in that way.

00:54:22.040 --> 00:54:23.520
But for UV, it makes a lot of sense

00:54:23.520 --> 00:54:24.800
and it's been really cool to see.

00:54:24.800 --> 00:54:26.920
- Yeah, it's more, UV is more of a building block

00:54:26.920 --> 00:54:27.800
than rough is.

00:54:27.800 --> 00:54:30.960
Rough fits in editors and CI and stuff.

00:54:30.960 --> 00:54:31.800
Yeah, okay.

00:54:31.800 --> 00:54:33.400
- There were other tools, but yeah,

00:54:33.400 --> 00:54:38.000
it's mostly an end user thing and not a library, I think.

00:54:38.000 --> 00:54:39.040
- Right, all right.

00:54:39.040 --> 00:54:41.040
So a couple of interesting things out in the audience.

00:54:41.040 --> 00:54:42.480
Let's knock them out.

00:54:42.480 --> 00:54:45.680
Okay, so Tushar asks, and this is, I think,

00:54:45.680 --> 00:54:50.040
a big tension that's building in the Python packaging space

00:54:50.040 --> 00:54:54.200
is do packaging tools use Python to do stuff?

00:54:54.200 --> 00:54:56.720
Or do the packaging tools control the Python?

00:54:56.720 --> 00:54:59.320
Who is controlling whom here?

00:54:59.320 --> 00:55:00.360
And so Tushar asks,

00:55:00.360 --> 00:55:02.960
will UV also install Python sometime soon?

00:55:02.960 --> 00:55:06.160
Can I just express, hey, I wanna use 3.12 on this

00:55:06.160 --> 00:55:07.320
in these dependencies?

00:55:07.320 --> 00:55:10.920
- Yeah, we almost certainly wanna do this.

00:55:10.920 --> 00:55:13.840
I don't think it will be, it won't be required.

00:55:13.840 --> 00:55:15.840
Like you can still use your own Python,

00:55:15.840 --> 00:55:19.640
but we almost certainly want to add Python bootstrapping.

00:55:19.640 --> 00:55:23.280
So like, that's another reason why the dream workflow

00:55:23.280 --> 00:55:26.080
is like you use the standalone UV installer

00:55:26.080 --> 00:55:28.040
because then it's like,

00:55:28.040 --> 00:55:30.040
it will actually install Python for you too.

00:55:30.040 --> 00:55:32.360
And so like the reason, so then it's like,

00:55:32.360 --> 00:55:35.400
you don't have to have Python on your machine basically

00:55:35.400 --> 00:55:37.040
to start being productive with UV.

00:55:37.040 --> 00:55:39.080
You can just bootstrap the environment for you.

00:55:39.080 --> 00:55:40.680
And we can also do, you know,

00:55:40.680 --> 00:55:44.200
yeah, it would just be nice if you did, you know,

00:55:44.200 --> 00:55:47.280
pip compile, like UV pip compile,

00:55:47.280 --> 00:55:50.240
--Python 3.13 or something.

00:55:50.240 --> 00:55:52.600
And then we just like bootstrapped Python 3.13

00:55:52.600 --> 00:55:54.080
and did the resolution on your machine.

00:55:54.080 --> 00:55:55.360
Like that's kind of the workflow

00:55:55.360 --> 00:55:56.560
that we're trying to build towards.

00:55:56.560 --> 00:55:58.800
- Yeah, since you're so UV centric as well,

00:55:58.800 --> 00:56:02.320
it could be UV, VNV, you know, --version.

00:56:02.320 --> 00:56:03.160
- Yeah, a hundred percent.

00:56:03.160 --> 00:56:04.000
- 3.12 or whatever.

00:56:04.000 --> 00:56:05.440
- And then we bootstrap it, yeah.

00:56:05.440 --> 00:56:06.760
- If you don't have, if you've got a cache,

00:56:06.760 --> 00:56:07.600
you just give it.

00:56:07.600 --> 00:56:09.440
And if you don't, then you get it on the machine.

00:56:09.440 --> 00:56:10.320
- Exactly.

00:56:10.320 --> 00:56:11.160
- Yeah.

00:56:11.160 --> 00:56:13.080
- Yeah, so we'll definitely do this.

00:56:13.080 --> 00:56:15.680
Again, I do think it's important that it's not like required

00:56:15.680 --> 00:56:17.880
to use like the UV Pythons.

00:56:17.880 --> 00:56:22.160
We actually kind of had to do like a minimal version

00:56:22.160 --> 00:56:25.720
of this for our CI and testing.

00:56:25.720 --> 00:56:28.920
But it was a batch script

00:56:28.920 --> 00:56:30.320
and then I think it became a Python script,

00:56:30.320 --> 00:56:32.440
but eventually it would be like built into UV.

00:56:32.440 --> 00:56:33.280
Yeah.

00:56:33.280 --> 00:56:34.120
- Yeah, yeah.

00:56:34.120 --> 00:56:34.960
I think that would be really.

00:56:34.960 --> 00:56:35.800
- Yeah, I think it'll be super cool.

00:56:35.800 --> 00:56:36.680
- Really quite awesome.

00:56:36.680 --> 00:56:38.840
- Yeah, I think it will be too.

00:56:38.840 --> 00:56:39.720
Let's see.

00:56:39.720 --> 00:56:43.440
Tushar also says, loves that the --require VNV.

00:56:43.440 --> 00:56:44.280
- Yep.

00:56:44.280 --> 00:56:45.400
- As a thing.

00:56:45.400 --> 00:56:46.800
He thinks it'll become the default

00:56:46.800 --> 00:56:49.080
and also points out for those who don't UV

00:56:49.080 --> 00:56:52.520
that pip require virtual VNV as an environment flag

00:56:52.520 --> 00:56:53.760
is in your RC files.

00:56:53.760 --> 00:56:54.600
It's pretty nice.

00:56:54.600 --> 00:56:55.920
I need to do that just the other day.

00:56:55.920 --> 00:56:56.760
- Yeah, you can.

00:56:56.760 --> 00:57:00.400
- Oh, I spelled that to the wrong spot.

00:57:00.400 --> 00:57:03.600
- Yeah, so pip can be configured to require virtual ends.

00:57:03.600 --> 00:57:04.440
- Yes.

00:57:04.440 --> 00:57:05.280
- Yeah, I do something weird.

00:57:05.280 --> 00:57:06.360
I'm actually looking at my terminal

00:57:06.360 --> 00:57:09.920
behind our shared screen, our meeting here.

00:57:09.920 --> 00:57:12.440
And my prompt says global VNV.

00:57:12.440 --> 00:57:14.640
And so one of the things that I do is have a,

00:57:14.640 --> 00:57:16.680
just if I log it, if I open up my terminal,

00:57:16.680 --> 00:57:18.440
it already has an activated virtual environment.

00:57:18.440 --> 00:57:20.000
It's just for whatever.

00:57:20.000 --> 00:57:20.840
- Oh, interesting.

00:57:20.840 --> 00:57:22.760
To just avoid messing up your system Python.

00:57:22.760 --> 00:57:23.960
- Just to avoid messing it up.

00:57:23.960 --> 00:57:25.160
Or so I can have,

00:57:25.160 --> 00:57:26.920
I can just make that virtual environment

00:57:26.920 --> 00:57:28.560
the version of Python I want it to be,

00:57:28.560 --> 00:57:30.760
even if it's not the system one in general

00:57:30.760 --> 00:57:32.360
that I want to set, you know, just like,

00:57:32.360 --> 00:57:33.200
it's its own thing.

00:57:33.200 --> 00:57:34.680
And so it wouldn't actually help me,

00:57:34.680 --> 00:57:35.520
but I still like that.

00:57:35.520 --> 00:57:36.360
- That's smart.

00:57:36.360 --> 00:57:37.920
Yeah, that's smart.

00:57:37.920 --> 00:57:38.760
(laughs)

00:57:38.760 --> 00:57:39.600
- Thanks.

00:57:39.600 --> 00:57:42.040
- Yeah, I've learned a lot about like, oh my gosh.

00:57:42.040 --> 00:57:43.840
I mean, I've learned a lot about packaging.

00:57:43.840 --> 00:57:45.760
Like I didn't know like anything about packaging,

00:57:45.760 --> 00:57:47.400
you know, like six months ago.

00:57:48.320 --> 00:57:49.920
I shouldn't, I should actually shouldn't admit that

00:57:49.920 --> 00:57:51.840
'cause it's really bad for my credibility,

00:57:51.840 --> 00:57:54.200
but like I've learned a lot about packaging

00:57:54.200 --> 00:57:56.280
and in the past like two weeks,

00:57:56.280 --> 00:58:00.200
I've also learned a lot about like system Pythons,

00:58:00.200 --> 00:58:02.080
like how Python is installed

00:58:02.080 --> 00:58:06.000
and like how on like older versions of like Debian,

00:58:06.000 --> 00:58:09.160
like Python, they do like a lot of customization to Python

00:58:09.160 --> 00:58:11.000
that makes it like really different from like,

00:58:11.000 --> 00:58:13.000
and I learned like way more about this

00:58:13.000 --> 00:58:15.000
than I ever thought I would.

00:58:15.000 --> 00:58:16.200
- I think it's fine to say that.

00:58:16.200 --> 00:58:17.600
- I'm out on system Pythons,

00:58:17.600 --> 00:58:18.880
but we do support them.

00:58:18.880 --> 00:58:19.960
- Yeah, awesome.

00:58:19.960 --> 00:58:21.800
You know, someone asked me like,

00:58:21.800 --> 00:58:24.160
no, Michael, you must know all of the standard library.

00:58:24.160 --> 00:58:25.400
I'm like, what are you crazy?

00:58:25.400 --> 00:58:26.240
No.

00:58:26.240 --> 00:58:27.080
- Yeah.

00:58:27.080 --> 00:58:28.800
- Why would I want to know everything?

00:58:28.800 --> 00:58:29.640
Yes, exactly.

00:58:29.640 --> 00:58:31.360
And I think it's the same thing about packaging.

00:58:31.360 --> 00:58:33.080
There's like so many edge cases.

00:58:33.080 --> 00:58:35.160
If you never interact with an edge case

00:58:35.160 --> 00:58:36.360
and you don't care about that edge case,

00:58:36.360 --> 00:58:38.720
why would you take the week or whatever to study it?

00:58:38.720 --> 00:58:41.520
Like it's just, it's irrelevant to you until you need it.

00:58:41.520 --> 00:58:44.680
And now you've dove in head first here.

00:58:44.680 --> 00:58:47.560
So then you're in the deep end with it.

00:58:47.560 --> 00:58:49.320
- We spent so much time.

00:58:49.320 --> 00:58:50.520
I shouldn't even bring this up,

00:58:50.520 --> 00:58:53.080
but we did, okay, when we were, whatever,

00:58:53.080 --> 00:58:55.120
I won't tell the whole story 'cause I need to not,

00:58:55.120 --> 00:58:58.040
but like we did consider like lots of different names

00:58:58.040 --> 00:59:01.520
for this tool and multiple times we considered a name

00:59:01.520 --> 00:59:03.800
and then it turned out to be a standard library module

00:59:03.800 --> 00:59:05.240
that none of us had ever used.

00:59:05.240 --> 00:59:09.400
Like we wanted to use WAVE, W-A-V-E,

00:59:09.400 --> 00:59:10.720
but that's a standard library module.

00:59:10.720 --> 00:59:11.560
Yeah, yeah.

00:59:11.560 --> 00:59:12.520
I was like, oh, I had no idea.

00:59:12.520 --> 00:59:14.880
- Is that for working with WAVE audio files?

00:59:14.880 --> 00:59:15.720
Probably it is.

00:59:15.720 --> 00:59:17.360
- Yeah, like WAV files, yeah.

00:59:17.360 --> 00:59:18.560
- Yeah, interesting.

00:59:18.560 --> 00:59:19.480
Yeah, there's a bunch of stuff.

00:59:19.480 --> 00:59:22.040
There's a whole demo reason removing certain things

00:59:22.040 --> 00:59:25.480
that like, you know, I know it's like a library,

00:59:25.480 --> 00:59:28.000
but some of these things I had never seen.

00:59:28.000 --> 00:59:31.640
- Yeah, well, it's naming tools and packages

00:59:31.640 --> 00:59:33.400
is a whole special deal.

00:59:33.400 --> 00:59:36.120
And we have half a million packages in PyPI.

00:59:36.120 --> 00:59:38.320
And so how are you gonna not conflict with that?

00:59:38.320 --> 00:59:39.640
Have an interesting name.

00:59:39.640 --> 00:59:42.400
That's not for, I'm for typo squatting.

00:59:42.400 --> 00:59:43.240
- Yeah, exactly.

00:59:43.240 --> 00:59:44.280
- Hard, it's a hard problem.

00:59:44.280 --> 00:59:46.840
- Yeah, I don't even get me started on name stuff.

00:59:46.840 --> 00:59:48.520
Someone actually donated this name to us,

00:59:48.520 --> 00:59:49.760
which is very kind of them.

00:59:49.760 --> 00:59:51.280
- Oh, that's actually very cool.

00:59:51.280 --> 00:59:52.120
Very cool.

00:59:52.120 --> 00:59:55.160
All right, one other thing I do wanna talk about here,

00:59:55.160 --> 00:59:58.040
Kanishka says, asks about, you know,

00:59:58.040 --> 01:00:00.440
is there a future where Rye, R-Y-E,

01:00:00.440 --> 01:00:03.040
and UV go hand in hand, also great work,

01:00:03.040 --> 01:00:05.120
but maybe just talk a bit about Rye.

01:00:05.120 --> 01:00:07.080
That was by Armin Roenicker,

01:00:07.080 --> 01:00:09.400
and it kind of had a similar zen as UV,

01:00:09.400 --> 01:00:10.840
but really different.

01:00:10.840 --> 01:00:14.120
- Yeah, so we, yeah, so we're taking over

01:00:14.120 --> 01:00:16.240
like maintainership of Rye,

01:00:16.240 --> 01:00:19.680
and we've just been like,

01:00:19.680 --> 01:00:21.000
I think I started talking to Armin,

01:00:21.000 --> 01:00:24.160
like right after Rye got released,

01:00:24.160 --> 01:00:25.720
which was PyCon last year,

01:00:25.720 --> 01:00:27.520
I think it was during PyCon it got released.

01:00:27.520 --> 01:00:30.160
And we talked like shortly after,

01:00:30.160 --> 01:00:31.040
and we just found that like,

01:00:31.040 --> 01:00:32.560
we were trying to do a lot of the,

01:00:32.560 --> 01:00:34.120
we were trying to solve a lot of the same problems,

01:00:34.120 --> 01:00:35.760
and we had like very similar vision

01:00:35.760 --> 01:00:37.720
for what we wanted packaging to be.

01:00:37.720 --> 01:00:40.320
But like, we were coming at it from very different angles,

01:00:40.320 --> 01:00:42.440
like Rye kind of came at it from,

01:00:42.440 --> 01:00:44.320
let's solve the Python bootstrapping problem.

01:00:44.320 --> 01:00:45.160
So we're gonna ship a Rust tool.

01:00:45.160 --> 01:00:46.600
- It's like it's main focus, yeah.

01:00:46.600 --> 01:00:47.600
- Yeah, exactly.

01:00:47.600 --> 01:00:48.800
And then internally,

01:00:48.800 --> 01:00:50.720
it was actually using like pip tools,

01:00:50.720 --> 01:00:54.360
and pip to do installs and resolutions.

01:00:54.360 --> 01:00:55.880
And then the thing that,

01:00:55.880 --> 01:00:58.360
I think the thing that Armin came to realize was like,

01:00:58.360 --> 01:01:00.160
if you wanna fulfill this whole vision,

01:01:00.160 --> 01:01:03.520
you kind of need to like reinvent a lot of those internals.

01:01:03.520 --> 01:01:05.200
And meanwhile, like we were building UV,

01:01:05.200 --> 01:01:07.800
which was like basically those internals.

01:01:07.800 --> 01:01:10.720
And I was like, we're gonna put a lot of effort

01:01:10.720 --> 01:01:13.840
into like building this packaging stack.

01:01:13.840 --> 01:01:15.080
And so we kind of found that like,

01:01:15.080 --> 01:01:16.160
it was just a really,

01:01:16.160 --> 01:01:18.040
we were trying to get to the same place.

01:01:18.040 --> 01:01:20.760
And we were putting in a lot of the engineering investment

01:01:20.760 --> 01:01:23.120
on building a lot of kind of building blocks.

01:01:23.120 --> 01:01:26.880
And we want UV to evolve into something

01:01:26.880 --> 01:01:28.960
that could like fully replace Rye.

01:01:28.960 --> 01:01:31.120
So we want it to evolve in that direction.

01:01:31.120 --> 01:01:34.120
And in the meantime, like we're gonna keep maintaining Rye

01:01:34.120 --> 01:01:38.040
and kind of using it as like a little bit of a test bed

01:01:38.040 --> 01:01:39.720
for like experimental things,

01:01:39.720 --> 01:01:42.720
like Armin added like pytest support to it, for example.

01:01:42.720 --> 01:01:44.640
So we're like, we're kind of playing with like,

01:01:44.640 --> 01:01:47.360
that's meant to be more of an experimental test bed

01:01:47.360 --> 01:01:49.520
for like the future that we wanna achieve.

01:01:49.520 --> 01:01:51.280
And over time, we're gonna kind of evolve UV

01:01:51.280 --> 01:01:53.480
up to the point that hopefully it can fully replace it.

01:01:53.480 --> 01:01:56.840
And then we can provide a clear migration path for it.

01:01:56.840 --> 01:01:58.280
So we're gonna keep maintaining it.

01:01:58.280 --> 01:02:00.560
It is our intention for UV to like,

01:02:00.560 --> 01:02:04.000
to supplant it at some point in the future,

01:02:04.000 --> 01:02:05.920
but it'll take us like time for it to get there

01:02:05.920 --> 01:02:08.160
and be able to do all the things.

01:02:08.160 --> 01:02:10.360
But the visions were just so similar

01:02:10.360 --> 01:02:11.800
that it seemed like it made a lot of sense

01:02:11.800 --> 01:02:14.800
to try and consolidate and kind of team up on it.

01:02:14.800 --> 01:02:16.800
- Yeah, they do seem pretty similar.

01:02:16.800 --> 01:02:19.720
And I can see the direction that you're going in it.

01:02:19.720 --> 01:02:21.360
It's gonna make them more similar.

01:02:21.360 --> 01:02:22.200
- Yeah, I know it'll take time.

01:02:22.200 --> 01:02:24.960
And like, you know, this release of UV is like,

01:02:24.960 --> 01:02:26.720
it really is like the first release, you know?

01:02:26.720 --> 01:02:28.880
It's like, I kind of use some of this stuff

01:02:28.880 --> 01:02:30.200
as like pretty low level.

01:02:30.200 --> 01:02:33.360
Like we wanna build something that feels higher level

01:02:33.360 --> 01:02:35.560
and more automatic in the future.

01:02:35.560 --> 01:02:38.720
But these are kind of like the ability to install

01:02:38.720 --> 01:02:40.120
and uninstall and resolve packages.

01:02:40.120 --> 01:02:42.960
And these were like the fundamental things we needed

01:02:42.960 --> 01:02:44.840
and need for anything we were gonna do.

01:02:44.840 --> 01:02:47.240
And so this goal was really, let's take those

01:02:47.240 --> 01:02:48.280
and let's put them in a form

01:02:48.280 --> 01:02:50.200
that's like immediately useful to people.

01:02:50.200 --> 01:02:51.640
- Yeah, for sure.

01:02:51.640 --> 01:02:54.600
One more Rye question, then I have other questions.

01:02:54.600 --> 01:02:56.720
So UV will replace Rye.

01:02:56.720 --> 01:02:59.040
Do you recommend using Rye or UV

01:02:59.040 --> 01:03:01.640
or what's that side of the story, right?

01:03:01.640 --> 01:03:02.760
- Yeah, yeah, yeah.

01:03:02.760 --> 01:03:04.040
It kind of depends on what you're doing.

01:03:04.040 --> 01:03:07.600
So like Rye uses UV under the hood.

01:03:07.600 --> 01:03:11.240
So like Rye uses UV for resolution and installation.

01:03:11.240 --> 01:03:13.640
So if you're using Rye, you're using UV.

01:03:13.640 --> 01:03:17.160
I like, I say, I consider UV to be like,

01:03:17.160 --> 01:03:19.480
especially if you're like a company or something,

01:03:19.480 --> 01:03:23.000
like I would say UV is production ready for you.

01:03:23.000 --> 01:03:27.280
Rye, you're buying into a little bit more

01:03:27.280 --> 01:03:29.120
of something that's a little bit more experimental.

01:03:29.120 --> 01:03:31.040
Like I think Rye is a good fit for like

01:03:31.040 --> 01:03:32.640
professional projects, hobby projects,

01:03:32.640 --> 01:03:33.880
libraries, smaller projects.

01:03:33.880 --> 01:03:36.000
I don't know that I would,

01:03:36.880 --> 01:03:40.280
like you're just buying into more change, I think.

01:03:40.280 --> 01:03:41.120
- Yeah.

01:03:41.120 --> 01:03:41.960
- And so if you're already--

01:03:41.960 --> 01:03:43.520
- So if you're a modern repo,

01:03:43.520 --> 01:03:46.560
that's got a million lines of code and 110 people on it.

01:03:46.560 --> 01:03:48.400
- Yeah, you can certainly try it,

01:03:48.400 --> 01:03:49.360
but you should know that you're buying

01:03:49.360 --> 01:03:51.360
into something experimental is the way I'd put it.

01:03:51.360 --> 01:03:53.920
Whereas UV, like you could also view UV

01:03:53.920 --> 01:03:55.000
as experimental if you want.

01:03:55.000 --> 01:03:56.160
Like it's very new, right?

01:03:56.160 --> 01:03:58.800
Like we've, we're like when we launched, we had,

01:03:58.800 --> 01:04:00.400
I mean, I think having issues is actually good

01:04:00.400 --> 01:04:02.000
'cause it means people are using your project,

01:04:02.000 --> 01:04:03.560
but we had like hundreds of issues

01:04:03.560 --> 01:04:05.080
and we closed and we closed,

01:04:05.080 --> 01:04:07.360
we've closed like hundreds and hundreds of issues

01:04:07.360 --> 01:04:08.200
since we launched.

01:04:08.200 --> 01:04:09.760
- Yeah, you guys have been super,

01:04:09.760 --> 01:04:10.960
yeah, you've been super responsive on it.

01:04:10.960 --> 01:04:13.200
Like you and I've had some exchanges there.

01:04:13.200 --> 01:04:14.040
- Yeah, we did.

01:04:14.040 --> 01:04:17.280
- And yeah, that's some nice changes I saw going on,

01:04:17.280 --> 01:04:19.080
but like I said, almost every day--

01:04:19.080 --> 01:04:20.360
- It's just getting like way better.

01:04:20.360 --> 01:04:21.200
- It's great.

01:04:21.200 --> 01:04:22.880
- Yeah, and it's just getting way, way better.

01:04:22.880 --> 01:04:25.080
Like that's the thing about developing in private

01:04:25.080 --> 01:04:27.080
is like, like we just, once we released it,

01:04:27.080 --> 01:04:29.120
we finally, we actually had users who could use it

01:04:29.120 --> 01:04:30.480
and tell us all the things we missed,

01:04:30.480 --> 01:04:31.680
tell us all the things we didn't think about.

01:04:31.680 --> 01:04:33.160
It's just like every week getting way better.

01:04:33.160 --> 01:04:36.040
So like it's getting more and more stable

01:04:36.040 --> 01:04:38.880
and like I would use it in production for my stuff,

01:04:38.880 --> 01:04:41.520
for sure, and I recommend it for production.

01:04:41.520 --> 01:04:44.560
But like Rye is just a little bit of a different story.

01:04:44.560 --> 01:04:46.680
I think with Rye, you know,

01:04:46.680 --> 01:04:48.160
it's not like we're gonna shut it down tomorrow

01:04:48.160 --> 01:04:49.000
or anything like that.

01:04:49.000 --> 01:04:50.140
Like it's gonna be,

01:04:50.140 --> 01:04:52.400
it's gonna continue to be supported for sure.

01:04:52.400 --> 01:04:56.520
But you are, and I think it's branded this way,

01:04:56.520 --> 01:04:57.720
which is you're are kind of buying

01:04:57.720 --> 01:04:59.600
into a little bit of an experimental tool.

01:04:59.600 --> 01:05:01.400
- Yeah, also a bit of a workflow.

01:05:01.400 --> 01:05:03.360
- Yeah, it's a very opinionated workflow.

01:05:03.360 --> 01:05:04.320
- Yeah. - Yeah.

01:05:04.320 --> 01:05:05.160
Whereas you'd use more design

01:05:05.160 --> 01:05:07.920
to kind of slot into existing workflows.

01:05:07.920 --> 01:05:10.960
- Sure, it's a little more foundational.

01:05:10.960 --> 01:05:13.960
Speaking of which, I really like that, you know,

01:05:13.960 --> 01:05:16.180
so many of these tools have their own,

01:05:16.180 --> 01:05:17.360
their complete own way.

01:05:17.360 --> 01:05:18.760
Like I know you're gonna do that,

01:05:18.760 --> 01:05:20.480
but we're gonna start up our shell

01:05:20.480 --> 01:05:22.240
and then you're gonna run these three commands

01:05:22.240 --> 01:05:23.720
and then we're gonna have our own lock file

01:05:23.720 --> 01:05:24.920
and we have our own things.

01:05:24.920 --> 01:05:27.800
And it's amazing if you drink the Kool-Aid,

01:05:27.800 --> 01:05:29.160
if you go all in on the tool.

01:05:29.160 --> 01:05:31.680
But if you don't, then it's like,

01:05:31.680 --> 01:05:33.080
okay, well, what is this thing even doing?

01:05:33.080 --> 01:05:35.280
It's more in my way than it's helping me, you know,

01:05:35.280 --> 01:05:36.120
and so on.

01:05:36.120 --> 01:05:40.000
So the fact that a lot of this is kind of baking

01:05:40.000 --> 01:05:42.440
in the pip-tools way of,

01:05:42.440 --> 01:05:43.720
there's gonna be this external tool

01:05:43.720 --> 01:05:46.160
that can manage some of your stuff for you,

01:05:46.160 --> 01:05:48.480
but it's not prescribing a workflow,

01:05:48.480 --> 01:05:50.520
100% props for that, love it.

01:05:50.520 --> 01:05:54.040
- Thanks, yeah, I wanted to build something that,

01:05:54.040 --> 01:05:55.840
again, I use the word like modular a lot

01:05:55.840 --> 01:05:57.240
and I think it can mean different things,

01:05:57.240 --> 01:05:59.040
but like, Ruff was kind of like this too.

01:05:59.040 --> 01:06:01.680
Like in Ruff, you can use it as like just a linter

01:06:01.680 --> 01:06:03.640
or like just a formatter or both.

01:06:03.640 --> 01:06:06.440
And like with UV, like you could use UV

01:06:06.440 --> 01:06:07.840
like just to create virtual environments

01:06:07.840 --> 01:06:10.520
or just to do dependency resolution,

01:06:10.520 --> 01:06:12.760
but use pip for your installer or something.

01:06:12.760 --> 01:06:15.600
Like it's designed to be kind of flexible

01:06:15.600 --> 01:06:17.560
in how you choose to use it.

01:06:17.560 --> 01:06:20.560
And I wanna maintain that, you know,

01:06:20.560 --> 01:06:22.280
I think we'll start to introduce

01:06:22.280 --> 01:06:23.920
more opinionated workflows,

01:06:23.920 --> 01:06:26.240
but I think that we'll continue to provide

01:06:26.240 --> 01:06:29.920
this kind of pick and choose model as well.

01:06:29.920 --> 01:06:31.640
- Yeah, yeah, I think it's great.

01:06:31.640 --> 01:06:33.360
It lines right up with the way I do things.

01:06:33.360 --> 01:06:35.880
And also I really like it as both someone

01:06:35.880 --> 01:06:38.400
who might do presentations either at a conference

01:06:38.400 --> 01:06:40.520
or in a course or teaching,

01:06:40.520 --> 01:06:42.560
because you're not putting, you know,

01:06:42.560 --> 01:06:43.880
the whole virtual environment stuff

01:06:43.880 --> 01:06:46.360
is already such a kind of a large barrier

01:06:46.360 --> 01:06:49.560
that comes a little early in people's learning path, right?

01:06:49.560 --> 01:06:51.640
They're like, I wanna run Python, I wanna run this thing.

01:06:51.640 --> 01:06:55.160
Whoa, you don't just install this, you don't just use it.

01:06:55.160 --> 01:06:56.680
We're gonna talk about virtual environments.

01:06:56.680 --> 01:06:58.080
Like, I don't care about those, I just wanna run it.

01:06:58.080 --> 01:06:59.760
Like, but you're gonna need to install something.

01:06:59.760 --> 01:07:00.840
So here we go.

01:07:00.840 --> 01:07:02.120
Right, adding more workflow

01:07:02.120 --> 01:07:04.480
and more specific ways of working there,

01:07:04.480 --> 01:07:06.720
I think while trying to help a lot of times

01:07:06.720 --> 01:07:09.360
they end up just adding more friction at the start.

01:07:09.360 --> 01:07:10.320
- Yeah, yeah.

01:07:10.320 --> 01:07:12.880
And like, I guess my philosophy there is like,

01:07:12.880 --> 01:07:17.360
I want us to like embrace virtual environments.

01:07:17.360 --> 01:07:18.960
I think Rai has this philosophy too,

01:07:18.960 --> 01:07:20.840
which is like Rai does use virtual environments.

01:07:20.840 --> 01:07:23.120
And like virtual environments actually have a lot of,

01:07:23.120 --> 01:07:24.800
there's a lot of benefits to embracing them.

01:07:24.800 --> 01:07:26.360
Like all the editors and such,

01:07:26.360 --> 01:07:27.520
they're all built around virtual,

01:07:27.520 --> 01:07:29.960
they all are all built around virtual environment detection

01:07:29.960 --> 01:07:31.600
and stuff like that.

01:07:31.600 --> 01:07:35.080
But I wanted to feel, I wanted to feel a little, honestly,

01:07:35.080 --> 01:07:36.520
like it has a really bad reputation,

01:07:36.520 --> 01:07:38.920
but I wanted to feel more like node modules, you know?

01:07:38.920 --> 01:07:40.320
- Yeah, I agree.

01:07:40.320 --> 01:07:41.200
- It just kind of works in your,

01:07:41.200 --> 01:07:42.360
it just kind of sits in your project

01:07:42.360 --> 01:07:44.760
and your project just does the right thing.

01:07:44.760 --> 01:07:46.800
And I know people make fun of node modules

01:07:46.800 --> 01:07:48.600
usually for being big,

01:07:48.600 --> 01:07:50.600
but like, but that's the developer experience I want,

01:07:50.600 --> 01:07:52.680
which is you don't think of the virtual environment

01:07:52.680 --> 01:07:53.520
as this weird other thing.

01:07:53.520 --> 01:07:55.400
It's just kind of like the project environment

01:07:55.400 --> 01:07:56.320
and it just kind of works.

01:07:56.320 --> 01:07:59.720
And I think, I think you get that by not like

01:07:59.720 --> 01:08:01.240
fielding people from it,

01:08:01.240 --> 01:08:02.680
but abstracting some of it away

01:08:02.680 --> 01:08:04.280
for people that don't need to think about it.

01:08:04.280 --> 01:08:07.520
- Yeah, there was a, there was an amazing,

01:08:07.520 --> 01:08:09.560
it's not a joke, but it's, I guess,

01:08:09.560 --> 01:08:14.040
something that's a prank that somebody came up with.

01:08:14.040 --> 01:08:15.360
Here, I'll put it on the screen.

01:08:15.360 --> 01:08:18.040
It's called "When Everything Becomes Too Much,"

01:08:18.040 --> 01:08:21.200
the NPM package chaos of 2024.

01:08:21.200 --> 01:08:23.000
And I was just, as you were talking about node modules,

01:08:23.000 --> 01:08:24.080
this is more of a- - Oh my gosh.

01:08:24.080 --> 01:08:25.840
I haven't seen this.

01:08:25.840 --> 01:08:26.880
- It's amazing.

01:08:26.880 --> 01:08:29.520
So it's more of a statement of like,

01:08:29.520 --> 01:08:31.600
well, how super interdependent

01:08:31.600 --> 01:08:35.040
or how many combinatorial or transitive dependencies

01:08:35.040 --> 01:08:37.280
does a couple of NPM things have?

01:08:37.280 --> 01:08:39.080
Like, for example, I used Tailwind,

01:08:39.080 --> 01:08:43.040
but there was maybe 50 things in my node module

01:08:43.040 --> 01:08:45.920
for just using Tailwind in my project, right?

01:08:45.920 --> 01:08:47.080
So anyway, this one is,

01:08:47.080 --> 01:08:51.560
an NPM user named PatrickJS launched a troll campaign

01:08:51.560 --> 01:08:53.360
where a package called everything,

01:08:53.360 --> 01:08:55.640
it depended on every other NPM package.

01:08:55.640 --> 01:08:58.560
So if you, you know, NPM install everything,

01:08:58.560 --> 01:09:00.720
they literally try to download the repository.

01:09:00.720 --> 01:09:03.280
- Yeah, that's kind of amazing.

01:09:03.280 --> 01:09:04.400
Wow. - I know.

01:09:04.400 --> 01:09:07.240
It's devious, but it's also kind of like,

01:09:07.240 --> 01:09:09.640
okay, that's something else.

01:09:09.640 --> 01:09:11.400
- Yeah, and Python and dependency trees

01:09:11.400 --> 01:09:15.560
tend to be much, like, shorter, I guess, and like smaller.

01:09:15.560 --> 01:09:18.080
Like, you tend to have way fewer dependencies.

01:09:18.080 --> 01:09:21.280
They are sometimes like heavier, I guess,

01:09:21.280 --> 01:09:22.120
'cause like in Python,

01:09:22.120 --> 01:09:24.800
it's very common to have lots of native code.

01:09:24.800 --> 01:09:27.520
And like, I don't know, like PyTorch,

01:09:27.520 --> 01:09:30.200
like the PyTorch wheels that you download

01:09:30.200 --> 01:09:34.560
when they're zipped are like between 100 and 200 megabytes.

01:09:34.560 --> 01:09:36.280
- Wow, okay. - And like, yeah, yeah.

01:09:36.280 --> 01:09:38.640
Like all the ML stuff and all the native stuff,

01:09:38.640 --> 01:09:40.120
like those are like big,

01:09:40.120 --> 01:09:43.360
but the number of dependencies tends to be a lot smaller.

01:09:43.360 --> 01:09:44.360
- Yeah, I totally agree.

01:09:44.360 --> 01:09:47.120
- It's also very common to ship like foundational packages

01:09:47.120 --> 01:09:49.920
with like no dependencies or very few dependencies,

01:09:49.920 --> 01:09:52.400
which is very hard to do in JavaScript.

01:09:52.400 --> 01:09:53.240
- Yeah, it is.

01:09:53.240 --> 01:09:55.320
It definitely is.

01:09:55.320 --> 01:09:57.080
All right, I think we're getting short on time here.

01:09:57.080 --> 01:09:58.920
I think I probably should let you go back

01:09:58.920 --> 01:10:01.320
and knock out another release of UV.

01:10:01.320 --> 01:10:02.520
- I do have a new release today.

01:10:02.520 --> 01:10:03.720
Okay, thank you. - Awesome.

01:10:03.720 --> 01:10:04.920
(laughing)

01:10:04.920 --> 01:10:07.240
So Tony, all the audience has been using UV

01:10:07.240 --> 01:10:08.840
in production for a couple of weeks now.

01:10:08.840 --> 01:10:10.440
Also, seems very excited about it.

01:10:10.440 --> 01:10:12.320
And also, I have two.

01:10:12.320 --> 01:10:14.320
It's an absolute delight.

01:10:14.320 --> 01:10:16.400
It hasn't, I know there were certain,

01:10:16.400 --> 01:10:17.480
yeah, I know there are certain things

01:10:17.480 --> 01:10:19.560
that it didn't do like right away,

01:10:19.560 --> 01:10:23.960
but then it came out and you added them quickly.

01:10:23.960 --> 01:10:26.160
I know there was some criticism for you all

01:10:26.160 --> 01:10:29.000
for developing this in private and then releasing it.

01:10:29.000 --> 01:10:31.360
And I just wanna say like, you know, thanks for doing that.

01:10:31.360 --> 01:10:32.600
And what's the alternative?

01:10:32.600 --> 01:10:35.280
You start with just a blank GitHub repo

01:10:35.280 --> 01:10:37.400
and people start to say, well, you should do this.

01:10:37.400 --> 01:10:38.240
You should be doing that.

01:10:38.240 --> 01:10:39.080
Like, we have a vision.

01:10:39.080 --> 01:10:41.440
Let us just like get it a little structure in place

01:10:41.440 --> 01:10:42.680
and then we'll open source it.

01:10:42.680 --> 01:10:45.160
Like give us a month, you know?

01:10:45.160 --> 01:10:46.000
So I don't know.

01:10:46.000 --> 01:10:48.640
I think it's excellent work you're doing.

01:10:48.640 --> 01:10:49.480
- I appreciate it.

01:10:49.480 --> 01:10:50.320
I appreciate it.

01:10:50.320 --> 01:10:51.160
Yeah, yeah.

01:10:51.160 --> 01:10:52.000
You know, like I said at the start,

01:10:52.000 --> 01:10:55.680
it's different this time because anything we release,

01:10:55.680 --> 01:10:57.840
like, you know.

01:10:57.840 --> 01:10:59.400
- You can work on a rough for a month

01:10:59.400 --> 01:11:01.800
and nobody cares until it starts to catch some traction.

01:11:01.800 --> 01:11:02.640
Right?

01:11:02.640 --> 01:11:03.920
But this is the instant that it hits.

01:11:03.920 --> 01:11:06.640
- Yeah, we knew people would at least look at it

01:11:06.640 --> 01:11:07.480
and at least try it.

01:11:07.480 --> 01:11:09.720
And I think, you know, we wanted to make sure

01:11:09.720 --> 01:11:11.520
that whatever we released, first of all, was good.

01:11:11.520 --> 01:11:13.840
And second of all, that we were ready to maintain it.

01:11:13.840 --> 01:11:16.840
And I think with packaging too, it's like,

01:11:16.840 --> 01:11:19.680
there's just a lot of, it's just such a complex space

01:11:19.680 --> 01:11:21.160
that like, I wanted to make sure

01:11:21.160 --> 01:11:23.280
that we had a lot of clarity in the messaging

01:11:23.280 --> 01:11:25.320
around what the tool is and what it's not

01:11:25.320 --> 01:11:28.400
and like what we want it to be and what it isn't yet.

01:11:28.400 --> 01:11:31.080
And so I'm really happy with how the launch went

01:11:31.080 --> 01:11:34.880
and I've really appreciated just all the excitement,

01:11:34.880 --> 01:11:37.800
activity, engagement that we've had on the repo.

01:11:37.800 --> 01:11:39.360
It's been like, I don't know.

01:11:39.360 --> 01:11:41.480
I mean, honestly, it's been a lot of work.

01:11:41.480 --> 01:11:45.520
But it's like really, really, no, but it's awesome.

01:11:45.520 --> 01:11:48.960
It's like so energizing for me and for the team.

01:11:48.960 --> 01:11:50.600
- And to see all the people picking it up

01:11:50.600 --> 01:11:52.600
and making it the foundation of their projects.

01:11:52.600 --> 01:11:53.760
And yeah, it's really cool.

01:11:53.760 --> 01:11:54.960
- Yeah, and it's cool.

01:11:54.960 --> 01:11:56.600
You know, I guess another, like one other thing

01:11:56.600 --> 01:11:58.280
that's a little different this time is like,

01:11:58.280 --> 01:11:59.920
I talk, I just talked to more people

01:11:59.920 --> 01:12:02.600
who work on Python tooling at companies now

01:12:02.600 --> 01:12:04.360
than I did when I released Ruff,

01:12:04.360 --> 01:12:06.680
just 'cause over the course of the past year,

01:12:06.680 --> 01:12:07.920
I've just met a lot of people

01:12:07.920 --> 01:12:09.560
and we've just talked about how they're using Ruff,

01:12:09.560 --> 01:12:10.400
how they're not.

01:12:10.400 --> 01:12:12.520
And so just hearing some of those stories too

01:12:12.520 --> 01:12:14.200
of how like companies are starting to use it

01:12:14.200 --> 01:12:15.480
and like what the blockers are

01:12:15.480 --> 01:12:17.120
and like how much of a speed up it's providing

01:12:17.120 --> 01:12:18.560
has been pretty cool to see too.

01:12:18.560 --> 01:12:21.080
So yeah, I know I appreciate it though.

01:12:21.080 --> 01:12:21.920
- Yeah, you're welcome.

01:12:21.920 --> 01:12:23.480
All right, we'll leave with this final thought from Juan.

01:12:23.480 --> 01:12:25.960
I installed 94 libraries in around two seconds.

01:12:25.960 --> 01:12:26.800
Incredible. - That's great.

01:12:26.800 --> 01:12:27.640
- All right.

01:12:27.640 --> 01:12:29.160
(laughing)

01:12:29.160 --> 01:12:30.760
All right, well, I'm excited to see where things go

01:12:30.760 --> 01:12:32.800
and you know, we'll maybe do a follow-up

01:12:32.800 --> 01:12:37.160
when you've got some more of the ideas in place.

01:12:37.160 --> 01:12:38.000
- Sounds great.

01:12:38.000 --> 01:12:39.000
No, it's always a pleasure.

01:12:39.000 --> 01:12:39.920
Thanks so much for having me on.

01:12:39.920 --> 01:12:40.880
I really appreciate it.

01:12:40.880 --> 01:12:42.760
- Yeah, thanks Charlie.

01:12:42.760 --> 01:12:46.000
This has been another episode of Talk Python to Me.

01:12:46.000 --> 01:12:47.440
Thank you to our sponsors.

01:12:47.440 --> 01:12:48.800
Be sure to check out what they're offering.

01:12:48.800 --> 01:12:51.120
It really helps support the show.

01:12:51.120 --> 01:12:53.960
It's time to stop asking relational databases

01:12:53.960 --> 01:12:55.800
to do more than they were made for

01:12:55.800 --> 01:12:59.320
and simplify complex data models with graphs.

01:12:59.320 --> 01:13:01.640
Check out the sample FastAPI project

01:13:01.640 --> 01:13:05.920
and see what Neo4j, a native graph database can do for you.

01:13:05.920 --> 01:13:10.160
Find out more at talkpython.fm/neo4j.

01:13:10.160 --> 01:13:12.300
Want to level up your Python?

01:13:12.300 --> 01:13:14.080
We have one of the largest catalogs

01:13:14.080 --> 01:13:16.440
of Python video courses over at Talk Python.

01:13:16.440 --> 01:13:18.480
Our content ranges from true beginners

01:13:18.480 --> 01:13:21.480
to deeply advanced topics like memory and async.

01:13:21.480 --> 01:13:24.120
And best of all, there's not a subscription in sight.

01:13:24.120 --> 01:13:27.360
Check it out for yourself at training.talkpython.fm.

01:13:27.360 --> 01:13:29.000
Be sure to subscribe to the show.

01:13:29.000 --> 01:13:32.000
Open your favorite podcast app and search for Python.

01:13:32.000 --> 01:13:33.360
We should be right at the top.

01:13:33.360 --> 01:13:36.240
You can also find the iTunes feed at /itunes,

01:13:36.240 --> 01:13:38.440
the Google Play feed at /play,

01:13:38.440 --> 01:13:42.900
and the direct RSS feed at /rss on talkpython.fm.

01:13:42.900 --> 01:13:45.500
We're live streaming most of our recordings these days.

01:13:45.500 --> 01:13:46.640
If you want to be part of the show

01:13:46.640 --> 01:13:48.900
and have your comments featured on the air,

01:13:48.900 --> 01:13:50.780
be sure to subscribe to our YouTube channel

01:13:50.780 --> 01:13:53.980
at talkpython.fm/youtube.

01:13:53.980 --> 01:13:55.380
This is your host, Michael Kennedy.

01:13:55.380 --> 01:13:56.540
Thanks so much for listening.

01:13:56.540 --> 01:13:57.780
I really appreciate it.

01:13:57.780 --> 01:14:00.340
Now get out there and write some Python code.

01:14:00.340 --> 01:14:02.920
(upbeat music)

01:14:18.400 --> 01:14:21.920
Here's what's next!

