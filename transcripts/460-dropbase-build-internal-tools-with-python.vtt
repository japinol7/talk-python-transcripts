WEBVTT

00:00:00.000 --> 00:00:03.040
Do you find yourself for your team building internal apps

00:00:03.040 --> 00:00:04.540
frequently for your company?

00:00:04.540 --> 00:00:07.580
Are you familiar with the term forms over data?

00:00:07.580 --> 00:00:10.140
They can be super empowering for your organization,

00:00:10.140 --> 00:00:12.820
but they can also be pretty repetitive

00:00:12.820 --> 00:00:15.960
and you might find yourself spending more time than you like

00:00:15.960 --> 00:00:19.720
working on them rather than core products and services.

00:00:19.720 --> 00:00:21.900
I've invited Jimmy Chan from DropBase

00:00:21.900 --> 00:00:23.500
to tell us about their services,

00:00:23.500 --> 00:00:27.860
whose tagline is build internal web apps with just Python.

00:00:27.860 --> 00:00:30.460
It's a cool service and a fun conversation.

00:00:30.460 --> 00:00:31.900
This is Talk Python to Me,

00:00:31.900 --> 00:00:36.900
episode 460 recorded March 12th, 2024.

00:00:36.900 --> 00:00:39.440
- Are you ready for your host, here he is!

00:00:39.440 --> 00:00:40.880
- You're listening to Michael Kennedy

00:00:40.880 --> 00:00:42.820
on Talk Python to Me.

00:00:42.820 --> 00:00:44.180
Live from Portland, Oregon,

00:00:44.180 --> 00:00:46.320
and this segment was made with Python.

00:00:46.320 --> 00:00:51.760
- Welcome to Talk Python to Me,

00:00:51.760 --> 00:00:53.660
a weekly podcast on Python.

00:00:53.660 --> 00:00:55.460
This is your host, Michael Kennedy.

00:00:55.460 --> 00:00:56.660
Follow me on Mastodon,

00:00:56.660 --> 00:00:58.960
where I'm @mkennedy and follow the podcast

00:00:58.960 --> 00:01:03.100
using @talkpython, both on mastodon.org.

00:01:03.100 --> 00:01:05.200
Keep up with the show and listen to over seven years

00:01:05.200 --> 00:01:07.880
of past episodes at talkpython.fm.

00:01:07.880 --> 00:01:10.940
We've started streaming most of our episodes

00:01:10.940 --> 00:01:12.380
live on YouTube.

00:01:12.380 --> 00:01:13.580
Subscribe to our YouTube channel

00:01:13.580 --> 00:01:15.980
over at talkpython.fm/youtube

00:01:15.980 --> 00:01:18.180
to get notified about upcoming shows

00:01:18.180 --> 00:01:19.820
and be part of that episode.

00:01:19.820 --> 00:01:22.960
This episode is sponsored by Mailtrap,

00:01:22.960 --> 00:01:26.060
an email delivery platform that developers love.

00:01:26.060 --> 00:01:29.660
Try for free at mailtrap.io.

00:01:29.660 --> 00:01:33.460
And it's brought to you by us over at Talk Python Training.

00:01:33.460 --> 00:01:36.660
Did you know that we have over 250 hours of Python courses?

00:01:36.660 --> 00:01:37.900
Yeah, that's right.

00:01:37.900 --> 00:01:41.040
Check them out at talkpython.fm/courses.

00:01:41.040 --> 00:01:43.400
Hey, Jimmy.

00:01:43.400 --> 00:01:44.240
- Hey, Michael, how are you doing?

00:01:44.240 --> 00:01:45.080
- I'm doing well.

00:01:45.080 --> 00:01:46.940
Welcome to Talk Python to Me.

00:01:46.940 --> 00:01:48.020
It's fantastic to have you here.

00:01:48.020 --> 00:01:48.880
- Thank you, I'm really excited.

00:01:48.880 --> 00:01:49.820
- Yeah, I am too.

00:01:49.820 --> 00:01:52.120
I saw DropBase, I saw what you all were building.

00:01:52.120 --> 00:01:54.680
I'm like, that is pretty darn interesting.

00:01:54.680 --> 00:01:56.660
I think people will want to check it out.

00:01:56.660 --> 00:02:00.720
So we'll dive into this app and this platform

00:02:00.720 --> 00:02:03.500
that you made for app building, basically.

00:02:03.500 --> 00:02:04.360
We'll have a lot of fun.

00:02:04.360 --> 00:02:06.040
Now, before we get into that, though,

00:02:06.040 --> 00:02:08.720
just give us a quick bit of background on yourself.

00:02:08.720 --> 00:02:09.960
How'd you get into programming?

00:02:09.960 --> 00:02:13.280
How'd you find yourself writing a Python building platform?

00:02:13.280 --> 00:02:14.120
- Awesome, yeah.

00:02:14.120 --> 00:02:15.680
I went to school for engineering.

00:02:15.680 --> 00:02:17.520
This was actually back in Canada.

00:02:17.520 --> 00:02:19.440
I studied in Montreal at a little school

00:02:19.440 --> 00:02:20.560
called McGill University.

00:02:20.560 --> 00:02:21.400
- Nice.

00:02:21.400 --> 00:02:22.220
- We started then.

00:02:22.220 --> 00:02:23.600
I used to intern, by the way,

00:02:23.600 --> 00:02:25.400
at this company called Research In Motion

00:02:25.400 --> 00:02:27.880
that used to make BlackBerries way back in the time.

00:02:27.880 --> 00:02:30.040
- Oh, yeah, awesome.

00:02:30.040 --> 00:02:30.920
In the heyday?

00:02:30.920 --> 00:02:32.120
- In the heyday, yeah.

00:02:32.120 --> 00:02:35.000
I remember when they said we had 50%

00:02:35.000 --> 00:02:37.240
of the US smartphone market share.

00:02:37.240 --> 00:02:39.800
But the platform was actually built on Java, not Python.

00:02:39.800 --> 00:02:42.120
Python was something afterwards.

00:02:42.120 --> 00:02:45.340
Actually, my co-founder is the Python programmer,

00:02:45.340 --> 00:02:47.480
and I picked up Python after we started working together.

00:02:47.480 --> 00:02:48.320
- Cool.

00:02:48.320 --> 00:02:50.320
You got any fun stories from your time at BlackBerry?

00:02:50.320 --> 00:02:51.140
Did you enjoy it?

00:02:51.140 --> 00:02:51.980
How long were you there?

00:02:51.980 --> 00:02:53.120
- I was there as an intern only.

00:02:53.120 --> 00:02:57.120
I spent about 16 to 20 months of internships.

00:02:57.120 --> 00:02:57.960
- Yeah.

00:02:57.960 --> 00:02:59.720
- At the time, I was, I think, in my third year of school.

00:02:59.720 --> 00:03:03.280
And we were just working on these little Java apps

00:03:03.280 --> 00:03:04.640
for the smartphones,

00:03:04.640 --> 00:03:06.900
and just making sure everything was working.

00:03:06.900 --> 00:03:09.720
The cool thing is when you work at a company

00:03:09.720 --> 00:03:11.320
that's making devices,

00:03:11.320 --> 00:03:14.360
devices have a very long development cycle.

00:03:14.360 --> 00:03:16.960
So imagine, for example, you worked at Apple today.

00:03:16.960 --> 00:03:20.360
The iPhone, what, 15, whichever one's coming next,

00:03:20.360 --> 00:03:22.240
they've been working on it for at least a year,

00:03:22.240 --> 00:03:23.400
probably longer.

00:03:23.400 --> 00:03:25.760
So you get access to all these prototypes

00:03:25.760 --> 00:03:26.960
that you get to use,

00:03:26.960 --> 00:03:29.040
'cause you're building for it, you're testing it.

00:03:29.040 --> 00:03:30.920
That was a really nice, nice, nice day.

00:03:30.920 --> 00:03:32.600
But you actually couldn't tell anybody about it.

00:03:32.600 --> 00:03:35.120
But it was really cool to know that you're on the last day.

00:03:35.120 --> 00:03:37.080
- And you couldn't lose it in a bar

00:03:37.080 --> 00:03:38.600
or anything like that, right?

00:03:38.600 --> 00:03:40.080
- You remember those stories, right?

00:03:40.080 --> 00:03:40.920
- Yes, exactly.

00:03:40.920 --> 00:03:41.840
- It was all referenced a few times.

00:03:41.840 --> 00:03:44.280
- Somebody got a hold of a lost phone,

00:03:44.280 --> 00:03:46.440
and it was sold, and there was all sorts of drama.

00:03:46.440 --> 00:03:47.320
It was a big deal.

00:03:47.320 --> 00:03:51.960
That was around iPhone 4, 3, 4, 5, sort of timeframe.

00:03:51.960 --> 00:03:53.640
- Yeah, I remember that very clearly.

00:03:53.640 --> 00:03:55.520
- Yeah, so you didn't wanna be that.

00:03:55.520 --> 00:03:57.200
You wanted to make sure you hung on to it.

00:03:57.200 --> 00:03:58.040
- Oh yeah, no.

00:03:58.040 --> 00:03:59.400
(laughing)

00:03:59.400 --> 00:04:00.920
- Yeah, I think working for a company like that

00:04:00.920 --> 00:04:03.200
would have been awesome, at least in the heyday.

00:04:03.200 --> 00:04:06.160
It's cool to work for a tech company

00:04:06.160 --> 00:04:07.720
that's got a lot of wind that it's back,

00:04:07.720 --> 00:04:09.480
and a lot of people using it.

00:04:09.480 --> 00:04:10.560
It's kinda neat.

00:04:10.560 --> 00:04:11.400
- I was very happy.

00:04:11.400 --> 00:04:14.640
We had a lot of other interns that they hired at the time.

00:04:14.640 --> 00:04:17.240
They used that up lots to work in there over the summer.

00:04:17.240 --> 00:04:19.680
- Yeah, a lot of excited people to do stuff.

00:04:19.680 --> 00:04:20.800
Excellent, cool.

00:04:20.800 --> 00:04:23.520
And so then you picked up Python,

00:04:23.520 --> 00:04:25.120
I guess, when you started this project, is that right?

00:04:25.120 --> 00:04:26.240
- Just a little bit before.

00:04:26.240 --> 00:04:30.580
So when we started our startup, this was back in 2020.

00:04:30.580 --> 00:04:33.360
My co-founder had been using Python.

00:04:33.360 --> 00:04:36.680
He did a master's degree, computer science,

00:04:36.680 --> 00:04:38.680
focused on machine learning, actually.

00:04:38.680 --> 00:04:42.480
In that field, Python is really the main language you use.

00:04:42.480 --> 00:04:43.320
- Yeah, it is.

00:04:43.320 --> 00:04:44.640
- And so he was very familiar with it,

00:04:44.640 --> 00:04:49.640
and so he set our stack, basically, to be a Python backend.

00:04:49.680 --> 00:04:51.280
And then just through that process,

00:04:51.280 --> 00:04:55.200
just looking at things and designing features,

00:04:55.200 --> 00:04:56.680
we just all got involved with Python.

00:04:56.680 --> 00:04:58.440
So it kinda just became the same.

00:04:58.440 --> 00:05:00.680
And this is actually the reason why we're working

00:05:00.680 --> 00:05:02.200
on a Python builder,

00:05:02.200 --> 00:05:04.920
is we're kinda building a product for ourselves.

00:05:04.920 --> 00:05:07.240
It's something where it fits our own needs,

00:05:07.240 --> 00:05:09.160
that works with our mental models.

00:05:09.160 --> 00:05:10.960
So that's pretty much it.

00:05:10.960 --> 00:05:14.360
So today, I spend a lot of time building apps

00:05:14.360 --> 00:05:16.560
with Dropbase, so internal tools,

00:05:16.560 --> 00:05:19.080
and that's most of the app building I do now.

00:05:19.080 --> 00:05:21.760
So building demos, testing the products,

00:05:21.760 --> 00:05:23.320
making sure everything is working,

00:05:23.320 --> 00:05:24.880
and then just finding other ways

00:05:24.880 --> 00:05:27.640
to make the developer experience more convenient.

00:05:27.640 --> 00:05:30.200
- It seems like something you could really take care

00:05:30.200 --> 00:05:33.400
of a bunch of internal automation type of apps.

00:05:33.400 --> 00:05:36.440
You don't have to create full-on web apps

00:05:36.440 --> 00:05:40.680
to secretize this data or to get that dashboard or whatever.

00:05:40.680 --> 00:05:42.280
You just fire up your own platform

00:05:42.280 --> 00:05:43.760
and point at your data sources.

00:05:43.760 --> 00:05:44.600
- That's right, yeah.

00:05:44.600 --> 00:05:48.000
So the big difference with other frameworks

00:05:48.000 --> 00:05:49.720
is that you're gonna use these frameworks

00:05:49.720 --> 00:05:51.920
to build your customer-facing applications.

00:05:51.920 --> 00:05:55.480
And customers, they have expectations

00:05:55.480 --> 00:05:56.840
about what they need.

00:05:56.840 --> 00:06:00.240
Interactions sometimes make a big difference for them.

00:06:00.240 --> 00:06:03.560
UI components, the way models come up.

00:06:03.560 --> 00:06:04.880
It's all part of the experience.

00:06:04.880 --> 00:06:06.360
And so for that, you really need

00:06:06.360 --> 00:06:09.600
a lot of extra components complexity.

00:06:09.600 --> 00:06:11.560
For internal tools, it's not to say

00:06:11.560 --> 00:06:14.760
that internal users don't have high expectations,

00:06:14.760 --> 00:06:17.840
but the kinds of things that you do with those tools

00:06:17.840 --> 00:06:19.640
tend to be very, very similar.

00:06:19.640 --> 00:06:24.120
You search for data, you get context about that.

00:06:24.120 --> 00:06:26.880
So for example, you search for a transaction or for a user,

00:06:26.880 --> 00:06:28.200
you get some more context to make sure

00:06:28.200 --> 00:06:30.000
that that's the user or the transaction

00:06:30.000 --> 00:06:31.320
that you want to act on.

00:06:31.320 --> 00:06:32.400
And then you just act on it, right?

00:06:32.400 --> 00:06:35.120
Like you trigger an action on that item

00:06:35.120 --> 00:06:37.600
or that resource or that person.

00:06:37.600 --> 00:06:39.560
It helps you simplify the kind of things you need.

00:06:39.560 --> 00:06:41.880
And so for that, having a framework,

00:06:41.880 --> 00:06:44.920
a builder to make this happen is super convenient.

00:06:44.920 --> 00:06:48.600
The subtitle catchphrase of DropBase is

00:06:48.600 --> 00:06:51.760
build internal web apps with just Python, which is awesome.

00:06:51.760 --> 00:06:54.320
And when I think of internal web apps,

00:06:54.320 --> 00:06:57.200
or even traditionally, if you look back a ways,

00:06:57.200 --> 00:06:59.360
there was VB6 and Windows Forms

00:06:59.360 --> 00:07:00.840
and those types of things that were

00:07:00.840 --> 00:07:02.280
kind of playing the same role.

00:07:02.280 --> 00:07:04.360
So same basic idea.

00:07:04.360 --> 00:07:06.800
There was a lot of people who referred to that

00:07:06.800 --> 00:07:09.040
as forms over data.

00:07:09.040 --> 00:07:12.120
It kind of the, not quite a negative term,

00:07:12.120 --> 00:07:13.680
but kind of like we're sort of doing

00:07:13.680 --> 00:07:16.400
the same basic architecture over and over,

00:07:16.400 --> 00:07:18.200
but it's a different problem every time.

00:07:18.200 --> 00:07:20.320
And so we kind of got to write code,

00:07:20.320 --> 00:07:22.520
create these projects from scratch every time,

00:07:22.520 --> 00:07:25.120
but they're the kind of, same kind of thing.

00:07:25.120 --> 00:07:28.080
And so, I think that's partly why VB6

00:07:28.080 --> 00:07:30.840
with its kind of visual drag and dropy experience

00:07:30.840 --> 00:07:31.720
became real popular,

00:07:31.720 --> 00:07:33.160
'cause you could drag a table on there,

00:07:33.160 --> 00:07:34.840
drag a data source, bind it to that,

00:07:34.840 --> 00:07:37.040
make a button click when somebody touches this thing.

00:07:37.040 --> 00:07:40.040
And that didn't create something that would rival,

00:07:40.040 --> 00:07:41.840
say, airbnb.com,

00:07:41.840 --> 00:07:45.920
or where you have these really dynamic design sites,

00:07:45.920 --> 00:07:47.240
but that's not what they need.

00:07:47.240 --> 00:07:50.960
The company says, look, we need, this week,

00:07:50.960 --> 00:07:54.400
I need our salespeople to be able to answer this question

00:07:54.400 --> 00:07:55.800
and make this change.

00:07:55.800 --> 00:07:57.200
That's what we need you to build this week.

00:07:57.200 --> 00:07:59.280
And if it's from scratch every time,

00:07:59.280 --> 00:08:01.200
that's a ton of rework.

00:08:01.200 --> 00:08:02.040
- It's a lot of work.

00:08:02.040 --> 00:08:04.720
It's funny you mentioned the forms over data.

00:08:04.720 --> 00:08:07.120
It is true that a lot of the,

00:08:07.120 --> 00:08:09.160
well, if you take it at a very high level,

00:08:09.160 --> 00:08:11.640
all apps are forms over data.

00:08:11.640 --> 00:08:12.560
- In some sense, yeah.

00:08:12.560 --> 00:08:17.560
- All SaaS apps are forms over a database in some sense.

00:08:17.560 --> 00:08:22.040
And then you start hearing also about the similar things

00:08:22.040 --> 00:08:25.760
with you've heard about the GPT wrappers, right?

00:08:25.760 --> 00:08:28.800
It's the same concept where it's like an oversimplification

00:08:28.800 --> 00:08:30.480
of what's happening,

00:08:30.480 --> 00:08:33.040
but at the same time, it is kind of core to what's happening.

00:08:33.040 --> 00:08:35.440
And for internal tooling, at least,

00:08:35.440 --> 00:08:38.920
is exactly what you need, forms over data, but very quickly,

00:08:38.920 --> 00:08:42.560
so that developers don't have to spend a lot of time

00:08:42.560 --> 00:08:44.640
basically doing the same things over and over again.

00:08:44.640 --> 00:08:46.120
You wanna make their lives easier

00:08:46.120 --> 00:08:48.680
to support their internal users.

00:08:48.680 --> 00:08:51.640
So people in customer support, operations,

00:08:51.640 --> 00:08:53.520
and I think sometimes even supporting

00:08:53.520 --> 00:08:54.640
other engineers as well.

00:08:54.640 --> 00:08:56.960
- Yeah, and it's not that people in companies

00:08:56.960 --> 00:09:01.320
don't have expectations of nice apps and nice interactions.

00:09:01.320 --> 00:09:03.360
It's just that it's more utilitarian.

00:09:03.360 --> 00:09:05.840
Like so many of these big enterprises,

00:09:05.840 --> 00:09:07.360
when you kind of think of them,

00:09:07.360 --> 00:09:08.640
maybe the right way to think of them is

00:09:08.640 --> 00:09:10.200
there's a massive Postgres

00:09:10.200 --> 00:09:12.240
or Microsoft SQL Server at the center.

00:09:12.240 --> 00:09:15.640
And like, it almost connects the business divisions,

00:09:15.640 --> 00:09:18.000
like the sales team and the marketing team

00:09:18.000 --> 00:09:21.080
and the product team and all that.

00:09:21.080 --> 00:09:23.560
And if you can get into the database

00:09:23.560 --> 00:09:27.880
and answer questions, expose data, expose relationships,

00:09:27.880 --> 00:09:30.120
put a UI to some aspect of that,

00:09:30.120 --> 00:09:32.440
you're really right at the heart of the company

00:09:32.440 --> 00:09:33.680
in some sense, you know?

00:09:33.680 --> 00:09:36.240
- Yeah, it's definitely about effectiveness.

00:09:36.240 --> 00:09:40.040
One way we think about what these kinds of tools should do,

00:09:40.040 --> 00:09:44.040
you have to enable developers to very quickly

00:09:44.040 --> 00:09:47.280
build apps that have maximal value,

00:09:47.280 --> 00:09:51.400
that lets you get the job done as effectively as possible,

00:09:51.400 --> 00:09:54.560
but also that's easy to use for the end user.

00:09:54.560 --> 00:09:56.560
So, you know, if it's like a business operator

00:09:56.560 --> 00:09:58.120
or someone in the operations team,

00:09:58.120 --> 00:10:00.560
they also need to be able to learn quickly how to use it

00:10:00.560 --> 00:10:02.000
and trigger actions.

00:10:02.000 --> 00:10:06.360
And so we call that sort of effectiveness of the apps,

00:10:06.360 --> 00:10:08.160
some sort of like effectiveness score.

00:10:08.160 --> 00:10:10.000
It just combines these components.

00:10:10.000 --> 00:10:11.560
And that's really the, like,

00:10:11.560 --> 00:10:13.320
if you can get to the essence of it

00:10:13.320 --> 00:10:16.160
and create a framework or a tool builder

00:10:16.160 --> 00:10:18.240
that maximizes for that,

00:10:18.240 --> 00:10:19.880
I think you're in a really good place.

00:10:19.880 --> 00:10:22.680
And this is something we're trying to do with DropBase.

00:10:22.680 --> 00:10:24.400
The components are simple.

00:10:24.400 --> 00:10:28.080
The kinds of apps that you can build look roughly the same,

00:10:28.080 --> 00:10:29.320
but they look really nice.

00:10:29.320 --> 00:10:31.840
And they're also quite simple to understand.

00:10:31.840 --> 00:10:34.400
They're modeled after, but it's in a way

00:10:34.400 --> 00:10:37.480
where you have data, a grid or table in the middle,

00:10:37.480 --> 00:10:38.520
and then there's a sidebar

00:10:38.520 --> 00:10:40.200
from where you can trigger actions.

00:10:40.200 --> 00:10:43.200
And this ties back to this concept of

00:10:43.200 --> 00:10:45.760
when you ask people in operations,

00:10:45.760 --> 00:10:49.000
what they do, like sales, marketing, business operations,

00:10:49.000 --> 00:10:51.360
essentially ties back to the previous comments,

00:10:51.360 --> 00:10:53.440
which was you search for something,

00:10:53.440 --> 00:10:56.000
you get context about it and you trigger action.

00:10:56.000 --> 00:10:58.600
And so the way we translated that insight

00:10:58.600 --> 00:11:00.920
about what people just end up doing over and over again,

00:11:00.920 --> 00:11:02.680
we said, well, then you really just need

00:11:02.680 --> 00:11:04.000
some sort of search bar,

00:11:04.000 --> 00:11:07.600
you need a grid and you need a sidebar

00:11:07.600 --> 00:11:10.440
with some buttons or some other drop downs

00:11:10.440 --> 00:11:11.480
and other components.

00:11:11.480 --> 00:11:12.640
And then you realize, okay,

00:11:12.640 --> 00:11:13.680
this is kind of what stretches

00:11:13.680 --> 00:11:15.240
I've been trying to do for a long time.

00:11:15.240 --> 00:11:16.080
- Yeah, that's true.

00:11:16.080 --> 00:11:17.760
- Except we like to trigger actions.

00:11:17.760 --> 00:11:19.800
- Yeah, people do oddly connect Excel

00:11:19.800 --> 00:11:21.320
to like external data sources

00:11:21.320 --> 00:11:23.160
and all sorts of weird things as well.

00:11:23.160 --> 00:11:25.760
Yeah, or write VBA that makes them change.

00:11:25.760 --> 00:11:27.440
They probably should just not be doing that.

00:11:27.440 --> 00:11:29.920
- Yeah, there's a lot of, it's actually a big use case.

00:11:29.920 --> 00:11:31.160
One of our previous product,

00:11:31.160 --> 00:11:32.920
we actually did exactly that.

00:11:32.920 --> 00:11:36.200
We let you connect any database source

00:11:36.200 --> 00:11:37.520
to your Google Sheets

00:11:37.520 --> 00:11:39.800
and just kind of run that on a schedule.

00:11:39.800 --> 00:11:43.240
So you'd imagine in a business setting,

00:11:43.240 --> 00:11:46.480
you have sort of these like weekly, daily reports

00:11:46.480 --> 00:11:48.880
that analysts end up working on, right?

00:11:48.880 --> 00:11:52.960
And what you want is for the data to be fresh, up to date.

00:11:52.960 --> 00:11:57.520
And so people just wanted a way to on at 7 a.m, 8 a.m

00:11:57.520 --> 00:11:58.560
on Monday morning,

00:11:58.560 --> 00:12:01.040
basically automatically pull data from the database,

00:12:01.040 --> 00:12:02.760
load it up to your spreadsheet,

00:12:02.760 --> 00:12:05.480
and then all your tables and calculations,

00:12:05.480 --> 00:12:07.080
which is sort of updated

00:12:07.080 --> 00:12:09.960
because they're referencing a tab, a sheet,

00:12:09.960 --> 00:12:11.440
basically that has fresh data.

00:12:11.440 --> 00:12:13.800
It is very interesting, the evolution of all these tools.

00:12:13.800 --> 00:12:14.640
- It is really interesting.

00:12:14.640 --> 00:12:18.920
Maybe one of the big differences is the interactivity here

00:12:18.920 --> 00:12:21.640
versus what you might do in that story, right?

00:12:21.640 --> 00:12:23.320
- That's read-only really.

00:12:23.320 --> 00:12:25.120
And then here, what we're doing is letting you

00:12:25.120 --> 00:12:27.600
trigger actions, perform actions,

00:12:27.600 --> 00:12:29.560
basically outside the apps.

00:12:29.560 --> 00:12:31.080
And you might call an API

00:12:31.080 --> 00:12:34.000
or you might trigger an internal endpoints

00:12:34.000 --> 00:12:36.040
or just some triggers matching in the UI.

00:12:36.040 --> 00:12:39.280
- This portion of Talk Python to Me

00:12:39.280 --> 00:12:40.880
is brought to you by Mailtrap,

00:12:40.880 --> 00:12:44.840
an email delivery platform that developers love.

00:12:44.840 --> 00:12:48.480
An email sending solution with industry best analytics,

00:12:48.480 --> 00:12:53.320
SMTP and email API SDKs for major programming languages

00:12:53.320 --> 00:12:56.160
and 24/7 human support.

00:12:56.160 --> 00:12:58.880
Try for free at mailtrap.io.

00:12:58.880 --> 00:13:02.040
I think we'll get to this more later,

00:13:02.040 --> 00:13:03.240
but I wanna maybe touch on it

00:13:03.240 --> 00:13:04.480
since there's a good question.

00:13:04.480 --> 00:13:07.040
Also, it might be a question a lot of people have.

00:13:07.040 --> 00:13:09.280
So what's the pricing model for this?

00:13:09.280 --> 00:13:10.880
And basically more broadly,

00:13:10.880 --> 00:13:13.440
what is the business model around here?

00:13:13.440 --> 00:13:16.000
Luis says, "Already amazed by it.

00:13:16.000 --> 00:13:18.400
"Would like to compare it."

00:13:18.400 --> 00:13:20.480
First thought, there's nothing like this available

00:13:20.480 --> 00:13:22.480
in open source, so very neat.

00:13:22.480 --> 00:13:26.440
- The business model is we're gonna sell the product

00:13:26.440 --> 00:13:29.280
on a per user per month basis.

00:13:29.280 --> 00:13:31.160
So it's a B2B SaaS product.

00:13:31.160 --> 00:13:35.200
Now, developers need to be able to play around with products

00:13:35.200 --> 00:13:38.720
before they can decide whether that's something they want.

00:13:38.720 --> 00:13:43.360
And so we have a sort of a free version of the products

00:13:43.360 --> 00:13:46.080
that you can set up locally, like in your own machine,

00:13:46.080 --> 00:13:48.960
or you can just put it up on an EC2

00:13:48.960 --> 00:13:50.760
and you can just build apps for yourself.

00:13:50.760 --> 00:13:53.440
Like if you wanna automate personal tasks,

00:13:53.440 --> 00:13:54.960
you can totally use this for it.

00:13:54.960 --> 00:13:58.560
And then the way that we, in a way, layer the pricing

00:13:58.560 --> 00:14:02.040
is like if you need very complex permission systems,

00:14:02.040 --> 00:14:04.720
so like you build an app and you want it accessible

00:14:04.720 --> 00:14:08.280
by this person, by person A, but not person B,

00:14:08.280 --> 00:14:10.600
then you'll need very granular permission systems.

00:14:10.600 --> 00:14:12.520
And so that's an indicator that you're probably

00:14:12.520 --> 00:14:15.440
like a corporate user, you're a business user.

00:14:15.440 --> 00:14:17.680
And so we do the pricing based on that.

00:14:17.680 --> 00:14:19.800
- The source is open, at least.

00:14:19.800 --> 00:14:21.720
People can go and check it out, right?

00:14:21.720 --> 00:14:22.560
Is that true?

00:14:22.560 --> 00:14:23.400
- Let me clarify that.

00:14:23.400 --> 00:14:24.400
So you can self-host it.

00:14:24.400 --> 00:14:25.240
- Yes.

00:14:25.240 --> 00:14:27.040
- You can look at the repo.

00:14:27.040 --> 00:14:30.920
Behind the scenes, it's a Docker image that you set.

00:14:30.920 --> 00:14:35.440
So the code for drawbase is not immediately,

00:14:35.440 --> 00:14:37.880
you can't just browse it through the file system,

00:14:37.880 --> 00:14:40.200
but the code is basically sitting in your machine

00:14:40.200 --> 00:14:41.520
when you set this up locally.

00:14:41.520 --> 00:14:44.280
Now, the difference here is if you look at the directory,

00:14:44.280 --> 00:14:46.560
where you have the workspace.

00:14:46.560 --> 00:14:50.200
So the workspace directory is where all your apps files

00:14:50.200 --> 00:14:52.800
would be generated as you build the apps.

00:14:52.800 --> 00:14:53.640
- Okay.

00:14:53.640 --> 00:14:55.920
- That's really nice because you can essentially

00:14:55.920 --> 00:14:58.400
version control this from day one.

00:14:58.400 --> 00:15:01.480
You can build apps, you can check it in GitHub,

00:15:01.480 --> 00:15:03.320
you can just keep your code, you can version it.

00:15:03.320 --> 00:15:05.680
And so it's really, it's open source,

00:15:05.680 --> 00:15:08.120
let's clarify that, but you can self-host it.

00:15:08.120 --> 00:15:13.000
- It's on GitHub, but the licensing is really not like

00:15:13.000 --> 00:15:16.320
just straight up GPL open source type of thing, right?

00:15:16.320 --> 00:15:17.360
- That's correct, yes.

00:15:17.360 --> 00:15:18.200
- Okay.

00:15:18.200 --> 00:15:20.680
- And it's on GitHub because you do need to clone the repo

00:15:20.680 --> 00:15:23.000
and then you need to send it out and install it.

00:15:23.000 --> 00:15:24.840
- The free tier doesn't allow self-hosting,

00:15:24.840 --> 00:15:27.840
but if you pay for one of the versions,

00:15:27.840 --> 00:15:30.160
then it does have a self-hosting option.

00:15:30.160 --> 00:15:32.480
So when you, just to wrap this up on the price,

00:15:32.480 --> 00:15:35.400
when you say it's $10 per user per month,

00:15:35.400 --> 00:15:39.000
is that per person that makes the project,

00:15:39.000 --> 00:15:40.200
that builds the apps,

00:15:40.200 --> 00:15:43.480
or is that per person that interacts with the web app?

00:15:43.480 --> 00:15:46.360
- This is currently per member of your workspace.

00:15:46.360 --> 00:15:48.960
So we're not yet differentiating between someone

00:15:48.960 --> 00:15:51.640
who is building the app or using the app,

00:15:51.640 --> 00:15:53.160
although that might be something

00:15:53.160 --> 00:15:54.640
that we'll have to add later on.

00:15:54.640 --> 00:15:57.560
- Sure, so if you had say four salespeople

00:15:57.560 --> 00:16:00.040
and one "developer" in quotes maybe,

00:16:00.040 --> 00:16:03.360
developer, that would be five users under this story.

00:16:03.360 --> 00:16:05.080
- Correct, under the current pricing, yes.

00:16:05.080 --> 00:16:07.800
- Okay, you know, even if it's not just pure open source,

00:16:07.800 --> 00:16:08.640
take it and run with it,

00:16:08.640 --> 00:16:11.360
I do like the self-hosting aspect of it,

00:16:11.360 --> 00:16:13.840
because if you've got private data,

00:16:13.840 --> 00:16:15.800
or maybe even more important than any of that,

00:16:15.800 --> 00:16:19.920
is I wanna connect it to data sources that are,

00:16:19.920 --> 00:16:21.240
I don't wanna give your cloud access

00:16:21.240 --> 00:16:22.840
to my company database, for example.

00:16:22.840 --> 00:16:23.920
- I can expand on that, actually.

00:16:23.920 --> 00:16:26.880
So we built this specifically

00:16:26.880 --> 00:16:30.040
with that comment in mind.

00:16:30.040 --> 00:16:32.400
So when you're using internal tools,

00:16:32.400 --> 00:16:36.000
it's very, well, let's say it's almost all the cases,

00:16:36.000 --> 00:16:38.960
you are interacting with production,

00:16:38.960 --> 00:16:41.200
at least one production database, right?

00:16:41.200 --> 00:16:42.880
Like if you're supporting customers

00:16:42.880 --> 00:16:44.920
and you're issuing them a refund,

00:16:44.920 --> 00:16:46.240
you don't do that in tests

00:16:46.240 --> 00:16:48.640
and then take it to staging and then deploy it, right?

00:16:48.640 --> 00:16:52.000
You basically, you act on it on your production data.

00:16:52.000 --> 00:16:54.080
And so we thought, okay,

00:16:54.080 --> 00:16:56.760
people are probably going to be very hesitant

00:16:56.760 --> 00:17:00.640
to basically say, let me load up all my creds,

00:17:00.640 --> 00:17:04.680
all my API keys into some new player, a new cloud,

00:17:04.680 --> 00:17:06.440
and then like hope for the best, right?

00:17:06.440 --> 00:17:09.160
So when we designed Dropbase,

00:17:09.160 --> 00:17:12.000
we call it the worker or the worker server,

00:17:12.000 --> 00:17:14.080
the way you connect to data sources

00:17:14.080 --> 00:17:17.280
is you basically go to your .env file

00:17:17.280 --> 00:17:19.960
and you just add your database creds.

00:17:19.960 --> 00:17:23.600
That env file sits in the same directory

00:17:23.600 --> 00:17:25.800
that that workspace directory sits,

00:17:25.800 --> 00:17:28.120
the one that we saw on GitHub,

00:17:28.120 --> 00:17:30.400
and that's completely on your side

00:17:30.400 --> 00:17:33.080
and that's in your VPC or in your local machine.

00:17:33.080 --> 00:17:38.080
And the same server is the one that triggers the task

00:17:38.120 --> 00:17:39.600
to query your database.

00:17:39.600 --> 00:17:43.480
So, and that's also sitting on your side in your machine.

00:17:43.480 --> 00:17:45.840
And so the entire part of the product

00:17:45.840 --> 00:17:49.720
that processes queries, touches your data,

00:17:49.720 --> 00:17:52.000
your data sources, your credentials,

00:17:52.000 --> 00:17:54.960
that's completely on the user side.

00:17:54.960 --> 00:17:57.600
And the only part that we manage

00:17:57.600 --> 00:17:59.880
is really just the permission system.

00:17:59.880 --> 00:18:02.400
So that controlling the workspace

00:18:02.400 --> 00:18:04.520
and controlling the app permissions,

00:18:04.520 --> 00:18:06.840
that's the layer that we control.

00:18:06.840 --> 00:18:08.080
And that's really like the part

00:18:08.080 --> 00:18:10.760
where we can do the pricing on, to begin with.

00:18:10.760 --> 00:18:13.720
Like that's the feature set thing that helps us say,

00:18:13.720 --> 00:18:15.480
okay, this is gonna be paid customers

00:18:15.480 --> 00:18:16.600
and these are gonna be developers

00:18:16.600 --> 00:18:19.440
who are just gonna learn how to code in Python,

00:18:19.440 --> 00:18:22.640
just wanna build little apps for their own personal use.

00:18:22.640 --> 00:18:23.800
- All right, that makes sense.

00:18:23.800 --> 00:18:27.720
You know, let's maybe talk through an example.

00:18:27.720 --> 00:18:30.320
If you go to dropbase.io, there's a,

00:18:30.320 --> 00:18:32.440
right at the top, there's a sort of tutorial

00:18:32.440 --> 00:18:35.240
or a demo video of you using it.

00:18:35.240 --> 00:18:36.840
Obviously, I don't wanna just play the video,

00:18:36.840 --> 00:18:39.840
but maybe just walk us through the steps

00:18:39.840 --> 00:18:42.640
of what this app is and what are the steps to build it.

00:18:42.640 --> 00:18:45.160
And just for people who are listening

00:18:45.160 --> 00:18:46.200
and haven't watched that video,

00:18:46.200 --> 00:18:47.760
maybe I think it's 12 minutes long

00:18:47.760 --> 00:18:49.600
and you're like, let's create a new project.

00:18:49.600 --> 00:18:52.200
And here it is published at the end, right?

00:18:52.200 --> 00:18:53.040
Which is really nice.

00:18:53.040 --> 00:18:53.880
So yeah, talk us through it.

00:18:53.880 --> 00:18:56.560
- I'm gonna try to recreate the exact same one

00:18:56.560 --> 00:18:58.160
that you have on the screen, right?

00:18:58.160 --> 00:19:01.360
So it looks like an app that has two tables

00:19:01.360 --> 00:19:05.200
and you can somehow perform an action on the sidebar.

00:19:05.200 --> 00:19:07.720
Basically, it just notifies,

00:19:07.720 --> 00:19:08.880
either notifies a user

00:19:08.880 --> 00:19:11.320
or it performs some sort of permissions.

00:19:11.320 --> 00:19:13.760
- I think what this one does is it has workspaces

00:19:13.760 --> 00:19:15.240
and then users are in a workspace

00:19:15.240 --> 00:19:17.800
and you can make them admins or not admins

00:19:17.800 --> 00:19:18.640
of that workspace.

00:19:18.640 --> 00:19:19.480
Is that what, does that help?

00:19:19.480 --> 00:19:21.120
- Gotcha, perfect, okay.

00:19:21.120 --> 00:19:23.040
Okay, so I'll describe how you build this app.

00:19:23.040 --> 00:19:24.880
So you go to our app studio

00:19:24.880 --> 00:19:26.600
and it's gonna be a blank canvas.

00:19:26.600 --> 00:19:29.600
In that canvas, you can add tables.

00:19:29.600 --> 00:19:32.160
So the first thing you do is you add table one,

00:19:32.160 --> 00:19:33.440
you add the first table,

00:19:33.440 --> 00:19:35.600
and then you would add table two,

00:19:35.600 --> 00:19:36.960
which is the second table.

00:19:36.960 --> 00:19:38.520
And then you add a widget,

00:19:38.520 --> 00:19:39.800
so on the sidebar,

00:19:39.800 --> 00:19:42.000
you just click on add button

00:19:42.000 --> 00:19:44.600
and then it just places a button on the screen for you.

00:19:44.600 --> 00:19:46.960
So that will be sort of a shell of the application.

00:19:46.960 --> 00:19:49.000
It'll be just the UI part.

00:19:49.000 --> 00:19:51.240
At this point, it's just a few mouse clicks.

00:19:51.240 --> 00:19:52.960
There's no Javascript code

00:19:52.960 --> 00:19:54.440
or Python code that you're writing.

00:19:54.440 --> 00:19:57.400
The next step is to add the sort of the logic

00:19:57.400 --> 00:19:58.360
behind the scenes.

00:19:58.360 --> 00:19:59.560
The first thing we need to do

00:19:59.560 --> 00:20:01.680
is to populate the first table

00:20:01.680 --> 00:20:04.040
with data about your workspaces.

00:20:04.040 --> 00:20:07.960
And essentially what we do is you click on create new,

00:20:07.960 --> 00:20:09.360
you create a new function.

00:20:09.360 --> 00:20:10.640
And in that function,

00:20:10.640 --> 00:20:13.080
it could be a SQL function or a Python function.

00:20:13.080 --> 00:20:14.640
Because that's just a table,

00:20:14.640 --> 00:20:17.000
you can just create a new SQL function.

00:20:17.000 --> 00:20:19.120
So you do create a new function,

00:20:19.120 --> 00:20:21.120
select everything from workspaces,

00:20:21.120 --> 00:20:22.320
let's say that's the table.

00:20:22.320 --> 00:20:24.200
And then you can see a little preview

00:20:24.200 --> 00:20:26.920
of what that select statement will result in.

00:20:26.920 --> 00:20:28.520
So you can verify that that's the data

00:20:28.520 --> 00:20:29.480
that you wanna show.

00:20:29.480 --> 00:20:30.440
Once you've done that,

00:20:30.440 --> 00:20:32.920
you just save that file, that query,

00:20:32.920 --> 00:20:35.240
and you do something we call binding.

00:20:35.240 --> 00:20:37.880
So in the UI, you can select table one,

00:20:37.880 --> 00:20:40.400
and it'll present you with the tables properties.

00:20:40.400 --> 00:20:44.120
And one of the properties is which SQL file,

00:20:44.120 --> 00:20:46.440
which SQL script it's bound to.

00:20:46.440 --> 00:20:50.080
So you just click bind to the SQL file that you just wrote,

00:20:50.080 --> 00:20:52.400
and then it just automatically populates it

00:20:52.400 --> 00:20:54.280
with data for your workspace.

00:20:54.280 --> 00:20:56.640
Now, the second table is a little bit more interesting

00:20:56.640 --> 00:21:00.040
because the second table will update

00:21:00.040 --> 00:21:02.960
depending on what row you've selected in the first table.

00:21:02.960 --> 00:21:04.920
When you click on a workspace in the first table,

00:21:04.920 --> 00:21:07.120
it should load all of the users

00:21:07.120 --> 00:21:09.560
that are part of a particular workspace.

00:21:09.560 --> 00:21:11.080
And so we do this,

00:21:11.080 --> 00:21:13.720
we have a feature called dependent tables,

00:21:13.720 --> 00:21:14.920
and that's exactly what it does.

00:21:14.920 --> 00:21:16.400
So for the second table,

00:21:16.400 --> 00:21:18.000
you would still write a SQL query,

00:21:18.000 --> 00:21:19.320
and the query would just say,

00:21:19.320 --> 00:21:21.000
select everything from users,

00:21:21.000 --> 00:21:26.000
where the workspace ID is the selected row

00:21:26.000 --> 00:21:28.480
works as ID from the first table.

00:21:28.480 --> 00:21:30.360
And we use that sort of a Jinja,

00:21:30.360 --> 00:21:32.760
I'm not sure, maybe the audience will be familiar with Jinja.

00:21:32.760 --> 00:21:34.680
It's sort of like Jinja templating style

00:21:34.680 --> 00:21:37.360
where you say select everything from users

00:21:37.360 --> 00:21:42.040
where workspace ID is double curly brace.

00:21:42.040 --> 00:21:44.240
And then we have something called state.

00:21:44.240 --> 00:21:47.000
They basically gives you the state of the UI

00:21:47.000 --> 00:21:48.920
at any point in time when you've clicked something.

00:21:48.920 --> 00:21:50.960
And it's really, we made it into a class

00:21:50.960 --> 00:21:55.960
so that you can say state.tables.table1.workspaceID.

00:21:56.480 --> 00:21:58.440
And we resolve that into the value

00:21:58.440 --> 00:22:02.080
that's the workspace ID from the first table.

00:22:02.080 --> 00:22:03.680
And so that's, and then you do the same thing.

00:22:03.680 --> 00:22:05.760
You save that SQL query,

00:22:05.760 --> 00:22:07.480
you bind it to the second table,

00:22:07.480 --> 00:22:09.040
and then we automatically infer

00:22:09.040 --> 00:22:10.680
that whenever you need,

00:22:10.680 --> 00:22:13.680
whenever you select a different row in the first table,

00:22:13.680 --> 00:22:17.080
the second table will update the workspace ID value,

00:22:17.080 --> 00:22:19.520
rerun the query, and then show you the data for it.

00:22:19.520 --> 00:22:20.360
- That's cool.

00:22:20.360 --> 00:22:21.360
I was wondering how that happened.

00:22:21.360 --> 00:22:24.200
I thought you must have to wire some on change event,

00:22:24.200 --> 00:22:26.160
clicks over here, then it triggers that,

00:22:26.160 --> 00:22:27.880
but you just have that all automatic, right?

00:22:27.880 --> 00:22:31.800
- The UI actually knows that which tables are related.

00:22:31.800 --> 00:22:34.240
The UI sends a payload to the backend saying,

00:22:34.240 --> 00:22:35.880
this table was clicked,

00:22:35.880 --> 00:22:38.480
and this other table is related to it.

00:22:38.480 --> 00:22:42.080
And so we kind of know that we need to process those again.

00:22:42.080 --> 00:22:44.720
And so that's how we do this dependent table.

00:22:44.720 --> 00:22:48.880
For the getting the value of the workspace ID

00:22:48.880 --> 00:22:50.120
in the first table,

00:22:50.120 --> 00:22:53.960
we basically, we resolve the sort of the variables

00:22:53.960 --> 00:22:56.320
in the backend and then pass a value

00:22:56.320 --> 00:22:58.040
so that we can update the query.

00:22:58.040 --> 00:23:00.320
So let's say that you stop at that point, right?

00:23:00.320 --> 00:23:02.240
And then you say, preview the app.

00:23:02.240 --> 00:23:04.680
The app would look like two tables

00:23:04.680 --> 00:23:07.600
where it's really just lets you see all the users

00:23:07.600 --> 00:23:11.440
for each workspace that you have in your database.

00:23:11.440 --> 00:23:13.680
And then a few more things to make that very useful

00:23:13.680 --> 00:23:17.040
is you might want to search for a workspace

00:23:17.040 --> 00:23:18.880
before you know who to support.

00:23:18.880 --> 00:23:21.320
So let's say each workspace is associated

00:23:21.320 --> 00:23:22.800
with one of your customers.

00:23:22.800 --> 00:23:25.120
So let's say company A is your customer

00:23:25.120 --> 00:23:27.520
and company A gives you a call, a support call and says,

00:23:27.520 --> 00:23:31.600
hey, can you make John in our company an admin?

00:23:31.600 --> 00:23:33.680
So the first thing you want to do is you want to find,

00:23:33.680 --> 00:23:36.280
you search for company A and then find John.

00:23:36.280 --> 00:23:37.560
So we have this nice feature

00:23:37.560 --> 00:23:40.880
that basically automatically creates searches for you.

00:23:40.880 --> 00:23:42.960
So let's say in the first table,

00:23:42.960 --> 00:23:46.480
you can click on a button to convert it to a smart table.

00:23:46.480 --> 00:23:47.960
And when you do that,

00:23:47.960 --> 00:23:50.760
we basically generate filters for you.

00:23:50.760 --> 00:23:52.080
So you can then just say,

00:23:52.080 --> 00:23:54.440
I'd like to search by company name

00:23:54.440 --> 00:23:56.800
and you can select a filter

00:23:56.800 --> 00:23:59.160
and you can pin the filter into the table

00:23:59.160 --> 00:24:01.880
and that automatically performs a search for you.

00:24:01.880 --> 00:24:03.360
I say, it's pretty neat that way.

00:24:03.360 --> 00:24:05.960
- It reminds me a little bit of Notion, Notion tables.

00:24:05.960 --> 00:24:07.360
I don't know if you play with Notion any.

00:24:07.360 --> 00:24:08.200
- Yes.

00:24:08.200 --> 00:24:09.560
- You know, you have got those pin sorts

00:24:09.560 --> 00:24:11.640
and those pin filters and different things

00:24:11.640 --> 00:24:13.120
you can kind of put at the top of the,

00:24:13.120 --> 00:24:15.240
I guess their databases are called in Notion.

00:24:15.240 --> 00:24:16.200
A little like that.

00:24:16.200 --> 00:24:18.960
- It's very similar to that in the sense that

00:24:18.960 --> 00:24:20.400
you're not writing any code

00:24:20.400 --> 00:24:22.440
to be able to search through tables,

00:24:22.440 --> 00:24:25.320
but you can still modify what you let people search

00:24:25.320 --> 00:24:27.200
by pinning certain filters.

00:24:27.200 --> 00:24:29.400
The really interesting thing that we've done here

00:24:29.400 --> 00:24:33.240
is that we let you do joins

00:24:33.240 --> 00:24:34.960
and still provides you that feature.

00:24:34.960 --> 00:24:36.400
So in Notion, for example,

00:24:36.400 --> 00:24:38.280
you would just have one database

00:24:38.280 --> 00:24:40.600
and you can filter and sort that database.

00:24:40.600 --> 00:24:42.200
With DropBase, what we have is,

00:24:42.200 --> 00:24:44.800
let's say you have a table called users

00:24:44.800 --> 00:24:46.640
and a table called roles,

00:24:46.640 --> 00:24:48.640
and then they're related by an ID

00:24:48.640 --> 00:24:51.600
where let's say ID one is users,

00:24:51.600 --> 00:24:54.800
ID two is developers, ID three is admins.

00:24:54.800 --> 00:24:57.000
You might have to join those two tables first.

00:24:57.000 --> 00:24:59.000
And so that same smart feature,

00:24:59.000 --> 00:25:00.400
smart table feature,

00:25:00.400 --> 00:25:01.840
you can just write that SQL statement,

00:25:01.840 --> 00:25:03.200
that join statement,

00:25:03.200 --> 00:25:06.760
and we can still generate sort of the right filters for you.

00:25:06.760 --> 00:25:09.600
And we'll actually let you edit those tables as well.

00:25:09.600 --> 00:25:11.720
What we do is we take your SQL statement

00:25:11.720 --> 00:25:14.960
and then we infer all the SQL required

00:25:14.960 --> 00:25:19.000
to search or edit any column within the SQL statement.

00:25:19.000 --> 00:25:19.840
- That sounds awesome.

00:25:19.840 --> 00:25:21.120
- That's a really neat feature,

00:25:21.120 --> 00:25:25.080
especially for the people who are used to using

00:25:25.080 --> 00:25:26.400
something like Django admin,

00:25:26.400 --> 00:25:29.280
in the sense that it helps you very quickly

00:25:29.280 --> 00:25:33.840
build an admin panel with very little developer work.

00:25:33.840 --> 00:25:35.440
You can just write a SQL statement

00:25:35.440 --> 00:25:37.080
and then we give you an admin panel.

00:25:37.080 --> 00:25:38.160
So that's really neat.

00:25:38.160 --> 00:25:40.520
But the final thing with the app here in the demo

00:25:40.520 --> 00:25:42.680
is the little button on the right side.

00:25:42.680 --> 00:25:44.440
That is a Python function.

00:25:44.440 --> 00:25:46.480
So you create a new Python function

00:25:46.480 --> 00:25:48.880
and you essentially say,

00:25:48.880 --> 00:25:51.840
you essentially write a database update

00:25:51.840 --> 00:25:54.440
to update the role from whatever it was,

00:25:54.440 --> 00:25:56.960
let's say from developer to an admin.

00:25:56.960 --> 00:25:59.480
It's just really a select statement,

00:25:59.480 --> 00:26:04.040
update table, that's column something on this particular ID.

00:26:04.040 --> 00:26:05.720
And so that's just a Python function.

00:26:05.720 --> 00:26:08.760
And the final thing is just to connect that button

00:26:08.760 --> 00:26:10.360
to run this Python function.

00:26:10.360 --> 00:26:11.520
You click on the button,

00:26:11.520 --> 00:26:12.960
we run the function

00:26:12.960 --> 00:26:14.480
and then we perform a database update

00:26:14.480 --> 00:26:17.000
to update the role to whichever role you want.

00:26:17.000 --> 00:26:19.600
And that really is just the gist of the demo.

00:26:19.600 --> 00:26:22.160
- So a couple of things about that Python function

00:26:22.160 --> 00:26:23.040
that's pretty interesting.

00:26:23.040 --> 00:26:24.160
When you create it, you can say,

00:26:24.160 --> 00:26:25.480
I wanna create a function and it says,

00:26:25.480 --> 00:26:27.400
do you want SQL or do you want Python?

00:26:27.400 --> 00:26:29.320
Which is pretty interesting.

00:26:29.320 --> 00:26:32.840
The Python function has access to the UI widgets.

00:26:32.840 --> 00:26:35.920
I get in the actual video, not the screenshot of the video.

00:26:35.920 --> 00:26:38.680
I think you've got a dropdown select box.

00:26:38.680 --> 00:26:40.440
And so the Python function go,

00:26:40.440 --> 00:26:41.800
well, what did the user select?

00:26:41.800 --> 00:26:43.920
And then we'll make the change to the person

00:26:43.920 --> 00:26:46.120
in the workspace along those lines.

00:26:46.120 --> 00:26:47.840
So that's pretty cool, right?

00:26:47.840 --> 00:26:49.640
That you interact with this UI

00:26:49.640 --> 00:26:52.000
in kind of a object oriented way, I suppose.

00:26:52.000 --> 00:26:53.440
- That's exactly how it works.

00:26:53.440 --> 00:26:56.600
So behind the scenes, we have two classes.

00:26:56.600 --> 00:27:00.000
One is called state and one is called a context.

00:27:00.000 --> 00:27:03.320
So the state class just lets us access

00:27:03.320 --> 00:27:06.320
all of the UI state at any point in time.

00:27:06.320 --> 00:27:09.320
Anything you enter in an input component

00:27:09.320 --> 00:27:11.520
or any row you select in the tables,

00:27:11.520 --> 00:27:15.120
you can see the currently selected values of it.

00:27:15.120 --> 00:27:18.160
And so whenever you click on a button

00:27:18.160 --> 00:27:19.640
or you perform an action,

00:27:19.640 --> 00:27:23.200
that state is passed to the backend,

00:27:23.200 --> 00:27:25.400
just as a payload, just like a dictionary.

00:27:25.400 --> 00:27:28.800
And the backend, we generate all the classes,

00:27:28.800 --> 00:27:31.840
all the objects related to state and context.

00:27:31.840 --> 00:27:34.000
So we just have to pass the values in

00:27:34.000 --> 00:27:35.400
and then execute the function

00:27:35.400 --> 00:27:37.240
with those values as the input.

00:27:37.240 --> 00:27:38.560
And so that's how we're able to do

00:27:38.560 --> 00:27:41.160
the state thing with Python.

00:27:41.160 --> 00:27:43.920
If you've seen how you would do it in Python,

00:27:43.920 --> 00:27:45.600
it is very much a dot notation, right?

00:27:45.600 --> 00:27:48.840
So you would say to get the value of column one

00:27:48.840 --> 00:27:51.320
in table one, you basically just say,

00:27:51.320 --> 00:27:54.920
state dot tables, which gives you all the tables,

00:27:54.920 --> 00:27:57.680
dot table one, dot column one.

00:27:57.680 --> 00:28:01.680
And that basically resolves into the value

00:28:01.680 --> 00:28:05.000
of the table, of the row in that table for that column.

00:28:05.000 --> 00:28:05.840
- Yeah, that's cool.

00:28:05.840 --> 00:28:08.320
I can imagine the implementation of that thing.

00:28:08.320 --> 00:28:11.320
It's like dot dot get adder.

00:28:11.320 --> 00:28:14.080
And if you ask for the thing, you look in the dictionary

00:28:14.080 --> 00:28:16.000
and you traverse the thing.

00:28:16.000 --> 00:28:17.440
But with that in mind,

00:28:17.440 --> 00:28:19.080
what I thought was really nice about this

00:28:19.080 --> 00:28:21.240
is you had pretty decent autocomplete

00:28:21.240 --> 00:28:23.320
in your little embedded Python editor.

00:28:23.320 --> 00:28:24.160
How'd you pull that off?

00:28:24.160 --> 00:28:25.480
- I did that you noticed, yeah.

00:28:25.480 --> 00:28:27.400
We spent a lot of time on it.

00:28:27.400 --> 00:28:28.240
- I bet you did.

00:28:28.240 --> 00:28:29.080
- Yeah. - How's that work?

00:28:29.080 --> 00:28:30.040
- When we were designing this,

00:28:30.040 --> 00:28:33.040
we were thinking, damn, VS Code is really nice.

00:28:33.040 --> 00:28:34.880
You have all the plugins,

00:28:34.880 --> 00:28:36.600
all the autocomplete and everything,

00:28:36.600 --> 00:28:38.300
but we had two choices, right?

00:28:38.300 --> 00:28:41.960
Either we build this whole UI builder into VS Code,

00:28:41.960 --> 00:28:44.400
or we kind of take some of the things

00:28:44.400 --> 00:28:45.800
that make VS Code great

00:28:45.800 --> 00:28:48.280
and then bring it into the DropBase Studio.

00:28:48.280 --> 00:28:49.640
We don't know sort of the final,

00:28:49.640 --> 00:28:51.320
eventually where this will be,

00:28:51.320 --> 00:28:53.560
but the current version of this is we thought,

00:28:53.560 --> 00:28:56.720
you know what, I think we need to give users an editor,

00:28:56.720 --> 00:28:58.080
like a built-in editor,

00:28:58.080 --> 00:28:59.440
so they can just quickly,

00:28:59.440 --> 00:29:01.920
they can have the best experience building the app

00:29:01.920 --> 00:29:06.280
and the access to UI and context and state really quickly.

00:29:06.280 --> 00:29:08.420
We just did it that way,

00:29:08.420 --> 00:29:12.620
where we added in LSP, so like a language server.

00:29:12.620 --> 00:29:15.400
So anytime you type code in your Python function,

00:29:15.400 --> 00:29:18.120
it's basically over a WebSocket connection,

00:29:18.120 --> 00:29:21.100
basically streaming the code changes

00:29:21.100 --> 00:29:23.400
and saving them in your file system.

00:29:23.400 --> 00:29:25.380
That's the only way we can do this,

00:29:25.380 --> 00:29:29.540
this like object-oriented Python.notation access.

00:29:29.540 --> 00:29:32.620
And so we need to have access to all the files.

00:29:32.620 --> 00:29:34.300
And so we set this up so that

00:29:34.300 --> 00:29:36.580
not only you can do autocomplete,

00:29:36.580 --> 00:29:39.180
but also that we can actually do the state and context

00:29:39.180 --> 00:29:41.340
approach to the web framework.

00:29:41.340 --> 00:29:42.620
It was a bit complicated

00:29:42.620 --> 00:29:46.380
because we hadn't been really exposed to LSPs before.

00:29:46.380 --> 00:29:48.260
And so we had to learn how to use LSPs

00:29:48.260 --> 00:29:50.020
and we had to sort of hijack

00:29:50.020 --> 00:29:53.140
sort of the WebSocket connection in a way.

00:29:53.140 --> 00:29:54.540
So like we intercept the code

00:29:54.540 --> 00:29:56.820
and then we save it in your file system.

00:29:56.820 --> 00:29:59.500
So we had to customize it a little bit to do this.

00:29:59.500 --> 00:30:00.340
And it's really nice

00:30:00.340 --> 00:30:03.440
because now you can do autocomplete for your files.

00:30:03.440 --> 00:30:05.980
It's just a neat, it's so hard to develop now.

00:30:05.980 --> 00:30:07.780
We're so used to these tools.

00:30:07.780 --> 00:30:10.220
And now with things like Copilot,

00:30:10.220 --> 00:30:12.860
like we're used to even more than just autocomplete, right?

00:30:12.860 --> 00:30:14.740
It's like autocomplete the function,

00:30:14.740 --> 00:30:16.500
not just the variable, right?

00:30:16.500 --> 00:30:20.220
- I feel like autocomplete is just table stakes, you know,

00:30:20.220 --> 00:30:21.700
especially in this kind of thing.

00:30:21.700 --> 00:30:24.500
You know, if there's somebody who's just done Python forever

00:30:24.500 --> 00:30:26.980
and they're just, they'd rather get it out of the way

00:30:26.980 --> 00:30:28.140
and it's fine.

00:30:28.140 --> 00:30:30.700
It's not my way of working, but it's fine for people

00:30:30.700 --> 00:30:31.540
who want to do that.

00:30:31.540 --> 00:30:32.820
But if you're working with somebody

00:30:32.820 --> 00:30:34.840
who might not be a full-time developer,

00:30:34.840 --> 00:30:36.880
but they want to use your framework,

00:30:36.880 --> 00:30:39.200
your service to build some app,

00:30:39.200 --> 00:30:41.120
it seems like this could really empower them.

00:30:41.120 --> 00:30:43.320
But if you give them something with zero autocomplete,

00:30:43.320 --> 00:30:44.640
zero highlighting,

00:30:44.640 --> 00:30:46.200
they're going to be having a rough time, you know?

00:30:46.200 --> 00:30:48.640
- Yeah, even for a more experienced developer,

00:30:48.640 --> 00:30:50.680
I think it's still a hard time.

00:30:50.680 --> 00:30:51.560
- Even if you can do it,

00:30:51.560 --> 00:30:53.760
it's just less productive to go like, oh yeah.

00:30:53.760 --> 00:30:54.840
- Way less productive.

00:30:54.840 --> 00:30:56.400
- Yeah, way less productive.

00:30:56.400 --> 00:30:59.680
I think AI gets added to apps a lot

00:30:59.680 --> 00:31:01.480
just to kind of check a box.

00:31:01.480 --> 00:31:03.980
But the result of it is not that great

00:31:03.980 --> 00:31:07.820
to get on my email client that has AI integrated.

00:31:07.820 --> 00:31:09.940
But it almost always seems like, well, that's not something

00:31:09.940 --> 00:31:11.420
I'd, yeah, that's something I want to read.

00:31:11.420 --> 00:31:12.660
Like, I don't really want to read that.

00:31:12.660 --> 00:31:14.500
And I don't need to summarize it.

00:31:14.500 --> 00:31:15.900
That's emails, you know,

00:31:15.900 --> 00:31:18.100
just seems like a lot of energy goes into it

00:31:18.100 --> 00:31:19.540
when it's not that big of a value.

00:31:19.540 --> 00:31:22.220
But maybe something like Copilot could be here.

00:31:22.220 --> 00:31:24.020
- And this is something we've talked about,

00:31:24.020 --> 00:31:25.180
me and my co-founder.

00:31:25.180 --> 00:31:27.820
So one of the things that we didn't get to cover

00:31:27.820 --> 00:31:30.420
because we're not going to go through all the demos,

00:31:30.420 --> 00:31:33.520
but the way that we render data in these tables

00:31:33.520 --> 00:31:37.760
is we basically format it as a pandas data frame.

00:31:37.760 --> 00:31:39.940
So what that means is that,

00:31:39.940 --> 00:31:43.560
let's say that you query data from Stripe, right?

00:31:43.560 --> 00:31:46.200
Like you get all your customers from Stripe.

00:31:46.200 --> 00:31:48.120
Stripe is not going to return a data frame for you.

00:31:48.120 --> 00:31:50.680
It's going to return like an object, right?

00:31:50.680 --> 00:31:51.520
A dictionary.

00:31:51.520 --> 00:31:53.880
And then you basically have to take that dictionary

00:31:53.880 --> 00:31:56.200
and then basically convert it into a data frame.

00:31:56.200 --> 00:31:57.600
And then we automatically know how to render

00:31:57.600 --> 00:31:58.680
everything else from there.

00:31:58.680 --> 00:32:00.660
So we've thought about this and like,

00:32:00.660 --> 00:32:04.220
wouldn't it be cool if as soon as you get the response

00:32:04.220 --> 00:32:08.140
from an endpoints, let's say as a JSON dictionary,

00:32:08.140 --> 00:32:10.500
that we suggest that we can just take it

00:32:10.500 --> 00:32:11.700
that next step for you,

00:32:11.700 --> 00:32:14.020
which is just to like convert it into a data frame.

00:32:14.020 --> 00:32:15.900
And then you wouldn't have to hustle with it.

00:32:15.900 --> 00:32:16.740
We've done that before,

00:32:16.740 --> 00:32:19.180
but in theory that sounds very, very helpful.

00:32:19.180 --> 00:32:22.780
If you're proficient in pandas and using data frames,

00:32:22.780 --> 00:32:24.380
it's actually not that hard.

00:32:24.380 --> 00:32:25.860
It's a very quick thing for you.

00:32:25.860 --> 00:32:27.320
But if you just know Python,

00:32:27.320 --> 00:32:32.240
but not exposed to the whole data frame ecosystem,

00:32:32.240 --> 00:32:34.560
then maybe it would be really nice if you just said,

00:32:34.560 --> 00:32:36.720
okay, we just started to data frame for you

00:32:36.720 --> 00:32:38.800
and then that's all you have to care about.

00:32:38.800 --> 00:32:39.640
So we've thought about this.

00:32:39.640 --> 00:32:40.560
We haven't added this yet.

00:32:40.560 --> 00:32:41.920
- I think it's fine without,

00:32:41.920 --> 00:32:43.920
but it's kind of one of those things like you're in there

00:32:43.920 --> 00:32:45.440
and you've got these data sources

00:32:45.440 --> 00:32:47.080
and maybe you're not super familiar with them.

00:32:47.080 --> 00:32:48.560
Maybe you can pull them together somehow.

00:32:48.560 --> 00:32:51.240
- One of the things that I find myself struggling with is,

00:32:51.240 --> 00:32:52.760
let's say I want to build a demo.

00:32:52.760 --> 00:32:56.220
Let's say I haven't been exposed to like the SendGrid API

00:32:56.220 --> 00:32:57.780
or the HubSpot API.

00:32:57.780 --> 00:33:02.180
Then I have to go to their documentation to figure out,

00:33:02.180 --> 00:33:05.340
how do I, what's the package name so I can install it?

00:33:05.340 --> 00:33:06.980
How do I authenticate in?

00:33:06.980 --> 00:33:09.740
How do I call a few endpoints to do what I need to do?

00:33:09.740 --> 00:33:11.340
And I think in that case where it's like,

00:33:11.340 --> 00:33:13.380
it's not about your knowledge of Python.

00:33:13.380 --> 00:33:16.220
It really is about your knowledge of this other thing

00:33:16.220 --> 00:33:17.260
that you're using.

00:33:17.260 --> 00:33:18.100
In those cases,

00:33:18.100 --> 00:33:20.140
it seems that it could be extremely helpful

00:33:20.140 --> 00:33:22.060
for someone to build apps very quickly

00:33:22.060 --> 00:33:25.440
if they somehow had access to either a quick documentation

00:33:25.440 --> 00:33:27.740
or it just suggested what you might want to do.

00:33:27.740 --> 00:33:30.140
- Yeah, that's kind of what I was thinking as well.

00:33:30.140 --> 00:33:33.440
If you're a regular listener of the podcast,

00:33:33.440 --> 00:33:36.620
you surely heard about Talk Python's online courses,

00:33:36.620 --> 00:33:39.000
but have you had a chance to try them out?

00:33:39.000 --> 00:33:40.480
No matter the level you're looking for,

00:33:40.480 --> 00:33:42.020
we have a course for you.

00:33:42.020 --> 00:33:43.500
Our Python for Absolute Beginners

00:33:43.500 --> 00:33:45.300
is like an introduction to Python,

00:33:45.300 --> 00:33:47.020
plus that first year computer science course

00:33:47.020 --> 00:33:48.300
that you never took.

00:33:48.300 --> 00:33:50.100
Our data-driven web app courses

00:33:50.100 --> 00:33:53.300
build a full pypi.org clone

00:33:53.300 --> 00:33:55.260
along with you right on the screen.

00:33:55.260 --> 00:33:58.360
And we even have a few courses to dip your toe in with.

00:33:58.360 --> 00:34:01.060
See what we have to offer at training.talkpython.fm

00:34:01.060 --> 00:34:03.360
or just click the link in your podcast player.

00:34:03.360 --> 00:34:07.820
- So speaking of that sort of external resources,

00:34:07.820 --> 00:34:09.780
you've got this Python function.

00:34:09.780 --> 00:34:11.300
What can I put in there?

00:34:11.300 --> 00:34:13.080
Can I use external packages?

00:34:13.080 --> 00:34:18.080
Can I call out on the network to talk to some API endpoints?

00:34:18.080 --> 00:34:19.540
Can I spin up threads?

00:34:19.540 --> 00:34:21.500
What can I do?

00:34:21.500 --> 00:34:23.180
How much Python can I do there?

00:34:23.180 --> 00:34:24.540
- Pretty much all of the above.

00:34:24.540 --> 00:34:26.500
So I'll elaborate what I mean by that.

00:34:26.500 --> 00:34:28.660
So the standard way that you would connect

00:34:28.660 --> 00:34:32.740
to some of these services, these third-party services,

00:34:32.740 --> 00:34:35.020
is you'll make like an HTTP request,

00:34:35.020 --> 00:34:36.820
like GET request, POST request.

00:34:36.820 --> 00:34:39.540
So you can just like import requests,

00:34:39.540 --> 00:34:40.860
basically pip install requests,

00:34:40.860 --> 00:34:43.540
and then just do it over the standard Python,

00:34:43.540 --> 00:34:45.020
basically Python package.

00:34:45.020 --> 00:34:46.700
Now, it is way more convenient

00:34:46.700 --> 00:34:50.420
when you use an SDK provided by one of these third parties.

00:34:50.420 --> 00:34:51.860
So if you wanna use Stripe,

00:34:51.860 --> 00:34:53.700
if you're able to just import Stripe,

00:34:53.700 --> 00:34:55.860
it'll make your life a lot easier,

00:34:55.860 --> 00:34:58.500
you know, very nicely Pythonic, everything set up.

00:34:58.500 --> 00:35:01.740
So in DropBase, you can install anything

00:35:01.740 --> 00:35:03.700
that you can install via PyPI.

00:35:03.700 --> 00:35:07.100
We have a file called custom requirements.

00:35:07.100 --> 00:35:09.420
And if you just list them out,

00:35:09.420 --> 00:35:10.780
when you set up DropBase,

00:35:10.780 --> 00:35:12.820
we'll basically install all those for you.

00:35:12.820 --> 00:35:14.300
And then when you write a function,

00:35:14.300 --> 00:35:17.820
you can just basically import Stripe directly in the function

00:35:17.820 --> 00:35:19.860
without, you know, pip installing it again,

00:35:19.860 --> 00:35:21.060
and then you just use it.

00:35:21.060 --> 00:35:23.060
So that's really nice, basically anything.

00:35:23.060 --> 00:35:25.100
I think you were doing a previous,

00:35:25.100 --> 00:35:26.460
UV, you were talking--

00:35:26.460 --> 00:35:27.980
- Yeah, yeah, I was talking to Charlie Marsh

00:35:27.980 --> 00:35:29.540
about UV earlier today, yeah.

00:35:29.540 --> 00:35:30.980
- We haven't looked into it yet,

00:35:30.980 --> 00:35:34.780
but anything you can pip install from, you know, from PyPI,

00:35:34.780 --> 00:35:36.100
you can install in DropBase,

00:35:36.100 --> 00:35:37.940
which makes it really, really powerful.

00:35:37.940 --> 00:35:38.780
- Yeah, nice.

00:35:38.780 --> 00:35:40.020
- There's a database connections.

00:35:40.020 --> 00:35:41.100
I mean, you could use SQL,

00:35:41.100 --> 00:35:43.060
or you can import whatever else you want,

00:35:43.060 --> 00:35:46.180
but we make those a bit more native

00:35:46.180 --> 00:35:48.700
because we know that you're gonna connect to databases.

00:35:48.700 --> 00:35:51.500
So we wanna make it a bit more a convenience.

00:35:51.500 --> 00:35:52.340
So--

00:35:52.340 --> 00:35:54.540
- And your tables need sort of direct access

00:35:54.540 --> 00:35:55.540
to it as well, right?

00:35:55.540 --> 00:35:58.500
Not just the output of some access to the database,

00:35:58.500 --> 00:36:00.180
but you've got to figure out the columns

00:36:00.180 --> 00:36:01.380
and all that kind of stuff, right?

00:36:01.380 --> 00:36:02.220
- That's correct.

00:36:02.220 --> 00:36:05.100
So for, we created a little library,

00:36:05.100 --> 00:36:07.020
like a utility slash helper

00:36:07.020 --> 00:36:11.300
that lets you perform database operations very quickly.

00:36:11.300 --> 00:36:13.780
So if you've added your database credentials

00:36:13.780 --> 00:36:15.820
to the .env file,

00:36:15.820 --> 00:36:18.020
then you can quickly perform, you know,

00:36:18.020 --> 00:36:19.700
like a select statement,

00:36:19.700 --> 00:36:22.860
or you can make an update to that database via functions,

00:36:22.860 --> 00:36:25.260
but without, you know, the standard thing where you do,

00:36:25.260 --> 00:36:27.380
if you use SQLAlchemy, for example,

00:36:27.380 --> 00:36:30.260
where you like start a session, start a connection,

00:36:30.260 --> 00:36:31.140
you know, like all those steps,

00:36:31.140 --> 00:36:32.700
we kind of abstract that for you,

00:36:32.700 --> 00:36:35.860
but you can totally use SQLAlchemy in its full glory

00:36:35.860 --> 00:36:37.620
if you, you know, if that's what you're used to.

00:36:37.620 --> 00:36:38.460
- Nice.

00:36:38.460 --> 00:36:39.380
Can I write Python files,

00:36:39.380 --> 00:36:41.260
like separate Python scripts and stuff,

00:36:41.260 --> 00:36:43.900
and then just import and call them from there?

00:36:43.900 --> 00:36:45.180
Or does it have to be done through the UI?

00:36:45.180 --> 00:36:46.020
- Totally. - Yeah?

00:36:46.020 --> 00:36:48.060
- This is actually one of the biggest advantages

00:36:48.060 --> 00:36:50.380
of DropBase is that if you have like a,

00:36:50.380 --> 00:36:51.700
like a Python script lying around

00:36:51.700 --> 00:36:54.180
and you want to sort of use it in DropBase,

00:36:54.180 --> 00:36:56.180
you can add it to that file system

00:36:56.180 --> 00:36:58.420
somewhere in the workspace directory,

00:36:58.420 --> 00:37:01.420
and you can just import it in via your function.

00:37:01.420 --> 00:37:02.540
So you just like, - Okay.

00:37:02.540 --> 00:37:03.860
- From your file,

00:37:03.860 --> 00:37:05.900
you can import a specific function in that file,

00:37:05.900 --> 00:37:06.740
for example.

00:37:06.740 --> 00:37:08.700
And so, so the implication of this

00:37:08.700 --> 00:37:11.500
is that you can set up DropBase in a way

00:37:11.500 --> 00:37:14.820
that it just lives in your existing Python code base.

00:37:14.820 --> 00:37:16.740
So imagine you already, you know,

00:37:16.740 --> 00:37:18.180
you've set up your company,

00:37:18.180 --> 00:37:19.820
you've got product market fit, you know,

00:37:19.820 --> 00:37:20.900
things are running, right?

00:37:20.900 --> 00:37:22.620
And you have a Python backend,

00:37:22.620 --> 00:37:24.900
and now you're starting to scale

00:37:24.900 --> 00:37:26.300
and you need to build tools.

00:37:26.300 --> 00:37:29.260
So your first option would be to do all custom,

00:37:29.260 --> 00:37:30.100
obviously.

00:37:30.100 --> 00:37:33.660
The second option is to use some sort of tools builder,

00:37:33.660 --> 00:37:36.380
but every single action you take

00:37:36.380 --> 00:37:38.780
is done over an HTTP request

00:37:38.780 --> 00:37:40.140
with authentication, with everything.

00:37:40.140 --> 00:37:42.700
So just like a standard internet communication.

00:37:42.700 --> 00:37:44.620
But if you wanted to just interact

00:37:44.620 --> 00:37:48.340
with an existing functions or internal endpoints,

00:37:48.340 --> 00:37:51.100
then you'd have to either set up an RPC server,

00:37:51.100 --> 00:37:53.820
or you might want to use some other way

00:37:53.820 --> 00:37:54.900
to get in there, right?

00:37:54.900 --> 00:37:58.500
With DropBase, you basically just set up DropBase

00:37:58.500 --> 00:38:00.620
in the same directory as your app,

00:38:00.620 --> 00:38:03.860
and you can then import selectively what functions you need.

00:38:03.860 --> 00:38:06.660
It's sort of like a window into your code base

00:38:06.660 --> 00:38:09.340
that it's like a plug into that code base

00:38:09.340 --> 00:38:11.940
where you can now expand and build a lot of internal tools

00:38:11.940 --> 00:38:14.220
that leverages everything that you've already built.

00:38:14.220 --> 00:38:15.620
- Yeah. - That's the way, by the way.

00:38:15.620 --> 00:38:16.460
- Yeah, when you've got,

00:38:16.460 --> 00:38:18.140
oh yeah, there's the requirements like custom, right?

00:38:18.140 --> 00:38:20.700
So you've got your Docker compose file.

00:38:20.700 --> 00:38:23.500
I mean, could you set it up just so as you build,

00:38:23.500 --> 00:38:24.340
it may be even better,

00:38:24.340 --> 00:38:28.580
just set up a volume so that it can directly find,

00:38:28.580 --> 00:38:29.940
I mean, I guess that's what you're kind of showing

00:38:29.940 --> 00:38:30.780
right here, right?

00:38:30.780 --> 00:38:32.460
Is that you can sort of map,

00:38:32.460 --> 00:38:36.700
mount the volume just directly into say your Git repo

00:38:36.700 --> 00:38:38.500
for your big project code,

00:38:38.500 --> 00:38:39.980
and then you can just start importing that

00:38:39.980 --> 00:38:40.980
and doing stuff with it, right?

00:38:40.980 --> 00:38:42.380
- We still need to do some tweaks

00:38:42.380 --> 00:38:44.980
because of relative cats,

00:38:44.980 --> 00:38:46.660
but the idea is that you can do that

00:38:46.660 --> 00:38:49.100
with a little bit of customization.

00:38:49.100 --> 00:38:50.980
But yeah, our Workspace Server,

00:38:50.980 --> 00:38:53.940
basically you mount files or directories,

00:38:53.940 --> 00:38:56.260
and then we can look into those to execute.

00:38:56.260 --> 00:38:58.380
- Yeah, manage those files with Git or something like that.

00:38:58.380 --> 00:39:00.140
- A good example of this is,

00:39:00.140 --> 00:39:02.540
are you familiar with Django and Django admin?

00:39:02.540 --> 00:39:05.020
- Not super as I do every day, but I'm aware, sure.

00:39:05.020 --> 00:39:07.660
- Django, it's a great web framework.

00:39:07.660 --> 00:39:08.940
It's used by a lot of companies.

00:39:08.940 --> 00:39:10.860
It's like, if you wanna build web apps,

00:39:10.860 --> 00:39:13.060
Django, it comes with a lot of stuff, right?

00:39:13.060 --> 00:39:15.100
And there's this thing called Django admin

00:39:15.100 --> 00:39:19.420
that basically automatically generates admin panels for you

00:39:19.420 --> 00:39:22.020
based on your Django models.

00:39:22.020 --> 00:39:26.060
And so if you have a model for like a book, right?

00:39:26.060 --> 00:39:27.500
In the book as authors,

00:39:27.500 --> 00:39:30.220
it basically exposes that to the Django admin.

00:39:30.220 --> 00:39:32.620
And then now you can edit a book

00:39:32.620 --> 00:39:33.980
without really doing anything.

00:39:33.980 --> 00:39:35.500
Like it all kind of comes for free.

00:39:35.500 --> 00:39:36.340
Like it's pretty neat.

00:39:36.340 --> 00:39:38.820
- I think that's like half the appeal of Django right there.

00:39:38.820 --> 00:39:39.660
- It is, yeah.

00:39:39.660 --> 00:39:41.380
I think a lot of people use it for that.

00:39:41.380 --> 00:39:42.740
- Yeah, they're like, I don't wanna write that stuff.

00:39:42.740 --> 00:39:43.740
I'm using Django.

00:39:43.740 --> 00:39:44.580
Yeah, for real.

00:39:44.580 --> 00:39:45.420
- And it's great.

00:39:45.420 --> 00:39:50.140
Now, at some point when your company hits a certain milestone

00:39:50.140 --> 00:39:53.940
or a certain number of customers,

00:39:53.940 --> 00:39:58.420
you will need to customize those admin panels.

00:39:58.420 --> 00:40:01.500
You might need to create admin panels

00:40:01.500 --> 00:40:04.300
for things that maybe you don't have models for yet

00:40:04.300 --> 00:40:08.220
or for things that combine data from your database

00:40:08.220 --> 00:40:11.340
with data from like Stripe or some other source.

00:40:11.340 --> 00:40:14.700
And so what we see when we talk to these people

00:40:14.700 --> 00:40:16.460
is that they kind of struggle to like,

00:40:16.460 --> 00:40:18.660
either do I like keep using this

00:40:18.660 --> 00:40:21.300
or do I like completely rebuild everything?

00:40:21.300 --> 00:40:24.260
For those users, when we talk to them about DropBase,

00:40:24.260 --> 00:40:26.900
they get very excited because with DropBase,

00:40:26.900 --> 00:40:30.220
you can install Django and it can sit in your file system.

00:40:30.220 --> 00:40:32.500
And so essentially all the models

00:40:32.500 --> 00:40:34.340
that you've already built in Django,

00:40:34.340 --> 00:40:36.540
you can basically call them via DropBase

00:40:36.540 --> 00:40:38.820
with DropBase function 'cause it's all Python, right?

00:40:38.820 --> 00:40:41.100
And so it gives you this like, okay,

00:40:41.100 --> 00:40:43.500
Django admins are great up to a certain point.

00:40:43.500 --> 00:40:45.140
And then after that, what happens, right?

00:40:45.140 --> 00:40:46.980
Like you might not wanna rebuild everything

00:40:46.980 --> 00:40:48.820
just so you can have internal tooling.

00:40:48.820 --> 00:40:52.540
And so I think that's quite of a nice spot for us to say,

00:40:52.540 --> 00:40:55.340
look, DropBase can live in your code base,

00:40:55.340 --> 00:40:57.300
uses everything you already have,

00:40:57.300 --> 00:40:59.460
but it gives you some extra things

00:40:59.460 --> 00:41:02.140
if you want to build internal tools very quickly.

00:41:02.140 --> 00:41:04.820
So that's something we're obviously very, very excited about.

00:41:04.820 --> 00:41:05.660
- That's really cool.

00:41:05.660 --> 00:41:06.860
I like that aspect of it.

00:41:06.860 --> 00:41:08.940
So when we talk about this code,

00:41:08.940 --> 00:41:10.620
I guess there's two scenarios,

00:41:10.620 --> 00:41:12.940
the cloud version or the self-hosted version,

00:41:12.940 --> 00:41:15.700
but where and how does this Python run?

00:41:15.700 --> 00:41:17.860
Is it, it must be full CPython?

00:41:17.860 --> 00:41:20.460
Is it running in isolated Docker containers

00:41:20.460 --> 00:41:22.300
or in your cloud, what happens?

00:41:22.300 --> 00:41:25.500
Is it functions like AWS functions, Lambda?

00:41:25.500 --> 00:41:28.780
- It just runs either on your local machine,

00:41:28.780 --> 00:41:30.580
if you've set it up as a developer,

00:41:30.580 --> 00:41:31.420
it's all running there.

00:41:31.420 --> 00:41:33.460
Obviously, if you could turn off your machine,

00:41:33.460 --> 00:41:34.660
you can use your apps.

00:41:34.660 --> 00:41:37.780
And then if you set it up in a production instance,

00:41:37.780 --> 00:41:40.140
let's say you deploy this on an EC2,

00:41:40.140 --> 00:41:43.060
your Python functions are running on that EC2,

00:41:43.060 --> 00:41:46.540
but it's running via Docker container inside.

00:41:46.540 --> 00:41:47.660
- So it gets a little isolation,

00:41:47.660 --> 00:41:49.780
a little bit of protection, that kind of stuff.

00:41:49.780 --> 00:41:51.580
- And we're assuming that,

00:41:51.580 --> 00:41:53.020
I mean, you're building these apps

00:41:53.020 --> 00:41:54.860
to run on your own infrastructure,

00:41:54.860 --> 00:41:56.980
is that you would, that you know what you're doing.

00:41:56.980 --> 00:42:01.260
So this is as opposed to us having a full cloud version

00:42:01.260 --> 00:42:03.900
where all customers run untrusted code

00:42:03.900 --> 00:42:06.340
in the same sort of backend system,

00:42:06.340 --> 00:42:08.180
which would be obviously very dangerous

00:42:08.180 --> 00:42:11.740
'cause I'm sure there's ways a customer can somehow,

00:42:11.740 --> 00:42:12.780
you know, go through the back

00:42:12.780 --> 00:42:16.180
and then access other customers' untrusted code.

00:42:16.180 --> 00:42:17.180
And that would be a nightmare.

00:42:17.180 --> 00:42:19.460
And so if we have isolation,

00:42:19.460 --> 00:42:22.180
first layer is, well, it's in your infrastructure,

00:42:22.180 --> 00:42:24.780
you're gonna do, it's just your company's code,

00:42:24.780 --> 00:42:26.220
but then further, you know,

00:42:26.220 --> 00:42:30.100
we run Python in containers in that instance.

00:42:30.100 --> 00:42:33.420
- That sounds more like a durability thing than anything.

00:42:33.420 --> 00:42:35.580
I mean, it is also for isolation and protection,

00:42:35.580 --> 00:42:36.980
but first and foremost,

00:42:36.980 --> 00:42:39.380
just don't let bad Python code

00:42:39.380 --> 00:42:40.700
take down the whole thing, you know?

00:42:40.700 --> 00:42:44.100
- The way we recommend people using Dropbix

00:42:44.100 --> 00:42:47.100
or setting up their dev sort of process with Dropbix

00:42:47.100 --> 00:42:49.460
is that they would clone,

00:42:49.460 --> 00:42:52.460
it's like basically fork the work Dropbix,

00:42:52.460 --> 00:42:54.100
and then they will develop locally.

00:42:54.100 --> 00:42:56.020
They will test changes.

00:42:56.020 --> 00:42:58.980
And once they're happy with the new code,

00:42:58.980 --> 00:43:00.220
you know, they'll push it back

00:43:00.220 --> 00:43:04.060
and then they will have CI/CD into the production instance.

00:43:04.060 --> 00:43:05.820
And then they can version control everything.

00:43:05.820 --> 00:43:08.500
So that also gives you that extra layer of,

00:43:08.500 --> 00:43:11.700
okay, let's make sure that whatever we're pushing is tested.

00:43:11.700 --> 00:43:14.180
You can always add test databases

00:43:14.180 --> 00:43:15.460
that you develop locally with

00:43:15.460 --> 00:43:17.020
before you push to production,

00:43:17.020 --> 00:43:19.460
where it's gonna have to act on your production data.

00:43:19.460 --> 00:43:20.900
- Yeah, that's pretty interesting.

00:43:20.900 --> 00:43:22.980
I like the version control aspect of it.

00:43:22.980 --> 00:43:25.460
That gives it a much nicer touch

00:43:25.460 --> 00:43:27.340
to connection to real software,

00:43:27.340 --> 00:43:30.540
rather than just it's a text input area in an app

00:43:30.540 --> 00:43:32.020
that who knows what happens.

00:43:32.020 --> 00:43:34.780
- As developers, it sometimes feels a bit scary, right?

00:43:34.780 --> 00:43:35.940
Like you're building something

00:43:35.940 --> 00:43:39.580
and it's in this other framework, in this other cloud,

00:43:39.580 --> 00:43:42.420
and it just feels like you can't kind of get,

00:43:42.420 --> 00:43:43.820
like if the thing goes away,

00:43:43.820 --> 00:43:45.620
like you can't even see your previous code.

00:43:45.620 --> 00:43:47.980
That was another key concept that we wanted to have

00:43:47.980 --> 00:43:51.820
is in this tool that it feels friendly for developers,

00:43:51.820 --> 00:43:54.100
that it matches your mental models

00:43:54.100 --> 00:43:57.260
and your sort of like your development process,

00:43:57.260 --> 00:43:59.820
let's call it, like how you're used to making apps

00:43:59.820 --> 00:44:00.940
or developing code,

00:44:00.940 --> 00:44:02.540
that we keep that feeling

00:44:02.540 --> 00:44:04.220
when you're building apps with TrapFace.

00:44:04.220 --> 00:44:06.820
- I wanna maybe have a PR to understand

00:44:06.820 --> 00:44:09.860
if we accept this change to it, right?

00:44:09.860 --> 00:44:10.700
- That's right, yeah.

00:44:10.700 --> 00:44:11.900
- Yeah, you don't normally hear that kind of stuff

00:44:11.900 --> 00:44:14.100
around these kinds of tools.

00:44:14.100 --> 00:44:16.460
- And if you do, I think it tends to be like,

00:44:16.460 --> 00:44:19.140
yeah, okay, it's like a huge enterprise contract,

00:44:19.140 --> 00:44:22.700
pay us $50,000 a year, and then you get version control,

00:44:22.700 --> 00:44:26.340
which to me, it sounds scary.

00:44:26.340 --> 00:44:27.180
I mean, it just,

00:44:27.180 --> 00:44:28.980
it will make me a little bit less comfortable.

00:44:28.980 --> 00:44:30.460
Now, obviously, if I'm a big company

00:44:30.460 --> 00:44:33.100
and I just really need the tool,

00:44:33.100 --> 00:44:35.660
sure, maybe I'll just pay for it and I get version control,

00:44:35.660 --> 00:44:37.420
but getting version control,

00:44:37.420 --> 00:44:39.660
it just feels so like,

00:44:39.660 --> 00:44:42.580
like table stakes for developers, especially today,

00:44:42.580 --> 00:44:44.940
that yeah, it just wouldn't make sense otherwise for us.

00:44:44.940 --> 00:44:46.540
I mean, it's the way we're approaching this product.

00:44:46.540 --> 00:44:48.340
- Yeah, well, the other aspect is,

00:44:48.340 --> 00:44:50.420
what are you version controlling?

00:44:50.420 --> 00:44:53.860
Do you end up with something like effectively

00:44:53.860 --> 00:44:57.100
a Jupyter notebook, like big blob of something,

00:44:57.100 --> 00:44:59.460
and then there's an older blob of something,

00:44:59.460 --> 00:45:01.020
and then you diff it, you're like, what is this?

00:45:01.020 --> 00:45:02.740
But since you end up with just these,

00:45:02.740 --> 00:45:05.340
your workspace files that just live there, right?

00:45:05.340 --> 00:45:08.180
It's a real optimized, like show me the changes,

00:45:08.180 --> 00:45:09.260
show me what's happened here.

00:45:09.260 --> 00:45:10.380
- Yeah, it all lives there,

00:45:10.380 --> 00:45:13.900
including the component properties.

00:45:13.900 --> 00:45:17.220
Like we don't store this in like a separate database

00:45:17.220 --> 00:45:18.460
or anything like that.

00:45:18.460 --> 00:45:21.900
So like, you know, like for some of their tools,

00:45:21.900 --> 00:45:24.940
they will store all the components in their database.

00:45:24.940 --> 00:45:26.420
And so what they do is, you know,

00:45:26.420 --> 00:45:29.020
when you load up their tools, like their tools builder,

00:45:29.020 --> 00:45:32.460
it'll fetch all the components from the provider's database,

00:45:32.460 --> 00:45:35.500
combine it with maybe your custom code,

00:45:35.500 --> 00:45:36.660
and then it'll do it.

00:45:36.660 --> 00:45:38.580
And so even that feels like, okay,

00:45:38.580 --> 00:45:41.180
but where's like config for my components?

00:45:41.180 --> 00:45:42.540
- Yeah, where'd this button come from?

00:45:42.540 --> 00:45:43.380
Why is it gone?

00:45:43.380 --> 00:45:44.500
- That's tough, yeah.

00:45:44.500 --> 00:45:47.340
And then like, imagine if you wanted to like share apps,

00:45:47.340 --> 00:45:49.100
or, you know, it's just like version control

00:45:49.100 --> 00:45:50.180
makes a bit less sense.

00:45:50.180 --> 00:45:52.180
I mean, you're just version controlling,

00:45:52.180 --> 00:45:53.540
just like the individual functions,

00:45:53.540 --> 00:45:56.020
maybe like some custom part of the code that you write,

00:45:56.020 --> 00:45:57.260
which is still useful,

00:45:57.260 --> 00:45:59.420
but it still feels like you don't have the full picture

00:45:59.420 --> 00:46:00.260
of what's happening.

00:46:00.260 --> 00:46:02.140
- Yeah, you don't have a full record.

00:46:02.140 --> 00:46:03.460
It could easily get out of sync.

00:46:03.460 --> 00:46:04.820
- Yeah. - Quite interesting.

00:46:04.820 --> 00:46:07.100
I guess one thing we touched on a little bit

00:46:07.100 --> 00:46:09.820
before I press go here in the show,

00:46:09.820 --> 00:46:12.260
you said that at one point you were considering

00:46:12.260 --> 00:46:15.620
using Jupyter and this whole mechanism.

00:46:15.620 --> 00:46:17.500
Yeah, what's the story around that?

00:46:17.500 --> 00:46:20.220
- We love Jupyter, we love notebooks,

00:46:20.220 --> 00:46:21.700
and we love the experience of them.

00:46:21.700 --> 00:46:23.740
The sense that you can write some code

00:46:23.740 --> 00:46:26.260
and you can quickly test and execute the code

00:46:26.260 --> 00:46:30.420
without, basically without needing to write anything else.

00:46:30.420 --> 00:46:33.940
So for prototyping, for getting quick feedback, it's great.

00:46:33.940 --> 00:46:38.180
And we wanted to give our developers something like that,

00:46:38.180 --> 00:46:39.980
because when you build these apps,

00:46:39.980 --> 00:46:41.220
you're kind of iterating, right?

00:46:41.220 --> 00:46:42.260
You're like, you're testing it.

00:46:42.260 --> 00:46:44.460
A lot of the times you don't even know the documentation

00:46:44.460 --> 00:46:46.820
for Vibe or HubSpot or,

00:46:46.820 --> 00:46:48.660
and so like there's a lot of experimentation.

00:46:48.660 --> 00:46:51.020
And so we wanted a quick way to do that.

00:46:51.020 --> 00:46:54.220
So we considered maybe having something

00:46:54.220 --> 00:46:57.100
like a Jupyter kernel within DropBase

00:46:57.100 --> 00:46:58.900
that allowed people to do it.

00:46:58.900 --> 00:47:00.580
There were some issues with it,

00:47:00.580 --> 00:47:04.020
is in the sense that the kernel actually stores results

00:47:04.020 --> 00:47:05.700
from like previous blocks.

00:47:05.700 --> 00:47:07.660
And sometimes that gets in the way

00:47:07.660 --> 00:47:10.660
of you triggering an action in a later block.

00:47:10.660 --> 00:47:11.940
And so we were like, okay,

00:47:11.940 --> 00:47:14.780
maybe that's a little bit more than we need.

00:47:14.780 --> 00:47:17.620
Now we still kind of eventually want something like that.

00:47:17.620 --> 00:47:21.020
We hacked it in a way, like, so the way that we do it is,

00:47:21.020 --> 00:47:22.780
you can write a Python function.

00:47:22.780 --> 00:47:24.340
You basically get one block.

00:47:24.340 --> 00:47:25.740
You can write a Python function

00:47:25.740 --> 00:47:28.180
and you can click on a play button

00:47:28.180 --> 00:47:30.620
to basically run that function,

00:47:30.620 --> 00:47:32.140
but it's not like a kernel.

00:47:32.140 --> 00:47:34.820
So what we do is behind the scenes,

00:47:34.820 --> 00:47:36.620
we have like a main function.

00:47:36.620 --> 00:47:38.420
And when you trigger that function,

00:47:38.420 --> 00:47:41.620
we take the state from the client.

00:47:41.620 --> 00:47:43.660
So whatever you've selected or input it,

00:47:43.660 --> 00:47:46.940
we take the underlying file for your Python function,

00:47:46.940 --> 00:47:48.540
and then we call it from me.

00:47:48.540 --> 00:47:51.540
And so we kind of simulate that experience

00:47:51.540 --> 00:47:54.540
of like instantly testing code that you just wrote,

00:47:54.540 --> 00:47:55.500
but there is no,

00:47:55.500 --> 00:47:58.180
like there's no Jupyter kernel behind the scenes.

00:47:58.180 --> 00:48:00.060
And then you can only do one block at a time.

00:48:00.060 --> 00:48:02.260
And so we said, okay, for now,

00:48:02.260 --> 00:48:03.860
as we're getting started with it,

00:48:03.860 --> 00:48:05.940
it's good enough that you can write your functions.

00:48:05.940 --> 00:48:07.980
You can run and test them immediately,

00:48:07.980 --> 00:48:08.940
which is really nice.

00:48:08.940 --> 00:48:10.500
You can do this with VS Code, by the way,

00:48:10.500 --> 00:48:12.060
like you would have to open up the terminal

00:48:12.060 --> 00:48:13.860
and then basically run your function.

00:48:13.860 --> 00:48:16.020
And so we still wanted this feature where you can click

00:48:16.020 --> 00:48:17.740
and just see your outputs

00:48:17.740 --> 00:48:20.260
and basically debug and troubleshoot,

00:48:20.260 --> 00:48:22.220
but it'd be really nice if we get out multiple blocks

00:48:22.220 --> 00:48:23.980
and you can just build functions that way.

00:48:23.980 --> 00:48:25.420
So maybe for the future.

00:48:25.420 --> 00:48:26.260
- Interesting.

00:48:26.260 --> 00:48:29.380
- Did you say that you were a core developer for Jupyter?

00:48:29.380 --> 00:48:32.100
- No, no, I just spoke to them.

00:48:32.100 --> 00:48:33.300
It sounds fun, but I was just,

00:48:33.300 --> 00:48:35.100
I interviewed a whole bunch of them recently.

00:48:35.100 --> 00:48:37.980
And what I thought was interesting is,

00:48:37.980 --> 00:48:41.420
Jupyter is such an empowering thing for Python developers,

00:48:41.420 --> 00:48:44.340
but many of the core developers are so focused

00:48:44.340 --> 00:48:46.700
on writing JavaScript and TypeScript

00:48:46.700 --> 00:48:49.060
to sort of make these interactions possible.

00:48:49.060 --> 00:48:51.900
So the rest of us don't have to write JavaScript

00:48:51.900 --> 00:48:53.340
and that kind of stuff.

00:48:53.340 --> 00:48:54.380
- So I think we're getting about

00:48:54.380 --> 00:48:55.660
to the end of our time here.

00:48:55.660 --> 00:48:59.300
I'm sure that actually this is somewhat similar.

00:48:59.300 --> 00:49:02.100
It's really a dynamic interactive web app.

00:49:02.100 --> 00:49:03.940
And in that case, it probably has to have

00:49:03.940 --> 00:49:06.260
some interesting front-end JavaScript stuff going on.

00:49:06.260 --> 00:49:07.740
What's the JavaScript story?

00:49:07.740 --> 00:49:08.580
- Yeah.

00:49:08.580 --> 00:49:09.580
- What framework are you using and stuff like that?

00:49:09.580 --> 00:49:12.660
- We use React to build our components.

00:49:12.660 --> 00:49:14.620
Obviously we abstract that away

00:49:14.620 --> 00:49:17.180
so that you as a Python developer,

00:49:17.180 --> 00:49:18.740
you're just writing Python,

00:49:18.740 --> 00:49:20.100
well, you're writing SQL as well,

00:49:20.100 --> 00:49:21.380
but let's call that Python.

00:49:21.380 --> 00:49:25.220
And then we deal with the components for you.

00:49:25.220 --> 00:49:27.380
And so it's not the kind of framework

00:49:27.380 --> 00:49:29.060
where you're writing Python

00:49:29.060 --> 00:49:33.260
and we're generating HTMLX or something like that.

00:49:33.260 --> 00:49:35.460
So obviously we understand React

00:49:35.460 --> 00:49:38.340
and we know we can build some beautiful components,

00:49:38.340 --> 00:49:39.820
customize them with it.

00:49:39.820 --> 00:49:42.860
We weren't about to create a completely new framework

00:49:42.860 --> 00:49:46.420
where we somehow just generate HTML from Python.

00:49:46.420 --> 00:49:49.620
I think there's a few people working on that, actually.

00:49:49.620 --> 00:49:50.660
We already know React,

00:49:50.660 --> 00:49:52.540
so let's just build those components

00:49:52.540 --> 00:49:54.180
or customize those components

00:49:54.180 --> 00:49:56.300
and then just let people declare them

00:49:56.300 --> 00:49:59.180
and then sort of access and modify them

00:49:59.180 --> 00:50:03.140
via the context objects in your Python functions.

00:50:03.140 --> 00:50:07.220
So our stack, we use FastAPI for our backend,

00:50:07.220 --> 00:50:08.060
which is great.

00:50:08.060 --> 00:50:08.900
- It's excellent, yeah.

00:50:08.900 --> 00:50:11.900
- I'm not sure if you've had the creator here on.

00:50:11.900 --> 00:50:13.820
- Yeah, I've had Sebastian on,

00:50:13.820 --> 00:50:16.940
I think at least three times, Sebastian Ramirez.

00:50:16.940 --> 00:50:17.780
- Yeah, he's great.

00:50:17.780 --> 00:50:18.620
- Yeah, he is really great, yeah.

00:50:18.620 --> 00:50:20.980
FastAPI is a fantastic app.

00:50:20.980 --> 00:50:22.420
And so, yeah, we use them.

00:50:22.420 --> 00:50:24.780
We use React on our client side

00:50:24.780 --> 00:50:28.340
and we are a lot of our infrastructure is on AWS.

00:50:28.340 --> 00:50:29.980
- Yeah, sounds really interesting.

00:50:29.980 --> 00:50:31.220
Sounds like a fun app to work on.

00:50:31.220 --> 00:50:33.060
- Yeah, you should play around with it.

00:50:33.060 --> 00:50:34.980
I can help you build some apps

00:50:34.980 --> 00:50:37.500
to manage your podcast library.

00:50:37.500 --> 00:50:38.580
- All right, well, Jimmy,

00:50:38.580 --> 00:50:41.500
I think we are pretty much out of time.

00:50:41.500 --> 00:50:43.260
Final thought for people listening,

00:50:43.260 --> 00:50:44.700
maybe they're excited to try this out.

00:50:44.700 --> 00:50:45.540
What are you telling them?

00:50:45.540 --> 00:50:47.660
- Yeah, just go to dropbase.io

00:50:47.660 --> 00:50:49.940
and sign up for a free account.

00:50:49.940 --> 00:50:50.900
It's free for developers.

00:50:50.900 --> 00:50:52.260
You can set it up locally.

00:50:52.260 --> 00:50:53.940
If you have any issues setting it up,

00:50:53.940 --> 00:50:54.780
just reach out.

00:50:54.780 --> 00:50:57.020
I'll personally help you get it up and running.

00:50:57.020 --> 00:50:59.740
Yeah, you can look at the documentation for everything else.

00:50:59.740 --> 00:51:00.980
- Yeah. - Let's try it.

00:51:00.980 --> 00:51:01.820
Give us some feedback.

00:51:01.820 --> 00:51:02.820
We'd love to hear from you.

00:51:02.820 --> 00:51:03.700
- Awesome.

00:51:03.700 --> 00:51:06.620
Congrats on building a cool project for people

00:51:06.620 --> 00:51:07.740
and yeah, good luck with it.

00:51:07.740 --> 00:51:08.940
- Thanks, Michael.

00:51:08.940 --> 00:51:12.220
- This has been another episode of Talk Python to Me.

00:51:12.220 --> 00:51:13.660
Thank you to our sponsors.

00:51:13.660 --> 00:51:15.020
Be sure to check out what they're offering.

00:51:15.020 --> 00:51:16.660
It really helps support the show.

00:51:17.660 --> 00:51:21.580
Mailtrap, an email delivery platform that developers love.

00:51:21.580 --> 00:51:24.660
Try for free at mailtrap.io.

00:51:24.660 --> 00:51:27.260
Want to level up your Python?

00:51:27.260 --> 00:51:29.020
We have one of the largest catalogs

00:51:29.020 --> 00:51:31.380
of Python video courses over at Talk Python.

00:51:31.380 --> 00:51:33.460
Our content ranges from true beginners

00:51:33.460 --> 00:51:36.420
to deeply advanced topics like memory and async.

00:51:36.420 --> 00:51:39.100
And best of all, there's not a subscription in sight.

00:51:39.100 --> 00:51:42.300
Check it out for yourself at training.talkpython.fm.

00:51:42.300 --> 00:51:43.900
Be sure to subscribe to the show,

00:51:43.900 --> 00:51:46.900
open your favorite podcast app and search for Python.

00:51:46.900 --> 00:51:48.300
We should be right at the top.

00:51:48.300 --> 00:51:51.180
You can also find the iTunes feed at /itunes,

00:51:51.180 --> 00:51:53.340
the Google Play feed at /play

00:51:53.340 --> 00:51:57.780
and the direct RSS feed at /rss on talkpython.fm.

00:51:57.780 --> 00:52:00.420
We're live streaming most of our recordings these days.

00:52:00.420 --> 00:52:01.540
If you want to be part of the show

00:52:01.540 --> 00:52:03.820
and have your comments featured on the air,

00:52:03.820 --> 00:52:05.700
be sure to subscribe to our YouTube channel

00:52:05.700 --> 00:52:08.900
at talkpython.fm/youtube.

00:52:08.900 --> 00:52:10.300
This is your host, Michael Kennedy.

00:52:10.300 --> 00:52:11.460
Thanks so much for listening.

00:52:11.460 --> 00:52:12.700
I really appreciate it.

00:52:12.700 --> 00:52:15.260
Now get out there and write some Python code.

00:52:15.260 --> 00:52:17.840
(upbeat music)

00:52:33.320 --> 00:52:35.320
For more information , Plz visit the website of HealthWY.com

