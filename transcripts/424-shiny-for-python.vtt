WEBVTT

00:00:00.000 --> 00:00:03.240
If you want to share your data science results as interactive web apps,


00:00:03.240 --> 00:00:07.040
you could learn Flask or Django and a bunch of other web technologies.


00:00:07.040 --> 00:00:09.760
Or you could pick up one of the powerful frameworks for


00:00:09.760 --> 00:00:11.840
deploying data science specifically.


00:00:11.840 --> 00:00:13.840
If you're searching through that space,


00:00:13.840 --> 00:00:15.800
you're likely to hear about Shiny.


00:00:15.800 --> 00:00:18.800
But that's just for the R side of data science, right?


00:00:18.800 --> 00:00:20.260
Not any longer.


00:00:20.260 --> 00:00:25.000
Joe Chen is here to introduce us to the recently released Shiny for Python,


00:00:25.000 --> 00:00:28.600
and it looks like a really solid new framework on the block.


00:00:28.600 --> 00:00:34.600
This is Talk Python To Me, episode 424, recorded June 19th, 2023.


00:00:34.600 --> 00:00:46.600
[music]


00:00:46.600 --> 00:00:50.600
Welcome to Talk Python To Me, a weekly podcast on Python.


00:00:50.600 --> 00:00:52.600
This is your host, Michael Kennedy.


00:00:52.600 --> 00:00:54.600
Follow me on Mastodon, where I'm @mkennedy,


00:00:54.600 --> 00:01:00.840
and follow the podcast using @talkpython, both on fosstodon.org. Be careful with impersonating


00:01:00.840 --> 00:01:05.560
accounts on other instances, there are many. Keep up with the show and listen to over seven years


00:01:05.560 --> 00:01:12.440
of past episodes at talkpython.fm. We've started streaming most of our episodes live on YouTube.


00:01:12.440 --> 00:01:17.480
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about


00:01:17.480 --> 00:01:23.160
upcoming shows and be part of that episode. I'm really excited to have a new sponsor for


00:01:23.160 --> 00:01:27.120
For this episode, welcome on board to GlareDB.


00:01:27.120 --> 00:01:29.320
GlareDB is an open source database


00:01:29.320 --> 00:01:32.480
for querying distributed and disparate data.


00:01:32.480 --> 00:01:34.900
Connect your data sources and use the Python tools


00:01:34.900 --> 00:01:37.700
you already know to ask questions


00:01:37.700 --> 00:01:39.840
and integrate data across data sources.


00:01:39.840 --> 00:01:43.640
Get started today at talkpython.fm/glareDB


00:01:43.640 --> 00:01:45.760
and it's brought to you by InfluxDB.


00:01:45.760 --> 00:01:47.840
InfluxDB is the database purpose-built


00:01:47.840 --> 00:01:50.960
for handling time series data at a massive scale


00:01:50.960 --> 00:01:52.560
for real-time analytics.


00:01:52.560 --> 00:01:56.220
Try them for free at talkpython.fm/influxdb.


00:01:56.220 --> 00:01:59.400
Hey Joe, welcome to Talk Python To Me.


00:01:59.400 --> 00:02:00.900
- Hi Michael, it's a pleasure to be here.


00:02:00.900 --> 00:02:02.640
- It's a pleasure to have you here.


00:02:02.640 --> 00:02:04.760
We're talking Python to an R person.


00:02:04.760 --> 00:02:05.600
What's going on here?


00:02:05.600 --> 00:02:06.420
(laughing)


00:02:06.420 --> 00:02:07.260
What is happening?


00:02:07.260 --> 00:02:08.400
- I know, right?


00:02:08.400 --> 00:02:12.080
- Cats and dogs living together, oh my gosh.


00:02:12.080 --> 00:02:13.520
No, it's great, glad to have you here.


00:02:13.520 --> 00:02:14.640
- Yeah, thanks.


00:02:14.640 --> 00:02:16.640
- So we're gonna talk about Shiny,


00:02:16.640 --> 00:02:19.440
which has traditionally been UI framework,


00:02:19.440 --> 00:02:27.200
a web framework for kind of rad, rapid development for R applications that need some interactivity.


00:02:27.200 --> 00:02:31.900
But you have a big release for the Python people. That's also interesting and we're


00:02:31.900 --> 00:02:34.760
talking about. So that's the topic of today's show.


00:02:34.760 --> 00:02:39.720
Yeah, absolutely. I hope you starting out mentioning R that people haven't dropped off


00:02:39.720 --> 00:02:45.200
already. I promise. Lots to say about Python and Shiny for Python.


00:02:45.200 --> 00:02:46.520
Of course, I'm sure.


00:02:46.520 --> 00:02:49.160
Shiny for Python's gonna be super fun.


00:02:49.160 --> 00:02:50.240
Before we get to that though,


00:02:50.240 --> 00:02:51.860
let's get started with your story.


00:02:51.860 --> 00:02:53.280
How'd you get into programming?


00:02:53.280 --> 00:02:55.840
R and then what brought you over to Python?


00:02:55.840 --> 00:02:57.560
At least temporarily or partially.


00:02:57.560 --> 00:03:00.600
- Yeah, my background was in web programming


00:03:00.600 --> 00:03:02.000
really more than anything else.


00:03:02.000 --> 00:03:04.320
I got into programming actually through


00:03:04.320 --> 00:03:06.040
desktop publishing and graphic design.


00:03:06.040 --> 00:03:08.180
That was what I was really excited about.


00:03:08.180 --> 00:03:10.920
And in college that turned into web design.


00:03:10.920 --> 00:03:13.240
I went to college from 1996 through 2000


00:03:13.240 --> 00:03:17.080
so that the height of the dot com sort of craziness.


00:03:17.080 --> 00:03:18.360
And I just found myself--


00:03:18.360 --> 00:03:20.040
- CBeebee and all that stuff, oh yeah.


00:03:20.040 --> 00:03:21.720
- Absolutely. - Pets.com.


00:03:21.720 --> 00:03:24.120
- Pets.com, that's right.


00:03:24.120 --> 00:03:26.520
And I just found myself sort of pulled


00:03:26.520 --> 00:03:29.360
into just all the cool things that we could do on the web.


00:03:29.360 --> 00:03:33.160
And went from sort of front end web development,


00:03:33.160 --> 00:03:35.160
which meant something very different back then


00:03:35.160 --> 00:03:36.120
than it does today.


00:03:36.120 --> 00:03:37.360
- I mean, HTML, right?


00:03:37.360 --> 00:03:39.000
- HTML, yep.


00:03:39.000 --> 00:03:41.200
Basically string interpolation as a career.


00:03:41.200 --> 00:03:43.560
That was what I was all about.


00:03:43.560 --> 00:03:46.320
And that sort of led me into really falling in love


00:03:46.320 --> 00:03:48.000
with programming as a discipline.


00:03:48.000 --> 00:03:49.920
And I got more into the backend,


00:03:49.920 --> 00:03:52.640
more into sort of closer and closer


00:03:52.640 --> 00:03:54.240
to the systems level programming.


00:03:54.240 --> 00:03:58.640
And I just really enjoyed being sort of full stack,


00:03:58.640 --> 00:04:01.780
both on the website and even spent a few years


00:04:01.780 --> 00:04:03.600
doing Windows desktop programming,


00:04:03.600 --> 00:04:06.440
just to kind of see what that world was like.


00:04:06.440 --> 00:04:09.120
And one of the things that I,


00:04:09.120 --> 00:04:10.960
like one of the best things that happened to me early


00:04:10.960 --> 00:04:13.560
in my career was hooking up with JJ Allaire,


00:04:13.560 --> 00:04:15.480
who's the founder of RStudio


00:04:15.480 --> 00:04:16.880
and the founder of two other companies


00:04:16.880 --> 00:04:19.600
that I worked for previous to that in Boston.


00:04:19.600 --> 00:04:22.480
And I kind of got to the point in my career


00:04:22.480 --> 00:04:25.360
where I was more interested in the people I was working with


00:04:25.360 --> 00:04:29.160
than the technologies or even the idea.


00:04:29.160 --> 00:04:31.840
I knew I liked startups and I knew I liked working for JJ


00:04:31.840 --> 00:04:33.800
and the people that he had around him.


00:04:33.800 --> 00:04:35.560
And he got excited about R.


00:04:35.560 --> 00:04:37.560
I don't, I think his friend


00:04:37.560 --> 00:04:40.520
who is like a high school science teacher


00:04:40.520 --> 00:04:50.200
somehow got turned on to R and JJ was fascinated by the fact that this is in 2008 or 2009.


00:04:50.200 --> 00:04:57.400
There was this GPL licensed platform for doing what traditionally people would do in very


00:04:57.400 --> 00:05:02.660
proprietary platforms like all these statistics packages that you might have been forced to


00:05:02.660 --> 00:05:06.000
learn in college, you know, back in the 2000s.


00:05:06.000 --> 00:05:11.800
And here was this pretty rough, pretty raw, but all the pieces were there kind of platform


00:05:11.800 --> 00:05:14.060
for doing all this stuff with code.


00:05:14.060 --> 00:05:20.000
And he immediately saw something and I definitely saw nothing, but I believed in JJ and he had


00:05:20.000 --> 00:05:25.120
the idea to build an IDE in a web browser for this R language.


00:05:25.120 --> 00:05:29.280
And I was like, I don't see the chain and thinking that leads you to think that this


00:05:29.280 --> 00:05:33.420
is a good idea, but also sounds super fun.


00:05:33.420 --> 00:05:36.860
I would love to see if it's possible to build an IDE for the web.


00:05:36.860 --> 00:05:42.260
And so in the beginning, really, I was in R completely by accident,


00:05:42.260 --> 00:05:45.160
and I didn't even really learn much R as I was building,


00:05:45.160 --> 00:05:47.260
helping to build the RStudio IDE.


00:05:47.260 --> 00:05:49.660
That's kind of the irony of those types of platforms, right?


00:05:49.660 --> 00:05:50.460
100%.


00:05:50.460 --> 00:05:52.660
When I talk to people about Jupyter Notebooks,


00:05:52.660 --> 00:05:56.060
they're enabling Python people, but they're writing TypeScript.


00:05:56.060 --> 00:05:57.420
That's exactly right.


00:05:57.420 --> 00:05:57.920
That's right.


00:05:57.920 --> 00:06:00.820
What's the story for RStudio's side?


00:06:00.820 --> 00:06:04.420
Yeah, yeah. Oh, it's a crazy story technology wise.


00:06:04.420 --> 00:06:09.100
Well, the part that's not crazy, the sort of hardcore server bits are written in C++.


00:06:09.100 --> 00:06:12.180
But the front end, the front end is written in Java,


00:06:12.180 --> 00:06:17.300
which is then transpiled to JavaScript using a package called Google Web Toolkit.


00:06:17.300 --> 00:06:18.420
Oh, yeah. Okay, sure.


00:06:18.420 --> 00:06:20.220
Oh, okay. So you've heard of GWT.


00:06:20.220 --> 00:06:22.060
I haven't written anything with it, but yeah, I know it. Sure.


00:06:22.060 --> 00:06:27.460
Yeah. I mean, in a world before TypeScript and before React,


00:06:27.460 --> 00:06:54.980
This really was a godsend, like to be able to have static typing and the right sort of abstractions to be able to really build large scale. I mean, RStudio is a giant, giant piece of software, hundreds and hundreds of thousands of lines of code. And I think the very best JavaScript developers can write codebases at large with pure JavaScript, but not me. Like I definitely needed the crutch of, you know, static time, static type checking. And anyway,


00:06:55.140 --> 00:06:57.280
Working on RStudio IDE was a blast.


00:06:57.280 --> 00:07:00.840
And the best thing about it was I got to meet so many data scientists.


00:07:00.840 --> 00:07:02.840
And at the time, we called them statisticians.


00:07:02.840 --> 00:07:04.180
Now they call data scientists.


00:07:04.180 --> 00:07:08.580
But learning what they do, what the problems they were solving was so interesting.


00:07:08.580 --> 00:07:11.420
And that eventually led to Shiny.


00:07:11.420 --> 00:07:14.180
And that's when I really started getting serious about


00:07:14.180 --> 00:07:16.420
actually writing R code in my day to day,


00:07:16.420 --> 00:07:18.880
which was a fascinating journey in and of itself.


00:07:18.880 --> 00:07:23.840
Yeah, well, I would say that your faith was well placed, right?


00:07:23.840 --> 00:07:25.920
even if you're like, I'm not sure about this RStudio thing.


00:07:25.920 --> 00:07:27.840
I think some people have heard of it.


00:07:27.840 --> 00:07:34.040
>> Yeah. It really has been such an incredible ride.


00:07:34.040 --> 00:07:37.500
There were many steps along the way where I was like,


00:07:37.500 --> 00:07:39.720
this does not really make a ton of sense to me,


00:07:39.720 --> 00:07:45.680
but JJ has proven out time and time again that things that he cares about,


00:07:45.680 --> 00:07:47.920
it turns out that there are other people that care about it.


00:07:47.920 --> 00:07:53.640
He was really super into reproducible research before it was on everybody's lips.


00:07:53.640 --> 00:07:57.640
He really spent a lot of time trying to make that world better for R.


00:07:57.640 --> 00:08:02.140
And by then I'd certainly learned to sort of trust in his instincts.


00:08:02.140 --> 00:08:06.740
And, you know, just time after time there have been many bets like that that have paid off really well.


00:08:06.740 --> 00:08:12.640
It must have been pretty gratifying to work on this project and then talk to these data scientists and say,


00:08:12.640 --> 00:08:18.840
you know, here, oh, we're doing this work at the Large Hadron Collider, or we're doing this work to solve cancer.


00:08:18.840 --> 00:08:22.460
or, and let me, you gotta, can you help me with this?


00:08:22.460 --> 00:08:25.880
I'm trying to like work on this protein folding or, you know, something like that, right?


00:08:25.880 --> 00:08:28.500
It was probably some really cool experiences you had like that.


00:08:28.500 --> 00:08:34.680
- 100%. Yeah, I think the first time I ever demoed Shiny in particular at a user group meeting,


00:08:34.680 --> 00:08:39.600
and I was super nervous and went a little overboard on having like lots of demos.


00:08:39.600 --> 00:08:46.780
And one of them, this is back in 2012, was charting the spread of AIDS throughout the world


00:08:46.780 --> 00:08:51.340
and showing the sort of levels rise and fall as time went on.


00:08:51.340 --> 00:08:53.100
And it was interesting at the time


00:08:53.100 --> 00:08:57.180
because AIDS was sort of receding as education and drugs


00:08:57.180 --> 00:08:59.140
were getting better, except in South Africa,


00:08:59.140 --> 00:09:01.460
it was getting much, much worse before finally starting


00:09:01.460 --> 00:09:04.140
to get better because-- well, because of many reasons.


00:09:04.140 --> 00:09:05.260
And so I showed this demo.


00:09:05.260 --> 00:09:06.980
And then afterwards, a friend of mine


00:09:06.980 --> 00:09:08.460
who I didn't know what he worked on,


00:09:08.460 --> 00:09:10.540
I just knew him through these user group meetings,


00:09:10.540 --> 00:09:12.540
came up and said, oh, yeah, I'm working at--


00:09:12.540 --> 00:09:15.860
I think he was at Fred Hutch at the time-- working on an AIDS


00:09:15.860 --> 00:09:19.700
vaccine and we're using Shiny to basically be the bridge between the


00:09:19.700 --> 00:09:23.600
biostatisticians and the biologists and looking at the results of these, you


00:09:23.600 --> 00:09:26.980
know, assays or whatever it was that they were analyzing. And I, that was just


00:09:26.980 --> 00:09:32.140
blew me away. And, and absolutely every conference I go to, you know, many times


00:09:32.140 --> 00:09:35.740
a year between then and now I've just been humbled by the kind of things that


00:09:35.740 --> 00:09:37.140
people are doing with Shiny.


00:09:37.140 --> 00:09:40.020
You know, I can relate. I hear some stories like that as well. And I imagine


00:09:40.020 --> 00:09:44.340
it's just 10 X when you're building developer tools like that. So how about


00:09:44.340 --> 00:09:50.100
What are you doing day to day? Yeah. Well, my title is CTO. That is an honorary title that I


00:09:50.100 --> 00:09:56.340
think reflects that I was the first employee, but I don't do traditional CTO type activities. Most


00:09:56.340 --> 00:10:02.100
of the time, my day to day, I help lead the Shiny team specifically, which is a team of maybe 10 or


00:10:02.100 --> 00:10:09.060
11 right now, mostly engineers. And we split our time between Shiny for R and Shiny for Python.


00:10:09.060 --> 00:10:12.740
Right now, probably more on the Shiny for Python side, given that there's so much more to do.


00:10:13.380 --> 00:10:19.480
And right now I am in the thick of it writing features for the next release of Shiny for Python,


00:10:19.480 --> 00:10:22.140
really getting to lean into React.


00:10:22.140 --> 00:10:29.720
I've been working with some really fun headless table libraries to build data grids with fast virtualized scrolling.


00:10:29.720 --> 00:10:33.720
That should be a really nice addition to Shiny for Python for the next release.


00:10:33.720 --> 00:10:35.260
Okay, yeah, that sounds really cool.


00:10:35.260 --> 00:10:37.920
Well, let's talk about Shiny itself.


00:10:37.920 --> 00:10:42.480
I suspect a lot of people on the data science side have heard of Shiny,


00:10:42.480 --> 00:10:43.960
even though it's in the R space.


00:10:43.960 --> 00:10:46.400
I know the conversations come up around it.


00:10:46.400 --> 00:10:50.060
Other ones that live in a similar orbit,


00:10:50.060 --> 00:10:51.800
maybe are Streamlit.


00:10:51.800 --> 00:10:53.000
I've had Adrian on,


00:10:53.000 --> 00:10:54.600
the founder of Streamlit on before,


00:10:54.600 --> 00:10:55.920
and we've got Dash, and Panel,


00:10:55.920 --> 00:10:58.200
and Pinecone, and others.


00:10:58.200 --> 00:11:01.740
That sets the stage for what this could be about.


00:11:01.740 --> 00:11:05.360
Maybe give folks a sense of just what is Shiny,


00:11:05.360 --> 00:11:08.920
and maybe even in its R form originally,


00:11:08.920 --> 00:11:11.320
and then we can talk about the Python side.


00:11:11.320 --> 00:11:16.660
>> Yeah, absolutely. Shiny is a way to create web applications


00:11:16.660 --> 00:11:20.680
easily without having to learn a lot of web development technologies


00:11:20.680 --> 00:11:23.040
like HTML, CSS, and JavaScript.


00:11:23.040 --> 00:11:24.560
>> Especially JavaScript.


00:11:24.560 --> 00:11:26.680
>> Especially JavaScript, 100 percent.


00:11:26.680 --> 00:11:29.240
>> The interactive part of all these,


00:11:29.240 --> 00:11:30.880
like this callback, it's that.


00:11:30.880 --> 00:11:32.040
>> Yeah, 100 percent.


00:11:32.040 --> 00:11:32.640
>> Yeah.


00:11:32.640 --> 00:11:35.940
It was conceived primarily for data science.


00:11:35.940 --> 00:11:41.120
It is, I think a lot of the ideas behind Shiny are quite general and we'll, I'm


00:11:41.120 --> 00:11:46.440
sure we'll delve more into that, but we, in the creation design of this, we really


00:11:46.440 --> 00:11:50.720
are laser focused on data science and the kinds of problems that people want to


00:11:50.720 --> 00:11:55.740
solve by creating interactive visualizations, interactive reports, and


00:11:55.740 --> 00:12:00.320
even like workflow applications, but all of it around the analyzing of data.


00:12:00.980 --> 00:12:05.860
This was in 2012, this was like a pretty radical notion.


00:12:05.860 --> 00:12:10.600
And I think there was a little bit of skepticism from some people close to us


00:12:10.600 --> 00:12:13.760
who were thinking like, you're going to make data science, you know, like, why


00:12:13.760 --> 00:12:17.880
would data science scientists want to become web developers?


00:12:17.880 --> 00:12:21.380
And I think this was, the answer was like, there are really a lot of problems


00:12:21.380 --> 00:12:25.580
that they can solve using interactive artifacts, but the whole point is that


00:12:25.580 --> 00:12:27.860
they don't do not have to become web developers.


00:12:27.900 --> 00:12:30.940
Yeah, I was going to say, like, you should turn that on its head and say,


00:12:30.940 --> 00:12:36.140
they don't want to become web developers, which is exactly the value proposition, right?


00:12:36.140 --> 00:12:39.740
They want to share their work and they want to make it interactive and collaborative.


00:12:39.740 --> 00:12:46.380
But the last thing they want, generally speaking, is to like, and I'm diving into Vue and React and


00:12:46.380 --> 00:12:50.940
Yeah, yeah, that's absolutely, absolutely. Yeah. Yeah.


00:12:50.980 --> 00:12:55.420
And that being said, I think I personally am, you know,


00:12:55.420 --> 00:12:59.180
I've been doing web development since basically 1996.


00:12:59.180 --> 00:13:03.380
And the idea of working day in and day out on a project


00:13:03.380 --> 00:13:07.780
that was really sort of like my first website type,


00:13:07.780 --> 00:13:09.860
you know, like something that had a lot of guardrails,


00:13:09.860 --> 00:13:13.820
something that really limited you to whatever few tools


00:13:13.820 --> 00:13:15.340
were in its toolbox,


00:13:15.340 --> 00:13:18.120
that wouldn't be really satisfying or interesting for me.


00:13:18.120 --> 00:13:20.500
So even though Shiny is designed to be very easy


00:13:20.500 --> 00:13:22.700
to get started and for you not to have to know JavaScript


00:13:22.700 --> 00:13:23.860
or anything like that.


00:13:23.860 --> 00:13:26.740
If you do know JavaScript, if you do know HTML and CSS,


00:13:26.740 --> 00:13:28.860
if you live and breathe that stuff,


00:13:28.860 --> 00:13:30.820
but you want to create a convenient way


00:13:30.820 --> 00:13:33.620
to create data science related applications,


00:13:33.620 --> 00:13:36.220
Shiny really lets you lean into those skills as well


00:13:36.220 --> 00:13:39.540
and use HTML, CSS, and JavaScript to enhance or customize


00:13:39.540 --> 00:13:41.980
or extend Shiny for your own purposes.


00:13:41.980 --> 00:13:43.980
It's really important to us to capture


00:13:43.980 --> 00:13:45.940
sort of both ends of that spectrum.


00:13:45.940 --> 00:13:49.220
- This portion of "Talk Python to Me"


00:13:49.220 --> 00:13:51.140
is brought to you by Influx Data,


00:13:51.140 --> 00:13:53.180
the makers of InfluxDB.


00:13:53.180 --> 00:13:55.940
InfluxDB is a database purpose-built


00:13:55.940 --> 00:13:59.140
for handling time series data at a massive scale


00:13:59.140 --> 00:14:00.940
for real-time analytics.


00:14:00.940 --> 00:14:03.320
Developers can ingest, store, and analyze


00:14:03.320 --> 00:14:06.100
all types of time series data, metrics, events,


00:14:06.100 --> 00:14:08.280
and traces in a single platform.


00:14:08.280 --> 00:14:10.380
So, dear listener, let me ask you a question.


00:14:10.380 --> 00:14:11.940
How would boundless cardinality


00:14:11.940 --> 00:14:13.740
and lightning-fast SQL queries


00:14:13.740 --> 00:14:16.900
impact the way that you develop real-time applications?


00:14:16.900 --> 00:14:20.020
InfluxDB processes large time series data sets


00:14:20.020 --> 00:14:22.180
and provides low latency SQL queries,


00:14:22.180 --> 00:14:24.160
making it the go-to choice


00:14:24.160 --> 00:14:26.460
for developers building real-time applications


00:14:26.460 --> 00:14:28.460
and seeking crucial insights.


00:14:28.460 --> 00:14:29.940
For developer efficiency,


00:14:29.940 --> 00:14:32.540
InfluxDB helps you create IoT, analytics,


00:14:32.540 --> 00:14:35.420
and cloud applications using timestamped data


00:14:35.420 --> 00:14:37.420
rapidly and at scale.


00:14:37.420 --> 00:14:39.980
It's designed to ingest billions of data points


00:14:39.980 --> 00:14:42.900
in real time with unlimited cardinality.


00:14:42.900 --> 00:14:45.060
InfluxDB streamlines building once


00:14:45.060 --> 00:14:48.100
and deploying across various products and environments


00:14:48.100 --> 00:14:51.420
from the edge, on-premise, and to the cloud.


00:14:51.420 --> 00:14:55.260
Try it for free at talkpython.fm/influxdb.


00:14:55.260 --> 00:14:58.140
The link is in your podcast player show notes.


00:14:58.140 --> 00:15:00.580
Thanks to Influx Data for supporting the show.


00:15:00.580 --> 00:15:04.420
We'll talk about the programming model and how it works,


00:15:04.420 --> 00:15:08.020
but I think maybe the first big contrast


00:15:08.020 --> 00:15:09.620
that I'd like you to set up for us


00:15:09.620 --> 00:15:11.780
is thinking of the Python side now.


00:15:11.780 --> 00:15:13.580
Like, why not just Jupyter Notebooks?


00:15:13.580 --> 00:15:17.020
Why not Jupyter notebooks or JupyterLab and just,


00:15:17.020 --> 00:15:20.700
we have that, that's on the web, sort of, kind of sometimes.


00:15:20.700 --> 00:15:21.700
(laughing)


00:15:21.700 --> 00:15:23.140
It depends how we want to put it up there


00:15:23.140 --> 00:15:24.620
or share it or let it be executable,


00:15:24.620 --> 00:15:26.340
but you know, compared to that,


00:15:26.340 --> 00:15:27.220
I think it's pretty different,


00:15:27.220 --> 00:15:28.540
but I think it's something that people


00:15:28.540 --> 00:15:29.740
maybe want to get their head around.


00:15:29.740 --> 00:15:30.780
- Yeah, no, totally.


00:15:30.780 --> 00:15:32.780
You're right, I mean, you hear a lot of the same words


00:15:32.780 --> 00:15:33.620
being used, right?


00:15:33.620 --> 00:15:35.540
Like, you know, it's browser-based applications


00:15:35.540 --> 00:15:37.220
that do interactive things.


00:15:37.220 --> 00:15:40.140
And I think the difference is that Jupyter and JupyterLab,


00:15:40.140 --> 00:15:43.460
those are sort of the places where data scientists


00:15:43.460 --> 00:15:44.620
can do work, right?


00:15:44.620 --> 00:15:47.180
Where you can ask unbounded kinds of questions


00:15:47.180 --> 00:15:48.260
from your data.


00:15:48.260 --> 00:15:49.380
And that's where you iterate,


00:15:49.380 --> 00:15:51.700
where you do exploratory data analysis,


00:15:51.700 --> 00:15:54.340
where you write functions and things like that.


00:15:54.340 --> 00:15:56.980
And yeah, you do have this beautiful immediacy


00:15:56.980 --> 00:15:58.580
to the results that you get, right?


00:15:58.580 --> 00:16:01.700
And that's why everybody really loves working in notebooks.


00:16:01.700 --> 00:16:03.780
And Shiny and frameworks like it


00:16:03.780 --> 00:16:06.700
are really for communicating outwards.


00:16:06.700 --> 00:16:09.980
It's really not for the data scientists to write code


00:16:09.980 --> 00:16:12.380
for their own understanding most of the time.


00:16:12.380 --> 00:16:15.060
It's really about creating a web application


00:16:15.060 --> 00:16:16.400
to show somebody else.


00:16:16.400 --> 00:16:19.420
Let's say that you are collaborating with some people


00:16:19.420 --> 00:16:22.620
that don't have the programming chops that you do,


00:16:22.620 --> 00:16:24.980
that have never launched a REPL in their life


00:16:24.980 --> 00:16:26.460
or installed Python,


00:16:26.460 --> 00:16:28.680
and you want to give them the ability


00:16:28.680 --> 00:16:31.940
to ask questions of your data and of your analysis.


00:16:31.940 --> 00:16:33.780
Maybe what-if scenarios,


00:16:33.780 --> 00:16:35.100
or in the simplest case,


00:16:35.100 --> 00:16:37.740
think like a BI dashboard or something like that.


00:16:37.740 --> 00:16:40.820
Like nobody's asking why execs need to look


00:16:40.820 --> 00:16:43.860
at a BI dashboard instead of running SQL queries


00:16:43.860 --> 00:16:46.700
on their own inside of a console.


00:16:46.700 --> 00:16:47.540
And this is similar.


00:16:47.540 --> 00:16:50.100
So if you want to create an interactive artifact


00:16:50.100 --> 00:16:52.420
for other people to consume,


00:16:52.420 --> 00:16:55.580
then Shiny and frameworks like it come into play.


00:16:55.580 --> 00:16:56.620
And Jupyter, not as much.


00:16:56.620 --> 00:16:58.900
I mean, you can certainly save Jupyter notebooks


00:16:58.900 --> 00:17:02.460
and then sort of share a link to the published notebook.


00:17:02.460 --> 00:17:05.980
But the interactivity is either non-existent


00:17:05.980 --> 00:17:08.300
or more limited when you do things that way.


00:17:08.300 --> 00:17:09.140
- Right, absolutely.


00:17:09.140 --> 00:17:10.740
You don't wanna give them the full notebook


00:17:10.740 --> 00:17:14.740
because the last thing you want is the general public typing


00:17:14.740 --> 00:17:18.540
Pantos code in there or arbitrary Python code,


00:17:18.540 --> 00:17:20.460
but you want to give them some interactivity.


00:17:20.460 --> 00:17:23.220
Maybe we could look at this little example down here,


00:17:23.220 --> 00:17:27.940
just to talk through what an app might look like.


00:17:27.940 --> 00:17:30.740
Right on the homepage, shiny.poset.co,


00:17:30.740 --> 00:17:34.220
you have, I think this is a big statement


00:17:34.220 --> 00:17:36.520
towards your commitment to Python.


00:17:36.520 --> 00:17:37.980
It's like right on the homepage,


00:17:37.980 --> 00:17:40.180
on equal, on par with R, it says,


00:17:40.180 --> 00:17:41.620
get started with R, get started with Python.


00:17:41.620 --> 00:17:43.620
You scroll down, it has the R and the Python code, right?


00:17:43.620 --> 00:17:45.220
Like, they're not like, "Hey, we also,


00:17:45.220 --> 00:17:46.780
we're making an attempt at this Python thing."


00:17:46.780 --> 00:17:48.500
But you've got this example.


00:17:48.500 --> 00:17:49.620
Do you want to just give us a quick


00:17:49.620 --> 00:17:50.900
- Sure. - what this app is?


00:17:50.900 --> 00:17:53.140
It looks like it evaluates things about ducks,


00:17:53.140 --> 00:17:54.620
and that's all I can tell about it.


00:17:54.620 --> 00:17:56.740
- Yeah. - Stuff about ducks.


00:17:56.740 --> 00:17:59.340
- This is using the Palmer's penguins data set.


00:17:59.340 --> 00:18:00.500
- Penguins, rather. Okay.


00:18:00.500 --> 00:18:01.580
- Yeah, yeah.


00:18:01.580 --> 00:18:05.660
So on the left, we have a sidebar with a number of controls.


00:18:05.660 --> 00:18:07.780
There's two select boxes.


00:18:07.780 --> 00:18:10.780
There's some check boxes and then there's a couple of toggle switches.


00:18:10.780 --> 00:18:16.560
And on the right, you have a matplotlib generated scatterplot with some marginal


00:18:16.560 --> 00:18:24.120
plots added on, and this is sort of the hello world of Shiny, where you have one


00:18:24.120 --> 00:18:30.200
or more outputs and some inputs that when you change them, the output automatically


00:18:30.200 --> 00:18:31.000
updates.


00:18:31.000 --> 00:18:35.740
In this case, you can decide what variables do you want to apply to the X


00:18:35.740 --> 00:18:40.620
and Y axes, and then you can filter it by the species of penguin.


00:18:40.620 --> 00:18:44.740
And then there are a couple of toggles to just decide whether you want coloring


00:18:44.740 --> 00:18:47.940
by species and whether you want the marginal plots or not.


00:18:47.940 --> 00:18:51.980
And it sort of does everything that you would expect it to do when you select


00:18:51.980 --> 00:18:53.740
and deselect those, those values.


00:18:53.740 --> 00:18:54.060
Yeah.


00:18:54.060 --> 00:18:57.860
So for example, you have filter by species and Gen two is checked.


00:18:57.860 --> 00:19:03.900
But if I uncheck it, the whole UI redraws with just showing the other two


00:19:03.940 --> 00:19:08.700
species of penguin and you can turn the species on and off and


00:19:08.700 --> 00:19:11.940
terms on whether or not like it highlights based on that.


00:19:11.940 --> 00:19:12.340
>> Yeah.


00:19:12.340 --> 00:19:15.860
>> You got to drop down for different things you might compare and you can just


00:19:15.860 --> 00:19:19.300
toggle those and the UI changes like you wrote


00:19:19.300 --> 00:19:21.380
a fancy front-end JavaScript framework


00:19:21.380 --> 00:19:23.140
where that's happening behind the scenes, right?


00:19:23.140 --> 00:19:23.780
>> That's right.


00:19:23.780 --> 00:19:25.900
>> Okay. Sorry, I didn't mean to cut you off there.


00:19:25.900 --> 00:19:27.260
>> Yeah. Just to be clear,


00:19:27.260 --> 00:19:28.260
when you say the UI redraws,


00:19:28.260 --> 00:19:30.020
we're not talking about a whole page reload.


00:19:30.020 --> 00:19:31.900
I mean, it's not 1998.


00:19:31.900 --> 00:19:36.000
It is, you know, the things that need to update, update on the page.


00:19:36.000 --> 00:19:39.300
Yeah, it's a really interesting way to create programs.


00:19:39.300 --> 00:19:44.200
And there's a couple other things I've seen that are like this, but I really, I think it's,


00:19:44.200 --> 00:19:46.300
it's a super slick framework.


00:19:46.300 --> 00:19:49.300
Before we get into it, Diego's got a question.


00:19:49.300 --> 00:19:53.200
It says, "Could Shiny be used to do fancy math, say for someone trying to upload their


00:19:53.200 --> 00:19:56.100
GitHub website for their PhD thesis model?"


00:19:56.100 --> 00:19:57.600
Like, what can we create?


00:19:57.600 --> 00:20:03.200
Like, could you create a kind of a LaTeX looking integrated thing with interactive math bits in there?


00:20:03.200 --> 00:20:04.600
Right, right. Yeah, yeah.


00:20:04.600 --> 00:20:07.600
So yes, you do have the ability to do...


00:20:07.600 --> 00:20:09.800
Well, I could interpret that question one of two ways.


00:20:09.800 --> 00:20:15.800
One is, yeah, can you do the computation for this PhD thesis model?


00:20:15.800 --> 00:20:17.200
And in that case, absolutely.


00:20:17.200 --> 00:20:20.600
It's just whatever you can express in Python or R for that matter.


00:20:20.600 --> 00:20:25.100
And in terms of putting like LaTeX equations on the screen,


00:20:25.100 --> 00:20:31.100
Yes, this is a completely built in feature for Shiny for R and for Shiny for Python.


00:20:31.100 --> 00:20:35.700
It's a little less slick, but we do have an example application that shows how to drop in.


00:20:35.700 --> 00:20:37.700
It's based on MathJax, basically.


00:20:37.700 --> 00:20:44.860
So you can include the resources for MathJax and then write your equation in LaTeX format.


00:20:44.860 --> 00:20:46.860
And yeah, it'll render.


00:20:46.860 --> 00:20:49.540
Diego, I hope that answers your question.


00:20:49.540 --> 00:20:50.780
- Hope so as well. - Yep.


00:20:50.780 --> 00:20:51.780
Seems like it.


00:20:51.780 --> 00:20:55.460
All right, so let's jump over to the GitHub page for a minute here


00:20:55.460 --> 00:20:59.540
and talk through some of the things that you all call out right at the top.


00:20:59.540 --> 00:21:01.780
So it's open source for one, right?


00:21:01.780 --> 00:21:03.140
That's a big deal.


00:21:03.140 --> 00:21:07.060
It's under the MIT license right here on GitHub under Shiny.


00:21:07.060 --> 00:21:11.700
Yeah, I should add, full disclosure, we are a for-profit company.


00:21:11.700 --> 00:21:12.660
We are a B Corp.


00:21:12.660 --> 00:21:15.860
Actually, we're a benefit corp, but we are for-profit.


00:21:15.860 --> 00:21:19.860
And Shiny for Python is completely open source, MIT license,


00:21:19.860 --> 00:21:22.500
no sort of gotchas there.


00:21:22.500 --> 00:21:24.940
When it comes to deploy your Shiny app,


00:21:24.940 --> 00:21:26.780
we have a variety of different ways


00:21:26.780 --> 00:21:28.900
you can do that that we offer as a company.


00:21:28.900 --> 00:21:33.180
We have an open source on-prem solution called Shiny Server.


00:21:33.180 --> 00:21:36.220
We have hosted cloud, cloud hosting


00:21:36.220 --> 00:21:38.940
that we manage that you can easily deploy to.


00:21:38.940 --> 00:21:41.100
And we have free and paid tiers.


00:21:41.100 --> 00:21:44.140
And we also have Posit Connect, which


00:21:44.140 --> 00:21:47.300
is a sort of a more comprehensive platform


00:21:47.300 --> 00:21:49.840
for enterprises to allow their data scientists


00:21:49.840 --> 00:21:52.040
to communicate with the rest of the organization.


00:21:52.040 --> 00:21:55.800
And that has like very robust enterprise grade


00:21:55.800 --> 00:21:57.240
Shiny for Python hosting built in,


00:21:57.240 --> 00:21:58.360
and that is a paid product.


00:21:58.360 --> 00:22:01.120
- Okay, does it have like special ways to access


00:22:01.120 --> 00:22:04.400
like your SQL server on your enterprise,


00:22:04.400 --> 00:22:07.480
you know, like access more authenticated access to data


00:22:07.480 --> 00:22:10.560
or authentic off to the thing itself


00:22:10.560 --> 00:22:12.000
to protect it and so on?


00:22:12.000 --> 00:22:14.240
- Yeah, for sure off to the thing itself


00:22:14.240 --> 00:22:18.520
and it integrates with your LDAP or SSO type systems.


00:22:18.520 --> 00:22:21.560
And it helps with scaling your application.


00:22:21.560 --> 00:22:25.720
So it will sort of monitor how much load each of your Python


00:22:25.720 --> 00:22:29.760
processes is getting and then spawn, automatically scale up.


00:22:29.760 --> 00:22:32.520
It can hook up to Kubernetes in the back end


00:22:32.520 --> 00:22:35.540
so that your Shiny apps, the Python computation


00:22:35.540 --> 00:22:38.160
is happening in pods on the back end.


00:22:38.160 --> 00:22:39.880
So lots and lots of different ways


00:22:39.880 --> 00:22:42.040
that it sort of tries to make things easier.


00:22:42.040 --> 00:22:43.660
- Sure, okay, cool, very cool.


00:22:43.660 --> 00:22:47.540
So basically, short story is, Shiny for Python's open source.


00:22:47.540 --> 00:22:49.980
I could take the on-prem open source thing


00:22:49.980 --> 00:22:51.820
and just host it myself if I wanted.


00:22:51.820 --> 00:22:55.500
I presume that means I could also fire up a virtual machine


00:22:55.500 --> 00:22:56.300
in the server--


00:22:56.300 --> 00:22:58.980
in the cloud and install it up there and kind of--


00:22:58.980 --> 00:23:00.380
that's my on-prem if I wish.


00:23:00.380 --> 00:23:01.300
- Yeah, absolutely.


00:23:01.300 --> 00:23:02.460
And this is also--


00:23:02.460 --> 00:23:05.180
Shiny for Python is built on top of Starlet,


00:23:05.180 --> 00:23:09.220
which is the same underlying framework that FastAPI uses.


00:23:09.220 --> 00:23:12.620
So it's almost true that anywhere you can host FastAPI,


00:23:12.620 --> 00:23:14.340
You can host Shiny for Python.


00:23:14.340 --> 00:23:15.380
- Oh, interesting.


00:23:15.380 --> 00:23:18.780
Just put some G-Unicorn, UV-Corn workers in front of it.


00:23:18.780 --> 00:23:21.020
- Except G-Unicorn.


00:23:21.020 --> 00:23:22.700
Yeah, the only exception is that,


00:23:22.700 --> 00:23:24.340
because Shiny for Python is stateful


00:23:24.340 --> 00:23:26.140
and we can talk more about that.


00:23:26.140 --> 00:23:27.540
I'm assuming we're gonna talk a little bit


00:23:27.540 --> 00:23:30.100
about how we compare to some of the other things out there.


00:23:30.100 --> 00:23:32.380
We do need, if you're gonna load balance


00:23:32.380 --> 00:23:33.780
across multiple processes,


00:23:33.780 --> 00:23:36.180
it does have to be a stateful load balancer,


00:23:36.180 --> 00:23:38.100
which is normally quite easy to do,


00:23:38.100 --> 00:23:39.900
but G-Unicorn is not stateless.


00:23:39.900 --> 00:23:42.260
It's not a stateless.


00:23:42.260 --> 00:23:43.100
- Sorry, yeah.


00:23:43.100 --> 00:23:44.940
So you need a sticky load balancer.


00:23:44.940 --> 00:23:47.300
And oh, I should also mention that Hugging Face


00:23:47.300 --> 00:23:49.100
is another place that you can deploy


00:23:49.100 --> 00:23:50.540
Shiny for Python apps these days.


00:23:50.540 --> 00:23:51.660
- Yeah, excellent.


00:23:51.660 --> 00:23:54.700
Okay, well, I think that that's certainly a fair trade-off


00:23:54.700 --> 00:23:57.620
to the commercial side of your story,


00:23:57.620 --> 00:24:00.580
which we started talking about by a new company


00:24:00.580 --> 00:24:01.420
and going to work on that.


00:24:01.420 --> 00:24:04.220
And it's really about sort of Shiny as a service


00:24:04.220 --> 00:24:06.020
and a Shiny cloud.


00:24:06.020 --> 00:24:08.940
So it's easy to not worry about the deployment side, right?


00:24:08.940 --> 00:24:11.260
The app itself, the framework itself is about


00:24:11.260 --> 00:24:12.820
not worrying about writing web stuff,


00:24:12.820 --> 00:24:15.580
the deployment thing is still a deal, right?


00:24:15.580 --> 00:24:16.920
If you just say, and then you just get,


00:24:16.920 --> 00:24:19.620
dear data scientists, you fire up your Linux machines


00:24:19.620 --> 00:24:21.420
and you keep them up to date and secure,


00:24:21.420 --> 00:24:22.620
and that doesn't feel great


00:24:22.620 --> 00:24:25.020
to a lot of data scientists either, I'm sure.


00:24:25.020 --> 00:24:26.900
- Yeah, yeah, that's right.


00:24:26.900 --> 00:24:31.900
So I think with our open source on-prem hosting,


00:24:31.900 --> 00:24:34.240
it's like that, it's just a piece of software


00:24:34.240 --> 00:24:35.660
that you install on Linux.


00:24:35.660 --> 00:24:39.180
And with Connect, it's more like your IT department


00:24:39.180 --> 00:24:40.260
sets this up for you,


00:24:40.260 --> 00:24:45.060
And then you straight from your local machine,


00:24:45.060 --> 00:24:46.960
once you have your Shiny app working,


00:24:46.960 --> 00:24:49.960
you just type in a command like rsconnect deploy


00:24:49.960 --> 00:24:52.860
and point it at your server and everything gets taken care of for you,


00:24:52.860 --> 00:24:56.860
including getting all the right Python dependencies installed on the server


00:24:56.860 --> 00:24:58.660
and using the right version of Python.


00:24:58.660 --> 00:25:02.060
And hopefully the act of,


00:25:02.060 --> 00:25:06.060
you know, we have customers that are writing multiple new Shiny apps a day


00:25:06.060 --> 00:25:08.060
and deploying multiple new Shiny apps a day.


00:25:08.060 --> 00:25:12.300
And, you know, the usefulness of that app might be a day


00:25:12.300 --> 00:25:14.660
or it might be, you know, five years.


00:25:14.660 --> 00:25:17.600
And we want to serve both sides of that spectrum.


00:25:17.600 --> 00:25:19.260
I suspect that does make a lot of sense.


00:25:19.260 --> 00:25:21.340
If you're a data scientist exploring something,


00:25:21.340 --> 00:25:24.260
you can be like, "Hey, look, I came up with this today.


00:25:24.260 --> 00:25:25.100
What did you think?"


00:25:25.100 --> 00:25:27.100
And it may be the next day based on feedback,


00:25:27.100 --> 00:25:28.340
you do something completely different


00:25:28.340 --> 00:25:29.780
and it's become irrelevant, right?


00:25:29.780 --> 00:25:30.600
Yeah.


00:25:30.600 --> 00:25:31.440
And you know what?


00:25:31.440 --> 00:25:32.820
One interesting thing about this is, you know,


00:25:32.820 --> 00:25:35.500
you hear about something like Shiny for Python,


00:25:35.500 --> 00:25:37.500
like, you know, Streamlit or Dash,


00:25:37.500 --> 00:25:41.500
and you think that this is really about displacing, say,


00:25:41.500 --> 00:25:43.860
Power BI and Tableau, right?


00:25:43.860 --> 00:25:47.020
But actually, in our experience with Shiny for R,


00:25:47.020 --> 00:25:49.740
the first thing it displaced were gigantic PDFs


00:25:49.740 --> 00:25:50.980
that people were sending around.


00:25:50.980 --> 00:25:54.780
You know, like, I have generated all of this data for my analysis.


00:25:54.780 --> 00:25:55.940
I don't know what you want.


00:25:55.940 --> 00:26:00.700
So here is like a 500-page PDF filled with tables for you to go explore.


00:26:00.700 --> 00:26:04.340
And with Shiny, you can present something that's much more interactive.


00:26:04.340 --> 00:26:08.100
That makes it much easier for some domain expert on the other side


00:26:08.100 --> 00:26:11.100
to find a needle in the haystack that you happen to be working together.


00:26:11.100 --> 00:26:14.440
- You completely remove that cycle, that iteration cycle of,


00:26:14.440 --> 00:26:18.060
what if we used a different number for this constraint here?


00:26:18.060 --> 00:26:20.980
What if we only filtered, it's like, that's part of the UI,


00:26:20.980 --> 00:26:22.980
that's part of what you deliver is that interactivity.


00:26:22.980 --> 00:26:24.980
And as far as displacing things,


00:26:24.980 --> 00:26:26.980
it sounds like you're displacing SharePoint.


00:26:26.980 --> 00:26:30.160
If that could just be completely erased from the world,


00:26:30.160 --> 00:26:33.920
that would be awesome because every interaction I have with that software


00:26:33.920 --> 00:26:36.840
of sharing like corporate doc sharing is just like,


00:26:36.840 --> 00:26:38.240
oh boy, here we go.


00:26:38.240 --> 00:26:41.400
Okay, let's take it top to bottom maybe for here in this.


00:26:41.400 --> 00:26:42.480
Although I do have to point out,


00:26:42.480 --> 00:26:44.400
I could tell you still have that love for R


00:26:44.400 --> 00:26:48.000
because it's still 0.2% R.


00:26:48.000 --> 00:26:49.000
(laughing)


00:26:49.000 --> 00:26:49.840
I love it.


00:26:49.840 --> 00:26:54.840
It's 47% Python, 47% JavaScript, 0.2% R.


00:26:54.840 --> 00:26:56.400
- I just wanna make it clear,


00:26:56.400 --> 00:26:59.200
you do not have to install R to run Shiny for Python.


00:26:59.200 --> 00:27:02.320
I think that R is, there's a couple of scripts that we use


00:27:02.320 --> 00:27:06.560
that we grab resources from the Shiny for RP repo.


00:27:06.560 --> 00:27:08.600
And I think, you know, that was one of the first things


00:27:08.600 --> 00:27:10.480
that one of our programmers did


00:27:10.480 --> 00:27:12.400
and they didn't know Python yet.


00:27:12.400 --> 00:27:14.240
So they wrote it in R.


00:27:14.240 --> 00:27:15.080
- That's fine, that's fine.


00:27:15.080 --> 00:27:17.240
I just thought it was funny that it's there,


00:27:17.240 --> 00:27:19.240
but just a shade of it, okay.


00:27:19.240 --> 00:27:22.440
This portion of Talk Python to Me


00:27:22.440 --> 00:27:24.600
is brought to you by GlareDB.


00:27:24.600 --> 00:27:26.640
GlareDB is an open source database


00:27:26.640 --> 00:27:28.660
for querying distributed data.


00:27:28.660 --> 00:27:29.660
Here's how it works.


00:27:29.660 --> 00:27:31.400
First, you connect your data sources.


00:27:31.400 --> 00:27:33.800
GlareDB makes it easy to connect to your data,


00:27:33.800 --> 00:27:34.960
no matter where it's stored,


00:27:34.960 --> 00:27:37.760
with integrations into many popular databases,


00:27:37.760 --> 00:27:39.360
data warehouses, and more.


00:27:39.360 --> 00:27:42.640
This includes Snowflake, Postgres, MongoDB,


00:27:42.640 --> 00:27:45.040
BigQuery, and Object Storage.


00:27:45.040 --> 00:27:46.880
Now you can query everything.


00:27:46.880 --> 00:27:49.240
You use the full power of SQL to query your data


00:27:49.240 --> 00:27:51.640
across these many different data sources,


00:27:51.640 --> 00:27:53.680
join data across production databases


00:27:53.680 --> 00:27:56.600
and analytical warehouses without limits.


00:27:56.600 --> 00:27:59.760
Finally, you can use the tools you already know and love,


00:27:59.760 --> 00:28:02.680
Visualize and query your data using tools you know


00:28:02.680 --> 00:28:04.720
from Python's data science stack.


00:28:04.720 --> 00:28:06.120
With just a single import,


00:28:06.120 --> 00:28:08.600
you can query Pandas and Polars data frames


00:28:08.600 --> 00:28:10.180
using just SQL.


00:28:10.180 --> 00:28:12.780
You'll be asking questions, extracting insights,


00:28:12.780 --> 00:28:14.800
and driving decisions with your data


00:28:14.800 --> 00:28:18.120
without waiting for an ETL pipeline to move data around.


00:28:18.120 --> 00:28:21.120
So if you have distributed data and disparate data sources


00:28:21.120 --> 00:28:22.880
and you love open source,


00:28:22.880 --> 00:28:25.880
you owe it to yourself to give GlareDB a try.


00:28:25.880 --> 00:28:29.380
Visit talkpython.fm/glaredb to get started.


00:28:29.380 --> 00:28:31.740
The link is in your podcast player show notes,


00:28:31.740 --> 00:28:33.420
and please use the link to let them know


00:28:33.420 --> 00:28:35.340
that you came from us.


00:28:35.340 --> 00:28:38.380
Thank you to the team at Clarity Bee for sponsoring the show.


00:28:38.380 --> 00:28:44.020
So the first thing that you point out here is,


00:28:44.020 --> 00:28:46.380
how is Shiny different from some of the things


00:28:46.380 --> 00:28:49.420
I said that it was like, for example, Streamlit or Dash?


00:28:49.420 --> 00:28:50.660
- Yeah, absolutely.


00:28:50.660 --> 00:28:52.060
- Maybe touch on that a little.


00:28:52.060 --> 00:28:54.380
- Sure, and I think really the one


00:28:54.380 --> 00:28:56.340
that comes up the most is Streamlit.


00:28:56.340 --> 00:28:59.740
man, Streamlit really has taken the world by storm,


00:28:59.740 --> 00:29:01.660
it seems like, since they came out in,


00:29:01.660 --> 00:29:03.620
what was it, 2018, something like that?


00:29:03.620 --> 00:29:04.820
- Yeah, I think it was 2018, yeah.


00:29:04.820 --> 00:29:06.580
It's only been a few years.


00:29:06.580 --> 00:29:09.980
- Clearly, it really resonated with the Python world.


00:29:09.980 --> 00:29:13.300
I do have to say, I was very taken aback by the simplicity


00:29:13.300 --> 00:29:15.420
of their programming model when it first came out.


00:29:15.420 --> 00:29:20.060
And I pay a little bit of attention to new things


00:29:20.060 --> 00:29:23.160
that come out and purport to be high-level web frameworks.


00:29:23.160 --> 00:29:26.140
And most of the time, they were sort of like,


00:29:26.140 --> 00:29:28.540
okay, I recognize the trade offs that they're making here,


00:29:28.540 --> 00:29:30.700
but the Streamlit one was definitely


00:29:30.700 --> 00:29:32.520
a very bold choice that they made.


00:29:32.520 --> 00:29:35.540
Streamlit, I think it feels to me


00:29:35.540 --> 00:29:39.260
that they really prioritized ease of getting started


00:29:39.260 --> 00:29:42.340
and having the simplest possible mental model


00:29:42.340 --> 00:29:45.780
in a much higher level of priority than everything else,


00:29:45.780 --> 00:29:48.160
which is a bold stance and I really applaud them


00:29:48.160 --> 00:29:50.620
for being sort of clear about what their vision is.


00:29:50.620 --> 00:29:54.000
So Streamlit is unbelievably easy to get started with,


00:29:54.000 --> 00:29:55.200
I think primarily because,


00:29:55.200 --> 00:29:58.200
I don't know if you've done a lot of streamlit, but it has this top to bottom execution.


00:29:58.200 --> 00:29:59.200
A little, not a ton, but yeah.


00:29:59.200 --> 00:30:00.200
Yeah.


00:30:00.200 --> 00:30:05.560
Like if you were to start out with not a Jupyter notebook, but like a regular Python script


00:30:05.560 --> 00:30:10.780
that was doing a bunch of data analysis stuff, you know, reading data, maybe doing some transformations


00:30:10.780 --> 00:30:14.400
and then outputting some, you know, tables and plots.


00:30:14.400 --> 00:30:19.780
Streamlit lets you take that sort of straight up and down script and sprinkle in some streamlit


00:30:19.780 --> 00:30:24.580
inputs and outputs and boom, like you have now written an interactive


00:30:24.580 --> 00:30:28.240
streamlet app, you just say, you know, streamlet run and then the name of the


00:30:28.240 --> 00:30:33.260
file and it just works in that sense. It's quite incredible. It's very easy


00:30:33.260 --> 00:30:38.340
to get started with and the cost to spin up a new streamlet app is so low


00:30:38.340 --> 00:30:42.700
that I was actually talking to another to a YouTuber, Fanilo. I don't remember


00:30:42.700 --> 00:30:46.380
his last name. I think there's one Fanilo in the streamlet world and he


00:30:46.380 --> 00:30:49.320
was saying that he actually uses this instead of Jupyter


00:30:49.320 --> 00:30:52.600
Notebooks to do interactive, you know, exploratory data


00:30:52.600 --> 00:30:55.520
analysis, which I thought was interesting. The sort of


00:30:55.520 --> 00:30:59.480
drawback of having this simple of a model is that it really


00:30:59.480 --> 00:31:03.480
works well for the simplest apps. And then the model is a


00:31:03.480 --> 00:31:09.040
little bit too simple for even like moderately complex. It's


00:31:09.040 --> 00:31:12.560
not even complex, but just like you're you sooner or later,


00:31:12.780 --> 00:31:16.980
will often in a surprising way, smack into some surprising wall.


00:31:16.980 --> 00:31:19.800
This is not something that is theoretical.


00:31:19.800 --> 00:31:24.060
We definitely have talked to a lot of Streamlit users and even the happy ones


00:31:24.060 --> 00:31:27.940
will say, we really, this is just for prototypes and then we throw them out


00:31:27.940 --> 00:31:32.380
because you just cannot, you can't think of Streamlit apps as something that can


00:31:32.380 --> 00:31:34.620
grow with you as your, as your needs grow.


00:31:34.620 --> 00:31:41.500
So I think the sort of time from zero to value for Streamlit is almost zero.


00:31:41.660 --> 00:32:03.980
That's incredibly quick. But the time from value to the time of, okay, now we're going to throw this thing out and the last 20%. Yeah, and it's actually not the last 20%. I think it's more like the last 60%. And I mean, that might be uncharitable and I'm biased. But but honestly, like in my using this framework, which is it's not to take away from their achievements. It's in


00:32:04.340 --> 00:32:09.140
It clearly has resonated incredibly strongly with a lot of people in the Python world.


00:32:09.140 --> 00:32:15.220
But I think no one who uses Streamlit seriously will tell you that you can do most of the things


00:32:15.220 --> 00:32:21.140
that you want in this sort of top-to-bottom execution model. You will often, in surprisingly


00:32:21.140 --> 00:32:26.580
quick ways, run into limitations there. And I do want to say, Streamlit, they recognized this.


00:32:26.580 --> 00:32:32.740
And after some time, they added, "Try to give you ways to work around that top-to-bottom execution


00:32:32.740 --> 00:32:37.780
model. They introduced the notion of session state and they introduced multiple attempts at


00:32:37.780 --> 00:32:47.540
nice caching abstractions. And I think they make somewhat more complex apps possible. But I really,


00:32:47.540 --> 00:32:54.500
I mean, I'm happy to recommend Streamlit for those easy cases. I cannot recommend Streamlit once you


00:32:54.500 --> 00:32:59.300
start, you know, getting into session state. It really is quite a fragile paradigm to be coding in.


00:33:00.020 --> 00:33:07.300
And by the way, just to make it clear here, I don't have a huge financial like motivation to lie about this.


00:33:07.300 --> 00:33:14.020
Posit Connect, which is the way we make money in this area, it is designed to host Streamlit as well.


00:33:14.020 --> 00:33:19.620
And we have a lot of customers that do that. So it doesn't matter to us whether you use Shiny or Streamlit.


00:33:19.620 --> 00:33:24.420
I mean, it matters to me personally, like it makes me feel good when people use Shiny.


00:33:24.420 --> 00:33:29.060
But as a business, we 100% love when our customers use Streamlit.


00:33:29.060 --> 00:33:32.860
But it really is, I think, we'll talk more about reactive programming later, I hope.


00:33:32.860 --> 00:33:36.360
What it doesn't give you is a nice model for the complicated stuff.


00:33:36.360 --> 00:33:39.200
It only gives you a nice model for the very, very simplest stuff.


00:33:39.200 --> 00:33:43.800
Which serves an important role, but also means that Shiny might serve an important role too.


00:33:43.800 --> 00:33:46.640
Another question from the audience, I think maybe worth a diversion is,


00:33:46.640 --> 00:33:50.040
you've got real world examples of Shiny for Python that you could talk about.


00:33:50.040 --> 00:33:52.540
And let me take a step back since this is so brand new.


00:33:52.540 --> 00:33:54.240
Just Shiny, right?


00:33:54.240 --> 00:33:57.880
Because I feel like the feature set is pretty similar.


00:33:57.880 --> 00:34:00.680
It's just like the R people have been at it for a lot longer, you know?


00:34:00.680 --> 00:34:01.960
Yeah, absolutely.


00:34:01.960 --> 00:34:06.200
And just to make clear, so Shiny for R has been around since 2012.


00:34:06.200 --> 00:34:09.080
Shiny for Python has been in alpha since last year,


00:34:09.080 --> 00:34:14.040
and we just took the alpha tag off in the last, I don't know, six weeks or maybe less than that.


00:34:14.040 --> 00:34:19.160
Yeah, so I think, and I'm sorry, I didn't come prepared with any more links than what's on the website.


00:34:19.160 --> 00:34:19.800
Yeah, no worries.


00:34:19.800 --> 00:34:22.600
But we have a Discord where people are starting to gather


00:34:22.600 --> 00:34:25.960
and talk about some of the things that they're doing with Shiny for Python.


00:34:25.960 --> 00:34:31.080
So yeah, I think on the left here, if you select, say, orbit simulation.


00:34:31.080 --> 00:34:32.680
Yeah, the orbit simulation is cool.


00:34:32.680 --> 00:34:35.920
This is a demo written by one of our engineers.


00:34:35.920 --> 00:34:39.080
But this is using, well, first of all, we haven't talked about this,


00:34:39.080 --> 00:34:40.680
but this is actually using Wasm.


00:34:40.680 --> 00:34:42.920
So there is no Python running on the background here.


00:34:42.920 --> 00:34:44.000
Oh, no. Okay.


00:34:44.000 --> 00:34:48.640
This is using a feature of Shiny called Shiny Live.


00:34:48.640 --> 00:34:52.240
So this is using Pyodide, which is the same sort of Python


00:34:52.240 --> 00:34:55.520
in the browser technology that PyScript is currently using.


00:34:55.520 --> 00:34:59.080
And you still write your Shiny app using Python.


00:34:59.080 --> 00:35:02.080
You still don't have to write any HTML, CSS and JavaScript.


00:35:02.080 --> 00:35:07.080
But when you run it, you can run it straight out of a web browser, as you can see here.


00:35:07.080 --> 00:35:09.580
So that's why it took a little bit longer to get started,


00:35:09.580 --> 00:35:14.080
is because it's installing Python into your browser and installing Astropy.


00:35:14.080 --> 00:35:16.680
Well, you say a while. It took like two seconds the first time.


00:35:16.680 --> 00:35:18.280
Oh, sure.


00:35:18.280 --> 00:35:22.980
Oh, I forget that, yeah, for your listeners, they won't be able to see it.


00:35:22.980 --> 00:35:31.060
This is an example of a relatively simple set of inputs and one 3D output that I think in this


00:35:31.060 --> 00:35:36.660
case is being rendered with matplotlib. And you can choose some different parameters about the


00:35:36.660 --> 00:35:44.660
Earth, Moon, and Sun, and Planet X. And it has arbitrarily complicated calculations happening


00:35:44.660 --> 00:35:48.900
on the back end by AstroPi to determine how these bodies would move when they're affected


00:35:48.900 --> 00:35:54.500
by each other's gravity. There's a lot of Shiny apps that are like this, that there is one


00:35:54.500 --> 00:35:59.620
particular algorithm, one particular model that it's demonstrating, and then wanting to show


00:35:59.620 --> 00:36:05.140
what happens when you try different parameters. So I'd say this is sort of in the simplest category


00:36:05.140 --> 00:36:10.420
of Shiny apps in terms of what's easy to imagine here. And yeah, there's some other stuff on the


00:36:10.420 --> 00:36:15.780
left there. Some of the example apps show the use of different widgets. So there's one for Plotly


00:36:15.780 --> 00:36:22.100
there. You can use the plotly JavaScript based visualization library with Shiny for Python.


00:36:22.100 --> 00:36:27.660
If you want your scatter plots to have, you know, tool tips that show, you know, data,


00:36:27.660 --> 00:36:32.100
for example. I mean, this particular one seems not to do that much. And, you know, you can


00:36:32.100 --> 00:36:35.020
use -- yeah, there's a -- there's a Wordle clone.


00:36:35.020 --> 00:36:41.220
>> No, it looks like a -- it looks like a mobile phone keyboard. I mean, I have a whole


00:36:41.220 --> 00:36:45.060
keyboard right here. I was like, now you can type into the mobile phone keyboard.


00:36:45.060 --> 00:36:45.460
Yeah.


00:36:45.460 --> 00:36:49.380
Wordy? No, it didn't take it. Come on. No.


00:36:49.380 --> 00:36:49.540
Yeah.


00:36:49.540 --> 00:36:55.700
That's pretty funny. Yeah. Yeah. Those are just the beginning ones, right? You even have


00:36:55.700 --> 00:36:58.500
camera input. I don't know what that's going to do.


00:36:58.500 --> 00:37:00.260
Oh, this is designed for a phone.


00:37:00.260 --> 00:37:00.980
Yeah. Yeah.


00:37:00.980 --> 00:37:04.820
We have another example that's not on here that will use your webcam, but


00:37:04.820 --> 00:37:05.700
Yeah, it's okay.


00:37:05.700 --> 00:37:08.580
But it doesn't, I don't think it works on the Wasm mode.


00:37:09.220 --> 00:37:12.900
Yeah, there's probably security limitations and or other differences.


00:37:12.900 --> 00:37:13.780
Yeah, yeah.


00:37:13.780 --> 00:37:39.140
I will say one thing that you won't see as much here that you do see on shiny for our is like interactive dashboards or even non interactive real time streaming dashboards, not because the sort of underlying technology is not there, but because the actual like UI widgets for making something that looks like a dashboard is in shiny for our but not in shiny for Python, but that is coming within the next, I don't know,


00:37:39.140 --> 00:37:40.980
hopefully a week or two weeks.


00:37:40.980 --> 00:37:43.480
So we have a new release coming that adds a lot more UI stuff.


00:37:43.480 --> 00:37:46.340
And that is a very, very common use of Shiny


00:37:46.340 --> 00:37:48.340
is for people that are creating dashboards that


00:37:48.340 --> 00:37:51.940
show key performance indicators and time series plots


00:37:51.940 --> 00:37:56.620
and geographic data plotted on an interactive leaflet map.


00:37:56.620 --> 00:37:58.980
That's bread and butter for a lot of data scientists


00:37:58.980 --> 00:38:00.740
out there who are using Shiny.


00:38:00.740 --> 00:38:03.260
- Okay, that sounds very exciting.


00:38:03.260 --> 00:38:06.820
And the kind of stuff that no one wants to do on the web.


00:38:06.820 --> 00:38:09.020
A very few people want to do directly on the web.


00:38:09.020 --> 00:38:10.520
Maybe one of you will just grab a library.


00:38:10.520 --> 00:38:11.360
- Yeah. - All right.


00:38:11.360 --> 00:38:14.480
So I sent us a little bit on this diversion here over those,


00:38:14.480 --> 00:38:18.520
but maybe the next thing would be reactive programming.


00:38:18.520 --> 00:38:19.640
Tell us about that.


00:38:19.640 --> 00:38:23.200
- Yeah, so Shiny was really born out of this idea


00:38:23.200 --> 00:38:24.440
of reactive programming.


00:38:24.440 --> 00:38:26.560
That was the motivating concept.


00:38:26.560 --> 00:38:29.280
And for people who haven't heard that term before,


00:38:29.280 --> 00:38:32.060
maybe heard it, but never really were clear on what it means,


00:38:32.060 --> 00:38:35.280
reactive programming is a programming paradigm


00:38:35.280 --> 00:38:38.880
that can be applied to many different programming languages,


00:38:38.880 --> 00:38:42.080
where it's about making it easy to program


00:38:42.080 --> 00:38:44.640
against values that are changing over time.


00:38:44.640 --> 00:38:47.120
In a normal programming paradigm,


00:38:47.120 --> 00:38:51.200
if you have a value, X, say, X equals one,


00:38:51.200 --> 00:38:54.640
and then you have Y equals X plus one,


00:38:54.640 --> 00:38:56.540
and then you change the value of X,


00:38:56.540 --> 00:38:58.480
the value of Y does not change, right?


00:38:58.480 --> 00:39:00.280
It's not reactive in that way.


00:39:00.280 --> 00:39:04.000
Whereas if you were in Excel and you had,


00:39:04.000 --> 00:39:07.400
you know, one cell using another cell plus one,


00:39:07.400 --> 00:39:09.080
then you would expect that to change.


00:39:09.080 --> 00:39:11.800
So Excel is sort of the most common example


00:39:11.800 --> 00:39:14.780
of a reactive model that I'm familiar with.


00:39:14.780 --> 00:39:17.040
- And so you wire up the data to say,


00:39:17.040 --> 00:39:19.480
this number depends on these other numbers


00:39:19.480 --> 00:39:21.120
and this one depends on that formula.


00:39:21.120 --> 00:39:24.240
And it's the underlying reactive system just says,


00:39:24.240 --> 00:39:26.300
we're gonna do the minimum amount of recompute


00:39:26.300 --> 00:39:27.640
to keep them up to date.


00:39:27.640 --> 00:39:28.840
- That's exactly right.


00:39:28.840 --> 00:39:29.800
That's exactly right.


00:39:29.800 --> 00:39:32.000
So in this case, the values that are changing


00:39:32.000 --> 00:39:36.160
might be a slider that is in your user interface, right?


00:39:36.160 --> 00:39:40.160
And when the user drags that slider from zero to five,


00:39:40.160 --> 00:39:43.440
there might be all sorts of downstream calculations


00:39:43.440 --> 00:39:44.760
that need to recompute now


00:39:44.760 --> 00:39:47.320
because you've changed that value.


00:39:47.320 --> 00:39:50.840
And in a world prior to reactive programming,


00:39:50.840 --> 00:39:55.040
the dominant model was, and maybe in a lot of places still,


00:39:55.040 --> 00:39:58.760
is callback-based programming or event handling


00:39:58.760 --> 00:40:00.280
is the other name for it.


00:40:00.280 --> 00:40:02.320
And that's, if you've ever used a framework


00:40:02.320 --> 00:40:04.400
that had like something called an onclick


00:40:04.400 --> 00:40:06.840
or something like that, you're doing event handling, right?


00:40:06.840 --> 00:40:10.760
This button is pressed, I am going to execute this exact,


00:40:10.760 --> 00:40:13.680
you know, code in response to a button click.


00:40:13.680 --> 00:40:15.920
And in that world, which is a world that I inhabited


00:40:15.920 --> 00:40:17.960
for many years, doing full-time,


00:40:17.960 --> 00:40:20.800
very complicated UI programming using that model.


00:40:20.800 --> 00:40:22.360
- Sounds like some desktop programming,


00:40:22.360 --> 00:40:25.360
maybe some C#, Windows Forms, something like that.


00:40:25.360 --> 00:40:27.240
- That's right, that's right, exactly.


00:40:27.240 --> 00:40:29.960
I worked at Microsoft working on Windows Forms apps


00:40:29.960 --> 00:40:32.720
that we shipped, and RStudio was created


00:40:32.720 --> 00:40:34.720
in that paradigm as well.


00:40:34.720 --> 00:40:37.000
It's actually quite difficult


00:40:37.000 --> 00:40:38.920
to do that kind of programming well.


00:40:38.920 --> 00:40:40.920
It's very easy to understand how to code


00:40:40.920 --> 00:40:44.560
an event-driven sort of way or using callbacks,


00:40:44.560 --> 00:40:47.680
but to get your callback logic right


00:40:47.680 --> 00:40:51.560
as the number of events, the number of outputs,


00:40:51.560 --> 00:40:55.120
and the number of intermediate sort of calculations


00:40:55.120 --> 00:40:58.240
as they increase, it's really hard to,


00:40:58.240 --> 00:40:59.840
number one, keep it performant,


00:40:59.840 --> 00:41:01.920
and number two, keep it correct.


00:41:01.920 --> 00:41:05.040
And the idea for doing a web framework for data scientists


00:41:05.040 --> 00:41:08.080
actually predates me finding out about reactive programming.


00:41:08.080 --> 00:41:09.200
And I actually said no.


00:41:09.200 --> 00:41:11.600
Like, I actually-- JJ and I talked about it.


00:41:11.600 --> 00:41:13.760
And I was like, we could do it, and we should not,


00:41:13.760 --> 00:41:17.200
unless we come up with some way that is better than event


00:41:17.200 --> 00:41:17.720
handling.


00:41:17.720 --> 00:41:20.040
Because what I didn't want to do was


00:41:20.040 --> 00:41:23.720
make it easy to come up with answers that were incorrect,


00:41:23.720 --> 00:41:25.960
which is what I think callback-based programming


00:41:25.960 --> 00:41:28.440
makes it very easy for you to forget to update


00:41:28.440 --> 00:41:30.040
some aspect of your calculation.


00:41:30.040 --> 00:41:31.240
And now you have an answer.


00:41:31.240 --> 00:41:32.360
It's just not the right answer.


00:41:32.360 --> 00:41:32.680
Right.


00:41:32.680 --> 00:41:36.600
Maybe you update two graphs, but there's some number that has like a total in it.


00:41:36.600 --> 00:41:39.760
And you forget in your event handler, you got to update all three.


00:41:39.760 --> 00:41:46.000
And so then, yeah, you'd have to update all three in the correct order potentially.


00:41:46.000 --> 00:41:46.360
Right.


00:41:46.360 --> 00:41:48.960
Because one of those sub calculations might depend on the other.


00:41:48.960 --> 00:41:54.480
So the whole thing, it is certainly possible to create very complex or even,


00:41:54.480 --> 00:41:58.520
you know, simple to complex interactive stuff using callbacks.


00:41:58.560 --> 00:42:01.960
But I never felt like this was a great way to work.


00:42:01.960 --> 00:42:05.200
And when I was building these desktop apps,


00:42:05.200 --> 00:42:07.260
I often felt at the end of the day


00:42:07.260 --> 00:42:09.160
like I had been operating at the very edges


00:42:09.160 --> 00:42:10.920
of my mental capacity.


00:42:10.920 --> 00:42:14.480
And it's even worse when you go to modify existing code


00:42:14.480 --> 00:42:19.080
or, God forbid, have to help debug somebody else's UI code.


00:42:19.080 --> 00:42:21.800
I mean, it really is very, very difficult.


00:42:21.800 --> 00:42:24.600
And I heard about Reactive Programming


00:42:24.600 --> 00:42:28.160
via this JavaScript framework called Meteor.


00:42:28.160 --> 00:42:30.160
And I don't know if you've heard of Meteor.


00:42:30.160 --> 00:42:32.160
I've heard of it, but I haven't ever used it.


00:42:32.160 --> 00:42:35.660
Yeah, not a lot of people have. I think it was very influential in terms of its ideas,


00:42:35.660 --> 00:42:38.160
but it didn't catch on anything like React.


00:42:38.160 --> 00:42:42.660
But Meteor, I heard about it in 2012,


00:42:42.660 --> 00:42:47.160
and I can't really convey how awe-inspiring it was to see.


00:42:47.160 --> 00:42:51.160
I think I saw a five-minute demo that was on the front page of Hacker News,


00:42:51.160 --> 00:42:57.160
and I was just flabbergasted at what they were doing in this demo.


00:42:57.160 --> 00:42:59.480
And there were like no event handlers anywhere.


00:42:59.480 --> 00:43:03.240
And yet everything was just completely snappily updating.


00:43:03.240 --> 00:43:05.440
I was like so taken aback by this


00:43:05.440 --> 00:43:07.040
that it stuck in my brain for weeks.


00:43:07.040 --> 00:43:08.480
Like I was like, how do they do that?


00:43:08.480 --> 00:43:10.720
Like that doesn't make any sense to me.


00:43:10.720 --> 00:43:14.100
And I finally like did some Googling around


00:43:14.100 --> 00:43:16.440
and there was a Stack Overflow answer that indicated


00:43:16.440 --> 00:43:19.760
like this is sort of more or less how it works.


00:43:19.760 --> 00:43:22.320
You know, with that clue, I downloaded their source code


00:43:22.320 --> 00:43:26.480
and sort of found my way to how exactly it was implemented.


00:43:26.480 --> 00:43:28.780
And I actually was getting on a plane


00:43:28.780 --> 00:43:30.900
and I downloaded the repo before I got on the plane.


00:43:30.900 --> 00:43:32.600
I was like, by the time this plane lands,


00:43:32.600 --> 00:43:34.120
I'm gonna figure this out.


00:43:34.120 --> 00:43:38.060
And it actually is a beautifully elegant mechanism


00:43:38.060 --> 00:43:40.360
that I'll probably talk about someday.


00:43:40.360 --> 00:43:41.840
I mean, we could talk about it now,


00:43:41.840 --> 00:43:44.760
but I think it would probably be the rest of our time.


00:43:44.760 --> 00:43:46.600
But it's a beautifully elegant


00:43:46.600 --> 00:43:49.440
and ultimately quite simple mechanism


00:43:49.440 --> 00:43:51.240
that underlies all this magic.


00:43:51.240 --> 00:43:53.620
When I saw that and eventually it took me a couple of weeks


00:43:53.620 --> 00:43:55.920
to connect the dots, but when I realized, wait a minute,


00:43:55.920 --> 00:43:58.820
this could be how data scientists could create


00:43:58.820 --> 00:44:01.200
highly interactive things without fear,


00:44:01.200 --> 00:44:03.120
without worrying that they're gonna forget


00:44:03.120 --> 00:44:06.760
to update some intermediate thing and get the wrong answer,


00:44:06.760 --> 00:44:07.940
or worse, they wouldn't worry about it,


00:44:07.940 --> 00:44:09.200
they'd just get the wrong answer


00:44:09.200 --> 00:44:11.000
and then be angry after the fact, right?


00:44:11.000 --> 00:44:13.000
- We're gonna retract that paper, I'm sorry.


00:44:13.000 --> 00:44:14.640
- Yeah. (laughs)


00:44:14.640 --> 00:44:15.600
Yeah.


00:44:15.600 --> 00:44:18.200
On the R side, it really has,


00:44:18.200 --> 00:44:20.140
these ideas have proven themselves out


00:44:20.140 --> 00:44:21.420
year after year after year.


00:44:21.420 --> 00:44:23.780
I think people are building incredibly cool things


00:44:23.780 --> 00:44:25.800
in reactive programming with no background


00:44:25.800 --> 00:44:30.800
in software engineering, much less hardcore front-end web


00:44:30.800 --> 00:44:31.600
development.


00:44:31.600 --> 00:44:35.600
So I really do believe there are a lot of different ways people


00:44:35.600 --> 00:44:38.080
are solving this problem in Python.


00:44:38.080 --> 00:44:39.960
Streamlit and Dash each have their own takes,


00:44:39.960 --> 00:44:43.200
and Pinecone and Solara are all these different ones.


00:44:43.200 --> 00:44:46.760
And the ones that have thought carefully


00:44:46.760 --> 00:44:50.520
about this problem of how do you help people programming


00:44:50.520 --> 00:44:53.400
against what is inherently a dynamic system


00:44:53.400 --> 00:44:55.280
while staying safe, while making sure


00:44:55.280 --> 00:44:59.080
that you're getting the right answers every time and doing it in an efficient way.


00:44:59.080 --> 00:45:02.280
Those are the ones that I think are closest to the spirit of shiny.


00:45:02.280 --> 00:45:16.080
And, and that's really why I think shiny for Python needed to exist because I mean, I looked at dash and streamlit and I just felt like, you know, I'm glad that people are really getting a lot of value out of these, especially out of streamlit.


00:45:16.400 --> 00:45:19.400
But I really feel like this needs to exist as well.


00:45:19.400 --> 00:45:22.700
We really need like an industrial strength reactive framework


00:45:22.700 --> 00:45:25.540
for things that are not just top to bottom execution.


00:45:25.540 --> 00:45:26.040
Yeah.


00:45:26.040 --> 00:45:28.240
One thing that's standing out to me on the page here


00:45:28.240 --> 00:45:30.500
as you talk about there are a few utility functions


00:45:30.500 --> 00:45:34.920
to help manage or utility things to help manage reactivity.


00:45:34.920 --> 00:45:38.760
And one is context blocks, you know, with isolate


00:45:38.760 --> 00:45:41.680
and other ones are decorators for functions.


00:45:41.680 --> 00:45:46.300
And, you know, just those two things are pretty, pretty solid


00:45:46.300 --> 00:45:48.960
Pythonic constructs of the language.


00:45:48.960 --> 00:45:49.520
Right.


00:45:49.520 --> 00:45:54.160
And so it looks like you put some thought into not just writing R code in Python,


00:45:54.160 --> 00:45:57.840
but trying to embrace some of the Pythonic language capabilities.


00:45:57.840 --> 00:45:59.480
Yeah, that's absolutely right.


00:45:59.480 --> 00:46:04.600
It was really important to us when we were talking about the design philosophy


00:46:04.600 --> 00:46:09.320
for shiny for Python to really make it a Python first experience.


00:46:09.760 --> 00:46:13.800
That's not necessarily, like, I think the other choice is defensible too,


00:46:13.800 --> 00:46:16.600
which is let's make these two frameworks look as similar as possible


00:46:16.600 --> 00:46:18.760
so that you can seamlessly move from one to the other.


00:46:18.760 --> 00:46:25.880
And I was just not convinced that anyone would really enjoy writing R-style code in Python.


00:46:25.880 --> 00:46:30.040
Like, I wouldn't. I mean, that just feels, something feels hacky about that.


00:46:30.040 --> 00:46:30.240
Yeah.


00:46:30.240 --> 00:46:33.080
So yeah, we definitely spent some time, and I'm not new to Python.


00:46:33.080 --> 00:46:36.920
I think I learned Python originally in 2003, something like that.


00:46:36.920 --> 00:46:38.280
And I've spent some time with the language.


00:46:38.280 --> 00:46:42.440
So yeah, it felt to me like so much of Shiny is,


00:46:42.440 --> 00:46:46.520
this reactive programming is about creating independent units


00:46:46.520 --> 00:46:49.580
of either this is code that generates a plot


00:46:49.580 --> 00:46:53.280
or this is code that calculates a data frame


00:46:53.280 --> 00:46:55.280
and taking those little bits of code


00:46:55.280 --> 00:46:58.520
and deciding when is the right time for each of them to run


00:46:58.520 --> 00:46:59.720
because there are like dependencies


00:46:59.720 --> 00:47:01.000
between these different blocks.


00:47:01.000 --> 00:47:03.500
And the notion of these being functions


00:47:03.500 --> 00:47:06.340
that have decorators on them felt to me


00:47:06.340 --> 00:47:08.660
like a pretty spot on analogy, right?


00:47:08.660 --> 00:47:12.780
Like you're creating a chunk of code, which in Python is a function, and then


00:47:12.780 --> 00:47:16.740
you are annotating it with an indicator of your intent.


00:47:16.740 --> 00:47:20.500
So in Shiny, you would write, you know, for a plot output, you would say


00:47:20.500 --> 00:47:24.980
def plot one or whatever you named that plot, you would have your map plot


00:47:24.980 --> 00:47:29.540
libcode inside, and then as a decorator to that function, you would say, this


00:47:29.540 --> 00:47:32.460
is an output and the type of the output is a plot.


00:47:32.700 --> 00:47:40.580
Now, I will say that being said, I have been a little bit surprised how many data scientists in Python I've talked to have not worked with decorators.


00:47:40.580 --> 00:47:49.060
It's not, I mean, most of them are familiar enough, but like a non-zero amount of people have told me, like, I haven't done decorators before, and this is a little bit scary.


00:47:49.060 --> 00:47:51.900
So that was not something that I was anticipating going into this.


00:47:51.900 --> 00:47:53.580
So yeah, so I got a couple thoughts.


00:47:53.580 --> 00:47:59.460
One is, if you went with your alternate reality, where you said, let's make them as identical as possible.


00:47:59.460 --> 00:48:01.300
There's certainly a case to be made for that.


00:48:01.300 --> 00:48:01.780
I agree.


00:48:02.020 --> 00:48:08.340
But that would sort of say the primary audience is the people that flows between R and Python.


00:48:08.340 --> 00:48:08.900
Exactly.


00:48:08.900 --> 00:48:14.020
It's certainly non-zero, but it's not like, let's try to resonate most deeply with just


00:48:14.020 --> 00:48:19.140
the Python community full stop rather than the transit folks, you know?


00:48:19.140 --> 00:48:20.420
Yeah, that's right.


00:48:20.420 --> 00:48:24.820
So I would say, I mean, looking in from the outside that this looks like a good choice.


00:48:24.820 --> 00:48:30.100
Second, the with concepts and the decorators and data scientists is,


00:48:30.100 --> 00:48:32.780
I think one of the powers of Python,


00:48:32.780 --> 00:48:36.580
the reason a lot of data scientists use it is you can be really effective with a


00:48:36.580 --> 00:48:41.780
partial understanding, a highly partial understanding of what Python is and how it works.


00:48:41.780 --> 00:48:44.100
Right, like you might not know how to create a class,


00:48:44.100 --> 00:48:46.300
you might not even know how to create a function, but you can still


00:48:46.300 --> 00:48:50.500
pip install a few cool libraries or conda install them and then run top to bottom


00:48:50.500 --> 00:48:53.100
five lines that generate an amazing output, right?


00:48:53.100 --> 00:48:55.500
And so I think there's a, not


00:48:55.500 --> 00:48:57.500
talking about all data scientists, but I think there's a


00:48:57.500 --> 00:49:01.980
a slice of kind of pretty new to Python data science


00:49:01.980 --> 00:49:03.180
who are like came from somewhere else,


00:49:03.180 --> 00:49:06.060
like I heard this is awesome and I'm starting to get some traction with it.


00:49:06.060 --> 00:49:08.260
But even they haven't gone into, you know,


00:49:08.260 --> 00:49:11.220
crazy concepts of decorators that take functions


00:49:11.220 --> 00:49:14.220
and star arg wraps them and returns other functions.


00:49:14.220 --> 00:49:15.900
You know, like that said,


00:49:15.900 --> 00:49:18.100
from a syntactical perspective,


00:49:18.100 --> 00:49:19.900
I think it's pretty easy like, oh, this function,


00:49:19.900 --> 00:49:20.860
it has to be reactive.


00:49:20.860 --> 00:49:23.060
So I put @ReactiveEvent on it.


00:49:23.060 --> 00:49:25.060
>> Yeah, that's right. Yeah.


00:49:25.060 --> 00:49:29.760
Amir asks if there's any examples with user authentication.


00:49:29.760 --> 00:49:32.100
I know you guys have your gallery,


00:49:32.100 --> 00:49:34.160
which is what I skipped before,


00:49:34.160 --> 00:49:36.660
but the gallery I think is maybe easier to quickly browse,


00:49:36.660 --> 00:49:37.960
but there's more in the examples.


00:49:37.960 --> 00:49:41.780
>> Yeah. Honestly, we are a little behind on the examples.


00:49:41.780 --> 00:49:44.300
We spent a lot of the last six months


00:49:44.300 --> 00:49:46.820
working on features and not on examples.


00:49:46.820 --> 00:49:48.640
>> You've been busy building the thing,


00:49:48.640 --> 00:49:50.660
not talking about what you could do.


00:49:50.660 --> 00:49:54.120
>> Yeah. I think we need our examples to catch up a little bit.


00:49:54.120 --> 00:50:01.720
I will say that user authentication is something that we have as part of both hosted platform and


00:50:01.720 --> 00:50:08.680
for Posit Connect. So I think a lot of companies that are trying to sort of have a similar business


00:50:08.680 --> 00:50:16.600
model as us, and have a open source framework, and also some kind of enterprise hosting often


00:50:16.600 --> 00:50:21.240
draw the line that way that that authentication is one of the things that isn't in the framework,


00:50:21.240 --> 00:50:27.080
it wraps the framework. That being said, in Shiny for R, people definitely went ahead and wrote


00:50:27.080 --> 00:50:30.760
their own packages that put authentication into their framework and made it open source.


00:50:30.760 --> 00:50:34.840
And I'm sure those things are going to happen in Shiny for Python very quickly as well.


00:50:34.840 --> 00:50:39.320
>> Yeah. How similar is the execution model, like the internals, what's happening


00:50:39.320 --> 00:50:44.280
conceptually on the server stuff or even on the web side across those?


00:50:44.280 --> 00:50:50.360
>> Yeah. There's a couple ways to answer that. I would say right now it is surprisingly close,


00:50:50.360 --> 00:50:55.360
which is not really what we were anticipating.


00:50:55.360 --> 00:50:57.360
Shiny for Python is written in async I/O,


00:50:57.360 --> 00:51:01.360
and that async framework is quite different


00:51:01.360 --> 00:51:04.360
than how async works in R.


00:51:04.360 --> 00:51:06.360
I think after spending a lot of time on this implementation,


00:51:06.360 --> 00:51:11.360
the mental model for the Shiny app author is actually quite similar.


00:51:11.360 --> 00:51:15.360
So where we ended up, I think it does, for all intents and purposes,


00:51:15.360 --> 00:51:19.360
as an app author, it's a very similar execution model.


00:51:16.360 --> 00:51:29.360
So each user, if you were to launch a Shiny for Python app right now from your, not from Wasm, but like using a regular Shiny for Python, running it out of Python, and you connected three web browsers, they would all be running in the same process.


00:51:29.360 --> 00:51:41.360
Each one gets their own copy of their their own session, basically. So there's no confusing whose inputs are applying to whose outputs. Everybody has their own copies of inputs and outputs and they're wired together.


00:51:41.360 --> 00:51:46.000
together, but it's all running on the same process and it's all running.


00:51:46.000 --> 00:51:47.840
Uh, currently they all run on the same thread.


00:51:47.840 --> 00:51:51.140
We do that on purpose because you can also have shared reactives.


00:51:51.140 --> 00:51:55.880
So, you know, you could have global variables that essentially when one


00:51:55.880 --> 00:51:59.920
browser updates them, everybody gets an update and you could have some kind of


00:51:59.920 --> 00:52:02.480
shared scoreboard or a chat room or whatever.


00:52:02.480 --> 00:52:06.600
That being said, if you want, you can also do async.


00:52:06.600 --> 00:52:10.240
Uh, so your outputs and calculations can also be async functions.


00:52:10.720 --> 00:52:15.560
And therefore your session, if it's doing some kind of long running async calculation,


00:52:15.560 --> 00:52:19.860
can give up its control of the thread to some other session that can execute.


00:52:19.860 --> 00:52:23.700
Right, or it's doing some database thing where it's pulling in a bunch of data.


00:52:23.700 --> 00:52:26.160
It can say, "Wait on the database, you guys keep going."


00:52:26.160 --> 00:52:27.040
Yeah, that's right.


00:52:27.040 --> 00:52:30.120
Okay, so we're getting short on time here.


00:52:30.120 --> 00:52:32.740
Let me ask you two more questions.


00:52:32.740 --> 00:52:38.040
The first one is, I think from a community perspective, like what opens up now, right?


00:52:38.040 --> 00:52:39.880
So we have R, we have Python,


00:52:39.880 --> 00:52:41.520
and there are similarities between these,


00:52:41.520 --> 00:52:43.120
but there's really smart people doing


00:52:43.120 --> 00:52:45.320
creative and powerful stuff on both sides.


00:52:45.320 --> 00:52:48.160
Because of the chronology, I guess,


00:52:48.160 --> 00:52:50.000
mostly I imagine that there's


00:52:50.000 --> 00:52:51.960
more shiny work that's happened on


00:52:51.960 --> 00:52:54.120
the R side than on the Python side.


00:52:54.120 --> 00:52:58.240
But how much does this make it possible for people who


00:52:58.240 --> 00:53:01.140
maybe wrote a book with shiny for R,


00:53:01.140 --> 00:53:03.440
and they might want a Python version?


00:53:03.440 --> 00:53:06.480
It seems to me that having this as an option,


00:53:06.480 --> 00:53:09.680
if the whole UI is now kind of almost equivalent,


00:53:09.680 --> 00:53:11.880
if not syntactically identical,


00:53:11.880 --> 00:53:14.640
like, oh, all of a sudden we could have these two versions,


00:53:14.640 --> 00:53:17.880
or we could move from one side of that fence to the other


00:53:17.880 --> 00:53:21.000
and still stick with Shiny in the same reactive programming model.


00:53:21.000 --> 00:53:23.600
Yeah, I want to make sure I get your question right.


00:53:23.600 --> 00:53:25.600
Are you talking about people who are sort of


00:53:25.600 --> 00:53:28.040
in the Shiny ecosystem,


00:53:28.040 --> 00:53:30.200
who have like extension packages and things like that?


00:53:30.200 --> 00:53:32.360
Or are you talking about people who write Shiny apps?


00:53:32.360 --> 00:53:33.320
People who write Shiny apps.


00:53:33.320 --> 00:53:36.880
people who are like users creating these Shiny apps,


00:53:36.880 --> 00:53:38.480
maybe they created them in Shiny for R,


00:53:38.480 --> 00:53:40.120
and they're like, "I've always wanted to do a Python one,


00:53:40.120 --> 00:53:42.560
but I really like Shiny, so I'm not going anywhere."


00:53:42.560 --> 00:53:44.560
You know, but now there's Shiny for Python.


00:53:44.560 --> 00:53:46.440
You're like, "Oh, maybe this is a way to have


00:53:46.440 --> 00:53:47.960
that as an option," right?


00:53:47.960 --> 00:53:50.520
Or, "I'm a teacher teaching a class at a college,


00:53:50.520 --> 00:53:51.880
and I did it with Shiny and R,


00:53:51.880 --> 00:53:54.400
and they're telling me I have to move to Python.


00:53:54.400 --> 00:53:55.600
I thought I'd use Streamlit,


00:53:55.600 --> 00:53:56.800
but maybe now I can move over."


00:53:56.800 --> 00:53:59.600
Like, how much do you see that scenario


00:53:59.600 --> 00:54:00.520
coming into play now?


00:54:00.520 --> 00:54:01.960
- We absolutely are, yeah.


00:54:01.960 --> 00:54:04.160
And I think I underestimated this a little bit.


00:54:04.160 --> 00:54:08.760
I think what I was anticipating is that people who are very comfortable with Shiny for R


00:54:08.760 --> 00:54:13.560
and comfortable with R in general might see Shiny for Python as sort of a threat


00:54:13.560 --> 00:54:18.360
as, you know, the Shiny team has given up on R and all they care about is Python now


00:54:18.360 --> 00:54:21.360
and they're selling out to the Python, you know, crowd or whatever.


00:54:21.360 --> 00:54:24.460
And that really has not been the case at all.


00:54:24.460 --> 00:54:26.960
And then, Joe, you come on this podcast and oh my goodness.


00:54:26.960 --> 00:54:29.760
Yeah, that's right.


00:54:29.760 --> 00:54:30.760
Just kidding.


00:54:30.760 --> 00:54:33.680
In fact, it's almost been a sense of relief.


00:54:33.680 --> 00:54:38.720
And that applies as well to, you know, our company name was RStudio, we rebranded Deposit.


00:54:38.720 --> 00:54:44.720
And similarly, we announced both things at the same conference, that we were going from RStudio to Deposit,


00:54:44.720 --> 00:54:49.680
in terms of our company name, and Shiny for Python is now going to be a thing in addition to Shiny for R.


00:54:49.680 --> 00:54:57.200
And I almost feel like the predominant emotion that we got from our community was relief.


00:54:57.200 --> 00:55:04.460
Because I think unless you're in like very specific fields, there's nobody that doesn't have some Python around them, right?


00:55:04.460 --> 00:55:11.840
That maybe your team does R, but then you have this sibling team that, you know, maybe is more ML model heavy,


00:55:11.840 --> 00:55:16.680
and they definitely use Python, or your IT department really is a lot more comfortable deploying Python.


00:55:16.680 --> 00:55:22.520
And I think as much as people love R, knowing that they have the option,


00:55:22.520 --> 00:55:30.440
knowing that they can take these ideas that they really like from R and be able to reuse them in Python.


00:55:30.440 --> 00:55:34.440
I mean, yes, there will be some syntax to learn, but that's never the hard part, right?


00:55:34.440 --> 00:55:37.440
I mean, the hard part is everything that you express using the syntax.


00:55:37.440 --> 00:55:39.440
The libraries and the UIs and all that, yeah.


00:55:39.440 --> 00:55:45.240
Yeah, so that's really what we've heard is that people, even if they're like totally happy with Shiny for R,


00:55:45.240 --> 00:55:50.080
they're happy that Shiny for Python exists because they know that if the time comes


00:55:50.080 --> 00:55:52.680
where they have to add that to their toolkit,


00:55:52.680 --> 00:55:55.180
that it's an option and they don't have to now try to map


00:55:55.180 --> 00:55:58.080
everything that they know and take for granted from Shiny


00:55:58.080 --> 00:56:00.580
to have to map that to Dash or to


00:56:00.580 --> 00:56:02.420
Streamlit or Panel or something like that.


00:56:02.420 --> 00:56:05.380
>> Yeah. Another example is you work at a university


00:56:05.380 --> 00:56:09.080
where R is actually really has a good stronghold,


00:56:09.080 --> 00:56:11.620
especially in the math and statistics department.


00:56:11.620 --> 00:56:14.480
But maybe you're working with some astronomers


00:56:14.480 --> 00:56:17.780
and their whole research group does Python


00:56:17.780 --> 00:56:18.880
and you want to work with them.


00:56:18.880 --> 00:56:34.440
But you know, like, you also want to bring shiny, right? So yeah, that's what like that, all that conversation right there kind of encapsulates why I thought this would be a really cool topic to have you on the show is, you know, it kind of opens up this bridge. Yeah, a lot of people in a lot of directions.


00:56:34.440 --> 00:56:39.800
Yeah. And speaking of bridges, a member of my team pointed out that, you know, he's someone who in


00:56:39.800 --> 00:56:46.360
his previous job went from an R organization to like a more Python heavy organization. And as


00:56:46.360 --> 00:56:51.240
someone who's coming from the R world, it can be a little bit intimidating, you know, to sort of


00:56:51.240 --> 00:56:57.240
start at the, of the ladder again, especially if you're in some kind of, you know, a team situation


00:56:57.240 --> 00:57:02.120
where you're expected to be productive and to contribute to the team. And Shiny for Python,


00:57:02.120 --> 00:57:06.760
especially being new, that people are coming from the R world and sort of find themselves,


00:57:06.760 --> 00:57:12.200
whether by choice or involuntarily, you know, needing to do Python, that Shiny for Python might


00:57:12.200 --> 00:57:17.800
be an interesting, like you said, bridge for them to go from one ecosystem to the other,


00:57:17.800 --> 00:57:23.800
while maintaining a certain level of familiarity and to be able to deliver a lot of value.


00:57:23.800 --> 00:57:28.760
Because, I mean, one of the reasons I think Shiny resonated on the R side is because the


00:57:28.760 --> 00:57:31.120
the things that you build with Shiny, if they have value,


00:57:31.120 --> 00:57:32.280
they are extremely visible.


00:57:32.280 --> 00:57:34.440
They're extremely visible to your coworkers


00:57:34.440 --> 00:57:36.080
inside your organization.


00:57:36.080 --> 00:57:38.440
And it really, you're talking about how,


00:57:38.440 --> 00:57:39.680
you know, people coming up and saying


00:57:39.680 --> 00:57:43.080
how they've built impactful things with Shiny.


00:57:43.080 --> 00:57:45.240
Another common theme I heard was


00:57:45.240 --> 00:57:47.340
how much Shiny helped their careers.


00:57:47.340 --> 00:57:52.340
Going from doing work in a REPL or a notebook,


00:57:52.340 --> 00:57:54.600
and instead being able to deliver


00:57:54.600 --> 00:57:57.200
very dramatic interactive applications


00:57:57.200 --> 00:58:00.320
It's a really powerful way to have an impact


00:58:00.320 --> 00:58:01.240
in your organization.


00:58:01.240 --> 00:58:02.080
- It is.


00:58:02.080 --> 00:58:03.720
And I think data scientists,


00:58:03.720 --> 00:58:05.520
and especially this kind of like visual,


00:58:05.520 --> 00:58:07.240
let me turn the knobs and see what happens


00:58:07.240 --> 00:58:09.880
type of experience is the type of person


00:58:09.880 --> 00:58:12.600
that has the ear of pretty high up folks.


00:58:12.600 --> 00:58:14.860
And if you've got powerful tools like this


00:58:14.860 --> 00:58:16.720
to make a good impression, you're like,


00:58:16.720 --> 00:58:18.920
they asked me, I asked them if they could give us


00:58:18.920 --> 00:58:20.880
predictions of this, or if they could rethink this.


00:58:20.880 --> 00:58:23.080
And they came back with a new web app the next day.


00:58:23.080 --> 00:58:23.920
Are you kidding me?


00:58:23.920 --> 00:58:26.340
Took us six months to redesign our stupid website


00:58:26.340 --> 00:58:27.880
for the homepage, you know what I mean?


00:58:27.880 --> 00:58:29.280
Something like this, right?


00:58:29.280 --> 00:58:30.520
And so it lets you look good, right?


00:58:30.520 --> 00:58:31.600
To the right people.


00:58:31.600 --> 00:58:32.840
- That's right, 100%.


00:58:32.840 --> 00:58:33.680
- Yeah, cool.


00:58:33.680 --> 00:58:36.240
Joe, I'd say you're making a big impact here.


00:58:36.240 --> 00:58:37.400
We got Alan out there saying,


00:58:37.400 --> 00:58:39.640
I just started using Shiny during this live stream.


00:58:39.640 --> 00:58:40.480
- Yes.


00:58:40.480 --> 00:58:41.300
(laughing)


00:58:41.300 --> 00:58:42.480
- How hard is it to deploy this


00:58:42.480 --> 00:58:44.880
into an AWS EC2 instance, for example?


00:58:44.880 --> 00:58:46.360
- Yeah, you totally can.


00:58:46.360 --> 00:58:49.080
The easiest thing to do is to look up Shiny server.


00:58:49.080 --> 00:58:51.440
Most of the documentation talks about,


00:58:51.440 --> 00:58:53.440
you might find it on the R side of the website,


00:58:53.440 --> 00:58:54.840
but it's actually all the same.


00:58:54.840 --> 00:58:59.840
So if you're using Ubuntu, it's a simple install


00:58:59.840 --> 00:59:01.900
of a Debian package.


00:59:01.900 --> 00:59:05.000
If you're using Fedora, it's an RPM.


00:59:05.000 --> 00:59:08.260
And it should be pretty easy to get started with.


00:59:08.260 --> 00:59:11.140
But also don't forget that you can also just sling it


00:59:11.140 --> 00:59:12.940
into our free hosting,


00:59:12.940 --> 00:59:14.340
especially if you're just getting started.


00:59:14.340 --> 00:59:16.180
- Yeah, excellent, excellent.


00:59:16.180 --> 00:59:17.940
Roadmap, let's close it out with roadmap.


00:59:17.940 --> 00:59:20.980
- Yeah, so in the upcoming release,


00:59:20.980 --> 00:59:25.180
We have been focused a lot on UI components,


00:59:25.180 --> 00:59:27.380
and that's something that we're gonna continue


00:59:27.380 --> 00:59:29.180
to focus on for a while.


00:59:29.180 --> 00:59:32.900
We definitely wanna make the more dashboardy type


00:59:32.900 --> 00:59:35.820
applications very easy to write,


00:59:35.820 --> 00:59:40.820
and we also are wanting to beef up on the output side


00:59:40.820 --> 00:59:42.060
of some of our widgets.


00:59:42.060 --> 00:59:44.020
So we don't have a great table widget right now.


00:59:44.020 --> 00:59:45.740
It just kind of takes a pandas table


00:59:45.740 --> 00:59:49.580
and renders it to HTML using pandas styler,


00:59:49.580 --> 00:59:53.980
but we want to have fast scalable virtual grid basically.


00:59:53.980 --> 00:59:58.780
And also for more interactive type outputs like that,


00:59:58.780 --> 01:00:01.540
I should mention that we support IPy widgets natively.


01:00:01.540 --> 01:00:04.500
So most IPy widgets will just drop right in


01:00:04.500 --> 01:00:06.660
including Plotly and PyDeck.


01:00:06.660 --> 01:00:10.340
And well, you know, most of them work just fine.


01:00:10.340 --> 01:00:13.980
And we'll be doing more to sort of make some of those


01:00:13.980 --> 01:00:15.320
feel a little bit more native


01:00:15.320 --> 01:00:17.360
and the IPy widget stuff works great.


01:00:17.360 --> 01:00:20.280
But I think we also want to make it feel a little bit more


01:00:20.280 --> 01:00:23.560
functional in some cases than object-oriented.


01:00:23.560 --> 01:00:26.120
Yeah, and we have a lot of examples to write,


01:00:26.120 --> 01:00:29.080
a lot of documentation to write, and there are also


01:00:29.080 --> 01:00:31.720
quite a few features to port over from Shiny for R.


01:00:31.720 --> 01:00:34.320
And the last thing I'll say is that automated testing


01:00:34.320 --> 01:00:36.560
is something that we are working on as well,


01:00:36.560 --> 01:00:38.900
making it easier for you to write automated tests


01:00:38.900 --> 01:00:41.360
for your Shiny for Python apps.


01:00:41.360 --> 01:00:43.280
It's an approach that's based on Playwright


01:00:43.280 --> 01:00:45.080
that we use internally right now,


01:00:45.080 --> 01:00:48.080
but we're gonna have helper classes and functions


01:00:48.080 --> 01:00:50.960
to make it a little less boilerplatey


01:00:50.960 --> 01:00:53.880
to write these kinds of tests for Shiny for Python apps.


01:00:53.880 --> 01:00:55.200
- Nice, Playwright's really cool.


01:00:55.200 --> 01:00:58.800
- Yeah, yeah, very, very, yeah, very, very cool.


01:00:58.800 --> 01:01:01.800
- Like Selenium, but more Pythonic, so pretty neat.


01:01:01.800 --> 01:01:02.640
- Yeah, yeah.


01:01:02.640 --> 01:01:04.200
- Oh, well, it's a cool roadmap.


01:01:04.200 --> 01:01:06.040
People want, if they've got ideas,


01:01:06.040 --> 01:01:07.640
they wanna reach out to you.


01:01:07.640 --> 01:01:09.200
Is GitHub an option?


01:01:09.200 --> 01:01:10.840
Like, do they open an issue?


01:01:10.840 --> 01:01:11.880
Do they email you?


01:01:11.880 --> 01:01:12.720
How do they reach you guys?


01:01:12.720 --> 01:01:19.840
So we have a GitHub issue is always appreciated and we will absolutely read those and engage.


01:01:19.840 --> 01:01:23.760
We also have a Discord for things that are a little more, you know, if you want a little


01:01:23.760 --> 01:01:29.520
bit more of a back and forth and or do you just want to meet us? You just want to talk about,


01:01:29.520 --> 01:01:33.200
you know, any of the design decisions we've made or how we might be different than,


01:01:33.200 --> 01:01:37.280
you know, XYZ framework. We're happy to talk to anyone and everyone.


01:01:37.280 --> 01:01:41.280
And I think to get to the Discord is on our GitHub homepage, I believe.


01:01:41.280 --> 01:01:46.080
Excellent. Let's see if I can find it. Discord. There you have it. Join us on Discord right on


01:01:46.080 --> 01:01:50.240
the homepage and the readme of the GitHub. All right, Joe, thanks for being here. Thanks for


01:01:50.240 --> 01:01:55.040
creating this. This is cool. I think it's a nice contribution and really, like I said,


01:01:55.040 --> 01:01:57.680
it's a cool bridge between the R and Python communities.


01:01:57.680 --> 01:02:03.280
Thank you. If you don't mind me saying so, I really enjoy your podcast and I think that


01:02:03.280 --> 01:02:08.960
you're quite good at this and I just really appreciate all the conversations that you've


01:02:08.960 --> 01:02:14.000
had you seem like just a really generous interviewer and you do a really great job of


01:02:14.000 --> 01:02:18.960
sort of helping people really feel three-dimensional even when we're talking about like very technical


01:02:18.960 --> 01:02:22.720
stuff. So I appreciate that. I really appreciate that. That's super kind. Thank you for saying


01:02:22.720 --> 01:02:27.120
that. And thank you for being on the show. So yeah, my pleasure. All the links in the show


01:02:27.120 --> 01:02:30.960
notes for all these things. People can check them out there. And yeah, see you next time.


01:02:30.960 --> 01:02:35.760
All right. Thanks so much. This has been another episode of Talk Python to Me.


01:02:36.400 --> 01:02:40.240
Thank you to our sponsors. Be sure to check out what they're offering. It really helps support


01:02:40.240 --> 01:02:46.640
the show. InfluxData encourages you to try InfluxDB. InfluxDB is a database purpose-built


01:02:46.640 --> 01:02:52.320
for handling time series data at a massive scale for real-time analytics. Try it for free at


01:02:52.320 --> 01:03:00.160
talkpython.fm/influxdb. GlareDB is an open-source database for querying distributed and disparate


01:03:00.160 --> 01:03:06.160
data. Connect your data sources and use the Python tools you already know to ask questions


01:03:06.160 --> 01:03:11.600
and integrate data across data sources. Get started today at talkpython.fm/glaredb.


01:03:11.600 --> 01:03:16.880
Want to level up your Python? We have one of the largest catalogs of Python video courses over at


01:03:16.880 --> 01:03:22.800
Talk Python. Our content ranges from true beginners to deeply advanced topics like memory and async.


01:03:22.800 --> 01:03:28.480
And best of all, there's not a subscription in sight. Check it out for yourself at training.talkpython.fm.


01:03:28.480 --> 01:03:33.120
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.


01:03:33.120 --> 01:03:37.360
we should be right at the top. You can also find the iTunes feed at /itunes,


01:03:37.360 --> 01:03:43.520
the Google Play feed at /play, and the Direct RSS feed at /rss on talkpython.fm.


01:03:43.520 --> 01:03:48.640
We're live streaming most of our recordings these days. If you want to be part of the show and have


01:03:48.640 --> 01:03:55.360
your comments featured on the air, be sure to subscribe to our YouTube channel at talkpython.fm/youtube.


01:03:55.360 --> 01:03:59.200
This is your host Michael Kennedy. Thanks so much for listening. I really appreciate it.


01:03:59.200 --> 01:04:02.080
Now get out there and write some Python code.


01:04:02.080 --> 01:04:19.080
[Music]


01:04:19.080 --> 01:04:21.660
(upbeat music)

