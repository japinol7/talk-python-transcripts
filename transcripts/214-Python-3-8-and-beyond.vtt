WEBVTT

00:00:00.001 --> 00:00:04.480
Python 3 is coming soon. It's scheduled for release at the end of October 2019,

00:00:04.480 --> 00:00:06.940
and you can already download test versions today.

00:00:06.940 --> 00:00:09.640
Given that Python ships on an 18-month cycle,

00:00:09.640 --> 00:00:12.860
it's time to talk about what's coming for us Python developers in the fall.

00:00:12.860 --> 00:00:16.260
On this episode, I meet up with Lucas Lenga and Anthony Shaw

00:00:16.260 --> 00:00:19.180
to chat about the highlights of this upcoming version of Python.

00:00:19.180 --> 00:00:24.020
Also, a quick show note, we recorded this on location in Cleveland at PyCon 2019.

00:00:24.020 --> 00:00:27.480
There may be a small amount of background noise, but I think you'll barely notice.

00:00:27.940 --> 00:00:32.920
This is Talk Python to Me, episode 214, recorded May 5th, 2019.

00:00:32.920 --> 00:00:49.620
Welcome to Talk Python to Me, a weekly podcast on Python,

00:00:49.620 --> 00:00:52.580
the language, the libraries, the ecosystem, and the personalities.

00:00:52.580 --> 00:00:56.660
This is your host, Michael Kennedy. Follow me on Twitter where I'm @mkennedy.

00:00:56.840 --> 00:01:00.400
Keep up with the show and listen to past episodes at talkpython.fm,

00:01:00.400 --> 00:01:02.840
and follow the show on Twitter via at Talk Python.

00:01:02.840 --> 00:01:05.620
This episode is brought to you by Microsoft.

00:01:05.620 --> 00:01:08.280
Be sure to check out what they're offering during their segments.

00:01:08.280 --> 00:01:09.780
It really helps support the show.

00:01:09.780 --> 00:01:13.360
Lucas, Anthony, welcome back to Talk Python, both of you guys.

00:01:13.360 --> 00:01:13.760
Hello.

00:01:13.760 --> 00:01:15.160
Hi, Michael. Good to be back.

00:01:15.160 --> 00:01:16.500
Yeah, it's great to have you back.

00:01:16.500 --> 00:01:20.380
We are not recording over Skype far distances,

00:01:20.380 --> 00:01:22.240
but in fact, we're right here at PyCon,

00:01:22.460 --> 00:01:24.720
and who knows how the audio for this is going to come out,

00:01:24.720 --> 00:01:26.620
but hopefully it'll sound good enough.

00:01:26.620 --> 00:01:29.680
But it's great to be here on site in Cleveland with both of you.

00:01:29.680 --> 00:01:32.580
It's a unique experience to actually see you doing the recording.

00:01:32.580 --> 00:01:34.200
Yeah, it's really good to be here in Cleveland.

00:01:34.200 --> 00:01:38.020
The sun has finally come out today after the third day of PyCon.

00:01:38.020 --> 00:01:41.960
The fog was pretty incredibly epic, and that was pretty special.

00:01:41.960 --> 00:01:45.380
And yeah, Lucas, the latency on this video call is incredible, man.

00:01:45.420 --> 00:01:46.600
It's so, it's lifelike.

00:01:46.600 --> 00:01:48.920
Yeah, so this video call is like 3D.

00:01:48.920 --> 00:01:49.800
It's amazing.

00:01:49.800 --> 00:01:50.460
Yeah, it's amazing.

00:01:50.460 --> 00:01:51.840
So thank you both for being here.

00:01:51.840 --> 00:01:54.380
We're going to talk about Python 3.8

00:01:54.380 --> 00:01:55.960
and maybe looking a little bit beyond that,

00:01:55.960 --> 00:01:58.280
some of the peps that are out there and all the cool stuff there.

00:01:58.280 --> 00:02:00.400
But, you know, let's just start with PyCon.

00:02:00.400 --> 00:02:01.920
Like, how's your experience this year?

00:02:01.920 --> 00:02:03.200
It felt a little different to me.

00:02:03.200 --> 00:02:05.060
I'll say why in a minute, but you go first.

00:02:05.060 --> 00:02:05.980
I'm Kosh Langa.

00:02:05.980 --> 00:02:10.120
I've been co-chairing the Language Summit this year with Mariata,

00:02:10.120 --> 00:02:12.340
and this is an absolutely new experience for me.

00:02:12.340 --> 00:02:16.160
So that was interesting, actually herding all the cats at the right time,

00:02:16.160 --> 00:02:19.060
to the right spots, you know, pre-selecting talks,

00:02:19.060 --> 00:02:22.980
actually making sure that everybody has the opportunity to speak,

00:02:22.980 --> 00:02:24.860
making sure that everybody is engaged.

00:02:24.860 --> 00:02:25.800
That was new.

00:02:25.800 --> 00:02:28.600
So I was very happy, like, you know, to have it over with, you know,

00:02:28.600 --> 00:02:29.440
after that day.

00:02:29.440 --> 00:02:33.120
I've heard it went pretty well, so I was happy about this.

00:02:33.120 --> 00:02:37.060
Like, the rest of PyCon was also rather intense so far for me.

00:02:37.060 --> 00:02:39.020
I've had a talk about Black,

00:02:39.240 --> 00:02:42.240
and then, like, an extended Q&A that I just performed

00:02:42.240 --> 00:02:44.580
during the poster session on Sunday morning.

00:02:44.580 --> 00:02:45.320
That's really awesome.

00:02:45.320 --> 00:02:47.260
You know, I feel like Black is one of these things

00:02:47.260 --> 00:02:48.760
that has just taken off.

00:02:48.760 --> 00:02:50.720
Like, I often ask people, you know,

00:02:50.720 --> 00:02:52.980
what module do they recommend or package

00:02:52.980 --> 00:02:55.140
or what is, like, special that they've seen,

00:02:55.140 --> 00:02:58.640
and it's way more than any other single answer is Black.

00:02:58.640 --> 00:02:59.340
That's awesome.

00:02:59.340 --> 00:02:59.800
Congratulations.

00:02:59.800 --> 00:03:00.700
Yeah, thank you.

00:03:00.880 --> 00:03:01.980
I'm very happy about it.

00:03:01.980 --> 00:03:04.620
In fact, I think there was at least five talks

00:03:04.620 --> 00:03:08.060
that mentioned, you know, using Black as a good thing in them.

00:03:08.060 --> 00:03:12.000
So it seems like, you know, we've solved an issue that people had.

00:03:12.000 --> 00:03:13.500
We've solved a problem that people had.

00:03:13.500 --> 00:03:14.660
Yeah, we've had these linters,

00:03:14.660 --> 00:03:16.880
and they tell us, well, you're doing wrong,

00:03:16.880 --> 00:03:19.040
and we're just like, can't you just fix it?

00:03:19.040 --> 00:03:20.380
Like, I don't want to be told what's wrong.

00:03:20.380 --> 00:03:21.280
I just want it to be better.

00:03:21.280 --> 00:03:24.420
Yeah, well, the difference between Black and other other formatters,

00:03:24.640 --> 00:03:27.460
of which we have a few in the Python community,

00:03:27.460 --> 00:03:30.460
is that, well, Black was kind of brave,

00:03:30.460 --> 00:03:32.080
obnoxious enough to tell you, like,

00:03:32.080 --> 00:03:34.680
that it's going to just be, you know, done in one way.

00:03:34.680 --> 00:03:35.900
It's not really configurable.

00:03:35.900 --> 00:03:38.740
But that kind of changes it to a workflow tool,

00:03:38.740 --> 00:03:40.440
where if you decide to use the tool,

00:03:40.440 --> 00:03:43.740
like, now the question of auto-formatting sort of disappears.

00:03:43.740 --> 00:03:45.340
The question of how to format your code

00:03:45.340 --> 00:03:46.940
is no longer a problem

00:03:46.940 --> 00:03:49.820
when you're developing your own projects.

00:03:49.820 --> 00:03:51.120
Yeah, and if you're on a team,

00:03:51.120 --> 00:03:53.000
you don't have to have this debate anymore

00:03:53.000 --> 00:03:54.100
of how we do stuff, right?

00:03:54.100 --> 00:03:55.480
You just run Black, and that's how you do it.

00:03:55.480 --> 00:03:55.820
Absolutely.

00:03:55.820 --> 00:03:56.320
Awesome.

00:03:56.320 --> 00:03:57.980
Okay, Anthony, how's your PyCon going?

00:03:57.980 --> 00:03:59.780
Like, what do you notice this year that's special?

00:03:59.780 --> 00:04:03.040
Yeah, this is the first PyCon I've actually given a talk.

00:04:03.040 --> 00:04:04.900
So that was definitely a milestone for me.

00:04:04.900 --> 00:04:05.740
Yeah, what was the talk?

00:04:05.740 --> 00:04:06.940
It was on code complexity,

00:04:06.940 --> 00:04:08.200
and I talked about Y-Day,

00:04:08.200 --> 00:04:10.260
which is a project I've been working on,

00:04:10.260 --> 00:04:12.460
and the principles of code complexity

00:04:12.460 --> 00:04:14.040
and why complexity is bad.

00:04:14.040 --> 00:04:16.300
So how awesome cyclomatic complexity is?

00:04:16.300 --> 00:04:17.840
I actually talk about how it's inevitable,

00:04:17.840 --> 00:04:19.320
the more users you have,

00:04:19.320 --> 00:04:20.940
to have more cyclomatic complexity.

00:04:20.940 --> 00:04:22.860
People ask me how the talk went,

00:04:22.960 --> 00:04:24.360
and my response so far has been,

00:04:24.360 --> 00:04:25.240
I don't remember,

00:04:25.240 --> 00:04:27.600
because I was so nervous

00:04:27.600 --> 00:04:31.140
that it was just a sort of adrenaline-fueled dream.

00:04:31.140 --> 00:04:32.760
So that was, yeah, really cool.

00:04:32.760 --> 00:04:35.980
And then yesterday, there was mentored sprints.

00:04:35.980 --> 00:04:36.680
That's new, right?

00:04:36.800 --> 00:04:38.140
Which is a new thing this year,

00:04:38.140 --> 00:04:40.220
and that's probably the highlight, actually,

00:04:40.220 --> 00:04:41.700
for PyCon so far,

00:04:41.700 --> 00:04:44.500
is actually just being in there and mentoring people

00:04:44.500 --> 00:04:47.080
to contribute to different projects

00:04:47.080 --> 00:04:49.020
and working with someone who ended up

00:04:49.020 --> 00:04:51.420
being able to send a pull request through to CPython

00:04:51.420 --> 00:04:52.980
by the end of the day,

00:04:52.980 --> 00:04:55.320
and I think it was their first one,

00:04:55.320 --> 00:04:55.900
which is awesome.

00:04:55.900 --> 00:04:56.880
Yeah, that's super cool.

00:04:56.880 --> 00:05:00.680
That's got to help adoption and contributions, right?

00:05:00.740 --> 00:05:02.460
Because even me personally,

00:05:02.460 --> 00:05:03.000
I think about,

00:05:03.000 --> 00:05:04.220
okay, well, I'd love to do something,

00:05:04.220 --> 00:05:07.400
but I really don't even know how to get started,

00:05:07.400 --> 00:05:08.260
how to build it,

00:05:08.260 --> 00:05:11.060
what the right rules or expectations are.

00:05:11.060 --> 00:05:12.140
Like, it's a lot of work.

00:05:12.140 --> 00:05:13.800
And if somebody can sit down who's done that

00:05:13.800 --> 00:05:15.180
or is at least knowledgeable about that

00:05:15.180 --> 00:05:15.840
and walks you through it,

00:05:15.900 --> 00:05:18.260
like the second time onward

00:05:18.260 --> 00:05:20.400
is much more likely to be smooth.

00:05:20.400 --> 00:05:22.720
Yeah, and it was a proper amount of time allocated as well.

00:05:22.720 --> 00:05:24.880
It was, I think it was just over four hours

00:05:24.880 --> 00:05:26.720
on the second day in the afternoon.

00:05:26.720 --> 00:05:29.180
So it's good enough time to actually sit

00:05:29.180 --> 00:05:32.960
and work on a proper issue or a proper feature

00:05:32.960 --> 00:05:34.800
and actually work through it from start to finish.

00:05:34.800 --> 00:05:36.800
Yeah, you actually got a PR in place,

00:05:36.800 --> 00:05:38.100
not just started or whatever, right?

00:05:38.100 --> 00:05:38.620
Yeah, exactly.

00:05:38.620 --> 00:05:39.700
Yeah, that's awesome.

00:05:39.700 --> 00:05:43.060
To me, it felt like when I walked into the expo hall

00:05:43.060 --> 00:05:45.240
that the booths were a little bit bigger,

00:05:45.740 --> 00:05:46.840
there were a little bit more people.

00:05:46.840 --> 00:05:48.380
It just seemed like a little bit,

00:05:48.380 --> 00:05:50.320
I don't know, there are a little more people,

00:05:50.320 --> 00:05:51.920
a little more energy even than last year.

00:05:51.920 --> 00:05:52.740
And last year was amazing.

00:05:52.740 --> 00:05:53.900
I don't know, did you have this feeling?

00:05:53.900 --> 00:05:55.360
Yeah, I was particularly impressed

00:05:55.360 --> 00:05:59.780
with the portrait of Guido at the Capital One booth,

00:05:59.780 --> 00:06:01.220
which you've got to see online

00:06:01.220 --> 00:06:02.660
if you haven't seen a picture of it already.

00:06:02.660 --> 00:06:04.380
Yeah, their booth was really artistic.

00:06:04.380 --> 00:06:05.040
It was pretty cool.

00:06:05.040 --> 00:06:05.500
Nice.

00:06:05.500 --> 00:06:08.380
All right, so it's great to be here at PyCon,

00:06:08.380 --> 00:06:10.960
but let's talk about the future.

00:06:10.960 --> 00:06:15.260
Let's start with the idea of when is Python 3.8

00:06:15.260 --> 00:06:16.180
going to be out?

00:06:16.180 --> 00:06:17.860
How precisely do we know that?

00:06:17.860 --> 00:06:19.680
And Lucas, maybe just say a little bit about,

00:06:19.680 --> 00:06:22.700
like, you're mostly in control of this

00:06:22.700 --> 00:06:23.720
at the moment, right?

00:06:23.720 --> 00:06:25.300
Like the release schedule and management

00:06:25.300 --> 00:06:25.960
and whatnot, right?

00:06:25.960 --> 00:06:28.440
Currently, I'm serving as the release manager

00:06:28.440 --> 00:06:29.720
of Python 3.8.

00:06:29.720 --> 00:06:32.880
And I wrote the schedule for where things are going to go.

00:06:32.880 --> 00:06:34.620
Traditionally, Python has been released

00:06:34.620 --> 00:06:35.500
every 18 months,

00:06:35.500 --> 00:06:38.700
which puts Python 3.8 at the end of this year.

00:06:39.040 --> 00:06:41.200
You know, in particular, like, you know,

00:06:41.200 --> 00:06:44.200
give or take, it should be the end of October.

00:06:44.200 --> 00:06:46.500
The reason why I'm not saying a particular date,

00:06:46.500 --> 00:06:47.920
even though it is in the pep,

00:06:47.920 --> 00:06:50.380
is that those things tend to be a bit fluid.

00:06:50.380 --> 00:06:53.820
Like, in the past three alphas that I released,

00:06:53.820 --> 00:06:56.600
like, we've been a day early or a day late

00:06:56.600 --> 00:06:57.980
pretty much every time.

00:06:57.980 --> 00:06:59.240
Yeah, would you be willing to, like,

00:06:59.240 --> 00:07:01.900
hold up a release if there's some important feature

00:07:01.900 --> 00:07:03.060
that's two days away?

00:07:03.180 --> 00:07:04.700
In fact, like, this time,

00:07:04.700 --> 00:07:07.060
there was a small issue,

00:07:07.060 --> 00:07:08.880
well, but small in size,

00:07:08.880 --> 00:07:10.400
but big in significance,

00:07:10.400 --> 00:07:12.360
that I held up Alpha 4

00:07:12.360 --> 00:07:15.140
that I had a bit of time for early in the week,

00:07:15.140 --> 00:07:18.720
which kind of makes me late for my own schedule now.

00:07:18.720 --> 00:07:20.940
And I have to release Alpha 4 tomorrow

00:07:20.940 --> 00:07:22.360
at the start of sprints.

00:07:22.360 --> 00:07:24.860
But those things are more important to get right

00:07:24.860 --> 00:07:26.400
than to get on time.

00:07:26.400 --> 00:07:28.040
And this is something.

00:07:28.040 --> 00:07:29.640
Yeah, especially when it's 18 months.

00:07:29.640 --> 00:07:31.200
If you were shipping monthly updates,

00:07:31.200 --> 00:07:32.860
like, whatever, just ship what you got, right?

00:07:32.900 --> 00:07:34.100
But if it's 18 months,

00:07:34.100 --> 00:07:35.760
that couple days,

00:07:35.760 --> 00:07:37.500
that means a big, big deal, right?

00:07:37.500 --> 00:07:38.800
This is exactly the point.

00:07:38.800 --> 00:07:41.600
We try to make the consecutive releases,

00:07:41.600 --> 00:07:43.020
even on the Alpha level,

00:07:43.020 --> 00:07:44.280
consecutively better

00:07:44.280 --> 00:07:46.220
and not introduce a breakage

00:07:46.220 --> 00:07:47.960
that is going to be later reverted

00:07:47.960 --> 00:07:49.720
since every release,

00:07:49.720 --> 00:07:50.620
including alphas,

00:07:50.620 --> 00:07:52.380
is being tested by our users.

00:07:52.380 --> 00:07:53.520
And we're happy to see,

00:07:53.520 --> 00:07:54.840
actually, Alpha releases

00:07:54.840 --> 00:07:56.640
being increasingly used

00:07:56.640 --> 00:07:57.600
by the community

00:07:57.600 --> 00:07:58.960
to test their own libraries

00:07:58.960 --> 00:07:59.820
and applications

00:07:59.820 --> 00:08:02.060
like that used to be our problem,

00:08:02.180 --> 00:08:04.680
that it was only after the beta releases.

00:08:04.680 --> 00:08:05.240
And in fact,

00:08:05.240 --> 00:08:06.240
RCs very often

00:08:06.240 --> 00:08:07.380
were the first releases

00:08:07.380 --> 00:08:08.740
that users would see.

00:08:08.740 --> 00:08:09.580
Nowadays,

00:08:09.580 --> 00:08:12.060
with like PyPI working better,

00:08:12.060 --> 00:08:14.120
where with CI options

00:08:14.120 --> 00:08:15.080
being out there,

00:08:15.080 --> 00:08:15.400
you know,

00:08:15.400 --> 00:08:17.240
for pretty much everybody,

00:08:17.240 --> 00:08:18.640
we see more adoption

00:08:18.640 --> 00:08:19.460
of Alpha releases,

00:08:19.460 --> 00:08:20.140
which is great.

00:08:20.140 --> 00:08:20.980
But that is also

00:08:20.980 --> 00:08:21.880
a bigger responsibility

00:08:21.880 --> 00:08:22.900
on the Alpha releases

00:08:22.900 --> 00:08:24.380
because you are no longer free

00:08:24.380 --> 00:08:25.860
to just make a breaking change

00:08:25.860 --> 00:08:27.100
and then later revert it.

00:08:27.100 --> 00:08:28.180
Well, it's Alpha anyway.

00:08:28.180 --> 00:08:29.220
Well, no, it isn't.

00:08:29.440 --> 00:08:30.380
You see what it was?

00:08:30.380 --> 00:08:30.820
It said Alpha.

00:08:30.820 --> 00:08:31.100
Yes.

00:08:31.100 --> 00:08:31.380
Come on.

00:08:31.380 --> 00:08:32.780
Now we would need to have

00:08:32.780 --> 00:08:33.820
feature toggles

00:08:33.820 --> 00:08:35.460
that look at the Alpha version

00:08:35.460 --> 00:08:36.220
to see whether

00:08:36.220 --> 00:08:38.060
a particular bug exists or not.

00:08:38.060 --> 00:08:39.060
And we don't want that.

00:08:39.060 --> 00:08:39.660
This might be

00:08:39.660 --> 00:08:41.000
a slightly political question,

00:08:41.000 --> 00:08:43.220
but have the releases

00:08:43.220 --> 00:08:45.060
of Python recently

00:08:45.060 --> 00:08:46.600
become more stable?

00:08:46.600 --> 00:08:47.660
Like, is it...

00:08:47.660 --> 00:08:48.460
It feels to me

00:08:48.460 --> 00:08:49.120
that like people

00:08:49.120 --> 00:08:51.500
have almost zero trepidation

00:08:51.500 --> 00:08:52.700
or worry about

00:08:52.700 --> 00:08:55.680
just adopting 3.7

00:08:55.680 --> 00:08:56.560
when they had 3.6

00:08:56.560 --> 00:08:57.120
or 3.6

00:08:57.120 --> 00:08:57.840
when they had 3.5

00:08:57.840 --> 00:08:58.260
these days?

00:08:58.260 --> 00:08:58.960
And it seemed like

00:08:58.960 --> 00:08:59.920
there was more concern

00:08:59.920 --> 00:09:00.900
about what's going to break

00:09:00.900 --> 00:09:01.820
when I go to the next,

00:09:01.820 --> 00:09:02.180
you know,

00:09:02.180 --> 00:09:03.360
semi-major version.

00:09:03.360 --> 00:09:04.240
Has that changed

00:09:04.240 --> 00:09:05.140
or is that like perception?

00:09:05.140 --> 00:09:06.340
For a number of years,

00:09:06.340 --> 00:09:07.240
the only version

00:09:07.240 --> 00:09:08.500
that people used

00:09:08.500 --> 00:09:09.360
was 2.7

00:09:09.360 --> 00:09:11.240
and that was for a long time.

00:09:11.240 --> 00:09:12.620
So it created

00:09:12.620 --> 00:09:13.800
this false perception

00:09:13.800 --> 00:09:14.700
that like Python

00:09:14.700 --> 00:09:15.480
is infallible,

00:09:15.480 --> 00:09:17.100
that every particular

00:09:17.100 --> 00:09:18.120
update of it

00:09:18.120 --> 00:09:19.340
like never introduces

00:09:19.340 --> 00:09:20.340
issues that

00:09:20.340 --> 00:09:21.400
were not there before.

00:09:21.400 --> 00:09:22.040
Because they were

00:09:22.040 --> 00:09:22.860
just minor fixes

00:09:22.860 --> 00:09:23.360
on a thing

00:09:23.360 --> 00:09:24.280
that wasn't changing, right?

00:09:24.440 --> 00:09:25.340
That was good,

00:09:25.340 --> 00:09:26.200
you know,

00:09:26.200 --> 00:09:26.820
at the same time

00:09:26.820 --> 00:09:27.260
a blessing

00:09:27.260 --> 00:09:28.300
and a curse

00:09:28.300 --> 00:09:30.560
since every particular

00:09:30.560 --> 00:09:31.800
version of Python,

00:09:31.800 --> 00:09:32.600
like including

00:09:32.600 --> 00:09:33.620
Python 2.4

00:09:33.620 --> 00:09:34.700
to Python 2.5,

00:09:34.700 --> 00:09:35.540
Python 2.5

00:09:35.540 --> 00:09:36.600
to Python 2.6,

00:09:36.600 --> 00:09:38.180
did introduce

00:09:38.180 --> 00:09:39.140
internal changes

00:09:39.140 --> 00:09:40.520
that made

00:09:40.520 --> 00:09:41.940
large projects

00:09:41.940 --> 00:09:43.440
actually complex

00:09:43.440 --> 00:09:44.200
to migrate.

00:09:44.200 --> 00:09:45.440
The biggest example

00:09:45.440 --> 00:09:46.660
from the Python 2 world

00:09:46.660 --> 00:09:47.880
where it was when

00:09:47.880 --> 00:09:49.340
Python 2.5

00:09:49.340 --> 00:09:50.080
was released.

00:09:50.080 --> 00:09:51.740
Zope at the time

00:09:51.740 --> 00:09:52.780
created like

00:09:52.780 --> 00:09:53.680
such a problem

00:09:53.680 --> 00:09:54.340
for itself

00:09:54.340 --> 00:09:55.060
that it took

00:09:55.060 --> 00:09:55.980
them enough time

00:09:55.980 --> 00:09:57.320
that they migrated

00:09:57.320 --> 00:09:58.640
to Python 2.6

00:09:58.640 --> 00:09:59.280
directly.

00:09:59.280 --> 00:10:00.700
So the previous

00:10:00.700 --> 00:10:02.080
version worked

00:10:02.080 --> 00:10:03.180
on Python 2.4

00:10:03.180 --> 00:10:04.260
whereas the next

00:10:04.260 --> 00:10:04.960
one directly

00:10:04.960 --> 00:10:06.080
on Python 2.6

00:10:06.080 --> 00:10:06.980
they did not migrate

00:10:06.980 --> 00:10:07.180
in time for 2.5.

00:10:07.180 --> 00:10:07.760
Right, it took so long

00:10:07.760 --> 00:10:08.160
to migrate.

00:10:08.160 --> 00:10:08.480
They're like,

00:10:08.480 --> 00:10:09.140
let's just aim

00:10:09.140 --> 00:10:09.940
for the next one, huh?

00:10:09.940 --> 00:10:11.340
So like this is all

00:10:11.340 --> 00:10:12.380
just like a long,

00:10:12.380 --> 00:10:13.160
long introduction

00:10:13.160 --> 00:10:14.240
to just, you know,

00:10:14.240 --> 00:10:14.960
let you know

00:10:14.960 --> 00:10:15.880
that in Python 3

00:10:15.880 --> 00:10:17.400
there are also changes.

00:10:17.400 --> 00:10:19.120
Many of those changes

00:10:19.120 --> 00:10:20.180
are deliberate, right?

00:10:20.220 --> 00:10:20.940
we are changing

00:10:20.940 --> 00:10:22.100
how the internal

00:10:22.100 --> 00:10:23.200
memory representation

00:10:23.200 --> 00:10:24.840
of objects looks like.

00:10:24.840 --> 00:10:25.980
We are introducing

00:10:25.980 --> 00:10:26.700
and removing

00:10:26.700 --> 00:10:28.040
byte codes.

00:10:28.040 --> 00:10:29.600
We can change

00:10:29.600 --> 00:10:30.640
how modules

00:10:30.640 --> 00:10:31.640
get initialized.

00:10:31.640 --> 00:10:32.220
You know,

00:10:32.220 --> 00:10:33.700
there's multiple things

00:10:33.700 --> 00:10:34.700
that might break

00:10:34.700 --> 00:10:35.920
real applications

00:10:35.920 --> 00:10:37.460
but they're breaking

00:10:37.460 --> 00:10:38.280
them in ways

00:10:38.280 --> 00:10:39.800
where it is impossible

00:10:39.800 --> 00:10:41.300
for us to guarantee

00:10:41.300 --> 00:10:42.640
eternal compatibility

00:10:42.640 --> 00:10:43.620
with those things.

00:10:43.620 --> 00:10:44.340
Sure, but this

00:10:44.340 --> 00:10:45.280
greater adoption

00:10:45.280 --> 00:10:46.340
of alpha versions

00:10:46.340 --> 00:10:46.900
and testing

00:10:46.900 --> 00:10:47.300
and CI

00:10:47.300 --> 00:10:48.580
probably doesn't hurt, right?

00:10:48.640 --> 00:10:50.440
some kind of crashers, right?

00:10:50.440 --> 00:10:52.000
Downright bugs

00:10:52.000 --> 00:10:52.600
and whatnot.

00:10:52.600 --> 00:10:54.160
Like that I feel

00:10:54.160 --> 00:10:55.200
like we are doing

00:10:55.200 --> 00:10:55.820
a better job

00:10:55.820 --> 00:10:56.620
these days with.

00:10:56.620 --> 00:10:58.120
Also just because

00:10:58.120 --> 00:10:59.060
Python 3

00:10:59.060 --> 00:11:00.440
finally gets

00:11:00.440 --> 00:11:01.540
enough adoption

00:11:01.540 --> 00:11:03.120
that those versions

00:11:03.120 --> 00:11:03.840
get vetted

00:11:03.840 --> 00:11:04.700
much better.

00:11:04.700 --> 00:11:05.360
Right, absolutely.

00:11:05.360 --> 00:11:06.160
When I started

00:11:06.160 --> 00:11:06.660
contributing

00:11:06.660 --> 00:11:07.800
we were just working

00:11:07.800 --> 00:11:09.160
on Python 3.2.

00:11:09.160 --> 00:11:10.420
So for a number of years

00:11:10.420 --> 00:11:11.460
like almost none

00:11:11.460 --> 00:11:11.900
of the things

00:11:11.900 --> 00:11:12.500
I worked on

00:11:12.500 --> 00:11:13.160
were actually

00:11:13.160 --> 00:11:14.520
very heavily used

00:11:14.520 --> 00:11:15.300
in the industry.

00:11:15.300 --> 00:11:16.420
Like nowadays

00:11:16.420 --> 00:11:17.100
the situation

00:11:17.100 --> 00:11:18.100
is different, right?

00:11:18.100 --> 00:11:18.900
So fortunately

00:11:18.900 --> 00:11:20.160
it's the time

00:11:20.160 --> 00:11:21.020
between a change

00:11:21.020 --> 00:11:21.940
and actually having

00:11:21.940 --> 00:11:23.220
real users

00:11:23.220 --> 00:11:24.160
report on it

00:11:24.160 --> 00:11:25.340
is way shorter

00:11:25.340 --> 00:11:26.100
which makes

00:11:26.100 --> 00:11:27.200
the QLT just better.

00:11:27.200 --> 00:11:27.880
Yeah, that's awesome.

00:11:27.880 --> 00:11:29.440
Anthony, let me ask you

00:11:29.440 --> 00:11:30.620
what your perception

00:11:30.620 --> 00:11:31.200
of that's like

00:11:31.200 --> 00:11:31.780
and you work

00:11:31.780 --> 00:11:32.480
for a pretty major

00:11:32.480 --> 00:11:33.280
company that probably

00:11:33.280 --> 00:11:34.460
has like stability

00:11:34.460 --> 00:11:35.280
in mind and stuff.

00:11:35.280 --> 00:11:35.780
Like what's

00:11:35.780 --> 00:11:36.900
your perspective

00:11:36.900 --> 00:11:37.500
and what are you seeing

00:11:37.500 --> 00:11:38.660
at like Dimension Data

00:11:38.660 --> 00:11:39.400
and places like that?

00:11:39.400 --> 00:11:40.100
It's definitely

00:11:40.100 --> 00:11:40.800
become easier

00:11:40.800 --> 00:11:41.860
for people to install

00:11:41.860 --> 00:11:42.940
newer versions of Python

00:11:42.940 --> 00:11:43.980
which is really helping.

00:11:43.980 --> 00:11:45.280
So in terms of

00:11:45.280 --> 00:11:46.820
I guess moving towards

00:11:46.820 --> 00:11:47.560
things running

00:11:47.560 --> 00:11:48.460
as microservices

00:11:48.460 --> 00:11:49.080
on Docker

00:11:49.080 --> 00:11:49.660
for example

00:11:49.660 --> 00:11:51.020
there's this

00:11:51.020 --> 00:11:52.680
it's not a single system

00:11:52.680 --> 00:11:54.200
running a specific version

00:11:54.200 --> 00:11:54.980
that's got to support

00:11:54.980 --> 00:11:56.060
all these different applications.

00:11:56.060 --> 00:11:56.560
Right, it's not

00:11:56.560 --> 00:11:57.380
cross your fingers

00:11:57.380 --> 00:11:58.380
or upgrading the server.

00:11:58.380 --> 00:11:59.200
Yeah, we're not running

00:11:59.200 --> 00:12:00.240
on the mainframe anymore

00:12:00.240 --> 00:12:01.360
so I think that

00:12:01.360 --> 00:12:02.480
that's really helping

00:12:02.480 --> 00:12:03.220
in terms of

00:12:03.220 --> 00:12:04.480
there's more automation

00:12:04.480 --> 00:12:06.060
for systems deployment

00:12:06.060 --> 00:12:07.600
and there's a lot more

00:12:07.600 --> 00:12:08.740
tooling being used

00:12:08.740 --> 00:12:09.380
to automate

00:12:09.380 --> 00:12:10.720
like the building

00:12:10.720 --> 00:12:11.600
of new environments.

00:12:11.600 --> 00:12:12.860
There's this kind of

00:12:12.860 --> 00:12:13.860
idea of immutable

00:12:13.860 --> 00:12:15.380
infrastructure now

00:12:15.380 --> 00:12:16.420
where you basically

00:12:16.420 --> 00:12:18.020
create compute infrastructure

00:12:18.020 --> 00:12:18.660
in the cloud

00:12:18.660 --> 00:12:19.680
and you build it

00:12:19.680 --> 00:12:20.640
on a specific version.

00:12:20.640 --> 00:12:21.760
You don't change it

00:12:21.760 --> 00:12:22.220
right, ever.

00:12:22.220 --> 00:12:23.440
Yeah, so I think

00:12:23.440 --> 00:12:24.780
that has actually

00:12:24.780 --> 00:12:25.600
made it easier

00:12:25.600 --> 00:12:27.260
to move to newer versions

00:12:27.260 --> 00:12:28.680
because you can just

00:12:28.680 --> 00:12:29.680
spin up new infrastructure

00:12:29.680 --> 00:12:31.020
with the new version

00:12:31.020 --> 00:12:32.480
test how it works

00:12:32.480 --> 00:12:33.400
and you can inspect

00:12:33.400 --> 00:12:33.920
it properly

00:12:33.920 --> 00:12:35.020
whereas like

00:12:35.020 --> 00:12:35.860
10 years ago

00:12:35.860 --> 00:12:36.780
you were talking about

00:12:36.780 --> 00:12:37.640
we need to go and buy

00:12:37.640 --> 00:12:38.300
a million dollars

00:12:38.300 --> 00:12:38.780
of hardware

00:12:38.780 --> 00:12:40.200
to build an identical

00:12:40.200 --> 00:12:40.780
environment

00:12:40.780 --> 00:12:42.360
to see if this new

00:12:42.360 --> 00:12:42.880
version is going

00:12:42.880 --> 00:12:43.540
to work for us.

00:12:43.540 --> 00:12:44.060
Right, and maybe

00:12:44.060 --> 00:12:44.800
you have like

00:12:44.800 --> 00:12:45.940
downtime the whole weekend

00:12:45.940 --> 00:12:47.300
the team stays all night

00:12:47.300 --> 00:12:48.420
and they do the testing

00:12:48.420 --> 00:12:49.200
and the rollout

00:12:49.200 --> 00:12:50.100
and you know

00:12:50.100 --> 00:12:50.460
these days

00:12:50.460 --> 00:12:51.220
when I go to websites

00:12:51.220 --> 00:12:51.820
and I see

00:12:51.820 --> 00:12:53.560
we're down for maintenance

00:12:53.560 --> 00:12:54.380
or we have even

00:12:54.380 --> 00:12:55.500
like we have scheduled

00:12:55.500 --> 00:12:56.340
maintenance over this

00:12:56.340 --> 00:12:57.480
like two to four hour

00:12:57.480 --> 00:12:57.740
window

00:12:57.740 --> 00:12:58.060
I'm just like

00:12:58.060 --> 00:12:59.160
what are they doing?

00:12:59.160 --> 00:13:00.360
Like what possibly

00:13:00.360 --> 00:13:00.980
could take

00:13:00.980 --> 00:13:02.580
four hours

00:13:02.580 --> 00:13:03.360
to upgrade?

00:13:03.360 --> 00:13:03.700
Like

00:13:03.700 --> 00:13:05.080
I understand

00:13:05.080 --> 00:13:06.100
maybe there's like

00:13:06.100 --> 00:13:06.600
a migration

00:13:06.600 --> 00:13:07.060
and you're down

00:13:07.060 --> 00:13:07.920
for a few moments

00:13:07.920 --> 00:13:08.840
but four hours

00:13:08.840 --> 00:13:09.420
it doesn't take

00:13:09.420 --> 00:13:09.740
anyway

00:13:09.740 --> 00:13:10.260
it just seems

00:13:10.260 --> 00:13:10.700
pretty wild

00:13:10.700 --> 00:13:11.320
when you see it

00:13:11.320 --> 00:13:11.800
but that used

00:13:11.800 --> 00:13:12.220
to be common

00:13:12.220 --> 00:13:12.440
right?

00:13:12.440 --> 00:13:13.120
So I guess

00:13:13.120 --> 00:13:13.500
yeah

00:13:13.500 --> 00:13:13.980
so it doesn't

00:13:13.980 --> 00:13:14.600
matter as much

00:13:14.600 --> 00:13:15.240
Yeah, it still

00:13:15.240 --> 00:13:16.040
matters for some

00:13:16.040 --> 00:13:17.260
really big applications

00:13:17.260 --> 00:13:18.100
I know some of the

00:13:18.100 --> 00:13:19.020
biggest software vendors

00:13:19.020 --> 00:13:20.500
still have four hour

00:13:20.500 --> 00:13:21.600
maintenance windows

00:13:21.600 --> 00:13:22.260
every Saturday

00:13:22.260 --> 00:13:23.620
we definitely have to

00:13:23.620 --> 00:13:24.160
live through some

00:13:24.160 --> 00:13:24.600
of that pain

00:13:24.600 --> 00:13:25.100
at the moment

00:13:25.100 --> 00:13:26.320
but more and more

00:13:26.320 --> 00:13:26.900
I think people

00:13:26.900 --> 00:13:27.680
are using this

00:13:27.680 --> 00:13:28.380
sort of

00:13:28.380 --> 00:13:29.680
automated deployment

00:13:29.680 --> 00:13:30.340
and automated

00:13:30.340 --> 00:13:30.840
infrastructure

00:13:30.840 --> 00:13:31.860
which is making

00:13:31.860 --> 00:13:32.500
it a lot easier

00:13:32.500 --> 00:13:33.120
to upgrade

00:13:33.120 --> 00:13:33.640
That's awesome

00:13:33.640 --> 00:13:35.180
What about the

00:13:35.180 --> 00:13:35.760
beta version

00:13:35.760 --> 00:13:36.440
or the alpha

00:13:36.440 --> 00:13:37.160
version even

00:13:37.160 --> 00:13:38.300
of 3.8

00:13:38.300 --> 00:13:39.160
you guys said

00:13:39.160 --> 00:13:40.680
late October

00:13:40.680 --> 00:13:41.600
for

00:13:41.600 --> 00:13:42.720
The main release

00:13:42.720 --> 00:13:43.420
for the main release

00:13:43.420 --> 00:13:44.960
but we work that back

00:13:44.960 --> 00:13:45.820
like when will we see

00:13:45.820 --> 00:13:46.540
stuff that we can start

00:13:46.540 --> 00:13:46.940
playing with

00:13:46.940 --> 00:13:47.560
can we already

00:13:47.560 --> 00:13:48.720
I know Anthony

00:13:48.720 --> 00:13:49.900
like get it and build

00:13:49.900 --> 00:13:50.980
from source a lot

00:13:50.980 --> 00:13:51.780
and play with it

00:13:51.780 --> 00:13:53.120
and you guys do as well

00:13:53.120 --> 00:13:54.020
but you know

00:13:54.020 --> 00:13:55.060
when does the average

00:13:55.060 --> 00:13:55.760
person who just wants

00:13:55.760 --> 00:13:57.180
to install a beta

00:13:57.180 --> 00:13:58.060
or something like that

00:13:58.060 --> 00:13:59.240
get access to it?

00:13:59.340 --> 00:14:00.400
Any alpha release

00:14:00.400 --> 00:14:02.060
is released in both

00:14:02.060 --> 00:14:03.380
the form of sources

00:14:03.380 --> 00:14:04.720
that you can freely build

00:14:04.720 --> 00:14:05.940
if you're cloning

00:14:05.940 --> 00:14:06.680
the repository

00:14:06.680 --> 00:14:07.780
from GitHub

00:14:07.780 --> 00:14:09.040
there's tags

00:14:09.040 --> 00:14:09.740
that tell you

00:14:09.740 --> 00:14:10.540
exactly when

00:14:10.540 --> 00:14:11.620
a particular release

00:14:11.620 --> 00:14:12.260
was made

00:14:12.260 --> 00:14:13.580
but also for

00:14:13.580 --> 00:14:14.820
alphas, betas

00:14:14.820 --> 00:14:15.840
and later

00:14:15.840 --> 00:14:16.620
release candidates

00:14:16.620 --> 00:14:17.780
and actual versions

00:14:17.780 --> 00:14:18.680
that we release

00:14:18.680 --> 00:14:19.760
we do have binaries

00:14:19.760 --> 00:14:20.040
right

00:14:20.040 --> 00:14:20.700
so for both

00:14:20.700 --> 00:14:21.920
macOS and

00:14:21.920 --> 00:14:22.440
Windows

00:14:22.440 --> 00:14:23.420
we have plenty

00:14:23.420 --> 00:14:24.300
of binaries

00:14:24.300 --> 00:14:24.980
that you can use

00:14:24.980 --> 00:14:25.520
to test out

00:14:25.520 --> 00:14:26.040
your software

00:14:26.040 --> 00:14:27.160
I would advise

00:14:27.160 --> 00:14:27.680
to do it

00:14:27.680 --> 00:14:28.260
like as early

00:14:28.260 --> 00:14:28.860
as possible

00:14:28.860 --> 00:14:29.760
like especially

00:14:29.760 --> 00:14:31.300
3.8 was

00:14:31.300 --> 00:14:32.700
kind of like

00:14:32.700 --> 00:14:34.120
a shy release

00:14:34.120 --> 00:14:34.420
right

00:14:34.420 --> 00:14:35.040
because we had

00:14:35.040 --> 00:14:35.540
the whole

00:14:35.540 --> 00:14:37.280
governance thing

00:14:37.280 --> 00:14:38.040
all the major

00:14:38.040 --> 00:14:38.600
changes were

00:14:38.600 --> 00:14:39.420
sort of put

00:14:39.420 --> 00:14:40.560
on hold

00:14:40.560 --> 00:14:40.740
right

00:14:40.740 --> 00:14:41.140
so now

00:14:41.140 --> 00:14:41.940
we are

00:14:41.940 --> 00:14:43.380
just four weeks

00:14:43.380 --> 00:14:44.320
before the first

00:14:44.320 --> 00:14:44.600
beta

00:14:44.600 --> 00:14:45.200
which is the

00:14:45.200 --> 00:14:45.980
feature freeze

00:14:45.980 --> 00:14:46.400
for us

00:14:46.400 --> 00:14:46.680
right

00:14:46.680 --> 00:14:48.180
since beta 1

00:14:48.180 --> 00:14:49.260
to the main

00:14:49.260 --> 00:14:50.580
3.8.0 release

00:14:50.580 --> 00:14:51.340
we are just

00:14:51.340 --> 00:14:52.160
fixing bugs

00:14:52.160 --> 00:14:53.560
in some

00:14:53.560 --> 00:14:54.600
unlikely cases

00:14:54.600 --> 00:14:55.200
maybe even

00:14:55.200 --> 00:14:55.680
reverting

00:14:55.680 --> 00:14:56.040
features

00:14:56.040 --> 00:14:56.340
that we

00:14:56.340 --> 00:14:56.860
identified

00:14:56.860 --> 00:14:57.340
are not

00:14:57.340 --> 00:14:57.760
ready for

00:14:57.760 --> 00:14:58.320
prime time

00:14:58.320 --> 00:14:59.340
unlikely to

00:14:59.340 --> 00:14:59.620
happen

00:14:59.620 --> 00:14:59.940
like what

00:14:59.940 --> 00:15:00.260
is more

00:15:00.260 --> 00:15:00.640
likely to

00:15:00.640 --> 00:15:00.840
happen

00:15:00.840 --> 00:15:01.140
is like

00:15:01.140 --> 00:15:01.500
this is

00:15:01.500 --> 00:15:01.960
the time

00:15:01.960 --> 00:15:02.700
where you

00:15:02.700 --> 00:15:03.340
know that

00:15:03.340 --> 00:15:04.100
breaking

00:15:04.100 --> 00:15:04.580
changes

00:15:04.580 --> 00:15:06.000
are no longer

00:15:06.000 --> 00:15:06.660
being you know

00:15:06.660 --> 00:15:07.160
new breaking

00:15:07.160 --> 00:15:07.680
changes are no

00:15:07.680 --> 00:15:08.240
longer being

00:15:08.240 --> 00:15:08.700
accepted

00:15:08.700 --> 00:15:09.760
so it's a

00:15:09.760 --> 00:15:10.240
great time

00:15:10.240 --> 00:15:10.740
to actually

00:15:10.740 --> 00:15:11.100
you know

00:15:11.100 --> 00:15:11.700
start using

00:15:11.700 --> 00:15:12.200
your CI

00:15:12.200 --> 00:15:12.940
to test

00:15:12.940 --> 00:15:13.580
your libraries

00:15:13.580 --> 00:15:14.280
your applications

00:15:14.280 --> 00:15:15.740
on Python 3.8

00:15:15.740 --> 00:15:16.180
as well

00:15:16.180 --> 00:15:17.720
expect problems

00:15:17.720 --> 00:15:18.760
there's things

00:15:18.760 --> 00:15:19.280
that we have

00:15:19.280 --> 00:15:20.180
not identified

00:15:20.180 --> 00:15:20.920
even though

00:15:20.920 --> 00:15:21.620
we have our

00:15:21.620 --> 00:15:22.280
other extensive

00:15:22.280 --> 00:15:23.180
regression suite

00:15:23.180 --> 00:15:23.980
of tests

00:15:23.980 --> 00:15:25.040
but it's great

00:15:25.040 --> 00:15:25.560
like to be

00:15:25.560 --> 00:15:25.960
able to

00:15:25.960 --> 00:15:26.360
identify

00:15:26.360 --> 00:15:26.840
those things

00:15:26.840 --> 00:15:27.220
early

00:15:27.220 --> 00:15:27.900
so by the

00:15:27.900 --> 00:15:28.260
time the

00:15:28.260 --> 00:15:28.880
distributors

00:15:28.880 --> 00:15:29.440
come in

00:15:29.440 --> 00:15:30.120
and package

00:15:30.120 --> 00:15:31.200
Python 3.8

00:15:31.200 --> 00:15:32.100
its quality

00:15:32.100 --> 00:15:32.660
is good

00:15:32.660 --> 00:15:33.160
and you know

00:15:33.160 --> 00:15:33.860
we're transparent

00:15:33.860 --> 00:15:34.720
we just can run

00:15:34.720 --> 00:15:35.300
your application

00:15:35.300 --> 00:15:36.380
with minimal

00:15:36.380 --> 00:15:36.940
churn

00:15:36.940 --> 00:15:37.760
that's pretty cool

00:15:37.760 --> 00:15:38.520
can you test it

00:15:38.520 --> 00:15:38.960
with talks

00:15:38.960 --> 00:15:39.360
or like

00:15:39.360 --> 00:15:40.060
what's the best

00:15:40.060 --> 00:15:40.620
way to sort

00:15:40.620 --> 00:15:41.480
of test on

00:15:41.480 --> 00:15:42.280
3.7 and

00:15:42.280 --> 00:15:43.060
3.8 beta

00:15:43.060 --> 00:15:43.580
or whatever

00:15:43.580 --> 00:15:44.240
there's many

00:15:44.240 --> 00:15:44.840
possible ways

00:15:44.840 --> 00:15:45.660
depending on

00:15:45.660 --> 00:15:46.640
what particular

00:15:46.640 --> 00:15:47.640
operating system

00:15:47.640 --> 00:15:48.200
you're using

00:15:48.200 --> 00:15:49.220
for open source

00:15:49.220 --> 00:15:49.660
projects

00:15:49.660 --> 00:15:50.520
that are already

00:15:50.520 --> 00:15:51.360
using a CA

00:15:51.360 --> 00:15:52.400
system like

00:15:52.400 --> 00:15:52.920
Travis

00:15:52.920 --> 00:15:53.760
there are

00:15:53.760 --> 00:15:54.860
ways to just

00:15:54.860 --> 00:15:55.920
utilize the latest

00:15:55.920 --> 00:15:56.840
development version

00:15:56.840 --> 00:15:57.440
of Python

00:15:57.440 --> 00:15:58.600
and at the

00:15:58.600 --> 00:15:59.080
moment it's

00:15:59.080 --> 00:15:59.640
3.8

00:15:59.640 --> 00:16:00.480
so just by

00:16:00.480 --> 00:16:01.020
just saying

00:16:01.020 --> 00:16:01.400
that you

00:16:01.400 --> 00:16:02.440
would also

00:16:02.440 --> 00:16:03.040
like to run

00:16:03.040 --> 00:16:03.460
your tests

00:16:03.460 --> 00:16:03.940
on the

00:16:03.940 --> 00:16:04.240
development

00:16:04.240 --> 00:16:04.760
version of

00:16:04.760 --> 00:16:05.080
Python

00:16:05.080 --> 00:16:05.820
you're gonna

00:16:05.820 --> 00:16:06.420
get beta

00:16:06.420 --> 00:16:07.080
version like

00:16:07.080 --> 00:16:07.640
in a month

00:16:07.640 --> 00:16:08.100
that currently

00:16:08.100 --> 00:16:08.600
is gonna be

00:16:08.600 --> 00:16:09.100
a form of

00:16:09.100 --> 00:16:09.740
alpha

00:16:09.740 --> 00:16:10.720
so that is

00:16:10.720 --> 00:16:11.420
probably easiest

00:16:11.420 --> 00:16:12.300
because you

00:16:12.300 --> 00:16:12.820
don't have to

00:16:12.820 --> 00:16:13.440
actually install

00:16:13.440 --> 00:16:14.260
anything locally

00:16:14.260 --> 00:16:14.980
on your computer

00:16:14.980 --> 00:16:16.300
which tends to

00:16:16.300 --> 00:16:16.740
make things

00:16:16.740 --> 00:16:17.560
complex when

00:16:17.560 --> 00:16:17.920
you have

00:16:17.920 --> 00:16:18.380
many

00:16:18.380 --> 00:16:18.920
interpreter

00:16:18.920 --> 00:16:19.440
versions

00:16:19.440 --> 00:16:20.060
with you

00:16:20.060 --> 00:16:21.320
homebrewing

00:16:21.320 --> 00:16:22.660
Patrick likes

00:16:22.660 --> 00:16:23.160
to default

00:16:23.160 --> 00:16:23.560
to one

00:16:23.560 --> 00:16:24.000
Python 3

00:16:24.000 --> 00:16:24.340
version

00:16:24.340 --> 00:16:24.600
one

00:16:24.600 --> 00:16:25.060
Python 2

00:16:25.060 --> 00:16:25.400
version

00:16:25.400 --> 00:16:26.220
so there's

00:16:26.220 --> 00:16:26.820
PyEnv

00:16:26.820 --> 00:16:27.420
that you can

00:16:27.420 --> 00:16:28.440
use to have

00:16:28.440 --> 00:16:28.880
multiple

00:16:28.880 --> 00:16:29.480
installations

00:16:29.480 --> 00:16:30.440
and obviously

00:16:30.440 --> 00:16:31.020
yes there's

00:16:31.020 --> 00:16:31.320
talks

00:16:31.320 --> 00:16:31.900
they actually

00:16:31.900 --> 00:16:32.760
work rather

00:16:32.760 --> 00:16:33.300
well together

00:16:33.300 --> 00:16:34.380
so you can

00:16:34.380 --> 00:16:34.940
set up your

00:16:34.940 --> 00:16:35.680
matrix of

00:16:35.680 --> 00:16:36.180
tests that

00:16:36.180 --> 00:16:36.660
later are

00:16:36.660 --> 00:16:37.580
run online

00:16:37.580 --> 00:16:38.160
but you can

00:16:38.160 --> 00:16:38.700
also run

00:16:38.700 --> 00:16:39.380
them locally

00:16:39.380 --> 00:16:39.900
which is what

00:16:39.900 --> 00:16:40.460
I'm doing

00:16:40.460 --> 00:16:41.000
yeah okay

00:16:41.000 --> 00:16:41.800
that seems

00:16:41.800 --> 00:16:42.240
pretty easy

00:16:42.240 --> 00:16:42.900
all right

00:16:42.900 --> 00:16:43.500
Anthony let's

00:16:43.500 --> 00:16:43.880
kick off

00:16:43.880 --> 00:16:44.980
this pep

00:16:44.980 --> 00:16:45.980
section

00:16:45.980 --> 00:16:46.880
and talking

00:16:46.880 --> 00:16:47.340
about the

00:16:47.340 --> 00:16:48.000
actual features

00:16:48.000 --> 00:16:48.840
which as we

00:16:48.840 --> 00:16:49.140
all know

00:16:49.140 --> 00:16:50.160
appear as

00:16:50.160 --> 00:16:51.380
Python enhancement

00:16:51.380 --> 00:16:52.240
proposals and

00:16:52.240 --> 00:16:52.640
they go through

00:16:52.640 --> 00:16:53.720
a life cycle

00:16:53.720 --> 00:16:54.160
and whatnot

00:16:54.160 --> 00:16:55.340
if people are

00:16:55.340 --> 00:16:56.540
wondering what

00:16:56.540 --> 00:16:57.180
peps are out

00:16:57.180 --> 00:16:57.500
there what

00:16:57.500 --> 00:16:58.040
might make it

00:16:58.040 --> 00:16:58.640
into 3.8 and

00:16:58.640 --> 00:16:59.180
so on like

00:16:59.180 --> 00:16:59.820
where would

00:16:59.820 --> 00:17:00.180
they go to

00:17:00.180 --> 00:17:00.640
find that out

00:17:00.640 --> 00:17:01.220
so I think on

00:17:01.220 --> 00:17:02.060
the python.org

00:17:02.060 --> 00:17:02.620
website and

00:17:02.620 --> 00:17:03.040
there's a list

00:17:03.040 --> 00:17:03.560
of peps

00:17:03.560 --> 00:17:04.340
there's also a

00:17:04.340 --> 00:17:05.020
 PEP index

00:17:05.020 --> 00:17:05.680
on the list

00:17:05.680 --> 00:17:06.100
of peps

00:17:06.100 --> 00:17:07.200
I've also made

00:17:07.200 --> 00:17:07.780
like a small

00:17:07.780 --> 00:17:08.300
web app

00:17:08.300 --> 00:17:09.180
called pep

00:17:09.180 --> 00:17:09.900
explorer where

00:17:09.900 --> 00:17:10.460
you can go

00:17:10.460 --> 00:17:11.280
and search

00:17:11.280 --> 00:17:11.740
and filter

00:17:11.740 --> 00:17:12.240
and pull

00:17:12.240 --> 00:17:13.340
specific python

00:17:13.340 --> 00:17:13.780
versions

00:17:13.780 --> 00:17:14.980
and get the

00:17:14.980 --> 00:17:15.620
status of the

00:17:15.620 --> 00:17:15.920
peps

00:17:15.920 --> 00:17:16.760
so I use

00:17:16.760 --> 00:17:17.300
 PEP explorer

00:17:17.300 --> 00:17:18.000
because I

00:17:18.000 --> 00:17:19.040
spend time

00:17:19.040 --> 00:17:19.820
looking at

00:17:19.820 --> 00:17:20.300
peps and

00:17:20.300 --> 00:17:20.840
reading about

00:17:20.840 --> 00:17:21.300
them and

00:17:21.300 --> 00:17:21.620
trying to

00:17:21.620 --> 00:17:22.260
understand what's

00:17:22.260 --> 00:17:22.720
coming in

00:17:22.720 --> 00:17:23.700
future versions

00:17:23.700 --> 00:17:24.620
so yeah if

00:17:24.620 --> 00:17:24.980
you're just

00:17:24.980 --> 00:17:26.040
curious I'd say

00:17:26.040 --> 00:17:26.740
the PEP explorer

00:17:26.740 --> 00:17:27.260
is probably a

00:17:27.260 --> 00:17:27.820
good way to go

00:17:27.820 --> 00:17:28.400
yeah the pep

00:17:28.400 --> 00:17:29.100
explorer is pretty

00:17:29.100 --> 00:17:29.720
awesome it's just

00:17:29.720 --> 00:17:30.160
a nice little

00:17:30.160 --> 00:17:31.020
grid it's on

00:17:31.020 --> 00:17:32.500
github pages

00:17:32.500 --> 00:17:33.160
right yeah

00:17:33.160 --> 00:17:34.040
yeah and

00:17:34.040 --> 00:17:34.620
I'll just link to

00:17:34.620 --> 00:17:35.400
that and of

00:17:35.400 --> 00:17:36.160
course people can

00:17:36.160 --> 00:17:36.920
go to python.org

00:17:36.920 --> 00:17:37.960
but yeah it's

00:17:37.960 --> 00:17:38.480
really nice to

00:17:38.480 --> 00:17:39.060
just keep track

00:17:39.060 --> 00:17:39.760
of that and

00:17:39.760 --> 00:17:41.040
I find that

00:17:41.040 --> 00:17:41.500
super helpful

00:17:41.500 --> 00:17:42.820
all right so

00:17:42.820 --> 00:17:43.800
let's kick it

00:17:43.800 --> 00:17:44.580
off maybe since

00:17:44.580 --> 00:17:45.040
you're holding the

00:17:45.040 --> 00:17:46.100
mic we'll go

00:17:46.100 --> 00:17:46.660
with you first

00:17:46.660 --> 00:17:47.840
you know what's

00:17:47.840 --> 00:17:48.480
like one of the

00:17:48.480 --> 00:17:49.420
notable things that's

00:17:49.420 --> 00:17:49.800
coming that you

00:17:49.800 --> 00:17:50.640
want to talk about

00:17:50.640 --> 00:17:51.560
what PEP or

00:17:51.560 --> 00:17:52.640
feature so I

00:17:52.640 --> 00:17:53.420
thought I'd cover

00:17:53.420 --> 00:17:54.320
off the two

00:17:54.320 --> 00:17:55.340
ones that changed

00:17:55.340 --> 00:17:56.440
the language

00:17:56.440 --> 00:17:57.900
first so there's

00:17:57.900 --> 00:17:59.460
assignment expressions

00:17:59.460 --> 00:18:00.960
colloquially known

00:18:00.960 --> 00:18:01.700
as the walrus

00:18:01.700 --> 00:18:02.260
operator

00:18:02.260 --> 00:18:03.620
walrus operator

00:18:03.620 --> 00:18:04.940
yeah so this is

00:18:04.940 --> 00:18:06.320
 PEP 572

00:18:06.320 --> 00:18:07.940
yeah PEP 572

00:18:07.940 --> 00:18:08.580
so in python

00:18:08.580 --> 00:18:10.000
if you want to

00:18:10.000 --> 00:18:11.440
assign a value

00:18:11.440 --> 00:18:12.400
to a variable

00:18:12.400 --> 00:18:13.580
you use the

00:18:13.580 --> 00:18:14.460
equals symbol

00:18:14.460 --> 00:18:15.300
that doesn't

00:18:15.300 --> 00:18:15.940
return anything

00:18:15.940 --> 00:18:16.660
so if you just

00:18:16.660 --> 00:18:17.480
do a equals

00:18:17.480 --> 00:18:18.700
one in the

00:18:18.700 --> 00:18:19.440
REPL then that

00:18:19.440 --> 00:18:19.940
won't return

00:18:19.940 --> 00:18:20.800
anything in the

00:18:20.800 --> 00:18:21.100
REPL

00:18:21.100 --> 00:18:22.320
an assignment

00:18:22.320 --> 00:18:23.040
expression is

00:18:23.040 --> 00:18:23.860
basically a way

00:18:23.860 --> 00:18:24.420
of combining

00:18:24.420 --> 00:18:25.600
the assignment

00:18:25.600 --> 00:18:26.360
of a value

00:18:26.360 --> 00:18:27.160
to a variable

00:18:27.160 --> 00:18:28.260
and returning

00:18:28.260 --> 00:18:28.700
the variable

00:18:28.700 --> 00:18:29.220
back again

00:18:29.220 --> 00:18:30.340
so the reason

00:18:30.340 --> 00:18:30.760
you would want

00:18:30.760 --> 00:18:31.220
to do that

00:18:31.220 --> 00:18:32.200
is in some

00:18:32.200 --> 00:18:33.200
statements

00:18:33.200 --> 00:18:34.240
for example

00:18:34.240 --> 00:18:35.100
within list

00:18:35.100 --> 00:18:35.800
comprehensions

00:18:35.800 --> 00:18:37.360
within while

00:18:37.360 --> 00:18:38.200
statements

00:18:38.200 --> 00:18:38.660
for example

00:18:38.660 --> 00:18:39.160
within if

00:18:39.160 --> 00:18:39.700
statements

00:18:39.700 --> 00:18:40.900
and the thing

00:18:40.900 --> 00:18:41.700
in the if

00:18:41.700 --> 00:18:42.040
statement

00:18:42.040 --> 00:18:43.160
the comparison

00:18:43.160 --> 00:18:43.720
for example

00:18:43.720 --> 00:18:44.240
you can actually

00:18:44.240 --> 00:18:45.240
do assignments

00:18:45.240 --> 00:18:46.400
inside the

00:18:46.400 --> 00:18:46.860
comparison

00:18:46.860 --> 00:18:48.040
and it just

00:18:48.040 --> 00:18:49.040
removes some

00:18:49.040 --> 00:18:49.940
additional code

00:18:49.940 --> 00:18:50.420
that you might

00:18:50.420 --> 00:18:51.020
have to do

00:18:51.020 --> 00:18:51.960
and also

00:18:51.960 --> 00:18:52.620
there's a few

00:18:52.620 --> 00:18:53.280
other examples

00:18:53.280 --> 00:18:54.200
in list and

00:18:54.200 --> 00:18:54.520
dictionary

00:18:54.520 --> 00:18:55.360
comprehensions

00:18:55.360 --> 00:18:56.160
where you can

00:18:56.160 --> 00:18:56.640
do some fairly

00:18:56.640 --> 00:18:57.360
smart things

00:18:57.360 --> 00:18:57.960
inside the

00:18:57.960 --> 00:18:58.360
comprehension

00:18:58.360 --> 00:18:59.200
yeah when I

00:18:59.200 --> 00:18:59.700
first saw this

00:18:59.700 --> 00:19:00.060
I thought

00:19:00.060 --> 00:19:00.920
interesting

00:19:00.920 --> 00:19:01.780
I don't know

00:19:01.780 --> 00:19:02.080
it's really

00:19:02.080 --> 00:19:02.400
needed

00:19:02.400 --> 00:19:03.100
but it's

00:19:03.100 --> 00:19:03.580
I wasn't

00:19:03.580 --> 00:19:04.120
super against

00:19:04.120 --> 00:19:04.540
or anything

00:19:04.540 --> 00:19:05.960
but certainly

00:19:05.960 --> 00:19:06.700
seeing it

00:19:06.700 --> 00:19:07.460
in the list

00:19:07.460 --> 00:19:07.940
comprehension

00:19:07.940 --> 00:19:08.620
space

00:19:08.620 --> 00:19:09.280
and seeing it

00:19:09.280 --> 00:19:09.700
used in other

00:19:09.700 --> 00:19:10.240
places as well

00:19:10.240 --> 00:19:11.560
I think I'm

00:19:11.560 --> 00:19:12.300
pretty positive

00:19:12.300 --> 00:19:12.960
on this language

00:19:12.960 --> 00:19:13.300
change

00:19:13.300 --> 00:19:14.500
it's pretty nice

00:19:14.500 --> 00:19:15.040
certainly

00:19:15.040 --> 00:19:16.080
anytime you need

00:19:16.080 --> 00:19:16.800
an expression

00:19:16.800 --> 00:19:17.520
right within

00:19:17.520 --> 00:19:18.280
like some kind

00:19:18.280 --> 00:19:18.860
of comprehension

00:19:18.860 --> 00:19:20.340
maybe a lambda

00:19:20.340 --> 00:19:21.560
or something like

00:19:21.560 --> 00:19:22.000
that like

00:19:22.000 --> 00:19:23.680
this often is

00:19:23.680 --> 00:19:24.480
the only way

00:19:24.480 --> 00:19:25.720
to you know

00:19:25.720 --> 00:19:26.280
do it like so

00:19:26.280 --> 00:19:27.400
if you want

00:19:27.400 --> 00:19:28.180
to create

00:19:28.180 --> 00:19:28.820
a variable

00:19:28.820 --> 00:19:29.860
but also

00:19:29.860 --> 00:19:30.480
test it

00:19:30.480 --> 00:19:30.960
in a list

00:19:30.960 --> 00:19:31.360
comprehension

00:19:31.360 --> 00:19:31.720
and that

00:19:31.720 --> 00:19:32.080
might be

00:19:32.080 --> 00:19:32.680
the response

00:19:32.680 --> 00:19:33.200
of a function

00:19:33.200 --> 00:19:33.540
like you

00:19:33.540 --> 00:19:33.860
can maybe

00:19:33.860 --> 00:19:34.260
have to call

00:19:34.260 --> 00:19:34.900
that twice

00:19:34.900 --> 00:19:36.120
once when

00:19:36.120 --> 00:19:36.500
you test

00:19:36.500 --> 00:19:36.940
it and once

00:19:36.940 --> 00:19:37.240
when you

00:19:37.240 --> 00:19:37.860
put it

00:19:37.860 --> 00:19:38.160
into the

00:19:38.160 --> 00:19:38.460
list

00:19:38.460 --> 00:19:39.160
now you

00:19:39.160 --> 00:19:39.900
could assign

00:19:39.900 --> 00:19:40.300
it and then

00:19:40.300 --> 00:19:40.680
test it

00:19:40.680 --> 00:19:40.860
right

00:19:40.860 --> 00:19:41.300
like so

00:19:41.300 --> 00:19:41.740
these things

00:19:41.740 --> 00:19:42.240
get simpler

00:19:42.240 --> 00:19:42.860
yeah they get

00:19:42.860 --> 00:19:43.060
simpler

00:19:43.060 --> 00:19:43.460
I think

00:19:43.460 --> 00:19:44.040
looking at

00:19:44.040 --> 00:19:44.680
the syntax

00:19:44.680 --> 00:19:45.780
people's initial

00:19:45.780 --> 00:19:46.300
responses

00:19:46.300 --> 00:19:47.020
often I can't

00:19:47.020 --> 00:19:47.520
see where I

00:19:47.520 --> 00:19:48.120
would use that

00:19:48.120 --> 00:19:48.500
but it

00:19:48.500 --> 00:19:49.360
it takes a

00:19:49.360 --> 00:19:49.920
while for

00:19:49.920 --> 00:19:50.660
these types

00:19:50.660 --> 00:19:51.700
of pieces

00:19:51.700 --> 00:19:52.300
syntax to

00:19:52.300 --> 00:19:52.840
become common

00:19:52.840 --> 00:19:53.180
because

00:19:53.180 --> 00:19:53.720
once you

00:19:53.720 --> 00:19:54.000
know the

00:19:54.000 --> 00:19:54.320
patterns

00:19:54.320 --> 00:19:54.680
in which

00:19:54.680 --> 00:19:54.940
you would

00:19:54.940 --> 00:19:55.440
use it

00:19:55.440 --> 00:19:56.020
and you've

00:19:56.020 --> 00:19:56.380
memorized

00:19:56.380 --> 00:19:56.920
then and

00:19:56.920 --> 00:19:57.560
then you

00:19:57.560 --> 00:19:57.960
start to

00:19:57.960 --> 00:19:58.200
use it

00:19:58.200 --> 00:19:58.480
more and

00:19:58.480 --> 00:19:58.820
more over

00:19:58.820 --> 00:19:59.200
time

00:19:59.200 --> 00:20:02.360
this portion

00:20:02.360 --> 00:20:02.680
of talk

00:20:02.680 --> 00:20:03.160
Python to me

00:20:03.160 --> 00:20:03.580
is brought

00:20:03.580 --> 00:20:04.000
to you by

00:20:04.000 --> 00:20:04.480
Microsoft

00:20:04.480 --> 00:20:05.220
and Azure

00:20:05.220 --> 00:20:05.740
Pipelines

00:20:05.740 --> 00:20:06.900
Azure Pipelines

00:20:06.900 --> 00:20:07.500
is a CI

00:20:07.500 --> 00:20:08.140
CD service

00:20:08.140 --> 00:20:08.700
that supports

00:20:08.700 --> 00:20:09.080
Windows

00:20:09.080 --> 00:20:09.460
Linux

00:20:09.460 --> 00:20:10.080
and Mac

00:20:10.080 --> 00:20:10.820
it lets

00:20:10.820 --> 00:20:11.180
you run

00:20:11.180 --> 00:20:11.620
automatic

00:20:11.620 --> 00:20:12.020
builds

00:20:12.020 --> 00:20:12.480
and tests

00:20:12.480 --> 00:20:12.720
of your

00:20:12.720 --> 00:20:12.980
Python

00:20:12.980 --> 00:20:13.300
code

00:20:13.300 --> 00:20:13.820
on each

00:20:13.820 --> 00:20:14.220
commit

00:20:14.220 --> 00:20:14.760
or pull

00:20:14.760 --> 00:20:15.140
request

00:20:15.140 --> 00:20:16.120
it is fully

00:20:16.120 --> 00:20:16.520
integrated

00:20:16.520 --> 00:20:16.860
with GitHub

00:20:16.860 --> 00:20:17.200
and it

00:20:17.200 --> 00:20:17.420
lets you

00:20:17.420 --> 00:20:17.920
define your

00:20:17.920 --> 00:20:18.340
continuous

00:20:18.340 --> 00:20:18.740
integration

00:20:18.740 --> 00:20:19.380
and delivery

00:20:19.380 --> 00:20:19.900
pipelines

00:20:19.900 --> 00:20:20.240
with a

00:20:20.240 --> 00:20:20.500
simple

00:20:20.500 --> 00:20:20.820
YAML

00:20:20.820 --> 00:20:21.120
file

00:20:21.120 --> 00:20:21.740
Azure

00:20:21.740 --> 00:20:22.120
Pipelines

00:20:22.120 --> 00:20:22.500
is free

00:20:22.500 --> 00:20:23.140
for individuals

00:20:23.140 --> 00:20:23.600
and small

00:20:23.600 --> 00:20:23.920
teams

00:20:23.920 --> 00:20:24.600
if you're

00:20:24.600 --> 00:20:24.960
maintaining

00:20:24.960 --> 00:20:25.340
an open

00:20:25.340 --> 00:20:25.540
source

00:20:25.540 --> 00:20:26.000
project

00:20:26.000 --> 00:20:26.460
you'll even

00:20:26.460 --> 00:20:27.140
get unlimited

00:20:27.140 --> 00:20:27.800
build minutes

00:20:27.800 --> 00:20:28.420
and 10

00:20:28.420 --> 00:20:28.800
concurrent

00:20:28.800 --> 00:20:29.280
pipelines

00:20:29.280 --> 00:20:30.380
many Python

00:20:30.380 --> 00:20:30.940
projects are

00:20:30.940 --> 00:20:31.600
already using

00:20:31.600 --> 00:20:31.900
Azure

00:20:31.900 --> 00:20:32.320
Pipelines

00:20:32.320 --> 00:20:33.120
so get

00:20:33.120 --> 00:20:33.620
started for

00:20:33.620 --> 00:20:34.240
free at

00:20:34.240 --> 00:20:35.460
talkpython.fm

00:20:35.460 --> 00:20:35.940
slash

00:20:35.940 --> 00:20:36.560
Microsoft

00:20:36.560 --> 00:20:39.340
and then

00:20:39.340 --> 00:20:39.680
the second

00:20:39.680 --> 00:20:39.940
PEP

00:20:39.940 --> 00:20:40.440
I guess

00:20:40.440 --> 00:20:40.940
changes

00:20:40.940 --> 00:20:41.440
the language

00:20:41.440 --> 00:20:42.060
slightly

00:20:42.060 --> 00:20:42.360
is

00:20:42.360 --> 00:20:43.120
positional

00:20:43.120 --> 00:20:43.340
only

00:20:43.340 --> 00:20:43.960
arguments

00:20:43.960 --> 00:20:45.000
and basically

00:20:45.000 --> 00:20:45.460
this is

00:20:45.460 --> 00:20:46.420
PEP 570

00:20:46.420 --> 00:20:47.500
which has

00:20:47.500 --> 00:20:48.020
also been

00:20:48.020 --> 00:20:48.500
accepted

00:20:48.500 --> 00:20:49.660
and merged

00:20:49.660 --> 00:20:50.240
into

00:20:50.240 --> 00:20:51.240
Python 3.8

00:20:51.240 --> 00:20:52.280
it wasn't

00:20:52.280 --> 00:20:52.620
part of

00:20:52.620 --> 00:20:53.140
alpha 3

00:20:53.140 --> 00:20:53.500
so it'll

00:20:53.500 --> 00:20:53.740
be in

00:20:53.740 --> 00:20:54.040
the alpha

00:20:54.040 --> 00:20:54.840
4 release

00:20:54.840 --> 00:20:55.280
I believe

00:20:55.280 --> 00:20:56.640
and basically

00:20:56.640 --> 00:20:57.340
this one

00:20:57.340 --> 00:20:58.620
is you

00:20:58.620 --> 00:20:59.180
add a

00:20:59.180 --> 00:20:59.800
forward slash

00:20:59.800 --> 00:21:00.180
in the

00:21:00.180 --> 00:21:01.040
list of

00:21:01.040 --> 00:21:01.600
parameters

00:21:01.600 --> 00:21:02.240
in a

00:21:02.240 --> 00:21:02.720
function

00:21:02.720 --> 00:21:03.240
definition

00:21:03.240 --> 00:21:04.280
so that

00:21:04.280 --> 00:21:04.660
it says

00:21:04.660 --> 00:21:05.240
that it's

00:21:05.240 --> 00:21:05.500
only

00:21:05.500 --> 00:21:06.040
positional

00:21:06.040 --> 00:21:06.360
arguments

00:21:06.360 --> 00:21:06.820
in this

00:21:06.820 --> 00:21:07.220
function

00:21:07.220 --> 00:21:08.400
the reason

00:21:08.400 --> 00:21:08.940
for that

00:21:08.940 --> 00:21:10.180
is basically

00:21:10.180 --> 00:21:11.040
to protect

00:21:11.040 --> 00:21:12.200
an API

00:21:12.200 --> 00:21:13.360
to ensure

00:21:13.360 --> 00:21:13.660
that people

00:21:13.660 --> 00:21:14.180
only use

00:21:14.180 --> 00:21:14.720
positional

00:21:14.720 --> 00:21:15.060
arguments

00:21:15.060 --> 00:21:15.920
and they

00:21:15.920 --> 00:21:16.980
don't

00:21:16.980 --> 00:21:17.500
start to

00:21:17.500 --> 00:21:17.800
use them

00:21:17.800 --> 00:21:18.240
as keyword

00:21:18.240 --> 00:21:18.740
arguments

00:21:18.740 --> 00:21:19.360
yeah it's

00:21:19.360 --> 00:21:20.200
pretty interesting

00:21:20.200 --> 00:21:20.620
it's like

00:21:20.620 --> 00:21:21.260
the anti

00:21:21.260 --> 00:21:22.260
keyword only

00:21:22.260 --> 00:21:23.220
argument

00:21:23.220 --> 00:21:24.400
one right

00:21:24.400 --> 00:21:24.720
which

00:21:24.720 --> 00:21:25.620
so with

00:21:25.620 --> 00:21:26.100
the keyword

00:21:26.100 --> 00:21:26.580
argument

00:21:26.580 --> 00:21:26.900
one

00:21:26.900 --> 00:21:27.240
I don't

00:21:27.240 --> 00:21:27.520
know that

00:21:27.520 --> 00:21:28.220
many people

00:21:28.220 --> 00:21:28.880
actually know

00:21:28.880 --> 00:21:29.160
about it

00:21:29.160 --> 00:21:29.420
but it's

00:21:29.420 --> 00:21:29.920
pretty cool

00:21:29.920 --> 00:21:30.880
so if

00:21:30.880 --> 00:21:31.360
you say

00:21:31.360 --> 00:21:31.700
you know

00:21:31.700 --> 00:21:32.040
function

00:21:32.040 --> 00:21:33.340
star

00:21:33.340 --> 00:21:34.220
comma

00:21:34.220 --> 00:21:35.220
argument

00:21:35.220 --> 00:21:35.520
argument

00:21:35.520 --> 00:21:35.940
argument

00:21:35.940 --> 00:21:36.360
those

00:21:36.360 --> 00:21:36.720
all have

00:21:36.720 --> 00:21:37.020
to be

00:21:37.020 --> 00:21:37.680
explicitly

00:21:37.680 --> 00:21:38.120
called

00:21:38.120 --> 00:21:38.560
as keyword

00:21:38.560 --> 00:21:39.060
arguments

00:21:39.060 --> 00:21:40.040
this is

00:21:40.040 --> 00:21:40.320
like

00:21:40.320 --> 00:21:41.080
I want

00:21:41.080 --> 00:21:41.380
to make

00:21:41.380 --> 00:21:41.580
it

00:21:41.580 --> 00:21:42.540
impossible

00:21:42.540 --> 00:21:43.520
at least

00:21:43.520 --> 00:21:43.840
in this

00:21:43.840 --> 00:21:44.220
section

00:21:44.220 --> 00:21:44.500
of the

00:21:44.500 --> 00:21:44.980
parameters

00:21:44.980 --> 00:21:45.880
to call

00:21:45.880 --> 00:21:46.140
them

00:21:46.140 --> 00:21:46.880
as keyword

00:21:46.880 --> 00:21:47.340
arguments

00:21:47.340 --> 00:21:47.600
right

00:21:47.600 --> 00:21:48.020
yeah it's

00:21:48.020 --> 00:21:48.240
a cool

00:21:48.240 --> 00:21:48.580
feature

00:21:48.580 --> 00:21:49.060
and it's

00:21:49.060 --> 00:21:49.440
also going

00:21:49.440 --> 00:21:49.820
to help

00:21:49.820 --> 00:21:50.320
with a lot

00:21:50.320 --> 00:21:50.500
of the

00:21:50.500 --> 00:21:50.740
standard

00:21:50.740 --> 00:21:51.180
library

00:21:51.180 --> 00:21:51.480
that's

00:21:51.480 --> 00:21:51.780
the other

00:21:51.780 --> 00:21:52.400
justification

00:21:52.400 --> 00:21:53.460
and there's

00:21:53.460 --> 00:21:53.820
a lot of

00:21:53.820 --> 00:21:54.300
the Python

00:21:54.300 --> 00:21:54.680
standard

00:21:54.680 --> 00:21:55.120
library

00:21:55.120 --> 00:21:56.200
where the

00:21:56.200 --> 00:21:56.840
API needs

00:21:56.840 --> 00:21:57.080
to be

00:21:57.080 --> 00:21:57.500
protected

00:21:57.500 --> 00:21:58.020
so that it

00:21:58.020 --> 00:21:58.280
can be

00:21:58.280 --> 00:21:58.760
iterated

00:21:58.760 --> 00:21:59.040
on

00:21:59.040 --> 00:21:59.840
and where

00:21:59.840 --> 00:22:00.220
this feature

00:22:00.220 --> 00:22:00.580
is basically

00:22:00.580 --> 00:22:00.980
going to help

00:22:00.980 --> 00:22:01.500
lock that

00:22:01.500 --> 00:22:01.900
down

00:22:01.900 --> 00:22:02.780
and also

00:22:02.780 --> 00:22:03.680
in 3.7

00:22:03.680 --> 00:22:04.100
there were

00:22:04.100 --> 00:22:04.760
some improvements

00:22:04.760 --> 00:22:05.600
to the

00:22:05.600 --> 00:22:05.980
performance

00:22:05.980 --> 00:22:06.420
of method

00:22:06.420 --> 00:22:06.820
calls

00:22:06.820 --> 00:22:08.220
that performance

00:22:08.220 --> 00:22:08.640
improvement

00:22:08.640 --> 00:22:09.300
doesn't work

00:22:09.300 --> 00:22:09.780
with keyword

00:22:09.780 --> 00:22:10.320
arguments

00:22:10.320 --> 00:22:10.800
I see

00:22:10.800 --> 00:22:11.560
so basically

00:22:11.560 --> 00:22:12.120
you could

00:22:12.120 --> 00:22:12.800
potentially use

00:22:12.800 --> 00:22:13.360
this as a

00:22:13.360 --> 00:22:14.420
way of enforcing

00:22:14.420 --> 00:22:15.460
that performance

00:22:15.460 --> 00:22:15.900
improvement

00:22:15.900 --> 00:22:16.500
okay that's

00:22:16.500 --> 00:22:16.820
interesting

00:22:16.820 --> 00:22:17.480
the example

00:22:17.480 --> 00:22:18.020
that I saw

00:22:18.020 --> 00:22:18.600
I think if I

00:22:18.600 --> 00:22:19.020
remember this

00:22:19.020 --> 00:22:19.320
correctly

00:22:19.320 --> 00:22:20.420
was just like

00:22:20.420 --> 00:22:20.960
range

00:22:20.960 --> 00:22:21.400
like even

00:22:21.400 --> 00:22:22.020
just knowing

00:22:22.020 --> 00:22:23.120
when you see

00:22:23.120 --> 00:22:24.020
stuff if you

00:22:24.020 --> 00:22:24.660
quickly read it

00:22:24.660 --> 00:22:25.140
like you could

00:22:25.140 --> 00:22:25.840
have range

00:22:25.840 --> 00:22:27.080
and say stop

00:22:27.080 --> 00:22:28.220
and then start

00:22:28.220 --> 00:22:29.160
and then step

00:22:29.160 --> 00:22:29.480
or you could

00:22:29.480 --> 00:22:30.320
have start

00:22:30.320 --> 00:22:30.900
and then stop

00:22:30.900 --> 00:22:31.520
or you could

00:22:31.520 --> 00:22:31.880
have step

00:22:31.880 --> 00:22:32.340
and then start

00:22:32.340 --> 00:22:32.580
and just

00:22:32.580 --> 00:22:33.420
just seeing

00:22:33.420 --> 00:22:33.940
I mean even

00:22:33.940 --> 00:22:34.780
the words

00:22:34.780 --> 00:22:35.260
are kind of

00:22:35.260 --> 00:22:35.640
similar

00:22:35.640 --> 00:22:36.300
and it's

00:22:36.300 --> 00:22:36.640
going no

00:22:36.640 --> 00:22:37.000
I want you

00:22:37.000 --> 00:22:37.380
to always

00:22:37.380 --> 00:22:37.820
to say

00:22:37.820 --> 00:22:38.820
start

00:22:38.820 --> 00:22:39.700
and then stop

00:22:39.700 --> 00:22:40.420
and then step

00:22:40.420 --> 00:22:40.860
or whatever

00:22:40.860 --> 00:22:41.360
right like

00:22:41.360 --> 00:22:42.580
just requiring

00:22:42.580 --> 00:22:43.280
them to not

00:22:43.280 --> 00:22:43.880
have this sort

00:22:43.880 --> 00:22:44.280
of almost

00:22:44.280 --> 00:22:45.360
arbitrariness

00:22:45.360 --> 00:22:45.780
of the order

00:22:45.780 --> 00:22:46.380
of the parameters

00:22:46.380 --> 00:22:47.020
seemed like

00:22:47.020 --> 00:22:47.520
an interesting

00:22:47.520 --> 00:22:48.160
idea there as

00:22:48.160 --> 00:22:48.340
well

00:22:48.340 --> 00:22:48.640
yeah

00:22:48.640 --> 00:22:49.460
an additional

00:22:49.460 --> 00:22:50.060
detail is

00:22:50.060 --> 00:22:50.780
the fact

00:22:50.780 --> 00:22:51.260
that you

00:22:51.260 --> 00:22:51.700
know many

00:22:51.700 --> 00:22:52.340
of the

00:22:52.340 --> 00:22:52.840
functions

00:22:52.840 --> 00:22:53.140
that are

00:22:53.140 --> 00:22:53.480
implemented

00:22:53.480 --> 00:22:54.000
in C

00:22:54.000 --> 00:22:54.900
don't

00:22:54.900 --> 00:22:55.480
implement

00:22:55.480 --> 00:22:56.040
keyword

00:22:56.040 --> 00:22:56.520
arguments

00:22:56.520 --> 00:22:57.120
so they're

00:22:57.120 --> 00:22:57.640
effectively

00:22:57.640 --> 00:22:58.940
positional only

00:22:58.940 --> 00:22:59.820
by the

00:22:59.820 --> 00:23:00.320
sheer fact

00:23:00.320 --> 00:23:00.880
that they are

00:23:00.880 --> 00:23:01.840
just being

00:23:01.840 --> 00:23:02.500
implemented in

00:23:02.500 --> 00:23:02.660
C

00:23:02.660 --> 00:23:03.520
and this

00:23:03.520 --> 00:23:04.460
just enables

00:23:04.460 --> 00:23:05.380
us to express

00:23:05.380 --> 00:23:05.900
those same

00:23:05.900 --> 00:23:06.800
APIs in Python

00:23:06.800 --> 00:23:07.520
faithfully

00:23:07.520 --> 00:23:08.760
so that alternative

00:23:08.760 --> 00:23:09.780
implementations

00:23:09.780 --> 00:23:10.620
recreate the

00:23:10.620 --> 00:23:11.580
API in exactly

00:23:11.580 --> 00:23:12.180
the same way

00:23:12.180 --> 00:23:12.640
oh yeah

00:23:12.640 --> 00:23:13.260
that's interesting

00:23:13.260 --> 00:23:14.000
so you don't

00:23:14.000 --> 00:23:14.500
want like

00:23:14.500 --> 00:23:15.620
the leaky

00:23:15.620 --> 00:23:16.240
abstraction

00:23:16.240 --> 00:23:16.880
of the C

00:23:16.880 --> 00:23:17.360
implementation

00:23:17.360 --> 00:23:18.320
to leak out

00:23:18.320 --> 00:23:18.800
and maybe

00:23:18.800 --> 00:23:19.860
break PyPy

00:23:19.860 --> 00:23:20.860
or something

00:23:20.860 --> 00:23:21.280
like this

00:23:21.280 --> 00:23:21.580
yeah so

00:23:21.580 --> 00:23:21.880
currently

00:23:21.880 --> 00:23:22.360
like the

00:23:22.360 --> 00:23:23.020
issue is

00:23:23.020 --> 00:23:23.400
actually

00:23:23.400 --> 00:23:24.180
the opposite

00:23:24.180 --> 00:23:24.600
where

00:23:24.600 --> 00:23:25.400
PyPy does

00:23:25.400 --> 00:23:25.580
not

00:23:25.580 --> 00:23:26.500
necessarily

00:23:26.500 --> 00:23:26.900
care

00:23:26.900 --> 00:23:27.200
that

00:23:27.200 --> 00:23:27.560
you know

00:23:27.560 --> 00:23:27.880
some

00:23:27.880 --> 00:23:28.360
argument

00:23:28.360 --> 00:23:28.640
is

00:23:28.640 --> 00:23:29.300
positional

00:23:29.300 --> 00:23:29.560
only

00:23:29.560 --> 00:23:29.840
in

00:23:29.840 --> 00:23:30.100
C

00:23:30.100 --> 00:23:30.360
Python

00:23:30.360 --> 00:23:30.860
so

00:23:30.860 --> 00:23:31.500
they

00:23:31.500 --> 00:23:32.000
allow

00:23:32.000 --> 00:23:32.380
for

00:23:32.380 --> 00:23:32.940
keyword

00:23:32.940 --> 00:23:33.480
use

00:23:33.480 --> 00:23:33.940
of it

00:23:33.940 --> 00:23:34.640
and then

00:23:34.640 --> 00:23:35.380
that piece

00:23:35.380 --> 00:23:35.800
of code

00:23:35.800 --> 00:23:36.540
is problematic

00:23:36.540 --> 00:23:37.460
going back

00:23:37.460 --> 00:23:37.740
to C

00:23:37.740 --> 00:23:37.980
Python

00:23:37.980 --> 00:23:38.520
so that

00:23:38.520 --> 00:23:38.880
is just

00:23:38.880 --> 00:23:39.260
you know

00:23:39.260 --> 00:23:40.480
caring of

00:23:40.480 --> 00:23:40.760
you know

00:23:40.760 --> 00:23:41.100
making

00:23:41.100 --> 00:23:42.200
your library

00:23:42.200 --> 00:23:42.540
code

00:23:42.540 --> 00:23:43.240
your application

00:23:43.240 --> 00:23:43.720
code

00:23:43.720 --> 00:23:44.360
sort of

00:23:44.360 --> 00:23:45.040
exchangeable

00:23:45.040 --> 00:23:45.400
between

00:23:45.400 --> 00:23:45.940
runtimes

00:23:45.940 --> 00:23:46.200
yeah

00:23:46.200 --> 00:23:46.560
interesting

00:23:46.560 --> 00:23:47.080
what about

00:23:47.080 --> 00:23:47.500
Cython

00:23:47.500 --> 00:23:48.140
Cython

00:23:48.140 --> 00:23:48.380
it's

00:23:48.380 --> 00:23:48.480
its

00:23:48.480 --> 00:23:48.680
own

00:23:48.680 --> 00:23:48.900
kind

00:23:48.900 --> 00:23:48.980
of

00:23:48.980 --> 00:23:49.200
thing

00:23:49.200 --> 00:23:49.740
because

00:23:49.740 --> 00:23:50.220
it's

00:23:50.220 --> 00:23:50.460
a

00:23:50.460 --> 00:23:51.020
language

00:23:51.020 --> 00:23:51.240
that

00:23:51.240 --> 00:23:51.360
is

00:23:51.360 --> 00:23:51.660
being

00:23:51.660 --> 00:23:52.520
compiled

00:23:52.520 --> 00:23:52.820
or

00:23:52.820 --> 00:23:53.100
rather

00:23:53.100 --> 00:23:54.160
transpiled

00:23:54.160 --> 00:23:54.740
to a bunch

00:23:54.740 --> 00:23:55.020
of C

00:23:55.020 --> 00:23:55.320
or C

00:23:55.320 --> 00:23:55.500
plus

00:23:55.500 --> 00:23:55.800
plus

00:23:55.800 --> 00:23:56.120
which

00:23:56.120 --> 00:23:56.280
is

00:23:56.280 --> 00:23:56.520
then

00:23:56.520 --> 00:23:57.060
compiled

00:23:57.060 --> 00:23:57.820
to a

00:23:57.820 --> 00:23:58.000
C

00:23:58.000 --> 00:23:58.380
module

00:23:58.380 --> 00:23:58.980
they

00:23:58.980 --> 00:23:59.160
are

00:23:59.160 --> 00:23:59.440
kind

00:23:59.440 --> 00:23:59.580
of

00:23:59.580 --> 00:23:59.840
free

00:23:59.840 --> 00:24:00.360
to do

00:24:00.360 --> 00:24:00.820
a lot

00:24:00.820 --> 00:24:00.980
of

00:24:00.980 --> 00:24:02.460
modifications

00:24:02.460 --> 00:24:02.880
that

00:24:02.880 --> 00:24:03.440
Python

00:24:03.440 --> 00:24:03.920
itself

00:24:03.920 --> 00:24:04.380
is not

00:24:04.380 --> 00:24:04.560
free

00:24:04.560 --> 00:24:04.880
to do

00:24:04.880 --> 00:24:05.200
because

00:24:05.200 --> 00:24:05.400
they're

00:24:05.400 --> 00:24:05.800
compile

00:24:05.800 --> 00:24:06.060
time

00:24:06.060 --> 00:24:06.620
modifications

00:24:06.620 --> 00:24:06.940
right

00:24:06.940 --> 00:24:07.140
their

00:24:07.140 --> 00:24:07.840
transpiler

00:24:07.840 --> 00:24:08.300
can make

00:24:08.300 --> 00:24:08.500
the

00:24:08.500 --> 00:24:09.100
adjustment

00:24:09.100 --> 00:24:09.280
it

00:24:09.280 --> 00:24:09.460
needs

00:24:09.460 --> 00:24:09.720
anyway

00:24:09.720 --> 00:24:09.940
right

00:24:09.940 --> 00:24:10.180
yes

00:24:10.180 --> 00:24:10.840
the source

00:24:10.840 --> 00:24:11.060
code

00:24:11.060 --> 00:24:11.240
that

00:24:11.240 --> 00:24:11.460
you're

00:24:11.460 --> 00:24:11.720
reading

00:24:11.720 --> 00:24:12.100
is not

00:24:12.100 --> 00:24:12.480
the source

00:24:12.480 --> 00:24:12.660
code

00:24:12.660 --> 00:24:12.940
that is

00:24:12.940 --> 00:24:13.180
being

00:24:13.180 --> 00:24:13.760
executed

00:24:13.760 --> 00:24:15.580
interesting

00:24:15.580 --> 00:24:16.020
all right

00:24:16.020 --> 00:24:16.600
what's

00:24:16.600 --> 00:24:16.900
the next

00:24:16.900 --> 00:24:17.100
pep

00:24:17.100 --> 00:24:17.360
that you

00:24:17.360 --> 00:24:17.460
want

00:24:17.460 --> 00:24:17.860
or feature

00:24:17.860 --> 00:24:18.140
you want

00:24:18.140 --> 00:24:18.360
to talk

00:24:18.360 --> 00:24:18.580
about

00:24:18.580 --> 00:24:18.960
let's

00:24:18.960 --> 00:24:19.540
cover a few

00:24:19.540 --> 00:24:19.980
of them

00:24:19.980 --> 00:24:20.460
and in fact

00:24:20.460 --> 00:24:20.880
like the

00:24:20.880 --> 00:24:21.320
slew of

00:24:21.320 --> 00:24:21.820
peps is

00:24:21.820 --> 00:24:22.680
all related

00:24:22.680 --> 00:24:23.220
to typing

00:24:23.220 --> 00:24:24.300
let me start

00:24:24.300 --> 00:24:24.640
with something

00:24:24.640 --> 00:24:25.080
old

00:24:25.080 --> 00:24:26.020
which is

00:24:26.020 --> 00:24:26.360
pep

00:24:26.360 --> 00:24:27.380
544

00:24:27.380 --> 00:24:28.220
protocols

00:24:28.220 --> 00:24:28.840
so that

00:24:28.840 --> 00:24:29.200
pep

00:24:29.200 --> 00:24:30.020
should have

00:24:30.020 --> 00:24:30.600
been accepted

00:24:30.600 --> 00:24:30.980
a long

00:24:30.980 --> 00:24:31.480
time ago

00:24:31.480 --> 00:24:32.020
but it

00:24:32.020 --> 00:24:32.680
did not

00:24:32.680 --> 00:24:33.400
because of

00:24:33.400 --> 00:24:33.720
the

00:24:33.720 --> 00:24:34.460
governance

00:24:34.460 --> 00:24:35.440
situation

00:24:35.440 --> 00:24:36.120
so

00:24:36.120 --> 00:24:36.780
protocol

00:24:36.780 --> 00:24:37.220
is this

00:24:37.220 --> 00:24:37.600
kind of

00:24:37.600 --> 00:24:37.800
like

00:24:37.800 --> 00:24:38.680
interface

00:24:38.680 --> 00:24:39.320
inheritance

00:24:39.320 --> 00:24:40.200
type of

00:24:40.200 --> 00:24:40.380
thing

00:24:40.380 --> 00:24:41.060
like what's

00:24:41.060 --> 00:24:41.380
going on

00:24:41.380 --> 00:24:41.720
protocols

00:24:41.720 --> 00:24:42.600
essentially

00:24:42.600 --> 00:24:43.680
is a way

00:24:43.680 --> 00:24:44.600
to introduce

00:24:44.600 --> 00:24:45.580
duck typing

00:24:45.580 --> 00:24:46.600
to static

00:24:46.600 --> 00:24:47.040
typing

00:24:47.040 --> 00:24:47.620
to type

00:24:47.620 --> 00:24:48.180
checkers

00:24:48.180 --> 00:24:49.020
so you

00:24:49.020 --> 00:24:49.660
can have

00:24:49.660 --> 00:24:50.380
interfaces

00:24:50.380 --> 00:24:50.660
well

00:24:50.660 --> 00:24:51.100
or like

00:24:51.100 --> 00:24:51.600
protocols

00:24:51.600 --> 00:24:51.880
they are

00:24:51.880 --> 00:24:52.080
called

00:24:52.080 --> 00:24:52.520
protocols

00:24:52.520 --> 00:24:53.300
across the

00:24:53.300 --> 00:24:53.500
python

00:24:53.500 --> 00:24:54.000
documentation

00:24:54.000 --> 00:24:54.320
too

00:24:54.320 --> 00:24:54.620
which is

00:24:54.620 --> 00:24:54.900
why we're

00:24:54.900 --> 00:24:55.320
using that

00:24:55.320 --> 00:24:55.540
name

00:24:55.540 --> 00:24:55.800
in the

00:24:55.800 --> 00:24:55.960
pep

00:24:55.960 --> 00:24:56.140
too

00:24:56.140 --> 00:24:56.620
but you

00:24:56.620 --> 00:24:56.980
can have

00:24:56.980 --> 00:24:57.420
essentially

00:24:57.420 --> 00:24:58.120
implicit

00:24:58.120 --> 00:24:58.640
interfaces

00:24:58.640 --> 00:24:59.260
that are

00:24:59.260 --> 00:24:59.680
being

00:24:59.680 --> 00:25:00.360
implemented

00:25:00.360 --> 00:25:01.100
by a

00:25:01.100 --> 00:25:01.380
class

00:25:01.380 --> 00:25:01.720
by a

00:25:01.720 --> 00:25:02.060
type

00:25:02.060 --> 00:25:02.940
and then

00:25:02.940 --> 00:25:03.140
the

00:25:03.140 --> 00:25:03.320
type

00:25:03.320 --> 00:25:03.560
checker

00:25:03.560 --> 00:25:04.080
is able

00:25:04.080 --> 00:25:04.620
to act

00:25:04.620 --> 00:25:05.080
on them

00:25:05.080 --> 00:25:05.640
when you

00:25:05.640 --> 00:25:06.480
express

00:25:06.480 --> 00:25:06.960
a need

00:25:06.960 --> 00:25:07.380
for a

00:25:07.380 --> 00:25:07.580
given

00:25:07.580 --> 00:25:07.880
one

00:25:07.880 --> 00:25:08.240
as an

00:25:08.240 --> 00:25:08.540
argument

00:25:08.540 --> 00:25:08.880
to a

00:25:08.880 --> 00:25:09.240
function

00:25:09.240 --> 00:25:10.120
for example

00:25:10.120 --> 00:25:10.920
if your

00:25:10.920 --> 00:25:11.760
function accepts

00:25:11.760 --> 00:25:12.480
anything

00:25:12.480 --> 00:25:13.440
that has

00:25:13.440 --> 00:25:13.960
a read

00:25:13.960 --> 00:25:14.380
method

00:25:14.380 --> 00:25:15.280
now you

00:25:15.280 --> 00:25:15.800
can express

00:25:15.800 --> 00:25:16.320
that type

00:25:16.320 --> 00:25:16.740
before

00:25:16.740 --> 00:25:17.280
that's really

00:25:17.280 --> 00:25:17.480
cool

00:25:17.480 --> 00:25:17.880
i'm super

00:25:17.880 --> 00:25:18.420
excited about

00:25:18.420 --> 00:25:18.600
this

00:25:18.600 --> 00:25:18.840
because

00:25:18.840 --> 00:25:19.540
if you

00:25:19.540 --> 00:25:20.040
take two

00:25:20.040 --> 00:25:20.880
things like

00:25:20.880 --> 00:25:21.240
maybe

00:25:21.240 --> 00:25:22.180
a set

00:25:22.180 --> 00:25:22.500
and a

00:25:22.500 --> 00:25:22.800
dictionary

00:25:22.800 --> 00:25:23.400
but you

00:25:23.400 --> 00:25:23.660
want to

00:25:23.660 --> 00:25:24.000
express

00:25:24.000 --> 00:25:24.480
i'm going to

00:25:24.480 --> 00:25:24.740
have

00:25:24.740 --> 00:25:25.080
those

00:25:25.080 --> 00:25:25.380
types

00:25:25.380 --> 00:25:25.540
and i

00:25:25.540 --> 00:25:25.880
work

00:25:25.880 --> 00:25:26.040
with

00:25:26.040 --> 00:25:26.140
them

00:25:26.140 --> 00:25:26.240
but

00:25:26.240 --> 00:25:26.440
really

00:25:26.440 --> 00:25:26.640
all

00:25:26.640 --> 00:25:26.760
i

00:25:26.760 --> 00:25:26.940
care

00:25:26.940 --> 00:25:27.140
about

00:25:27.140 --> 00:25:27.240
is

00:25:27.240 --> 00:25:27.360
i

00:25:27.360 --> 00:25:27.500
can

00:25:27.500 --> 00:25:27.780
iterate

00:25:27.780 --> 00:25:28.000
it

00:25:28.000 --> 00:25:28.160
or

00:25:28.160 --> 00:25:28.680
that's

00:25:28.680 --> 00:25:28.860
probably

00:25:28.860 --> 00:25:29.020
not

00:25:29.020 --> 00:25:29.160
the

00:25:29.160 --> 00:25:29.360
perfect

00:25:29.360 --> 00:25:29.680
example

00:25:29.680 --> 00:25:29.980
but you

00:25:29.980 --> 00:25:30.080
know

00:25:30.080 --> 00:25:30.260
like

00:25:30.260 --> 00:25:30.640
it's

00:25:30.640 --> 00:25:30.940
hard

00:25:30.940 --> 00:25:31.060
to

00:25:31.060 --> 00:25:31.220
kind

00:25:31.220 --> 00:25:31.360
of

00:25:31.360 --> 00:25:31.640
make

00:25:31.640 --> 00:25:31.640
make

00:25:31.640 --> 00:25:31.840
the

00:25:31.840 --> 00:25:32.060
type

00:25:32.060 --> 00:25:32.420
system

00:25:32.420 --> 00:25:32.900
express

00:25:32.900 --> 00:25:33.180
that

00:25:33.180 --> 00:25:33.440
now

00:25:33.440 --> 00:25:33.580
and

00:25:33.580 --> 00:25:33.740
this

00:25:33.740 --> 00:25:33.940
just

00:25:33.940 --> 00:25:34.220
says

00:25:34.220 --> 00:25:34.840
well

00:25:34.840 --> 00:25:35.160
if it

00:25:35.160 --> 00:25:35.380
has

00:25:35.380 --> 00:25:35.620
an

00:25:35.620 --> 00:25:36.400
add

00:25:36.400 --> 00:25:36.540
and

00:25:36.540 --> 00:25:36.920
pop

00:25:36.920 --> 00:25:37.260
method

00:25:37.260 --> 00:25:37.520
we're

00:25:37.520 --> 00:25:37.780
good

00:25:37.780 --> 00:25:37.980
like

00:25:37.980 --> 00:25:38.340
whatever

00:25:38.340 --> 00:25:38.620
right

00:25:38.620 --> 00:25:38.880
that's

00:25:38.880 --> 00:25:39.220
is that

00:25:39.220 --> 00:25:39.620
protocols

00:25:39.620 --> 00:25:39.940
yes

00:25:39.940 --> 00:25:40.200
so

00:25:40.200 --> 00:25:40.720
protocols

00:25:40.720 --> 00:25:41.280
is the

00:25:41.280 --> 00:25:41.620
answer

00:25:41.620 --> 00:25:41.860
like

00:25:41.860 --> 00:25:41.980
to

00:25:41.980 --> 00:25:42.100
a

00:25:42.100 --> 00:25:42.380
question

00:25:42.380 --> 00:25:42.580
that

00:25:42.580 --> 00:25:42.860
we've

00:25:42.860 --> 00:25:43.160
received

00:25:43.160 --> 00:25:43.780
a lot

00:25:43.780 --> 00:25:44.260
early

00:25:44.260 --> 00:25:44.600
on

00:25:44.600 --> 00:25:44.960
when

00:25:44.960 --> 00:25:46.080
PEP 484

00:25:46.080 --> 00:25:46.660
came out

00:25:46.660 --> 00:25:46.980
like

00:25:46.980 --> 00:25:47.220
the

00:25:47.220 --> 00:25:47.660
original

00:25:47.660 --> 00:25:48.240
you know

00:25:48.240 --> 00:25:48.680
formation

00:25:48.680 --> 00:25:49.080
of

00:25:49.080 --> 00:25:49.420
static

00:25:49.420 --> 00:25:49.720
typing

00:25:49.720 --> 00:25:49.960
for

00:25:49.960 --> 00:25:50.320
Python

00:25:50.320 --> 00:25:50.620
that

00:25:50.620 --> 00:25:51.420
isn't

00:25:51.420 --> 00:25:51.700
static

00:25:51.700 --> 00:25:52.880
typing

00:25:52.880 --> 00:25:53.280
in

00:25:53.280 --> 00:25:53.620
direct

00:25:53.620 --> 00:25:54.280
opposition

00:25:54.280 --> 00:25:54.620
to

00:25:54.620 --> 00:25:54.840
what

00:25:54.840 --> 00:25:55.140
we

00:25:55.140 --> 00:25:55.400
have

00:25:55.400 --> 00:25:55.600
been

00:25:55.600 --> 00:25:56.300
telling

00:25:56.300 --> 00:25:56.860
everybody

00:25:56.860 --> 00:25:57.460
to do

00:25:57.460 --> 00:25:57.760
for

00:25:57.760 --> 00:25:58.000
all

00:25:58.000 --> 00:25:58.220
those

00:25:58.220 --> 00:25:58.500
years

00:25:58.500 --> 00:25:58.880
which

00:25:58.880 --> 00:25:59.040
is

00:25:59.040 --> 00:25:59.200
duck

00:25:59.200 --> 00:25:59.560
typing

00:25:59.560 --> 00:26:00.280
if

00:26:00.280 --> 00:26:00.500
it

00:26:00.500 --> 00:26:01.600
quacks

00:26:01.600 --> 00:26:01.800
like

00:26:01.800 --> 00:26:01.940
a

00:26:01.940 --> 00:26:02.080
duck

00:26:02.080 --> 00:26:02.200
and

00:26:02.200 --> 00:26:02.400
looks

00:26:02.400 --> 00:26:02.600
like

00:26:02.600 --> 00:26:02.700
a

00:26:02.700 --> 00:26:02.820
duck

00:26:02.820 --> 00:26:02.940
it

00:26:02.940 --> 00:26:03.060
is

00:26:03.060 --> 00:26:03.180
a

00:26:03.180 --> 00:26:03.300
duck

00:26:03.300 --> 00:26:03.440
we

00:26:03.440 --> 00:26:03.660
don't

00:26:03.660 --> 00:26:03.960
care

00:26:03.960 --> 00:26:04.280
if

00:26:04.280 --> 00:26:04.800
this

00:26:04.800 --> 00:26:05.280
instance

00:26:05.280 --> 00:26:05.560
is

00:26:05.560 --> 00:26:05.960
working

00:26:05.960 --> 00:26:06.420
we

00:26:06.420 --> 00:26:06.860
just

00:26:06.860 --> 00:26:07.200
care

00:26:07.200 --> 00:26:07.540
that

00:26:07.540 --> 00:26:08.060
the

00:26:08.060 --> 00:26:08.620
calls

00:26:08.620 --> 00:26:09.280
find

00:26:09.280 --> 00:26:09.500
the

00:26:09.500 --> 00:26:09.680
right

00:26:09.680 --> 00:26:10.120
methods

00:26:10.120 --> 00:26:10.360
with

00:26:10.360 --> 00:26:10.480
the

00:26:10.480 --> 00:26:10.860
right

00:26:10.860 --> 00:26:11.460
arguments

00:26:11.460 --> 00:26:11.760
and

00:26:11.760 --> 00:26:12.000
everything

00:26:12.000 --> 00:26:12.240
is

00:26:12.240 --> 00:26:12.580
fine

00:26:12.580 --> 00:26:13.060
so

00:26:13.060 --> 00:26:13.200
now

00:26:13.200 --> 00:26:13.360
with

00:26:13.360 --> 00:26:13.720
protocols

00:26:13.720 --> 00:26:14.060
you can

00:26:14.060 --> 00:26:14.600
actually

00:26:14.600 --> 00:26:15.740
structurally

00:26:15.740 --> 00:26:16.460
express

00:26:16.460 --> 00:26:16.820
this

00:26:16.820 --> 00:26:17.760
all you

00:26:17.760 --> 00:26:17.960
care

00:26:17.960 --> 00:26:18.260
about

00:26:18.260 --> 00:26:18.520
is

00:26:18.520 --> 00:26:18.640
a

00:26:18.640 --> 00:26:18.840
given

00:26:18.840 --> 00:26:19.340
field

00:26:19.340 --> 00:26:19.660
or

00:26:19.660 --> 00:26:19.820
a

00:26:19.820 --> 00:26:20.020
given

00:26:20.020 --> 00:26:20.440
method

00:26:20.440 --> 00:26:20.620
I

00:26:20.620 --> 00:26:20.840
like

00:26:20.840 --> 00:26:21.000
it

00:26:21.000 --> 00:26:21.180
I

00:26:21.180 --> 00:26:21.340
know

00:26:21.340 --> 00:26:21.660
you're

00:26:21.660 --> 00:26:21.960
a

00:26:21.960 --> 00:26:22.420
proponent

00:26:22.420 --> 00:26:22.840
of

00:26:22.840 --> 00:26:23.340
type

00:26:23.340 --> 00:26:23.680
hints

00:26:23.680 --> 00:26:23.980
and

00:26:23.980 --> 00:26:24.720
my

00:26:24.720 --> 00:26:25.040
pie

00:26:25.040 --> 00:26:25.360
and

00:26:25.360 --> 00:26:25.500
all

00:26:25.500 --> 00:26:25.680
that

00:26:25.680 --> 00:26:25.860
kind

00:26:25.860 --> 00:26:25.940
of

00:26:25.940 --> 00:26:26.120
stuff

00:26:26.120 --> 00:26:26.560
how do

00:26:26.560 --> 00:26:26.740
you see

00:26:26.740 --> 00:26:26.900
the

00:26:26.900 --> 00:26:27.100
state

00:26:27.100 --> 00:26:27.200
of

00:26:27.200 --> 00:26:27.380
that

00:26:27.380 --> 00:26:27.660
these

00:26:27.660 --> 00:26:27.940
days

00:26:27.940 --> 00:26:28.300
well

00:26:28.300 --> 00:26:28.880
we're

00:26:28.880 --> 00:26:29.300
definitely

00:26:29.300 --> 00:26:29.680
on

00:26:29.680 --> 00:26:29.840
the

00:26:29.840 --> 00:26:30.200
rise

00:26:30.200 --> 00:26:30.940
there

00:26:30.940 --> 00:26:31.820
at

00:26:31.820 --> 00:26:32.620
my

00:26:32.620 --> 00:26:33.020
time

00:26:33.020 --> 00:26:33.300
at

00:26:33.300 --> 00:26:33.720
Instagram

00:26:33.720 --> 00:26:34.080
and

00:26:34.080 --> 00:26:34.240
at

00:26:34.240 --> 00:26:34.600
Facebook

00:26:34.600 --> 00:26:35.200
we've

00:26:35.200 --> 00:26:35.360
seen

00:26:35.360 --> 00:26:35.880
a lot

00:26:35.880 --> 00:26:36.300
of

00:26:36.300 --> 00:26:36.860
improvements

00:26:36.860 --> 00:26:37.400
both

00:26:37.400 --> 00:26:37.860
in

00:26:37.860 --> 00:26:38.240
terms

00:26:38.240 --> 00:26:38.480
of

00:26:38.480 --> 00:26:39.040
security

00:26:39.040 --> 00:26:40.260
team

00:26:40.260 --> 00:26:40.760
velocity

00:26:40.760 --> 00:26:41.140
and

00:26:41.140 --> 00:26:41.320
as

00:26:41.320 --> 00:26:41.560
well

00:26:41.560 --> 00:26:42.120
just

00:26:42.120 --> 00:26:42.400
being

00:26:42.400 --> 00:26:42.600
able

00:26:42.600 --> 00:26:42.820
to

00:26:42.820 --> 00:26:43.300
comprehend

00:26:43.300 --> 00:26:43.580
the

00:26:43.580 --> 00:26:43.820
source

00:26:43.820 --> 00:26:44.220
code

00:26:44.220 --> 00:26:44.960
when

00:26:44.960 --> 00:26:45.380
types

00:26:45.380 --> 00:26:45.560
were

00:26:45.560 --> 00:26:46.140
introduced

00:26:46.140 --> 00:26:46.480
to

00:26:46.480 --> 00:26:46.800
the

00:26:46.800 --> 00:26:47.240
biggest

00:26:47.240 --> 00:26:47.760
PHP

00:26:47.760 --> 00:26:48.500
component

00:26:48.500 --> 00:26:49.120
of

00:26:49.120 --> 00:26:50.200
Facebook.com

00:26:50.200 --> 00:26:51.140
and so

00:26:51.140 --> 00:26:52.080
since

00:26:52.080 --> 00:26:52.800
I guess

00:26:52.800 --> 00:26:53.620
2013

00:26:53.620 --> 00:26:54.300
I wanted

00:26:54.300 --> 00:26:54.620
to see

00:26:54.620 --> 00:26:54.880
something

00:26:54.880 --> 00:26:55.320
similar

00:26:55.320 --> 00:26:55.580
in

00:26:55.580 --> 00:26:55.920
Python

00:26:55.920 --> 00:26:56.660
so

00:26:56.660 --> 00:26:56.900
like

00:26:56.900 --> 00:26:57.600
pep484

00:26:57.600 --> 00:26:58.240
came out

00:26:58.240 --> 00:26:58.640
you know

00:26:58.640 --> 00:26:59.280
soon enough

00:26:59.280 --> 00:26:59.800
Python 3

00:26:59.800 --> 00:27:00.500
started getting

00:27:00.500 --> 00:27:00.960
adopted

00:27:00.960 --> 00:27:01.420
more and

00:27:01.420 --> 00:27:01.720
more

00:27:01.720 --> 00:27:01.980
and

00:27:01.980 --> 00:27:02.540
you know

00:27:02.540 --> 00:27:02.940
this is

00:27:02.940 --> 00:27:03.240
when

00:27:03.240 --> 00:27:04.060
annotations

00:27:04.060 --> 00:27:04.500
which are

00:27:04.500 --> 00:27:05.600
the nice

00:27:05.600 --> 00:27:05.980
way to

00:27:05.980 --> 00:27:06.280
express

00:27:06.280 --> 00:27:06.760
types

00:27:06.760 --> 00:27:07.940
have been

00:27:07.940 --> 00:27:08.480
gaining

00:27:08.480 --> 00:27:08.920
adoption

00:27:08.920 --> 00:27:09.920
and

00:27:09.920 --> 00:27:10.480
these

00:27:10.480 --> 00:27:10.780
days

00:27:10.780 --> 00:27:11.060
like

00:27:11.060 --> 00:27:11.360
from

00:27:11.360 --> 00:27:11.540
what

00:27:11.540 --> 00:27:11.700
I've

00:27:11.700 --> 00:27:11.900
heard

00:27:11.900 --> 00:27:12.220
at

00:27:12.220 --> 00:27:12.400
the

00:27:12.400 --> 00:27:12.880
conference

00:27:12.880 --> 00:27:13.340
now

00:27:13.340 --> 00:27:14.520
90%

00:27:14.520 --> 00:27:15.240
of

00:27:15.240 --> 00:27:16.080
functions

00:27:16.080 --> 00:27:17.020
in

00:27:17.020 --> 00:27:17.580
the

00:27:17.580 --> 00:27:17.960
Instagram

00:27:17.960 --> 00:27:18.320
code

00:27:18.320 --> 00:27:18.660
base

00:27:18.660 --> 00:27:19.040
which is

00:27:19.040 --> 00:27:19.300
north

00:27:19.300 --> 00:27:19.460
of

00:27:19.460 --> 00:27:19.640
2

00:27:19.640 --> 00:27:19.820
million

00:27:19.820 --> 00:27:20.080
lines

00:27:20.080 --> 00:27:20.240
of

00:27:20.240 --> 00:27:20.460
code

00:27:20.460 --> 00:27:20.620
at

00:27:20.620 --> 00:27:20.740
the

00:27:20.740 --> 00:27:21.140
moment

00:27:21.140 --> 00:27:21.740
is

00:27:21.740 --> 00:27:22.060
covered

00:27:22.060 --> 00:27:22.300
in

00:27:22.300 --> 00:27:22.660
types

00:27:22.660 --> 00:27:23.180
which is

00:27:23.180 --> 00:27:23.780
amazing

00:27:23.780 --> 00:27:24.100
right

00:27:24.100 --> 00:27:24.660
that is

00:27:24.660 --> 00:27:24.960
a big

00:27:24.960 --> 00:27:25.340
achievement

00:27:25.340 --> 00:27:25.660
so

00:27:25.660 --> 00:27:26.080
definitely

00:27:26.080 --> 00:27:26.860
this trend

00:27:26.860 --> 00:27:27.120
is on

00:27:27.120 --> 00:27:27.480
the rise

00:27:27.480 --> 00:27:27.760
which

00:27:27.760 --> 00:27:29.260
I am

00:27:29.260 --> 00:27:29.660
very happy

00:27:29.660 --> 00:27:30.060
about

00:27:30.060 --> 00:27:30.420
yeah

00:27:30.420 --> 00:27:30.820
that's

00:27:30.820 --> 00:27:31.100
awesome

00:27:31.100 --> 00:27:31.560
Anthony

00:27:31.560 --> 00:27:32.060
what are

00:27:32.060 --> 00:27:32.160
your

00:27:32.160 --> 00:27:32.380
thoughts

00:27:32.380 --> 00:27:32.740
on

00:27:32.740 --> 00:27:33.340
type

00:27:33.340 --> 00:27:33.540
hints

00:27:33.540 --> 00:27:34.200
annotations

00:27:34.200 --> 00:27:34.700
and

00:27:34.700 --> 00:27:35.140
do you

00:27:35.140 --> 00:27:35.320
like

00:27:35.320 --> 00:27:35.620
them

00:27:35.620 --> 00:27:36.000
have

00:27:36.000 --> 00:27:36.120
they

00:27:36.120 --> 00:27:36.340
changed

00:27:36.340 --> 00:27:36.480
your

00:27:36.480 --> 00:27:36.660
code

00:27:36.660 --> 00:27:36.840
do you

00:27:36.840 --> 00:27:37.000
use

00:27:37.000 --> 00:27:37.220
them

00:27:37.220 --> 00:27:37.500
I

00:27:37.500 --> 00:27:37.780
actually

00:27:37.780 --> 00:27:38.340
use

00:27:38.340 --> 00:27:38.460
them

00:27:38.460 --> 00:27:38.660
very

00:27:38.660 --> 00:27:39.040
rarely

00:27:39.040 --> 00:27:39.680
in

00:27:39.680 --> 00:27:40.360
3.7

00:27:40.360 --> 00:27:40.800
there's

00:27:40.800 --> 00:27:41.120
the

00:27:41.120 --> 00:27:41.480
the

00:27:41.480 --> 00:27:41.920
type

00:27:41.920 --> 00:27:42.720
annotations

00:27:42.720 --> 00:27:43.640
the delayed

00:27:43.640 --> 00:27:44.120
evaluation

00:27:44.120 --> 00:27:44.500
type

00:27:44.500 --> 00:27:45.020
annotations

00:27:45.020 --> 00:27:45.360
yeah

00:27:45.360 --> 00:27:45.700
it's gotten

00:27:45.700 --> 00:27:45.960
a little

00:27:45.960 --> 00:27:46.520
nicer

00:27:46.520 --> 00:27:46.740
in that

00:27:46.740 --> 00:27:46.960
way

00:27:46.960 --> 00:27:47.200
in

00:27:47.200 --> 00:27:47.800
3.7

00:27:47.800 --> 00:27:48.080
which

00:27:48.080 --> 00:27:48.400
makes

00:27:48.400 --> 00:27:48.520
it

00:27:48.520 --> 00:27:48.720
a bit

00:27:48.720 --> 00:27:49.140
easier

00:27:49.140 --> 00:27:49.560
in

00:27:49.560 --> 00:27:49.800
terms

00:27:49.800 --> 00:27:50.000
of

00:27:50.000 --> 00:27:50.200
what

00:27:50.200 --> 00:27:50.300
you

00:27:50.300 --> 00:27:50.440
have

00:27:50.440 --> 00:27:50.560
to

00:27:50.560 --> 00:27:50.900
import

00:27:50.900 --> 00:27:51.060
and

00:27:51.060 --> 00:27:51.340
when

00:27:51.340 --> 00:27:52.080
but

00:27:52.080 --> 00:27:52.300
the

00:27:52.300 --> 00:27:52.460
only

00:27:52.460 --> 00:27:52.780
reason

00:27:52.780 --> 00:27:52.980
I

00:27:52.980 --> 00:27:53.420
use

00:27:53.420 --> 00:27:53.580
them

00:27:53.580 --> 00:27:54.120
seldomly

00:27:54.120 --> 00:27:54.260
is

00:27:54.260 --> 00:27:54.480
because

00:27:54.480 --> 00:27:54.640
I

00:27:54.640 --> 00:27:54.880
mainly

00:27:54.880 --> 00:27:55.200
work

00:27:55.200 --> 00:27:55.520
on

00:27:55.520 --> 00:27:56.300
libraries

00:27:56.300 --> 00:27:56.560
which

00:27:56.560 --> 00:27:56.700
I

00:27:56.700 --> 00:27:57.060
publish

00:27:57.060 --> 00:27:57.200
to

00:27:57.200 --> 00:27:57.620
PyPI

00:27:57.620 --> 00:27:58.520
and

00:27:58.520 --> 00:27:58.740
which

00:27:58.740 --> 00:27:58.940
are

00:27:58.940 --> 00:27:59.080
used

00:27:59.080 --> 00:27:59.220
by

00:27:59.220 --> 00:27:59.520
people

00:27:59.520 --> 00:27:59.900
who

00:27:59.900 --> 00:28:00.700
have

00:28:00.700 --> 00:28:00.980
Python

00:28:00.980 --> 00:28:01.720
3.5

00:28:01.720 --> 00:28:02.740
3.6

00:28:02.740 --> 00:28:03.440
and

00:28:03.440 --> 00:28:03.700
some

00:28:03.700 --> 00:28:04.340
2.7

00:28:04.340 --> 00:28:04.700
as well

00:28:04.700 --> 00:28:05.000
so

00:28:05.000 --> 00:28:05.540
I

00:28:05.540 --> 00:28:05.740
really

00:28:05.740 --> 00:28:05.920
have

00:28:05.920 --> 00:28:06.040
to

00:28:06.040 --> 00:28:06.240
cover

00:28:06.240 --> 00:28:06.400
the

00:28:06.400 --> 00:28:06.640
lowest

00:28:06.640 --> 00:28:06.920
common

00:28:06.920 --> 00:28:07.480
denominator

00:28:07.480 --> 00:28:07.960
when it

00:28:07.960 --> 00:28:08.100
comes

00:28:08.100 --> 00:28:08.240
to

00:28:08.240 --> 00:28:08.600
users

00:28:08.600 --> 00:28:09.260
because

00:28:09.260 --> 00:28:09.580
they're

00:28:09.580 --> 00:28:09.840
mainly

00:28:09.840 --> 00:28:10.360
utility

00:28:10.360 --> 00:28:10.820
libraries

00:28:10.820 --> 00:28:11.100
that I

00:28:11.100 --> 00:28:11.340
work

00:28:11.340 --> 00:28:11.540
on

00:28:11.540 --> 00:28:11.940
not

00:28:11.940 --> 00:28:13.980
single

00:28:13.980 --> 00:28:15.180
deployment

00:28:15.180 --> 00:28:15.940
applications

00:28:15.940 --> 00:28:16.180
yeah

00:28:16.180 --> 00:28:16.500
or something

00:28:16.500 --> 00:28:16.740
like

00:28:16.740 --> 00:28:17.040
black

00:28:17.040 --> 00:28:17.200
that

00:28:17.200 --> 00:28:17.860
doesn't

00:28:17.860 --> 00:28:18.320
really

00:28:18.320 --> 00:28:18.600
get

00:28:18.600 --> 00:28:19.180
consumed

00:28:19.180 --> 00:28:19.840
directly

00:28:19.840 --> 00:28:20.040
but

00:28:20.040 --> 00:28:20.160
is

00:28:20.160 --> 00:28:20.360
more

00:28:20.360 --> 00:28:20.800
executed

00:28:20.800 --> 00:28:21.100
right

00:28:21.100 --> 00:28:21.440
like

00:28:21.440 --> 00:28:21.780
black

00:28:21.780 --> 00:28:21.920
or

00:28:21.920 --> 00:28:22.060
py

00:28:22.060 --> 00:28:22.260
test

00:28:22.260 --> 00:28:22.380
or

00:28:22.380 --> 00:28:22.580
something

00:28:22.580 --> 00:28:23.980
what's

00:28:23.980 --> 00:28:24.100
the

00:28:24.100 --> 00:28:24.240
next

00:28:24.240 --> 00:28:24.380
one

00:28:24.380 --> 00:28:24.560
all

00:28:24.560 --> 00:28:24.680
right

00:28:24.680 --> 00:28:24.920
so

00:28:24.920 --> 00:28:25.440
the

00:28:25.440 --> 00:28:25.660
next

00:28:25.660 --> 00:28:25.880
pep

00:28:25.880 --> 00:28:26.060
would

00:28:26.060 --> 00:28:26.740
be

00:28:26.740 --> 00:28:27.660
pep

00:28:27.660 --> 00:28:29.060
585

00:28:29.060 --> 00:28:29.900
that I

00:28:29.900 --> 00:28:30.200
actually

00:28:30.200 --> 00:28:30.500
wrote

00:28:30.500 --> 00:28:30.760
well

00:28:30.760 --> 00:28:31.040
it's

00:28:31.040 --> 00:28:31.220
still

00:28:31.220 --> 00:28:31.380
in

00:28:31.380 --> 00:28:31.620
draft

00:28:31.620 --> 00:28:31.960
form

00:28:31.960 --> 00:28:32.320
so

00:28:32.320 --> 00:28:32.940
to

00:28:32.940 --> 00:28:33.140
kind

00:28:33.140 --> 00:28:33.260
of

00:28:33.260 --> 00:28:33.460
set

00:28:33.460 --> 00:28:33.640
the

00:28:33.640 --> 00:28:33.880
stage

00:28:33.880 --> 00:28:34.100
for

00:28:34.100 --> 00:28:34.280
the

00:28:34.280 --> 00:28:34.540
pep

00:28:34.540 --> 00:28:34.820
what

00:28:34.820 --> 00:28:35.160
Anthony

00:28:35.160 --> 00:28:35.400
said

00:28:35.400 --> 00:28:35.540
is

00:28:35.540 --> 00:28:35.720
like

00:28:35.720 --> 00:28:36.080
there's

00:28:36.080 --> 00:28:36.460
plenty

00:28:36.460 --> 00:28:36.780
of

00:28:36.780 --> 00:28:37.300
cases

00:28:37.300 --> 00:28:37.760
where

00:28:37.760 --> 00:28:38.620
currently

00:28:38.620 --> 00:28:39.040
typing

00:28:39.040 --> 00:28:39.760
that was

00:28:39.760 --> 00:28:40.240
added

00:28:40.240 --> 00:28:40.660
rather

00:28:40.660 --> 00:28:41.480
carefully

00:28:41.480 --> 00:28:41.840
to

00:28:41.840 --> 00:28:42.040
the

00:28:42.040 --> 00:28:42.500
language

00:28:42.500 --> 00:28:43.240
requires

00:28:43.240 --> 00:28:43.440
you

00:28:43.440 --> 00:28:43.720
to

00:28:43.720 --> 00:28:44.360
import

00:28:44.360 --> 00:28:44.840
names

00:28:44.840 --> 00:28:45.360
that

00:28:45.360 --> 00:28:45.560
you're

00:28:45.560 --> 00:28:45.780
later

00:28:45.780 --> 00:28:46.160
using

00:28:46.160 --> 00:28:46.420
as

00:28:46.420 --> 00:28:46.820
types

00:28:46.820 --> 00:28:47.580
there's

00:28:47.580 --> 00:28:47.740
some

00:28:47.740 --> 00:28:48.280
situations

00:28:48.280 --> 00:28:48.820
where

00:28:48.820 --> 00:28:49.540
you are

00:28:49.540 --> 00:28:50.140
introducing

00:28:50.140 --> 00:28:50.600
names

00:28:50.600 --> 00:28:50.780
to

00:28:50.780 --> 00:28:50.940
your

00:28:50.940 --> 00:28:51.240
global

00:28:51.240 --> 00:28:51.860
scope

00:28:51.860 --> 00:28:52.300
just

00:28:52.300 --> 00:28:52.780
for

00:28:52.780 --> 00:28:53.220
type

00:28:53.220 --> 00:28:53.740
aliasing

00:28:53.740 --> 00:28:54.280
or

00:28:54.280 --> 00:28:54.540
to

00:28:54.540 --> 00:28:55.020
introduce

00:28:55.020 --> 00:28:55.300
type

00:28:55.300 --> 00:28:55.960
variables

00:28:55.960 --> 00:28:56.660
right

00:28:56.660 --> 00:28:57.000
for

00:28:57.000 --> 00:28:57.260
example

00:28:57.260 --> 00:28:57.440
if

00:28:57.440 --> 00:28:57.600
you've

00:28:57.600 --> 00:28:57.720
got

00:28:57.720 --> 00:28:57.860
a

00:28:57.860 --> 00:28:58.280
function

00:28:58.280 --> 00:28:58.780
and

00:28:58.780 --> 00:28:58.860
you

00:28:58.860 --> 00:28:58.960
want

00:28:58.960 --> 00:28:59.020
to

00:28:59.020 --> 00:28:59.140
say

00:28:59.140 --> 00:28:59.280
its

00:28:59.280 --> 00:28:59.560
return

00:28:59.560 --> 00:28:59.820
type

00:28:59.820 --> 00:28:59.940
is

00:28:59.940 --> 00:29:00.120
this

00:29:00.120 --> 00:29:00.580
object

00:29:00.580 --> 00:29:01.040
you

00:29:01.040 --> 00:29:01.240
now

00:29:01.240 --> 00:29:01.340
have

00:29:01.340 --> 00:29:01.440
to

00:29:01.440 --> 00:29:01.780
import

00:29:01.780 --> 00:29:01.920
at

00:29:01.920 --> 00:29:02.020
the

00:29:02.020 --> 00:29:02.260
top

00:29:02.260 --> 00:29:02.780
if

00:29:02.780 --> 00:29:02.960
you

00:29:02.960 --> 00:29:03.140
had

00:29:03.140 --> 00:29:03.520
never

00:29:03.520 --> 00:29:03.920
actually

00:29:03.920 --> 00:29:04.140
had

00:29:04.140 --> 00:29:04.300
that

00:29:04.300 --> 00:29:04.540
part

00:29:04.540 --> 00:29:04.840
called

00:29:04.840 --> 00:29:05.120
maybe

00:29:05.120 --> 00:29:05.280
it

00:29:05.280 --> 00:29:05.380
would

00:29:05.380 --> 00:29:05.500
have

00:29:05.500 --> 00:29:05.700
never

00:29:05.700 --> 00:29:05.900
been

00:29:05.900 --> 00:29:06.300
imported

00:29:06.300 --> 00:29:06.700
until

00:29:06.700 --> 00:29:07.420
lazily

00:29:07.420 --> 00:29:07.600
or

00:29:07.600 --> 00:29:08.240
there's

00:29:08.240 --> 00:29:08.540
changes

00:29:08.540 --> 00:29:08.800
in

00:29:08.800 --> 00:29:09.200
behavior

00:29:09.200 --> 00:29:09.680
because

00:29:09.680 --> 00:29:09.840
of

00:29:09.840 --> 00:29:10.000
that

00:29:10.000 --> 00:29:10.200
right

00:29:10.200 --> 00:29:10.480
yeah

00:29:10.480 --> 00:29:10.740
this

00:29:10.740 --> 00:29:11.000
is

00:29:11.000 --> 00:29:11.460
often

00:29:11.460 --> 00:29:11.900
problematic

00:29:11.900 --> 00:29:12.400
right

00:29:12.400 --> 00:29:12.580
like

00:29:12.580 --> 00:29:12.920
what is

00:29:12.920 --> 00:29:13.400
even

00:29:13.400 --> 00:29:13.800
more

00:29:13.800 --> 00:29:14.020
like

00:29:14.020 --> 00:29:14.220
just

00:29:14.220 --> 00:29:14.660
cumbersome

00:29:14.660 --> 00:29:14.880
for

00:29:14.880 --> 00:29:15.060
the

00:29:15.060 --> 00:29:15.340
user

00:29:15.340 --> 00:29:15.680
is

00:29:15.680 --> 00:29:15.920
that

00:29:15.920 --> 00:29:16.520
there's

00:29:16.520 --> 00:29:16.860
plenty

00:29:16.860 --> 00:29:17.360
of

00:29:17.360 --> 00:29:17.740
either

00:29:17.740 --> 00:29:18.220
built-in

00:29:18.220 --> 00:29:18.540
types

00:29:18.540 --> 00:29:18.840
or

00:29:18.840 --> 00:29:19.360
abstract

00:29:19.360 --> 00:29:20.000
based

00:29:20.000 --> 00:29:20.400
classes

00:29:20.400 --> 00:29:20.740
that

00:29:20.740 --> 00:29:21.400
have

00:29:21.400 --> 00:29:21.620
their

00:29:21.620 --> 00:29:22.440
equivalents

00:29:22.440 --> 00:29:22.780
in the

00:29:22.780 --> 00:29:23.020
typing

00:29:23.020 --> 00:29:23.440
module

00:29:23.440 --> 00:29:23.800
meaning

00:29:23.800 --> 00:29:24.520
if you

00:29:24.520 --> 00:29:24.820
want to

00:29:24.820 --> 00:29:25.240
express

00:29:25.240 --> 00:29:25.540
that

00:29:25.540 --> 00:29:25.880
some

00:29:25.880 --> 00:29:26.340
argument

00:29:26.340 --> 00:29:26.860
is a

00:29:26.860 --> 00:29:27.040
list

00:29:27.040 --> 00:29:27.200
of

00:29:27.200 --> 00:29:27.440
string

00:29:27.440 --> 00:29:27.600
you

00:29:27.600 --> 00:29:27.760
have

00:29:27.760 --> 00:29:27.900
to

00:29:27.900 --> 00:29:28.400
import

00:29:28.400 --> 00:29:28.700
an

00:29:28.700 --> 00:29:29.220
uppercase

00:29:29.220 --> 00:29:29.560
list

00:29:29.560 --> 00:29:29.820
from

00:29:29.820 --> 00:29:30.020
the

00:29:30.020 --> 00:29:30.280
typing

00:29:30.280 --> 00:29:30.660
module

00:29:30.660 --> 00:29:31.120
and say

00:29:31.120 --> 00:29:31.640
uppercase

00:29:31.640 --> 00:29:32.020
list

00:29:32.020 --> 00:29:32.580
of

00:29:32.580 --> 00:29:33.020
string

00:29:33.020 --> 00:29:33.760
and I

00:29:33.760 --> 00:29:34.140
always

00:29:34.140 --> 00:29:34.640
found

00:29:34.640 --> 00:29:34.840
that

00:29:34.840 --> 00:29:35.300
clumsy

00:29:35.300 --> 00:29:35.800
right

00:29:35.800 --> 00:29:35.940
I

00:29:35.940 --> 00:29:36.200
always

00:29:36.200 --> 00:29:36.460
found

00:29:36.460 --> 00:29:36.600
that

00:29:36.600 --> 00:29:37.000
it

00:29:37.000 --> 00:29:37.240
is

00:29:37.240 --> 00:29:37.920
something

00:29:37.920 --> 00:29:38.400
new

00:29:38.400 --> 00:29:38.620
that

00:29:38.620 --> 00:29:38.720
you

00:29:38.720 --> 00:29:38.880
have

00:29:38.880 --> 00:29:39.000
to

00:29:39.000 --> 00:29:39.600
explain

00:29:39.600 --> 00:29:39.880
to

00:29:39.880 --> 00:29:40.120
new

00:29:40.120 --> 00:29:40.560
programmers

00:29:40.560 --> 00:29:40.920
that

00:29:40.920 --> 00:29:41.220
are

00:29:41.220 --> 00:29:41.820
first

00:29:41.820 --> 00:29:42.640
interacting

00:29:42.640 --> 00:29:42.880
with

00:29:42.880 --> 00:29:43.160
typing

00:29:43.160 --> 00:29:43.460
and

00:29:43.460 --> 00:29:44.000
there's

00:29:44.000 --> 00:29:44.200
not

00:29:44.200 --> 00:29:44.460
really

00:29:44.460 --> 00:29:44.660
a

00:29:44.660 --> 00:29:44.860
great

00:29:44.860 --> 00:29:45.180
reason

00:29:45.180 --> 00:29:45.420
for

00:29:45.420 --> 00:29:45.600
that

00:29:45.600 --> 00:29:45.740
it

00:29:45.740 --> 00:29:45.900
was

00:29:45.900 --> 00:29:46.120
just

00:29:46.120 --> 00:29:46.300
you

00:29:46.300 --> 00:29:46.420
know

00:29:46.420 --> 00:29:46.620
we

00:29:46.620 --> 00:29:46.940
wanted

00:29:46.940 --> 00:29:47.640
the

00:29:47.640 --> 00:29:48.120
actual

00:29:48.120 --> 00:29:48.800
lowercase

00:29:48.800 --> 00:29:49.080
list

00:29:49.080 --> 00:29:49.380
to be

00:29:49.380 --> 00:29:49.840
orthogonal

00:29:49.840 --> 00:29:50.340
and

00:29:50.340 --> 00:29:50.960
not

00:29:50.960 --> 00:29:51.160
know

00:29:51.160 --> 00:29:51.540
anything

00:29:51.540 --> 00:29:51.880
about

00:29:51.880 --> 00:29:52.080
the

00:29:52.080 --> 00:29:52.320
starting

00:29:52.320 --> 00:29:52.620
typing

00:29:52.620 --> 00:29:53.080
concept

00:29:53.080 --> 00:29:53.360
which

00:29:53.360 --> 00:29:53.500
is

00:29:53.500 --> 00:29:53.800
mostly

00:29:53.800 --> 00:29:54.100
used

00:29:54.100 --> 00:29:54.440
by

00:29:54.440 --> 00:29:55.020
an

00:29:55.020 --> 00:29:55.500
external

00:29:55.500 --> 00:29:55.820
type

00:29:55.820 --> 00:29:56.280
checker

00:29:56.280 --> 00:29:56.440
it

00:29:56.440 --> 00:29:56.700
does

00:29:56.700 --> 00:29:56.860
not

00:29:56.860 --> 00:29:57.200
have

00:29:57.200 --> 00:29:57.540
a

00:29:57.540 --> 00:29:58.080
big

00:29:58.080 --> 00:29:58.440
runtime

00:29:58.440 --> 00:29:59.080
component

00:29:59.080 --> 00:29:59.560
does

00:29:59.560 --> 00:29:59.740
have

00:29:59.740 --> 00:29:59.880
a

00:29:59.880 --> 00:30:00.100
little

00:30:00.100 --> 00:30:00.360
right

00:30:00.360 --> 00:30:00.600
because

00:30:00.600 --> 00:30:00.760
you

00:30:00.760 --> 00:30:00.940
can

00:30:00.940 --> 00:30:01.360
inherit

00:30:01.360 --> 00:30:01.860
from

00:30:01.860 --> 00:30:02.320
generic

00:30:02.320 --> 00:30:02.740
types

00:30:02.740 --> 00:30:02.960
so

00:30:02.960 --> 00:30:03.100
you

00:30:03.100 --> 00:30:03.240
can

00:30:03.240 --> 00:30:03.520
actually

00:30:03.520 --> 00:30:03.900
create

00:30:03.900 --> 00:30:04.120
your

00:30:04.120 --> 00:30:04.400
own

00:30:04.400 --> 00:30:04.640
data

00:30:04.640 --> 00:30:05.120
structure

00:30:05.120 --> 00:30:05.760
where

00:30:05.760 --> 00:30:05.900
you

00:30:05.900 --> 00:30:06.220
say

00:30:06.220 --> 00:30:06.480
that

00:30:06.480 --> 00:30:06.740
this

00:30:06.740 --> 00:30:06.940
is

00:30:06.940 --> 00:30:07.500
a

00:30:07.500 --> 00:30:08.020
collection

00:30:08.020 --> 00:30:08.620
of

00:30:08.620 --> 00:30:09.340
types

00:30:09.340 --> 00:30:09.780
T

00:30:09.780 --> 00:30:10.400
so

00:30:10.400 --> 00:30:10.780
this

00:30:10.780 --> 00:30:11.020
is

00:30:11.020 --> 00:30:11.220
a

00:30:11.220 --> 00:30:11.780
possibility

00:30:11.780 --> 00:30:12.340
but

00:30:12.340 --> 00:30:12.520
for

00:30:12.520 --> 00:30:12.780
very

00:30:12.780 --> 00:30:13.180
many

00:30:13.180 --> 00:30:13.600
cases

00:30:13.600 --> 00:30:14.300
this

00:30:14.300 --> 00:30:14.560
runtime

00:30:14.560 --> 00:30:15.020
component

00:30:15.020 --> 00:30:15.360
is

00:30:15.360 --> 00:30:15.580
just

00:30:15.580 --> 00:30:15.740
a

00:30:15.740 --> 00:30:16.180
hindrance

00:30:16.180 --> 00:30:16.640
something

00:30:16.640 --> 00:30:16.920
that

00:30:16.920 --> 00:30:17.040
you

00:30:17.040 --> 00:30:17.280
have

00:30:17.280 --> 00:30:17.420
to

00:30:17.420 --> 00:30:17.800
remember

00:30:17.800 --> 00:30:18.000
to

00:30:18.000 --> 00:30:18.480
import

00:30:18.480 --> 00:30:18.780
the

00:30:18.780 --> 00:30:19.060
names

00:30:19.060 --> 00:30:19.280
look

00:30:19.280 --> 00:30:19.620
different

00:30:19.620 --> 00:30:19.940
because

00:30:19.940 --> 00:30:20.160
they're

00:30:20.160 --> 00:30:20.740
uppercase

00:30:20.740 --> 00:30:20.940
and

00:30:20.940 --> 00:30:21.700
lowercase

00:30:21.700 --> 00:30:22.500
they might

00:30:22.500 --> 00:30:22.740
look

00:30:22.740 --> 00:30:23.180
exactly

00:30:23.180 --> 00:30:23.420
the

00:30:23.420 --> 00:30:23.660
same

00:30:23.660 --> 00:30:24.040
in

00:30:24.040 --> 00:30:24.320
form

00:30:24.320 --> 00:30:24.580
of

00:30:24.580 --> 00:30:25.040
set

00:30:25.040 --> 00:30:25.580
but

00:30:25.580 --> 00:30:25.800
they

00:30:25.800 --> 00:30:26.080
actually

00:30:26.080 --> 00:30:26.320
mean

00:30:26.320 --> 00:30:26.620
something

00:30:26.620 --> 00:30:26.900
else

00:30:26.900 --> 00:30:27.280
now

00:30:27.280 --> 00:30:27.800
because

00:30:27.800 --> 00:30:28.760
the

00:30:28.760 --> 00:30:28.940
point

00:30:28.940 --> 00:30:29.180
being

00:30:29.180 --> 00:30:29.420
like

00:30:29.420 --> 00:30:29.860
so

00:30:29.860 --> 00:30:30.080
that's

00:30:30.080 --> 00:30:30.200
the

00:30:30.200 --> 00:30:30.440
first

00:30:30.440 --> 00:30:31.100
issue

00:30:31.100 --> 00:30:31.280
and

00:30:31.280 --> 00:30:31.440
the

00:30:31.440 --> 00:30:31.640
second

00:30:31.640 --> 00:30:31.900
issue

00:30:31.900 --> 00:30:32.040
is

00:30:32.040 --> 00:30:32.200
that

00:30:32.200 --> 00:30:32.580
this

00:30:32.580 --> 00:30:32.700
is

00:30:32.700 --> 00:30:32.940
something

00:30:32.940 --> 00:30:33.160
that

00:30:33.160 --> 00:30:33.440
sits

00:30:33.440 --> 00:30:33.600
in

00:30:33.600 --> 00:30:33.900
memory

00:30:33.900 --> 00:30:34.380
right

00:30:34.380 --> 00:30:34.820
this

00:30:34.820 --> 00:30:34.940
is

00:30:34.940 --> 00:30:35.180
something

00:30:35.180 --> 00:30:35.420
that

00:30:35.420 --> 00:30:35.540
you

00:30:35.540 --> 00:30:35.900
spend

00:30:35.900 --> 00:30:36.500
time

00:30:36.500 --> 00:30:36.780
on

00:30:36.780 --> 00:30:36.980
when

00:30:36.980 --> 00:30:37.160
you're

00:30:37.160 --> 00:30:37.460
starting

00:30:37.460 --> 00:30:37.700
up

00:30:37.700 --> 00:30:37.820
your

00:30:37.820 --> 00:30:38.300
program

00:30:38.300 --> 00:30:39.280
so

00:30:39.280 --> 00:30:39.400
I

00:30:39.400 --> 00:30:39.600
always

00:30:39.600 --> 00:30:39.800
felt

00:30:39.800 --> 00:30:39.960
like

00:30:39.960 --> 00:30:40.200
this

00:30:40.200 --> 00:30:40.400
is

00:30:40.400 --> 00:30:40.700
something

00:30:40.700 --> 00:30:40.920
that

00:30:40.920 --> 00:30:41.040
we

00:30:41.040 --> 00:30:41.300
can

00:30:41.300 --> 00:30:41.800
maybe

00:30:41.800 --> 00:30:42.640
live

00:30:42.640 --> 00:30:43.080
without

00:30:43.080 --> 00:30:44.020
hence

00:30:44.020 --> 00:30:44.360
pep

00:30:44.360 --> 00:30:45.240
563

00:30:45.240 --> 00:30:45.700
which

00:30:45.700 --> 00:30:46.240
actually

00:30:46.240 --> 00:30:46.980
postpones

00:30:46.980 --> 00:30:47.600
evaluation

00:30:47.600 --> 00:30:48.040
of

00:30:48.040 --> 00:30:48.680
annotations

00:30:48.680 --> 00:30:48.900
that

00:30:48.900 --> 00:30:49.080
was

00:30:49.080 --> 00:30:49.440
introduced

00:30:49.440 --> 00:30:49.600
in

00:30:49.600 --> 00:30:49.800
python

00:30:49.800 --> 00:30:50.240
37

00:30:50.240 --> 00:30:51.100
and

00:30:51.100 --> 00:30:51.820
stemming

00:30:51.820 --> 00:30:52.060
from

00:30:52.060 --> 00:30:52.440
that

00:30:52.440 --> 00:30:52.640
you

00:30:52.640 --> 00:30:52.820
know

00:30:52.820 --> 00:30:53.100
having

00:30:53.100 --> 00:30:53.360
that

00:30:53.360 --> 00:30:53.560
foot

00:30:53.560 --> 00:30:53.680
in

00:30:53.680 --> 00:30:53.820
the

00:30:53.820 --> 00:30:54.020
door

00:30:54.020 --> 00:30:54.240
that

00:30:54.240 --> 00:30:54.420
like

00:30:54.420 --> 00:30:54.840
now

00:30:54.840 --> 00:30:55.620
the

00:30:55.620 --> 00:30:56.460
annotations

00:30:56.460 --> 00:30:56.900
are not

00:30:56.900 --> 00:30:57.380
evaluated

00:30:57.380 --> 00:30:57.880
anymore

00:30:57.880 --> 00:30:58.820
we can

00:30:58.820 --> 00:30:59.240
regain

00:30:59.240 --> 00:30:59.480
some

00:30:59.480 --> 00:30:59.620
of

00:30:59.620 --> 00:30:59.720
the

00:30:59.720 --> 00:31:00.140
usability

00:31:00.140 --> 00:31:00.580
that

00:31:00.580 --> 00:31:00.820
people

00:31:00.820 --> 00:31:01.420
expect

00:31:01.420 --> 00:31:01.760
just

00:31:01.760 --> 00:31:02.080
by

00:31:02.080 --> 00:31:02.680
the

00:31:02.680 --> 00:31:02.900
fact

00:31:02.900 --> 00:31:03.160
that

00:31:03.160 --> 00:31:03.440
this

00:31:03.440 --> 00:31:03.600
can

00:31:03.600 --> 00:31:03.720
be

00:31:03.720 --> 00:31:03.940
still

00:31:03.940 --> 00:31:04.220
valid

00:31:04.220 --> 00:31:04.700
python

00:31:04.700 --> 00:31:05.060
syntax

00:31:05.060 --> 00:31:05.500
but

00:31:05.500 --> 00:31:05.720
it

00:31:05.720 --> 00:31:05.960
doesn't

00:31:05.960 --> 00:31:06.140
have

00:31:06.140 --> 00:31:06.380
to be

00:31:06.380 --> 00:31:06.640
valid

00:31:06.640 --> 00:31:06.800
at

00:31:06.800 --> 00:31:07.120
runtime

00:31:07.120 --> 00:31:07.820
so

00:31:07.820 --> 00:31:07.980
we

00:31:07.980 --> 00:31:08.120
can

00:31:08.120 --> 00:31:08.300
get

00:31:08.300 --> 00:31:08.560
away

00:31:08.560 --> 00:31:09.360
without

00:31:09.360 --> 00:31:09.960
importing

00:31:09.960 --> 00:31:10.260
things

00:31:10.260 --> 00:31:10.420
from

00:31:10.420 --> 00:31:10.760
typing

00:31:10.760 --> 00:31:11.340
you

00:31:11.340 --> 00:31:11.460
know

00:31:11.460 --> 00:31:11.620
the

00:31:11.620 --> 00:31:11.800
type

00:31:11.800 --> 00:31:12.100
checker

00:31:12.100 --> 00:31:12.280
will

00:31:12.280 --> 00:31:12.500
know

00:31:12.500 --> 00:31:12.920
exactly

00:31:12.920 --> 00:31:13.120
what

00:31:13.120 --> 00:31:13.220
you

00:31:13.220 --> 00:31:13.380
mean

00:31:13.380 --> 00:31:13.980
anyway

00:31:13.980 --> 00:31:14.340
right

00:31:14.340 --> 00:31:14.560
we

00:31:14.560 --> 00:31:14.800
can

00:31:14.800 --> 00:31:15.420
go

00:31:15.420 --> 00:31:15.720
come

00:31:15.720 --> 00:31:16.040
back

00:31:16.040 --> 00:31:16.300
to

00:31:16.300 --> 00:31:16.620
using

00:31:16.620 --> 00:31:16.780
a

00:31:16.780 --> 00:31:17.260
lowercase

00:31:17.260 --> 00:31:17.580
list

00:31:17.580 --> 00:31:17.780
of

00:31:17.780 --> 00:31:18.140
string

00:31:18.140 --> 00:31:18.800
instead

00:31:18.800 --> 00:31:19.060
of

00:31:19.060 --> 00:31:19.680
uppercase

00:31:19.680 --> 00:31:20.220
list

00:31:20.220 --> 00:31:20.380
of

00:31:20.380 --> 00:31:20.740
string

00:31:20.740 --> 00:31:21.460
and a few

00:31:21.460 --> 00:31:21.780
other

00:31:21.780 --> 00:31:22.160
things

00:31:22.160 --> 00:31:22.340
you

00:31:22.340 --> 00:31:22.620
still

00:31:22.620 --> 00:31:22.780
do

00:31:22.780 --> 00:31:22.920
the

00:31:22.920 --> 00:31:23.200
bracket

00:31:23.200 --> 00:31:23.460
of

00:31:23.460 --> 00:31:23.820
string

00:31:23.820 --> 00:31:24.360
yeah

00:31:24.360 --> 00:31:24.620
on the

00:31:24.620 --> 00:31:24.960
lowercase

00:31:24.960 --> 00:31:25.180
list

00:31:25.180 --> 00:31:25.360
type

00:31:25.360 --> 00:31:25.660
yeah

00:31:25.660 --> 00:31:25.820
so

00:31:25.820 --> 00:31:26.040
like

00:31:26.040 --> 00:31:26.360
we

00:31:26.360 --> 00:31:26.760
will

00:31:26.760 --> 00:31:26.980
never

00:31:26.980 --> 00:31:27.240
do

00:31:27.240 --> 00:31:27.520
like

00:31:27.520 --> 00:31:27.660
you

00:31:27.660 --> 00:31:27.960
know

00:31:27.960 --> 00:31:28.480
pointy

00:31:28.480 --> 00:31:28.800
brackets

00:31:28.800 --> 00:31:29.100
for

00:31:29.100 --> 00:31:29.440
that

00:31:29.440 --> 00:31:29.980
like

00:31:29.980 --> 00:31:30.320
in

00:31:30.320 --> 00:31:30.620
Java

00:31:30.620 --> 00:31:30.980
or

00:31:30.980 --> 00:31:31.440
C++

00:31:31.440 --> 00:31:32.100
because

00:31:32.100 --> 00:31:32.860
our

00:31:32.860 --> 00:31:33.440
LL1

00:31:33.440 --> 00:31:33.940
parser

00:31:33.940 --> 00:31:34.220
is

00:31:34.220 --> 00:31:34.900
like

00:31:34.900 --> 00:31:35.480
unable

00:31:35.480 --> 00:31:35.880
to deal

00:31:35.880 --> 00:31:36.040
with

00:31:36.040 --> 00:31:36.220
that

00:31:36.220 --> 00:31:36.660
case

00:31:36.660 --> 00:31:36.980
like

00:31:36.980 --> 00:31:37.420
maybe

00:31:37.420 --> 00:31:37.680
if

00:31:37.680 --> 00:31:37.820
we

00:31:37.820 --> 00:31:38.040
switch

00:31:38.040 --> 00:31:38.160
to

00:31:38.160 --> 00:31:38.280
a

00:31:38.280 --> 00:31:38.460
different

00:31:38.460 --> 00:31:38.760
one

00:31:38.760 --> 00:31:39.020
of

00:31:39.020 --> 00:31:39.220
which

00:31:39.220 --> 00:31:39.440
there

00:31:39.440 --> 00:31:39.620
is

00:31:39.620 --> 00:31:40.100
discussion

00:31:40.100 --> 00:31:40.400
like

00:31:40.400 --> 00:31:40.520
you

00:31:40.520 --> 00:31:40.660
know

00:31:40.660 --> 00:31:41.160
maybe

00:31:41.160 --> 00:31:41.460
then

00:31:41.460 --> 00:31:41.960
that

00:31:41.960 --> 00:31:42.120
would

00:31:42.120 --> 00:31:42.240
be

00:31:42.240 --> 00:31:42.600
possible

00:31:42.600 --> 00:31:42.840
but

00:31:42.840 --> 00:31:43.140
at

00:31:43.140 --> 00:31:43.340
that

00:31:43.340 --> 00:31:43.680
point

00:31:43.680 --> 00:31:44.240
it

00:31:44.240 --> 00:31:44.380
will

00:31:44.380 --> 00:31:44.560
still

00:31:44.560 --> 00:31:44.740
be

00:31:44.740 --> 00:31:44.960
way

00:31:44.960 --> 00:31:45.120
too

00:31:45.120 --> 00:31:45.380
late

00:31:45.380 --> 00:31:45.580
and

00:31:45.580 --> 00:31:45.740
yeah

00:31:45.740 --> 00:31:46.020
I

00:31:46.020 --> 00:31:46.260
think

00:31:46.260 --> 00:31:46.440
it's

00:31:46.440 --> 00:31:46.640
fine

00:31:46.640 --> 00:31:46.860
the way

00:31:46.860 --> 00:31:47.140
it works

00:31:47.140 --> 00:31:47.360
it's

00:31:47.360 --> 00:31:47.620
different

00:31:47.620 --> 00:31:47.760
but

00:31:47.760 --> 00:31:47.960
it's

00:31:47.960 --> 00:31:50.080
a way

00:31:50.080 --> 00:31:50.200
of

00:31:50.200 --> 00:31:50.680
expression

00:31:50.680 --> 00:31:51.300
there's

00:31:51.300 --> 00:31:51.540
nothing

00:31:51.540 --> 00:31:51.820
that

00:31:51.820 --> 00:31:52.080
makes

00:31:52.080 --> 00:31:52.300
the

00:31:52.300 --> 00:31:52.760
angle

00:31:52.760 --> 00:31:53.220
brackets

00:31:53.220 --> 00:31:53.560
in

00:31:53.560 --> 00:31:54.040
templates

00:31:54.040 --> 00:31:54.280
or

00:31:54.280 --> 00:31:54.780
generics

00:31:54.780 --> 00:31:55.780
necessarily

00:31:55.780 --> 00:31:56.020
the

00:31:56.020 --> 00:31:56.180
right

00:31:56.180 --> 00:31:56.400
way

00:31:56.400 --> 00:31:56.600
yeah

00:31:56.600 --> 00:31:56.920
yes

00:31:56.920 --> 00:31:57.260
exactly

00:31:57.260 --> 00:31:57.560
it's

00:31:57.560 --> 00:31:57.880
like

00:31:57.880 --> 00:31:58.100
as

00:31:58.100 --> 00:31:58.260
long

00:31:58.260 --> 00:31:58.420
as

00:31:58.420 --> 00:31:58.820
humans

00:31:58.820 --> 00:31:59.340
understand

00:31:59.340 --> 00:31:59.540
what

00:31:59.540 --> 00:32:00.700
those

00:32:00.700 --> 00:32:00.980
things

00:32:00.980 --> 00:32:01.360
mean

00:32:01.360 --> 00:32:01.840
the

00:32:01.840 --> 00:32:02.040
goal

00:32:02.040 --> 00:32:02.240
has

00:32:02.240 --> 00:32:02.420
been

00:32:02.420 --> 00:32:02.900
achieved

00:32:02.900 --> 00:32:03.620
so

00:32:03.620 --> 00:32:03.800
yeah

00:32:03.800 --> 00:32:03.940
the

00:32:03.940 --> 00:32:04.120
rest

00:32:04.120 --> 00:32:04.260
of

00:32:04.260 --> 00:32:04.400
the

00:32:04.400 --> 00:32:04.600
PEP

00:32:04.600 --> 00:32:05.720
585

00:32:05.720 --> 00:32:06.360
is

00:32:06.360 --> 00:32:07.160
just

00:32:07.160 --> 00:32:07.840
an

00:32:07.840 --> 00:32:08.140
attempt

00:32:08.140 --> 00:32:08.420
to

00:32:08.420 --> 00:32:09.160
reform

00:32:09.160 --> 00:32:09.620
some

00:32:09.620 --> 00:32:09.800
of

00:32:09.800 --> 00:32:09.940
the

00:32:09.940 --> 00:32:10.480
pre-existing

00:32:10.480 --> 00:32:11.520
constructs

00:32:11.520 --> 00:32:11.960
in

00:32:11.960 --> 00:32:12.380
the

00:32:12.380 --> 00:32:12.640
typing

00:32:12.640 --> 00:32:13.140
module

00:32:13.140 --> 00:32:13.560
like

00:32:13.560 --> 00:32:13.940
creating

00:32:13.940 --> 00:32:14.220
new

00:32:14.220 --> 00:32:14.640
types

00:32:14.640 --> 00:32:15.320
casting

00:32:15.320 --> 00:32:16.040
aliasing

00:32:16.040 --> 00:32:16.400
or

00:32:16.400 --> 00:32:16.720
type

00:32:16.720 --> 00:32:17.440
variables

00:32:17.440 --> 00:32:18.700
into

00:32:18.700 --> 00:32:19.160
variable

00:32:19.160 --> 00:32:19.860
annotations

00:32:19.860 --> 00:32:20.160
so

00:32:20.160 --> 00:32:20.360
that

00:32:20.360 --> 00:32:20.540
they

00:32:20.540 --> 00:32:20.700
are

00:32:20.700 --> 00:32:21.080
also

00:32:21.080 --> 00:32:21.400
not

00:32:21.400 --> 00:32:22.000
evaluated

00:32:22.000 --> 00:32:22.780
at

00:32:22.780 --> 00:32:23.200
import

00:32:23.200 --> 00:32:23.500
time

00:32:23.500 --> 00:32:23.800
which

00:32:23.800 --> 00:32:24.380
enables

00:32:24.380 --> 00:32:24.860
again

00:32:24.860 --> 00:32:25.600
usage

00:32:25.600 --> 00:32:25.880
of

00:32:25.880 --> 00:32:26.140
types

00:32:26.140 --> 00:32:26.320
that

00:32:26.320 --> 00:32:26.440
are

00:32:26.440 --> 00:32:26.620
not

00:32:26.620 --> 00:32:27.040
imported

00:32:27.040 --> 00:32:27.520
and

00:32:27.520 --> 00:32:28.060
some

00:32:28.060 --> 00:32:28.220
of

00:32:28.220 --> 00:32:28.420
those

00:32:28.420 --> 00:32:28.800
tricks

00:32:28.800 --> 00:32:29.040
with

00:32:29.040 --> 00:32:29.380
syntax

00:32:29.380 --> 00:32:29.680
like

00:32:29.680 --> 00:32:30.180
lowercase

00:32:30.180 --> 00:32:30.480
list

00:32:30.480 --> 00:32:30.700
and

00:32:30.700 --> 00:32:30.940
dict

00:32:30.940 --> 00:32:31.100
and

00:32:31.100 --> 00:32:31.440
whatnot

00:32:31.440 --> 00:32:32.140
so

00:32:32.140 --> 00:32:32.660
that's

00:32:32.660 --> 00:32:32.960
that's

00:32:32.960 --> 00:32:35.180
while we're on this

00:32:35.180 --> 00:32:36.460
performance

00:32:36.460 --> 00:32:37.200
and type

00:32:37.200 --> 00:32:37.700
annotations

00:32:37.700 --> 00:32:38.120
and stuff

00:32:38.120 --> 00:32:39.580
what's the story

00:32:39.580 --> 00:32:40.400
of mypyc

00:32:40.400 --> 00:32:41.300
oh this is actually

00:32:41.300 --> 00:32:41.900
a very interesting

00:32:41.900 --> 00:32:42.280
story

00:32:42.280 --> 00:32:42.600
so

00:32:42.600 --> 00:32:43.520
like

00:32:43.520 --> 00:32:44.660
mypy has

00:32:44.660 --> 00:32:45.140
traditionally

00:32:45.140 --> 00:32:46.020
been slow

00:32:46.020 --> 00:32:46.960
like to the

00:32:46.960 --> 00:32:47.600
point where

00:32:47.600 --> 00:32:48.720
running it

00:32:48.720 --> 00:32:49.100
over the

00:32:49.100 --> 00:32:49.400
entire

00:32:49.400 --> 00:32:49.880
Instagram

00:32:49.880 --> 00:32:50.160
code

00:32:50.160 --> 00:32:50.480
base

00:32:50.480 --> 00:32:51.040
like was

00:32:51.040 --> 00:32:51.520
taking

00:32:51.520 --> 00:32:52.100
over

00:32:52.100 --> 00:32:52.920
five minutes

00:32:52.920 --> 00:32:53.240
right

00:32:53.240 --> 00:32:53.640
so this

00:32:53.640 --> 00:32:53.980
was a

00:32:53.980 --> 00:32:54.180
thing

00:32:54.180 --> 00:32:54.460
that you

00:32:54.460 --> 00:32:54.860
could do

00:32:54.860 --> 00:32:55.040
in

00:32:55.040 --> 00:32:55.420
continuous

00:32:55.420 --> 00:32:55.940
integration

00:32:55.940 --> 00:32:56.340
but you

00:32:56.340 --> 00:32:56.720
could not

00:32:56.720 --> 00:32:57.260
absolutely

00:32:57.260 --> 00:32:58.440
like run

00:32:58.440 --> 00:32:58.860
it in an

00:32:58.860 --> 00:32:59.140
editor

00:32:59.140 --> 00:32:59.600
or whatnot

00:32:59.600 --> 00:33:00.040
you know

00:33:00.040 --> 00:33:00.760
we had

00:33:00.760 --> 00:33:00.960
some

00:33:00.960 --> 00:33:01.280
hacky

00:33:01.280 --> 00:33:01.780
workarounds

00:33:01.780 --> 00:33:02.600
to at least

00:33:02.600 --> 00:33:03.420
make people

00:33:03.420 --> 00:33:03.740
in the

00:33:03.740 --> 00:33:04.100
editors

00:33:04.100 --> 00:33:04.500
happy

00:33:04.500 --> 00:33:05.000
I wrote

00:33:05.000 --> 00:33:05.360
like a

00:33:05.360 --> 00:33:05.560
silly

00:33:05.560 --> 00:33:05.860
flake

00:33:05.860 --> 00:33:06.080
8

00:33:06.080 --> 00:33:06.460
mypy

00:33:06.460 --> 00:33:06.780
plugin

00:33:06.780 --> 00:33:07.140
at some

00:33:07.140 --> 00:33:07.360
point

00:33:07.360 --> 00:33:07.540
that

00:33:07.540 --> 00:33:08.240
kind of

00:33:08.240 --> 00:33:09.000
brought us

00:33:09.000 --> 00:33:09.460
somewhere

00:33:09.460 --> 00:33:09.800
you know

00:33:09.800 --> 00:33:10.300
it was useful

00:33:10.300 --> 00:33:10.960
for a while

00:33:10.960 --> 00:33:11.920
but all of

00:33:11.920 --> 00:33:12.540
that was just

00:33:12.540 --> 00:33:13.100
not very

00:33:13.100 --> 00:33:13.380
great

00:33:13.380 --> 00:33:14.060
so in the

00:33:14.060 --> 00:33:14.480
meantime

00:33:14.480 --> 00:33:15.680
mypy started

00:33:15.680 --> 00:33:16.460
implementing

00:33:16.460 --> 00:33:17.180
incremental

00:33:17.180 --> 00:33:17.580
typing

00:33:17.580 --> 00:33:18.000
meaning

00:33:18.000 --> 00:33:18.820
the graph

00:33:18.820 --> 00:33:19.420
of your

00:33:19.420 --> 00:33:19.880
modules

00:33:19.880 --> 00:33:20.400
which did

00:33:20.400 --> 00:33:21.120
not change

00:33:21.120 --> 00:33:21.980
can be

00:33:21.980 --> 00:33:22.380
cached

00:33:22.380 --> 00:33:23.020
so that

00:33:23.020 --> 00:33:23.760
with every

00:33:23.760 --> 00:33:24.220
change

00:33:24.220 --> 00:33:25.020
like most

00:33:25.020 --> 00:33:25.500
of your

00:33:25.500 --> 00:33:26.200
computation

00:33:26.200 --> 00:33:26.720
is already

00:33:26.720 --> 00:33:27.240
pre-done

00:33:27.240 --> 00:33:28.180
and that is

00:33:28.180 --> 00:33:28.940
evolving to

00:33:28.940 --> 00:33:29.440
this point

00:33:29.440 --> 00:33:29.780
now

00:33:29.780 --> 00:33:30.240
I can

00:33:30.240 --> 00:33:31.140
with well

00:33:31.140 --> 00:33:31.560
populated

00:33:31.560 --> 00:33:32.260
cache that

00:33:32.260 --> 00:33:32.840
cuts the

00:33:32.840 --> 00:33:33.340
time to

00:33:33.340 --> 00:33:34.080
around 40

00:33:34.080 --> 00:33:34.820
50 seconds

00:33:34.820 --> 00:33:35.380
so it's like

00:33:35.380 --> 00:33:35.760
yeah

00:33:35.760 --> 00:33:36.400
it's like a

00:33:36.400 --> 00:33:36.860
six seven

00:33:36.860 --> 00:33:37.800
times improvement

00:33:37.800 --> 00:33:38.540
yeah it's a

00:33:38.540 --> 00:33:39.060
big improvement

00:33:39.060 --> 00:33:39.600
so that's

00:33:39.600 --> 00:33:39.960
so that's

00:33:39.960 --> 00:33:40.440
good but

00:33:40.440 --> 00:33:40.900
still the

00:33:40.900 --> 00:33:41.320
cold

00:33:41.320 --> 00:33:42.020
type checking

00:33:42.020 --> 00:33:42.480
was like

00:33:42.480 --> 00:33:42.760
rather

00:33:42.760 --> 00:33:43.380
slowish

00:33:43.380 --> 00:33:44.000
the meantime

00:33:44.000 --> 00:33:44.400
Facebook

00:33:44.400 --> 00:33:45.200
started developing

00:33:45.200 --> 00:33:45.740
its own

00:33:45.740 --> 00:33:46.260
type checker

00:33:46.260 --> 00:33:46.880
for Python

00:33:46.880 --> 00:33:47.880
well more

00:33:47.880 --> 00:33:48.400
with the

00:33:48.400 --> 00:33:48.960
goal of

00:33:48.960 --> 00:33:49.480
creating

00:33:49.480 --> 00:33:50.240
static

00:33:50.240 --> 00:33:50.700
analysis

00:33:50.700 --> 00:33:51.180
tooling

00:33:51.180 --> 00:33:51.900
that

00:33:51.900 --> 00:33:52.160
just

00:33:52.160 --> 00:33:52.480
uses

00:33:52.480 --> 00:33:52.900
types

00:33:52.900 --> 00:33:53.440
so the

00:33:53.440 --> 00:33:53.860
type

00:33:53.860 --> 00:33:54.180
checker

00:33:54.180 --> 00:33:54.480
part

00:33:54.480 --> 00:33:55.140
was only

00:33:55.140 --> 00:33:56.300
the base

00:33:56.300 --> 00:33:57.200
of the

00:33:57.200 --> 00:33:57.980
you know

00:33:57.980 --> 00:33:58.300
static

00:33:58.300 --> 00:33:58.740
analysis

00:33:58.740 --> 00:33:59.340
that was

00:33:59.340 --> 00:33:59.840
being

00:33:59.840 --> 00:34:00.420
performed

00:34:00.420 --> 00:34:01.200
on that

00:34:01.200 --> 00:34:01.800
very code

00:34:01.800 --> 00:34:02.520
with the

00:34:02.520 --> 00:34:03.260
important

00:34:03.260 --> 00:34:04.000
use case

00:34:04.000 --> 00:34:05.240
of doing

00:34:05.240 --> 00:34:05.820
security

00:34:05.820 --> 00:34:06.300
checks

00:34:06.300 --> 00:34:07.420
and one

00:34:07.420 --> 00:34:07.660
of the

00:34:07.660 --> 00:34:07.900
goals

00:34:07.900 --> 00:34:08.420
of that

00:34:08.420 --> 00:34:09.020
you know

00:34:09.020 --> 00:34:09.500
new type

00:34:09.500 --> 00:34:09.800
checker

00:34:09.800 --> 00:34:10.180
was like

00:34:10.180 --> 00:34:10.600
we have

00:34:10.600 --> 00:34:10.860
to be

00:34:10.860 --> 00:34:11.240
faster

00:34:11.240 --> 00:34:11.840
than mypy

00:34:11.840 --> 00:34:12.120
right

00:34:12.120 --> 00:34:12.460
yeah

00:34:12.460 --> 00:34:12.960
like so

00:34:12.960 --> 00:34:13.700
that created

00:34:13.700 --> 00:34:14.260
competition

00:34:14.260 --> 00:34:14.880
and competition

00:34:14.880 --> 00:34:15.240
is always

00:34:15.240 --> 00:34:15.600
good

00:34:15.600 --> 00:34:16.520
so in the

00:34:16.520 --> 00:34:16.840
meantime

00:34:16.840 --> 00:34:17.200
like

00:34:17.200 --> 00:34:17.780
yukal

00:34:17.780 --> 00:34:18.000
like

00:34:18.000 --> 00:34:18.140
to

00:34:18.140 --> 00:34:18.380
style

00:34:18.380 --> 00:34:18.500
or

00:34:18.500 --> 00:34:18.660
like

00:34:18.660 --> 00:34:19.200
revived

00:34:19.200 --> 00:34:19.500
his

00:34:19.500 --> 00:34:20.000
original

00:34:20.000 --> 00:34:20.500
idea

00:34:20.500 --> 00:34:20.760
that

00:34:20.760 --> 00:34:21.020
hey

00:34:21.020 --> 00:34:21.300
if we

00:34:21.300 --> 00:34:21.460
have

00:34:21.460 --> 00:34:21.760
types

00:34:21.760 --> 00:34:22.060
we can

00:34:22.060 --> 00:34:22.320
actually

00:34:22.320 --> 00:34:22.980
try to

00:34:22.980 --> 00:34:23.940
compile

00:34:23.940 --> 00:34:24.440
the

00:34:24.440 --> 00:34:24.720
Python

00:34:24.720 --> 00:34:25.300
code

00:34:25.300 --> 00:34:26.280
in a way

00:34:26.280 --> 00:34:26.640
that

00:34:26.640 --> 00:34:27.360
runs it

00:34:27.360 --> 00:34:28.020
way faster

00:34:28.020 --> 00:34:28.440
now

00:34:28.440 --> 00:34:28.960
what is it

00:34:28.960 --> 00:34:29.640
compiled to

00:34:29.640 --> 00:34:30.420
so that's

00:34:30.420 --> 00:34:30.860
interesting

00:34:30.860 --> 00:34:31.160
right

00:34:31.160 --> 00:34:32.020
so the

00:34:32.020 --> 00:34:33.320
mypyc compiler

00:34:33.320 --> 00:34:34.740
actually creates

00:34:34.740 --> 00:34:36.120
C extension

00:34:36.120 --> 00:34:36.680
like it

00:34:36.680 --> 00:34:37.740
actually transpiles

00:34:37.740 --> 00:34:38.500
to C

00:34:38.500 --> 00:34:39.880
this sounds

00:34:39.880 --> 00:34:40.640
weird until

00:34:40.640 --> 00:34:41.180
you think

00:34:41.180 --> 00:34:41.820
about the

00:34:41.820 --> 00:34:42.420
C API

00:34:42.420 --> 00:34:42.960
that Python

00:34:42.960 --> 00:34:43.460
provides

00:34:43.460 --> 00:34:43.720
and the

00:34:43.720 --> 00:34:43.920
Python

00:34:43.920 --> 00:34:44.360
C API

00:34:44.360 --> 00:34:45.000
is meant

00:34:45.000 --> 00:34:45.340
to be

00:34:45.340 --> 00:34:45.720
consumed

00:34:45.720 --> 00:34:46.220
by C

00:34:46.220 --> 00:34:46.860
so it

00:34:46.860 --> 00:34:47.180
is just

00:34:47.180 --> 00:34:47.560
natural

00:34:47.560 --> 00:34:48.060
that you

00:34:48.060 --> 00:34:48.380
would have

00:34:48.380 --> 00:34:48.940
a generator

00:34:48.940 --> 00:34:49.760
that emits

00:34:49.760 --> 00:34:50.600
valid C

00:34:50.600 --> 00:34:51.260
for your

00:34:51.260 --> 00:34:51.740
given use

00:34:51.740 --> 00:34:52.040
case

00:34:52.040 --> 00:34:52.700
and it

00:34:52.700 --> 00:34:53.160
turns out

00:34:53.160 --> 00:34:53.520
that with

00:34:53.520 --> 00:34:54.460
just a few

00:34:54.460 --> 00:34:55.240
constraints

00:34:55.240 --> 00:34:56.540
on how your

00:34:56.540 --> 00:34:57.400
program works

00:34:57.400 --> 00:34:58.740
you can achieve

00:34:58.740 --> 00:34:59.840
20 to 30

00:34:59.840 --> 00:35:00.960
times performance

00:35:00.960 --> 00:35:01.700
boosts

00:35:01.700 --> 00:35:02.400
with that

00:35:02.400 --> 00:35:02.840
so that's

00:35:02.840 --> 00:35:03.120
great

00:35:03.120 --> 00:35:04.220
and in a real

00:35:04.220 --> 00:35:05.340
production application

00:35:05.340 --> 00:35:06.040
like mypy

00:35:06.040 --> 00:35:07.280
it's consistently

00:35:07.280 --> 00:35:08.360
four times faster

00:35:08.360 --> 00:35:11.800
this portion

00:35:11.800 --> 00:35:12.120
of talk

00:35:12.120 --> 00:35:12.380
Python

00:35:12.380 --> 00:35:12.880
is sponsored

00:35:12.880 --> 00:35:13.940
by Microsoft

00:35:13.940 --> 00:35:14.600
and Visual

00:35:14.600 --> 00:35:15.200
Studio Code

00:35:15.200 --> 00:35:16.640
Visual Studio Code

00:35:16.640 --> 00:35:17.320
is a free

00:35:17.320 --> 00:35:17.960
open source

00:35:17.960 --> 00:35:18.420
and lightweight

00:35:18.420 --> 00:35:19.120
code editor

00:35:19.120 --> 00:35:19.600
that runs

00:35:19.600 --> 00:35:20.000
on Mac

00:35:20.000 --> 00:35:20.340
Linux

00:35:20.340 --> 00:35:20.980
and Windows

00:35:20.980 --> 00:35:21.760
with rich

00:35:21.760 --> 00:35:22.480
Python support

00:35:22.480 --> 00:35:23.520
download Visual

00:35:23.520 --> 00:35:24.120
Studio Code

00:35:24.120 --> 00:35:24.640
and install

00:35:24.640 --> 00:35:25.060
the Python

00:35:25.060 --> 00:35:25.480
extension

00:35:25.480 --> 00:35:26.080
to get

00:35:26.080 --> 00:35:26.420
coding

00:35:26.420 --> 00:35:26.920
with support

00:35:26.920 --> 00:35:27.380
for tools

00:35:27.380 --> 00:35:27.720
you love

00:35:27.720 --> 00:35:28.280
like Jupyter

00:35:28.280 --> 00:35:29.220
black formatting

00:35:29.220 --> 00:35:29.640
pilot

00:35:29.640 --> 00:35:30.160
py test

00:35:30.160 --> 00:35:30.580
and more

00:35:30.580 --> 00:35:31.320
and just

00:35:31.320 --> 00:35:31.620
announced

00:35:31.620 --> 00:35:32.140
this month

00:35:32.140 --> 00:35:32.660
you can

00:35:32.660 --> 00:35:33.160
now work

00:35:33.160 --> 00:35:33.820
with remote

00:35:33.820 --> 00:35:34.380
Python

00:35:34.380 --> 00:35:34.980
code bases

00:35:34.980 --> 00:35:35.880
using the new

00:35:35.880 --> 00:35:36.920
Visual Studio Code

00:35:36.920 --> 00:35:37.800
remote extensions

00:35:37.800 --> 00:35:39.180
use the full power

00:35:39.180 --> 00:35:40.200
of Visual Studio Code

00:35:40.200 --> 00:35:40.740
when coding

00:35:40.740 --> 00:35:41.400
in containers

00:35:41.400 --> 00:35:42.220
in Windows

00:35:42.220 --> 00:35:43.180
subsystem for Linux

00:35:43.180 --> 00:35:44.460
and over SSH

00:35:44.460 --> 00:35:45.000
connections

00:35:45.000 --> 00:35:46.000
yep that's right

00:35:46.000 --> 00:35:47.020
auto completions

00:35:47.020 --> 00:35:47.540
debugging

00:35:47.540 --> 00:35:48.240
the terminal

00:35:48.240 --> 00:35:48.960
source control

00:35:48.960 --> 00:35:50.020
your favorite extensions

00:35:50.020 --> 00:35:51.020
everything works

00:35:51.020 --> 00:35:51.700
just right

00:35:51.700 --> 00:35:52.320
in the remote

00:35:52.320 --> 00:35:52.820
environment

00:35:52.820 --> 00:35:53.720
get started

00:35:53.720 --> 00:35:54.680
with Visual Studio Code

00:35:54.680 --> 00:35:55.380
now at

00:35:55.380 --> 00:35:56.540
talkpython.fm

00:35:56.540 --> 00:35:57.580
slash Microsoft

00:35:57.580 --> 00:36:00.120
do you see

00:36:00.120 --> 00:36:00.620
use cases

00:36:00.620 --> 00:36:01.420
for that outside

00:36:01.420 --> 00:36:02.220
just mypy

00:36:02.220 --> 00:36:03.400
like random

00:36:03.400 --> 00:36:04.440
person

00:36:04.440 --> 00:36:05.700
doing data science

00:36:05.700 --> 00:36:06.560
that needs

00:36:06.560 --> 00:36:07.460
their Python

00:36:07.460 --> 00:36:07.720
parts

00:36:07.720 --> 00:36:07.920
to go

00:36:07.920 --> 00:36:08.260
faster

00:36:08.260 --> 00:36:08.640
or

00:36:08.640 --> 00:36:09.080
currently

00:36:09.080 --> 00:36:09.700
mypyc

00:36:09.700 --> 00:36:10.560
tries to

00:36:10.560 --> 00:36:11.120
limit their

00:36:11.120 --> 00:36:11.520
scope

00:36:11.520 --> 00:36:12.100
since

00:36:12.100 --> 00:36:13.180
they perceive

00:36:13.180 --> 00:36:13.560
the

00:36:13.560 --> 00:36:14.500
attempts

00:36:14.500 --> 00:36:15.420
by previous

00:36:15.420 --> 00:36:16.040
projects

00:36:16.040 --> 00:36:16.640
that meant

00:36:16.640 --> 00:36:16.980
to

00:36:16.980 --> 00:36:18.040
speed up

00:36:18.040 --> 00:36:18.520
Python

00:36:18.520 --> 00:36:19.660
those attempts

00:36:19.660 --> 00:36:20.240
failed

00:36:20.240 --> 00:36:20.780
mostly

00:36:20.780 --> 00:36:21.540
on trying

00:36:21.540 --> 00:36:21.880
to be

00:36:21.880 --> 00:36:22.500
100%

00:36:22.500 --> 00:36:22.900
compatible

00:36:22.900 --> 00:36:23.220
with

00:36:23.220 --> 00:36:23.840
every

00:36:23.840 --> 00:36:24.380
single

00:36:24.380 --> 00:36:24.700
feature

00:36:24.700 --> 00:36:24.900
of

00:36:24.900 --> 00:36:25.260
Python

00:36:25.260 --> 00:36:25.900
so

00:36:25.900 --> 00:36:26.360
they're

00:36:26.360 --> 00:36:26.860
focusing

00:36:26.860 --> 00:36:27.220
on a

00:36:27.220 --> 00:36:27.580
subset

00:36:27.580 --> 00:36:28.480
but they're

00:36:28.480 --> 00:36:28.800
growing

00:36:28.800 --> 00:36:29.400
that subset

00:36:29.400 --> 00:36:30.100
like as

00:36:30.100 --> 00:36:30.500
you know

00:36:30.500 --> 00:36:30.880
as much

00:36:30.880 --> 00:36:31.200
as they

00:36:31.200 --> 00:36:31.480
needed

00:36:31.480 --> 00:36:31.780
and

00:36:31.780 --> 00:36:32.540
the big

00:36:32.540 --> 00:36:33.040
missing piece

00:36:33.040 --> 00:36:33.420
currently

00:36:33.420 --> 00:36:33.960
is like

00:36:33.960 --> 00:36:34.320
there is

00:36:34.320 --> 00:36:34.860
no async

00:36:34.860 --> 00:36:35.560
await support

00:36:35.560 --> 00:36:36.500
and with

00:36:36.500 --> 00:36:37.180
that support

00:36:37.180 --> 00:36:37.740
I could

00:36:37.740 --> 00:36:38.240
actually

00:36:38.240 --> 00:36:38.900
have

00:36:38.900 --> 00:36:39.220
Black

00:36:39.220 --> 00:36:39.720
compiled

00:36:39.720 --> 00:36:40.900
which could

00:36:40.900 --> 00:36:41.360
also

00:36:41.360 --> 00:36:42.060
you know

00:36:42.060 --> 00:36:42.780
significantly

00:36:42.780 --> 00:36:43.600
speed up

00:36:43.600 --> 00:36:44.180
the

00:36:44.180 --> 00:36:44.840
formatter

00:36:44.840 --> 00:36:45.320
which is

00:36:45.320 --> 00:36:45.880
already pretty

00:36:45.880 --> 00:36:46.320
performance

00:36:46.320 --> 00:36:47.140
already does

00:36:47.140 --> 00:36:47.740
pretty well

00:36:47.740 --> 00:36:48.680
but that would

00:36:48.680 --> 00:36:49.160
just make it

00:36:49.160 --> 00:36:49.460
so much

00:36:49.460 --> 00:36:49.860
better for

00:36:49.860 --> 00:36:50.320
the users

00:36:50.320 --> 00:36:51.700
so in

00:36:51.700 --> 00:36:51.940
fact

00:36:51.940 --> 00:36:52.680
I think

00:36:52.680 --> 00:36:53.240
I managed

00:36:53.240 --> 00:36:53.700
to get

00:36:53.700 --> 00:36:54.440
Soli

00:36:54.440 --> 00:36:54.720
the

00:36:54.720 --> 00:36:55.080
core

00:36:55.080 --> 00:36:55.500
developer

00:36:55.500 --> 00:36:55.800
of

00:36:55.800 --> 00:36:56.300
mypyC

00:36:56.300 --> 00:36:57.400
rather

00:36:57.400 --> 00:36:58.260
excited

00:36:58.260 --> 00:36:58.520
about

00:36:58.520 --> 00:36:58.700
the

00:36:58.700 --> 00:36:59.060
prospect

00:36:59.060 --> 00:36:59.580
of

00:36:59.580 --> 00:37:00.620
having

00:37:00.620 --> 00:37:00.980
Black

00:37:00.980 --> 00:37:01.420
as the

00:37:01.420 --> 00:37:01.760
next

00:37:01.760 --> 00:37:02.560
production

00:37:02.560 --> 00:37:03.400
customer

00:37:03.400 --> 00:37:03.820
of

00:37:03.820 --> 00:37:04.320
mypyC

00:37:04.320 --> 00:37:04.840
so we'll

00:37:04.840 --> 00:37:05.080
see

00:37:05.080 --> 00:37:05.480
I have

00:37:05.480 --> 00:37:05.940
my fingers

00:37:05.940 --> 00:37:06.260
crossed

00:37:06.260 --> 00:37:06.680
yeah

00:37:06.680 --> 00:37:06.900
that's

00:37:06.900 --> 00:37:07.220
exciting

00:37:07.220 --> 00:37:07.820
all right

00:37:07.820 --> 00:37:08.080
Anthony

00:37:08.080 --> 00:37:08.340
what's

00:37:08.340 --> 00:37:08.700
the next

00:37:08.700 --> 00:37:08.980
one on

00:37:08.980 --> 00:37:09.360
our list

00:37:09.360 --> 00:37:09.880
of cool

00:37:09.880 --> 00:37:10.220
features

00:37:10.220 --> 00:37:10.720
in 3.8

00:37:10.720 --> 00:37:11.280
so this

00:37:11.280 --> 00:37:11.460
one

00:37:11.460 --> 00:37:11.620
is

00:37:11.620 --> 00:37:12.380
still

00:37:12.380 --> 00:37:12.580
in

00:37:12.580 --> 00:37:12.900
draft

00:37:12.900 --> 00:37:13.100
it

00:37:13.100 --> 00:37:13.340
hasn't

00:37:13.340 --> 00:37:13.600
actually

00:37:13.600 --> 00:37:13.760
been

00:37:13.760 --> 00:37:14.240
decided

00:37:14.240 --> 00:37:15.160
and

00:37:15.160 --> 00:37:15.480
potentially

00:37:15.480 --> 00:37:15.700
might

00:37:15.700 --> 00:37:15.820
be

00:37:15.820 --> 00:37:16.260
deferred

00:37:16.260 --> 00:37:16.520
to a

00:37:16.520 --> 00:37:16.700
later

00:37:16.700 --> 00:37:17.080
release

00:37:17.080 --> 00:37:17.480
if it

00:37:17.480 --> 00:37:17.660
gets

00:37:17.660 --> 00:37:18.020
accepted

00:37:18.020 --> 00:37:18.900
but

00:37:18.900 --> 00:37:19.300
when

00:37:19.300 --> 00:37:19.460
I've

00:37:19.460 --> 00:37:19.640
talked

00:37:19.640 --> 00:37:19.920
about

00:37:19.920 --> 00:37:20.540
features

00:37:20.540 --> 00:37:21.240
at least

00:37:21.240 --> 00:37:21.680
proposed

00:37:21.680 --> 00:37:22.420
PEPs

00:37:22.420 --> 00:37:22.720
this one

00:37:22.720 --> 00:37:23.140
gets quite

00:37:23.140 --> 00:37:23.340
a bit

00:37:23.340 --> 00:37:23.460
of

00:37:23.460 --> 00:37:23.880
attention

00:37:23.880 --> 00:37:24.640
and

00:37:24.640 --> 00:37:24.760
they're

00:37:24.760 --> 00:37:24.860
called

00:37:24.860 --> 00:37:25.340
runtime

00:37:25.340 --> 00:37:25.780
audit

00:37:25.780 --> 00:37:26.180
hooks

00:37:26.180 --> 00:37:26.980
and

00:37:26.980 --> 00:37:27.380
basically

00:37:27.380 --> 00:37:27.620
the

00:37:27.620 --> 00:37:27.900
PEP

00:37:27.900 --> 00:37:28.640
is

00:37:28.640 --> 00:37:29.260
a

00:37:29.260 --> 00:37:29.480
way

00:37:29.480 --> 00:37:29.600
of

00:37:29.600 --> 00:37:29.860
setting

00:37:29.860 --> 00:37:30.040
a

00:37:30.040 --> 00:37:30.420
callable

00:37:30.420 --> 00:37:31.100
when

00:37:31.100 --> 00:37:31.840
certain

00:37:31.840 --> 00:37:32.820
system

00:37:32.820 --> 00:37:33.300
methods

00:37:33.300 --> 00:37:33.840
within

00:37:33.840 --> 00:37:34.080
the

00:37:34.080 --> 00:37:34.280
Python

00:37:34.280 --> 00:37:34.580
standard

00:37:34.580 --> 00:37:34.900
library

00:37:34.900 --> 00:37:35.120
get

00:37:35.120 --> 00:37:35.440
called

00:37:35.440 --> 00:37:36.120
for

00:37:36.120 --> 00:37:36.500
example

00:37:36.500 --> 00:37:36.940
opening

00:37:36.940 --> 00:37:37.120
a

00:37:37.120 --> 00:37:37.420
network

00:37:37.420 --> 00:37:37.780
socket

00:37:37.780 --> 00:37:38.540
or

00:37:38.540 --> 00:37:39.000
requesting

00:37:39.000 --> 00:37:39.380
a

00:37:39.380 --> 00:37:39.720
URL

00:37:39.720 --> 00:37:40.620
or

00:37:40.620 --> 00:37:40.960
opening

00:37:40.960 --> 00:37:41.160
a

00:37:41.160 --> 00:37:41.620
file

00:37:41.620 --> 00:37:42.080
or

00:37:42.080 --> 00:37:42.720
lots

00:37:42.720 --> 00:37:42.880
of

00:37:42.880 --> 00:37:43.180
different

00:37:43.180 --> 00:37:43.640
cases

00:37:43.640 --> 00:37:43.940
I guess

00:37:43.940 --> 00:37:44.100
of

00:37:44.100 --> 00:37:44.520
low

00:37:44.520 --> 00:37:44.920
level

00:37:44.920 --> 00:37:45.760
standard

00:37:45.760 --> 00:37:46.260
library

00:37:46.260 --> 00:37:46.800
functions

00:37:46.800 --> 00:37:49.040
or

00:37:49.040 --> 00:37:49.420
you

00:37:49.420 --> 00:37:49.660
get

00:37:49.660 --> 00:37:50.340
notified

00:37:50.340 --> 00:37:50.700
that's

00:37:50.700 --> 00:37:50.880
super

00:37:50.880 --> 00:37:51.220
cool

00:37:51.220 --> 00:37:51.680
so

00:37:51.680 --> 00:37:52.100
like

00:37:52.100 --> 00:37:52.260
if

00:37:52.260 --> 00:37:52.700
for

00:37:52.700 --> 00:37:52.880
some

00:37:52.880 --> 00:37:53.100
reason

00:37:53.100 --> 00:37:53.880
I'm

00:37:53.880 --> 00:37:54.140
in a

00:37:54.140 --> 00:37:54.480
lockdown

00:37:54.480 --> 00:37:55.000
environment

00:37:55.000 --> 00:37:55.400
I want

00:37:55.400 --> 00:37:55.580
to

00:37:55.580 --> 00:37:56.160
use

00:37:56.160 --> 00:37:56.500
some

00:37:56.500 --> 00:37:56.980
package

00:37:56.980 --> 00:37:57.580
or

00:37:57.580 --> 00:37:58.280
write

00:37:58.280 --> 00:37:58.520
some

00:37:58.520 --> 00:37:58.780
app

00:37:58.780 --> 00:37:58.900
and

00:37:58.900 --> 00:37:59.180
it's

00:37:59.180 --> 00:37:59.880
we

00:37:59.880 --> 00:38:00.220
think

00:38:00.220 --> 00:38:00.400
it's

00:38:00.400 --> 00:38:00.560
not

00:38:00.560 --> 00:38:00.860
talking

00:38:00.860 --> 00:38:01.000
to

00:38:01.000 --> 00:38:01.100
the

00:38:01.100 --> 00:38:01.360
network

00:38:01.360 --> 00:38:01.500
or

00:38:01.500 --> 00:38:01.620
the

00:38:01.620 --> 00:38:01.820
file

00:38:01.820 --> 00:38:02.120
system

00:38:02.120 --> 00:38:02.380
but

00:38:02.380 --> 00:38:02.540
it

00:38:02.540 --> 00:38:02.800
turns

00:38:02.800 --> 00:38:03.140
out

00:38:03.140 --> 00:38:03.880
all

00:38:03.880 --> 00:38:04.040
of a

00:38:04.040 --> 00:38:04.160
sudden

00:38:04.160 --> 00:38:04.380
it's

00:38:04.380 --> 00:38:04.620
opening

00:38:04.620 --> 00:38:05.180
sockets

00:38:05.180 --> 00:38:05.520
or

00:38:05.520 --> 00:38:06.120
DNS

00:38:06.120 --> 00:38:06.500
stuff

00:38:06.500 --> 00:38:07.320
that

00:38:07.320 --> 00:38:07.500
might

00:38:07.500 --> 00:38:07.740
be

00:38:07.740 --> 00:38:08.160
something

00:38:08.160 --> 00:38:08.360
to

00:38:08.360 --> 00:38:08.660
inspect

00:38:08.660 --> 00:38:09.100
yeah

00:38:09.100 --> 00:38:09.300
so

00:38:09.300 --> 00:38:09.720
potentially

00:38:09.720 --> 00:38:10.000
you

00:38:10.000 --> 00:38:10.140
could

00:38:10.140 --> 00:38:10.340
lock

00:38:10.340 --> 00:38:10.760
down

00:38:10.760 --> 00:38:11.200
a

00:38:11.200 --> 00:38:11.400
Python

00:38:11.400 --> 00:38:11.940
distribution

00:38:11.940 --> 00:38:12.880
or

00:38:12.880 --> 00:38:13.060
a

00:38:13.060 --> 00:38:13.360
Python

00:38:13.360 --> 00:38:14.080
process

00:38:14.080 --> 00:38:15.080
to

00:38:15.080 --> 00:38:15.740
not

00:38:15.740 --> 00:38:15.880
be

00:38:15.880 --> 00:38:16.000
able

00:38:16.000 --> 00:38:16.120
to

00:38:16.120 --> 00:38:16.380
open

00:38:16.380 --> 00:38:16.740
certain

00:38:16.740 --> 00:38:17.180
URLs

00:38:17.180 --> 00:38:17.560
or

00:38:17.560 --> 00:38:17.880
open

00:38:17.880 --> 00:38:18.220
network

00:38:18.220 --> 00:38:18.600
sockets

00:38:18.600 --> 00:38:19.100
under certain

00:38:19.100 --> 00:38:19.720
circumstances

00:38:19.720 --> 00:38:20.180
and it's

00:38:20.180 --> 00:38:20.300
cool

00:38:20.300 --> 00:38:20.580
so with

00:38:20.580 --> 00:38:20.900
the hooks

00:38:20.900 --> 00:38:21.280
do I get

00:38:21.280 --> 00:38:21.760
to say

00:38:21.760 --> 00:38:23.140
I saw

00:38:23.140 --> 00:38:23.440
what you

00:38:23.440 --> 00:38:23.740
did

00:38:23.740 --> 00:38:24.320
and okay

00:38:24.320 --> 00:38:24.880
or I saw

00:38:24.880 --> 00:38:25.100
what you

00:38:25.100 --> 00:38:25.260
did

00:38:25.260 --> 00:38:25.600
and no

00:38:25.600 --> 00:38:25.880
you don't

00:38:25.880 --> 00:38:26.140
get it

00:38:26.140 --> 00:38:26.560
is it

00:38:26.560 --> 00:38:26.920
like a

00:38:26.920 --> 00:38:27.660
place

00:38:27.660 --> 00:38:28.200
to stop

00:38:28.200 --> 00:38:28.420
it

00:38:28.420 --> 00:38:28.840
yeah

00:38:28.840 --> 00:38:30.300
the default

00:38:30.300 --> 00:38:31.040
is just

00:38:31.040 --> 00:38:31.340
as an

00:38:31.340 --> 00:38:31.960
FYI

00:38:31.960 --> 00:38:32.240
yeah

00:38:32.240 --> 00:38:32.600
but if

00:38:32.600 --> 00:38:32.880
you wanted

00:38:32.880 --> 00:38:33.080
to

00:38:33.080 --> 00:38:33.460
throw

00:38:33.460 --> 00:38:33.840
run

00:38:33.840 --> 00:38:34.460
raise a

00:38:34.460 --> 00:38:34.700
runtime

00:38:34.700 --> 00:38:35.160
error

00:38:35.160 --> 00:38:35.880
or

00:38:35.880 --> 00:38:36.220
something

00:38:36.220 --> 00:38:36.620
else

00:38:36.620 --> 00:38:37.400
in line

00:38:37.400 --> 00:38:37.720
then it

00:38:37.720 --> 00:38:37.860
would

00:38:37.860 --> 00:38:38.080
actually

00:38:38.080 --> 00:38:38.420
stop

00:38:38.420 --> 00:38:38.680
the

00:38:38.680 --> 00:38:39.260
request

00:38:39.260 --> 00:38:39.460
through

00:38:39.460 --> 00:38:39.600
to

00:38:39.600 --> 00:38:39.700
the

00:38:39.700 --> 00:38:40.020
function

00:38:40.020 --> 00:38:40.400
that's

00:38:40.400 --> 00:38:40.560
pretty

00:38:40.560 --> 00:38:40.860
awesome

00:38:40.860 --> 00:38:41.620
I think

00:38:41.620 --> 00:38:41.840
this is

00:38:41.840 --> 00:38:41.980
pretty

00:38:41.980 --> 00:38:42.300
interesting

00:38:42.300 --> 00:38:43.060
I know

00:38:43.060 --> 00:38:43.320
there's

00:38:43.320 --> 00:38:43.480
some

00:38:43.480 --> 00:38:43.840
restricted

00:38:43.840 --> 00:38:44.280
environments

00:38:44.280 --> 00:38:44.700
and even

00:38:44.700 --> 00:38:45.000
like

00:38:45.000 --> 00:38:45.580
app stores

00:38:45.580 --> 00:38:46.060
and stuff

00:38:46.060 --> 00:38:46.460
that maybe

00:38:46.460 --> 00:38:46.720
would be

00:38:46.720 --> 00:38:46.920
cool

00:38:46.920 --> 00:38:47.100
to

00:38:47.100 --> 00:38:47.540
package

00:38:47.540 --> 00:38:47.760
this

00:38:47.760 --> 00:38:47.980
up

00:38:47.980 --> 00:38:48.160
and

00:38:48.160 --> 00:38:48.520
use

00:38:48.520 --> 00:38:48.660
it

00:38:48.660 --> 00:38:48.880
so

00:38:48.880 --> 00:38:49.280
yeah

00:38:49.280 --> 00:38:49.660
definitely

00:38:49.660 --> 00:38:49.960
nice

00:38:49.960 --> 00:38:50.620
Lucas

00:38:50.620 --> 00:38:51.100
what do

00:38:51.100 --> 00:38:51.260
you think

00:38:51.260 --> 00:38:51.420
about

00:38:51.420 --> 00:38:51.580
this

00:38:51.580 --> 00:38:51.760
one

00:38:51.760 --> 00:38:52.380
well

00:38:52.380 --> 00:38:52.600
I

00:38:52.600 --> 00:38:52.860
actually

00:38:52.860 --> 00:38:53.100
think

00:38:53.100 --> 00:38:53.300
this

00:38:53.300 --> 00:38:53.440
is

00:38:53.440 --> 00:38:53.640
very

00:38:53.640 --> 00:38:54.040
important

00:38:54.040 --> 00:38:54.440
like

00:38:54.440 --> 00:38:54.740
if

00:38:54.740 --> 00:38:54.820
you

00:38:54.820 --> 00:38:55.000
ever

00:38:55.000 --> 00:38:55.300
worked

00:38:55.300 --> 00:38:55.540
for

00:38:55.540 --> 00:38:55.980
a

00:38:55.980 --> 00:38:56.820
organization

00:38:56.820 --> 00:38:57.820
very

00:38:57.820 --> 00:38:58.180
often

00:38:58.180 --> 00:38:58.660
the

00:38:58.660 --> 00:38:59.260
audit

00:38:59.260 --> 00:38:59.760
trail

00:38:59.760 --> 00:39:00.220
of

00:39:00.220 --> 00:39:00.440
what

00:39:00.440 --> 00:39:00.820
actually

00:39:00.820 --> 00:39:01.320
happened

00:39:01.320 --> 00:39:01.520
is

00:39:01.520 --> 00:39:01.900
important

00:39:01.900 --> 00:39:02.300
not

00:39:02.300 --> 00:39:02.580
just

00:39:02.580 --> 00:39:02.800
for

00:39:02.800 --> 00:39:03.160
security

00:39:03.160 --> 00:39:03.640
reasons

00:39:03.640 --> 00:39:03.880
very

00:39:03.880 --> 00:39:04.220
often

00:39:04.220 --> 00:39:05.040
cascading

00:39:05.040 --> 00:39:05.420
errors

00:39:05.420 --> 00:39:05.900
that end

00:39:05.900 --> 00:39:06.060
up

00:39:06.060 --> 00:39:06.360
with

00:39:06.360 --> 00:39:06.600
an

00:39:06.600 --> 00:39:06.820
entire

00:39:06.820 --> 00:39:07.080
site

00:39:07.080 --> 00:39:07.300
being

00:39:07.300 --> 00:39:07.660
down

00:39:07.660 --> 00:39:08.260
are

00:39:08.260 --> 00:39:08.520
very

00:39:08.520 --> 00:39:08.900
hard

00:39:08.900 --> 00:39:09.100
to

00:39:09.100 --> 00:39:09.520
foresee

00:39:09.520 --> 00:39:10.240
the

00:39:10.240 --> 00:39:10.920
very

00:39:10.920 --> 00:39:11.560
easy

00:39:11.560 --> 00:39:12.000
to

00:39:12.000 --> 00:39:12.260
make

00:39:12.260 --> 00:39:12.820
mistakes

00:39:12.820 --> 00:39:13.120
are

00:39:13.120 --> 00:39:13.840
long

00:39:13.840 --> 00:39:14.240
fixed

00:39:14.240 --> 00:39:14.500
they're

00:39:14.500 --> 00:39:14.720
all

00:39:14.720 --> 00:39:15.260
patched

00:39:15.260 --> 00:39:16.820
there's

00:39:16.820 --> 00:39:17.020
not

00:39:17.020 --> 00:39:17.180
a

00:39:17.180 --> 00:39:17.340
big

00:39:17.340 --> 00:39:17.580
red

00:39:17.580 --> 00:39:17.860
switch

00:39:17.860 --> 00:39:18.060
that

00:39:18.060 --> 00:39:18.200
if

00:39:18.200 --> 00:39:18.320
you

00:39:18.320 --> 00:39:18.880
press

00:39:18.880 --> 00:39:19.080
the

00:39:19.080 --> 00:39:19.400
button

00:39:19.400 --> 00:39:20.040
the

00:39:20.040 --> 00:39:20.260
site

00:39:20.260 --> 00:39:20.500
goes

00:39:20.500 --> 00:39:20.780
down

00:39:20.780 --> 00:39:20.960
it's

00:39:20.960 --> 00:39:21.140
very

00:39:21.140 --> 00:39:21.420
often

00:39:21.420 --> 00:39:21.800
something

00:39:21.800 --> 00:39:22.100
that

00:39:22.100 --> 00:39:22.780
it

00:39:22.780 --> 00:39:23.000
was

00:39:23.000 --> 00:39:23.520
hard

00:39:23.520 --> 00:39:23.720
to

00:39:23.720 --> 00:39:24.580
combine

00:39:24.580 --> 00:39:25.100
and

00:39:25.100 --> 00:39:25.760
having

00:39:25.760 --> 00:39:26.000
the

00:39:26.000 --> 00:39:26.320
trail

00:39:26.320 --> 00:39:26.700
of

00:39:26.700 --> 00:39:27.320
this

00:39:27.320 --> 00:39:27.680
happened

00:39:27.680 --> 00:39:28.060
first

00:39:28.060 --> 00:39:28.280
and

00:39:28.280 --> 00:39:28.940
another

00:39:28.940 --> 00:39:29.600
thing

00:39:29.600 --> 00:39:29.900
happened

00:39:29.900 --> 00:39:30.280
later

00:39:30.280 --> 00:39:30.780
that

00:39:30.780 --> 00:39:30.940
is

00:39:30.940 --> 00:39:31.220
very

00:39:31.220 --> 00:39:31.700
valuable

00:39:31.700 --> 00:39:32.100
so

00:39:32.100 --> 00:39:32.320
I

00:39:32.320 --> 00:39:32.600
see

00:39:32.600 --> 00:39:32.920
this

00:39:32.920 --> 00:39:33.240
feature

00:39:33.240 --> 00:39:33.480
not

00:39:33.480 --> 00:39:33.720
only

00:39:33.720 --> 00:39:33.860
as

00:39:33.860 --> 00:39:33.980
a

00:39:33.980 --> 00:39:34.280
security

00:39:34.280 --> 00:39:34.700
feature

00:39:34.700 --> 00:39:34.940
but

00:39:34.940 --> 00:39:35.220
as

00:39:35.220 --> 00:39:36.700
a

00:39:36.700 --> 00:39:37.700
post-mortem

00:39:37.700 --> 00:39:38.220
kind of

00:39:38.220 --> 00:39:38.500
feature

00:39:38.500 --> 00:39:39.020
as well

00:39:39.020 --> 00:39:39.720
Anthony

00:39:39.720 --> 00:39:40.580
do you

00:39:40.580 --> 00:39:41.040
envision

00:39:41.040 --> 00:39:41.820
this might

00:39:41.820 --> 00:39:42.200
enable

00:39:42.200 --> 00:39:43.200
a different

00:39:43.200 --> 00:39:43.500
set

00:39:43.500 --> 00:39:43.680
of

00:39:43.680 --> 00:39:44.160
tooling

00:39:44.160 --> 00:39:45.100
we have

00:39:45.100 --> 00:39:46.060
visual

00:39:46.060 --> 00:39:46.540
debuggers

00:39:46.540 --> 00:39:46.820
now

00:39:46.820 --> 00:39:47.300
could you

00:39:47.300 --> 00:39:48.340
have

00:39:48.340 --> 00:39:48.700
other

00:39:48.700 --> 00:39:49.260
types

00:39:49.260 --> 00:39:49.380
of

00:39:49.380 --> 00:39:49.760
analysis

00:39:49.760 --> 00:39:50.120
and

00:39:50.120 --> 00:39:50.460
tooling

00:39:50.460 --> 00:39:50.780
and

00:39:50.780 --> 00:39:51.340
whatnot

00:39:51.340 --> 00:39:51.980
in

00:39:51.980 --> 00:39:52.240
terms

00:39:52.240 --> 00:39:52.380
of

00:39:52.380 --> 00:39:52.700
tooling

00:39:52.700 --> 00:39:53.680
there's

00:39:53.680 --> 00:39:53.860
a lot

00:39:53.860 --> 00:39:53.940
of

00:39:53.940 --> 00:39:54.160
things

00:39:54.160 --> 00:39:54.320
in

00:39:54.320 --> 00:39:54.660
standard

00:39:54.660 --> 00:39:55.060
library

00:39:55.060 --> 00:39:55.260
that

00:39:55.260 --> 00:39:55.400
you

00:39:55.400 --> 00:39:55.800
might want

00:39:55.800 --> 00:39:56.040
to

00:39:56.040 --> 00:39:56.300
add

00:39:56.300 --> 00:39:56.600
hooks

00:39:56.600 --> 00:39:56.860
in

00:39:56.860 --> 00:39:57.420
and

00:39:57.420 --> 00:39:57.780
also

00:39:57.780 --> 00:39:58.360
an

00:39:58.360 --> 00:39:58.580
easy

00:39:58.580 --> 00:39:58.840
way

00:39:58.840 --> 00:39:58.980
of

00:39:58.980 --> 00:39:59.180
putting

00:39:59.180 --> 00:39:59.500
hooks

00:39:59.500 --> 00:39:59.820
into

00:39:59.820 --> 00:40:00.280
additional

00:40:00.280 --> 00:40:00.680
modules

00:40:00.680 --> 00:40:01.120
as well

00:40:01.120 --> 00:40:01.640
and

00:40:01.640 --> 00:40:01.980
having

00:40:01.980 --> 00:40:02.320
people

00:40:02.320 --> 00:40:02.640
to

00:40:02.640 --> 00:40:02.940
catch

00:40:02.940 --> 00:40:03.200
those

00:40:03.200 --> 00:40:03.360
and

00:40:03.360 --> 00:40:03.520
deal

00:40:03.520 --> 00:40:03.680
with

00:40:03.680 --> 00:40:03.840
those

00:40:03.840 --> 00:40:04.180
separately

00:40:04.180 --> 00:40:05.100
I

00:40:05.100 --> 00:40:05.280
can

00:40:05.280 --> 00:40:05.580
definitely

00:40:05.580 --> 00:40:05.860
think

00:40:05.860 --> 00:40:05.980
of

00:40:05.980 --> 00:40:06.400
a few

00:40:06.400 --> 00:40:07.100
examples

00:40:07.100 --> 00:40:07.560
of

00:40:07.560 --> 00:40:08.260
libraries

00:40:08.260 --> 00:40:09.420
deserialization

00:40:09.420 --> 00:40:09.980
libraries

00:40:09.980 --> 00:40:10.900
not naming

00:40:10.900 --> 00:40:11.100
any

00:40:11.100 --> 00:40:11.660
specifically

00:40:11.660 --> 00:40:13.000
that have

00:40:13.000 --> 00:40:13.000
that have

00:40:13.000 --> 00:40:16.820
security

00:40:16.820 --> 00:40:17.660
backdoors

00:40:17.660 --> 00:40:18.140
just in

00:40:18.140 --> 00:40:18.480
terms of

00:40:18.480 --> 00:40:18.720
the way

00:40:18.720 --> 00:40:19.280
they work

00:40:19.280 --> 00:40:19.880
so

00:40:19.880 --> 00:40:20.560
unless

00:40:20.560 --> 00:40:20.840
you

00:40:20.840 --> 00:40:21.860
explicitly

00:40:21.860 --> 00:40:22.440
specify

00:40:22.440 --> 00:40:22.740
to

00:40:22.740 --> 00:40:22.960
load

00:40:22.960 --> 00:40:23.080
it

00:40:23.080 --> 00:40:23.240
with

00:40:23.240 --> 00:40:23.380
a

00:40:23.380 --> 00:40:23.600
safe

00:40:23.600 --> 00:40:23.920
mode

00:40:23.920 --> 00:40:24.540
then

00:40:24.540 --> 00:40:24.640
you

00:40:24.640 --> 00:40:24.740
can

00:40:24.740 --> 00:40:25.000
actually

00:40:25.000 --> 00:40:25.480
run

00:40:25.480 --> 00:40:25.780
that

00:40:25.780 --> 00:40:25.980
was

00:40:25.980 --> 00:40:26.100
a

00:40:26.100 --> 00:40:26.280
different

00:40:26.280 --> 00:40:27.160
rhyme

00:40:27.160 --> 00:40:27.460
maybe

00:40:27.460 --> 00:40:27.740
yeah

00:40:27.740 --> 00:40:28.620
there's

00:40:28.620 --> 00:40:29.300
XML

00:40:29.300 --> 00:40:29.760
as well

00:40:29.760 --> 00:40:29.940
is

00:40:29.940 --> 00:40:30.360
another

00:40:30.360 --> 00:40:30.600
one

00:40:30.600 --> 00:40:30.820
yeah

00:40:30.820 --> 00:40:31.360
there are

00:40:31.360 --> 00:40:31.600
sort of

00:40:31.600 --> 00:40:31.880
known

00:40:31.880 --> 00:40:32.200
I guess

00:40:32.200 --> 00:40:32.820
security

00:40:32.820 --> 00:40:34.140
backdoors

00:40:34.140 --> 00:40:34.380
in

00:40:34.380 --> 00:40:34.600
certain

00:40:34.600 --> 00:40:35.020
libraries

00:40:35.020 --> 00:40:35.440
and

00:40:35.440 --> 00:40:35.680
basically

00:40:35.680 --> 00:40:35.880
this

00:40:35.880 --> 00:40:35.980
could

00:40:35.980 --> 00:40:36.100
be

00:40:36.100 --> 00:40:36.220
a

00:40:36.220 --> 00:40:36.400
way

00:40:36.400 --> 00:40:36.520
of

00:40:36.520 --> 00:40:36.880
protecting

00:40:36.880 --> 00:40:37.260
against

00:40:37.260 --> 00:40:37.560
those

00:40:37.560 --> 00:40:37.800
okay

00:40:37.800 --> 00:40:38.000
yeah

00:40:38.000 --> 00:40:38.220
that's

00:40:38.220 --> 00:40:38.680
great

00:40:38.680 --> 00:40:39.100
because

00:40:39.100 --> 00:40:39.840
it

00:40:39.840 --> 00:40:39.960
should

00:40:39.960 --> 00:40:40.140
not

00:40:40.140 --> 00:40:40.280
be

00:40:40.280 --> 00:40:40.460
doing

00:40:40.460 --> 00:40:40.720
these

00:40:40.720 --> 00:40:41.180
operations

00:40:41.180 --> 00:40:41.640
while

00:40:41.640 --> 00:40:42.000
loading

00:40:42.000 --> 00:40:42.200
this

00:40:42.200 --> 00:40:42.540
file

00:40:42.540 --> 00:40:43.160
yeah

00:40:43.160 --> 00:40:43.380
if

00:40:43.380 --> 00:40:43.580
you're

00:40:43.580 --> 00:40:43.700
if

00:40:43.700 --> 00:40:43.880
you're

00:40:43.880 --> 00:40:44.120
loading

00:40:44.120 --> 00:40:44.300
a

00:40:44.300 --> 00:40:44.560
YAML

00:40:44.560 --> 00:40:44.920
file

00:40:44.920 --> 00:40:45.120
or

00:40:45.120 --> 00:40:45.240
an

00:40:45.240 --> 00:40:45.500
XML

00:40:45.500 --> 00:40:45.960
file

00:40:45.960 --> 00:40:46.180
it

00:40:46.180 --> 00:40:46.400
shouldn't

00:40:46.400 --> 00:40:46.520
be

00:40:46.520 --> 00:40:46.780
opening

00:40:46.780 --> 00:40:47.120
network

00:40:47.120 --> 00:40:47.580
sockets

00:40:47.580 --> 00:40:48.880
yeah

00:40:48.880 --> 00:40:49.240
probably

00:40:49.240 --> 00:40:49.540
not

00:40:49.540 --> 00:40:49.760
or

00:40:49.760 --> 00:40:50.220
issuing

00:40:50.220 --> 00:40:51.120
sub

00:40:51.120 --> 00:40:51.800
process

00:40:51.800 --> 00:40:52.260
commands

00:40:52.260 --> 00:40:52.740
or

00:40:52.740 --> 00:40:53.240
you know

00:40:53.240 --> 00:40:53.420
any

00:40:53.420 --> 00:40:53.580
of

00:40:53.580 --> 00:40:53.800
these

00:40:53.800 --> 00:40:54.460
not

00:40:54.460 --> 00:40:54.640
so

00:40:54.640 --> 00:40:54.860
lovely

00:40:54.860 --> 00:40:55.240
things

00:40:55.240 --> 00:40:55.400
that's

00:40:55.400 --> 00:40:55.540
right

00:40:55.540 --> 00:40:56.260
all right

00:40:56.260 --> 00:40:56.500
Lucas

00:40:56.500 --> 00:40:56.860
what's

00:40:56.860 --> 00:40:57.200
next

00:40:57.200 --> 00:40:57.520
on our

00:40:57.520 --> 00:40:57.720
list

00:40:57.720 --> 00:40:58.280
I would

00:40:58.280 --> 00:40:58.400
like

00:40:58.400 --> 00:40:58.540
to

00:40:58.540 --> 00:40:58.820
say

00:40:58.820 --> 00:40:59.060
that

00:40:59.060 --> 00:40:59.420
you know

00:40:59.420 --> 00:40:59.660
there's

00:40:59.660 --> 00:40:59.820
quite

00:40:59.820 --> 00:41:00.060
a few

00:41:00.060 --> 00:41:00.280
peps

00:41:00.280 --> 00:41:00.500
that are

00:41:00.500 --> 00:41:00.680
still

00:41:00.680 --> 00:41:00.820
in

00:41:00.820 --> 00:41:01.040
draft

00:41:01.040 --> 00:41:01.300
form

00:41:01.300 --> 00:41:01.560
and

00:41:01.560 --> 00:41:02.020
the

00:41:02.020 --> 00:41:02.360
authors

00:41:02.360 --> 00:41:02.700
have

00:41:02.700 --> 00:41:03.000
like

00:41:03.000 --> 00:41:03.200
an

00:41:03.200 --> 00:41:03.480
entire

00:41:03.480 --> 00:41:03.780
four

00:41:03.780 --> 00:41:03.960
more

00:41:03.960 --> 00:41:04.240
weeks

00:41:04.240 --> 00:41:04.420
in

00:41:04.420 --> 00:41:04.600
which

00:41:04.600 --> 00:41:04.900
they can

00:41:04.900 --> 00:41:05.180
decide

00:41:05.180 --> 00:41:05.380
to

00:41:05.380 --> 00:41:05.640
finish

00:41:05.640 --> 00:41:05.840
their

00:41:05.840 --> 00:41:06.040
pep

00:41:06.040 --> 00:41:06.200
and

00:41:06.200 --> 00:41:06.680
publish

00:41:06.680 --> 00:41:06.860
it

00:41:06.860 --> 00:41:07.100
so

00:41:07.100 --> 00:41:07.720
things

00:41:07.720 --> 00:41:07.920
might

00:41:07.920 --> 00:41:08.380
change

00:41:08.380 --> 00:41:08.660
but

00:41:08.660 --> 00:41:08.980
the ones

00:41:08.980 --> 00:41:09.120
that

00:41:09.120 --> 00:41:09.420
I'm

00:41:09.420 --> 00:41:09.860
personally

00:41:09.860 --> 00:41:10.240
interested

00:41:10.240 --> 00:41:10.500
in

00:41:10.500 --> 00:41:10.840
is

00:41:10.840 --> 00:41:11.300
always

00:41:11.300 --> 00:41:11.920
of course

00:41:11.920 --> 00:41:12.220
typing

00:41:12.220 --> 00:41:12.580
so

00:41:12.580 --> 00:41:12.920
let me

00:41:12.920 --> 00:41:13.080
just

00:41:13.080 --> 00:41:13.300
cover

00:41:13.300 --> 00:41:13.500
two

00:41:13.500 --> 00:41:13.740
more

00:41:13.740 --> 00:41:14.060
like

00:41:14.060 --> 00:41:14.260
the

00:41:14.260 --> 00:41:14.620
first

00:41:14.620 --> 00:41:14.960
one

00:41:14.960 --> 00:41:15.340
is

00:41:15.340 --> 00:41:15.660
pep

00:41:15.660 --> 00:41:17.180
586

00:41:17.180 --> 00:41:17.480
so

00:41:17.480 --> 00:41:17.800
that's

00:41:17.800 --> 00:41:18.100
literal

00:41:18.100 --> 00:41:18.480
types

00:41:18.480 --> 00:41:18.760
and

00:41:18.760 --> 00:41:19.060
second

00:41:19.060 --> 00:41:19.360
one

00:41:19.360 --> 00:41:19.680
is

00:41:19.680 --> 00:41:20.600
589

00:41:20.600 --> 00:41:21.000
which

00:41:21.000 --> 00:41:21.140
is

00:41:21.140 --> 00:41:21.400
typed

00:41:21.400 --> 00:41:21.720
dict

00:41:21.720 --> 00:41:22.500
both

00:41:22.500 --> 00:41:22.660
of

00:41:22.660 --> 00:41:22.780
them

00:41:22.780 --> 00:41:22.900
are

00:41:22.900 --> 00:41:23.100
kind

00:41:23.100 --> 00:41:23.200
of

00:41:23.200 --> 00:41:23.340
an

00:41:23.340 --> 00:41:23.720
example

00:41:23.720 --> 00:41:24.100
of

00:41:24.100 --> 00:41:24.220
you

00:41:24.220 --> 00:41:24.420
know

00:41:24.420 --> 00:41:24.760
our

00:41:24.760 --> 00:41:25.020
type

00:41:25.020 --> 00:41:25.460
system

00:41:25.460 --> 00:41:25.940
kind

00:41:25.940 --> 00:41:26.100
of

00:41:26.100 --> 00:41:26.700
starting

00:41:26.700 --> 00:41:27.300
uh

00:41:27.300 --> 00:41:28.100
conservatively

00:41:28.100 --> 00:41:28.320
and

00:41:28.320 --> 00:41:28.540
then

00:41:28.540 --> 00:41:29.100
growing

00:41:29.100 --> 00:41:29.820
based

00:41:29.820 --> 00:41:30.020
on

00:41:30.020 --> 00:41:30.380
need

00:41:30.380 --> 00:41:30.700
right

00:41:30.700 --> 00:41:31.080
so

00:41:31.080 --> 00:41:31.680
literal

00:41:31.680 --> 00:41:32.040
types

00:41:32.040 --> 00:41:32.280
are

00:41:32.280 --> 00:41:32.500
very

00:41:32.500 --> 00:41:32.860
interesting

00:41:32.860 --> 00:41:33.180
because

00:41:33.180 --> 00:41:33.360
there

00:41:33.360 --> 00:41:33.600
are

00:41:33.600 --> 00:41:34.020
a bunch

00:41:34.020 --> 00:41:34.340
of

00:41:34.340 --> 00:41:34.700
calls

00:41:34.700 --> 00:41:35.100
where

00:41:35.100 --> 00:41:35.700
the

00:41:35.700 --> 00:41:36.280
behavior

00:41:36.280 --> 00:41:36.800
like

00:41:36.800 --> 00:41:36.980
the

00:41:36.980 --> 00:41:37.280
return

00:41:37.280 --> 00:41:37.680
type

00:41:37.680 --> 00:41:38.100
or

00:41:38.100 --> 00:41:38.660
you

00:41:38.660 --> 00:41:38.820
know

00:41:38.820 --> 00:41:39.000
the

00:41:39.000 --> 00:41:39.500
cascading

00:41:39.500 --> 00:41:40.080
other

00:41:40.080 --> 00:41:40.580
arguments

00:41:40.580 --> 00:41:40.820
that

00:41:40.820 --> 00:41:40.980
you're

00:41:40.980 --> 00:41:41.080
going

00:41:41.080 --> 00:41:41.140
to

00:41:41.140 --> 00:41:41.300
use

00:41:41.300 --> 00:41:41.440
in

00:41:41.440 --> 00:41:41.580
the

00:41:41.580 --> 00:41:41.920
function

00:41:41.920 --> 00:41:42.560
depend

00:41:42.560 --> 00:41:43.040
not

00:41:43.040 --> 00:41:43.320
on

00:41:43.320 --> 00:41:43.480
the

00:41:43.480 --> 00:41:43.880
type

00:41:43.880 --> 00:41:44.040
of

00:41:44.040 --> 00:41:45.040
an

00:41:45.040 --> 00:41:45.360
argument

00:41:45.360 --> 00:41:45.900
but

00:41:45.900 --> 00:41:46.160
on

00:41:46.160 --> 00:41:46.320
the

00:41:46.320 --> 00:41:46.780
actual

00:41:46.780 --> 00:41:47.500
value

00:41:47.500 --> 00:41:48.360
that

00:41:48.360 --> 00:41:48.520
you

00:41:48.520 --> 00:41:48.640
are

00:41:48.640 --> 00:41:49.100
passing

00:41:49.100 --> 00:41:49.960
positive

00:41:49.960 --> 00:41:50.420
integer

00:41:50.420 --> 00:41:50.780
negative

00:41:50.780 --> 00:41:51.240
integer

00:41:51.240 --> 00:41:51.580
well

00:41:51.580 --> 00:41:51.800
like

00:41:51.800 --> 00:41:52.280
so

00:41:52.280 --> 00:41:52.980
parametric

00:41:52.980 --> 00:41:53.260
types

00:41:53.260 --> 00:41:53.420
are

00:41:53.420 --> 00:41:53.640
kind

00:41:53.640 --> 00:41:53.760
of

00:41:53.760 --> 00:41:54.020
hard

00:41:54.020 --> 00:41:54.220
but

00:41:54.220 --> 00:41:54.540
what

00:41:54.540 --> 00:41:54.680
we

00:41:54.680 --> 00:41:54.780
are

00:41:54.780 --> 00:41:55.020
doing

00:41:55.020 --> 00:41:55.200
with

00:41:55.200 --> 00:41:55.440
literal

00:41:55.440 --> 00:41:55.720
types

00:41:55.720 --> 00:41:56.080
is

00:41:56.080 --> 00:41:56.480
something

00:41:56.480 --> 00:41:56.760
like

00:41:56.760 --> 00:41:56.960
the

00:41:56.960 --> 00:41:57.360
open

00:41:57.360 --> 00:41:57.660
built

00:41:57.660 --> 00:41:58.220
in

00:41:58.220 --> 00:41:59.260
you

00:41:59.260 --> 00:41:59.440
have

00:41:59.440 --> 00:41:59.840
a

00:41:59.840 --> 00:42:00.040
certain

00:42:00.040 --> 00:42:00.320
number

00:42:00.320 --> 00:42:00.500
of

00:42:00.500 --> 00:42:00.880
modes

00:42:00.880 --> 00:42:01.180
right

00:42:01.180 --> 00:42:01.420
and

00:42:01.420 --> 00:42:01.760
depending

00:42:01.760 --> 00:42:02.020
on

00:42:02.020 --> 00:42:02.200
whether

00:42:02.200 --> 00:42:02.400
you're

00:42:02.400 --> 00:42:02.660
saying

00:42:02.660 --> 00:42:03.060
RB

00:42:03.060 --> 00:42:03.940
or

00:42:03.940 --> 00:42:04.360
R

00:42:04.360 --> 00:42:04.960
the

00:42:04.960 --> 00:42:05.460
resulting

00:42:05.460 --> 00:42:05.900
IO

00:42:05.900 --> 00:42:06.340
is

00:42:06.340 --> 00:42:06.620
either

00:42:06.620 --> 00:42:07.080
bytes

00:42:07.080 --> 00:42:07.480
or

00:42:07.480 --> 00:42:08.020
strings

00:42:08.020 --> 00:42:08.380
and

00:42:08.380 --> 00:42:08.840
currently

00:42:08.840 --> 00:42:09.360
there

00:42:09.360 --> 00:42:09.520
is

00:42:09.520 --> 00:42:09.800
certain

00:42:09.800 --> 00:42:10.320
hackery

00:42:10.320 --> 00:42:10.800
both

00:42:10.800 --> 00:42:11.220
in

00:42:11.220 --> 00:42:11.720
mypy

00:42:11.720 --> 00:42:12.180
and Pyre

00:42:12.180 --> 00:42:12.680
to just

00:42:12.680 --> 00:42:13.540
work

00:42:13.540 --> 00:42:13.980
around

00:42:13.980 --> 00:42:14.420
this

00:42:14.420 --> 00:42:14.980
but

00:42:14.980 --> 00:42:15.220
it

00:42:15.220 --> 00:42:15.360
would

00:42:15.360 --> 00:42:15.500
be

00:42:15.500 --> 00:42:15.820
good

00:42:15.820 --> 00:42:16.100
if

00:42:16.100 --> 00:42:16.260
the

00:42:16.260 --> 00:42:16.580
actual

00:42:16.580 --> 00:42:16.800
type

00:42:16.800 --> 00:42:17.100
system

00:42:17.100 --> 00:42:17.620
supported

00:42:17.620 --> 00:42:17.940
this

00:42:17.940 --> 00:42:18.280
feature

00:42:18.280 --> 00:42:18.540
so

00:42:18.540 --> 00:42:18.800
literal

00:42:18.800 --> 00:42:19.200
is

00:42:19.200 --> 00:42:19.520
all

00:42:19.520 --> 00:42:19.860
about

00:42:19.860 --> 00:42:20.180
being

00:42:20.180 --> 00:42:20.540
able

00:42:20.540 --> 00:42:20.740
to

00:42:20.740 --> 00:42:21.240
express

00:42:21.240 --> 00:42:21.500
those

00:42:21.500 --> 00:42:21.840
types

00:42:21.840 --> 00:42:22.380
so

00:42:22.380 --> 00:42:22.660
that

00:42:22.660 --> 00:42:22.980
if

00:42:22.980 --> 00:42:23.560
you

00:42:23.560 --> 00:42:24.160
pass

00:42:24.160 --> 00:42:24.700
none

00:42:24.700 --> 00:42:25.140
here

00:42:25.140 --> 00:42:25.400
it's

00:42:25.400 --> 00:42:25.540
going

00:42:25.540 --> 00:42:25.620
to

00:42:25.620 --> 00:42:25.860
behave

00:42:25.860 --> 00:42:26.280
differently

00:42:26.280 --> 00:42:26.720
if

00:42:26.720 --> 00:42:27.180
you

00:42:27.180 --> 00:42:27.720
pass

00:42:27.720 --> 00:42:28.020
on

00:42:28.020 --> 00:42:28.380
string

00:42:28.380 --> 00:42:28.760
here

00:42:28.760 --> 00:42:29.020
it's

00:42:29.020 --> 00:42:29.120
going

00:42:29.120 --> 00:42:29.200
to

00:42:29.200 --> 00:42:29.440
behave

00:42:29.440 --> 00:42:29.820
differently

00:42:29.820 --> 00:42:30.120
if

00:42:30.120 --> 00:42:30.320
that

00:42:30.320 --> 00:42:30.620
string

00:42:30.620 --> 00:42:31.000
is

00:42:31.000 --> 00:42:31.380
RB

00:42:31.380 --> 00:42:31.940
or

00:42:31.940 --> 00:42:32.200
is

00:42:32.200 --> 00:42:33.200
WB

00:42:33.200 --> 00:42:33.760
or

00:42:33.760 --> 00:42:34.020
is

00:42:34.020 --> 00:42:34.720
R

00:42:34.720 --> 00:42:36.100
and so

00:42:36.100 --> 00:42:36.260
on

00:42:36.260 --> 00:42:36.560
and so

00:42:36.560 --> 00:42:36.760
on

00:42:36.760 --> 00:42:37.120
so

00:42:37.120 --> 00:42:37.380
that's

00:42:37.380 --> 00:42:37.640
literal

00:42:37.640 --> 00:42:38.040
types

00:42:38.040 --> 00:42:38.880
there's

00:42:38.880 --> 00:42:39.080
some

00:42:39.080 --> 00:42:39.640
very

00:42:39.640 --> 00:42:40.260
interesting

00:42:40.260 --> 00:42:41.440
edge

00:42:41.440 --> 00:42:41.780
cases

00:42:41.780 --> 00:42:42.000
and

00:42:42.000 --> 00:42:42.460
deep

00:42:42.460 --> 00:42:43.280
thought

00:42:43.280 --> 00:42:43.740
in

00:42:43.740 --> 00:42:43.940
that

00:42:43.940 --> 00:42:44.180
pep

00:42:44.180 --> 00:42:44.380
it

00:42:44.380 --> 00:42:44.540
is

00:42:44.540 --> 00:42:45.260
surprisingly

00:42:45.260 --> 00:42:45.720
long

00:42:45.720 --> 00:42:45.900
and

00:42:45.900 --> 00:42:46.260
complex

00:42:46.260 --> 00:42:46.480
I'm

00:42:46.480 --> 00:42:46.640
not

00:42:46.640 --> 00:42:46.860
going

00:42:46.860 --> 00:42:47.100
to go

00:42:47.100 --> 00:42:47.300
into

00:42:47.300 --> 00:42:47.620
this

00:42:47.620 --> 00:42:47.940
now

00:42:47.940 --> 00:42:48.420
the

00:42:48.420 --> 00:42:48.720
another

00:42:48.720 --> 00:42:48.980
one

00:42:48.980 --> 00:42:49.180
is

00:42:49.180 --> 00:42:49.420
the

00:42:49.420 --> 00:42:50.260
type

00:42:50.260 --> 00:42:50.660
dict

00:42:50.660 --> 00:42:51.780
originally

00:42:51.780 --> 00:42:52.400
dictionaries

00:42:52.400 --> 00:42:52.840
have been

00:42:52.840 --> 00:42:53.320
envisioned

00:42:53.320 --> 00:42:54.340
in the

00:42:54.340 --> 00:42:55.040
static

00:42:55.040 --> 00:42:55.740
typing

00:42:55.740 --> 00:42:56.160
as

00:42:56.160 --> 00:42:57.560
there's

00:42:57.560 --> 00:42:57.740
this

00:42:57.740 --> 00:42:58.400
key

00:42:58.400 --> 00:42:58.740
value

00:42:58.740 --> 00:42:59.120
store

00:42:59.120 --> 00:42:59.400
so

00:42:59.400 --> 00:42:59.760
there's

00:42:59.760 --> 00:43:00.140
keys

00:43:00.140 --> 00:43:00.360
of

00:43:00.360 --> 00:43:00.480
a

00:43:00.480 --> 00:43:00.680
certain

00:43:00.680 --> 00:43:01.080
type

00:43:01.080 --> 00:43:01.360
and

00:43:01.360 --> 00:43:01.560
there's

00:43:01.560 --> 00:43:01.860
values

00:43:01.860 --> 00:43:02.020
of

00:43:02.020 --> 00:43:02.140
a

00:43:02.140 --> 00:43:02.360
certain

00:43:02.360 --> 00:43:02.720
type

00:43:02.720 --> 00:43:03.640
what

00:43:03.640 --> 00:43:04.040
happens

00:43:04.040 --> 00:43:04.280
in

00:43:04.280 --> 00:43:04.720
practice

00:43:04.720 --> 00:43:05.180
is

00:43:05.180 --> 00:43:05.340
that

00:43:05.340 --> 00:43:05.640
a lot

00:43:05.640 --> 00:43:05.780
of

00:43:05.780 --> 00:43:06.360
pre-existing

00:43:06.360 --> 00:43:06.840
Python

00:43:06.840 --> 00:43:07.440
applications

00:43:07.440 --> 00:43:08.040
do

00:43:08.040 --> 00:43:08.360
not

00:43:08.360 --> 00:43:08.680
use

00:43:08.680 --> 00:43:08.940
name

00:43:08.940 --> 00:43:09.420
tuples

00:43:09.420 --> 00:43:09.780
do

00:43:09.780 --> 00:43:10.080
not

00:43:10.080 --> 00:43:10.380
use

00:43:10.380 --> 00:43:10.840
errors

00:43:10.840 --> 00:43:11.160
or

00:43:11.160 --> 00:43:11.400
data

00:43:11.400 --> 00:43:11.860
classes

00:43:11.860 --> 00:43:12.460
which

00:43:12.460 --> 00:43:12.660
are

00:43:12.660 --> 00:43:13.120
very

00:43:13.120 --> 00:43:13.500
new

00:43:13.500 --> 00:43:14.260
instead

00:43:14.260 --> 00:43:15.060
they use

00:43:15.060 --> 00:43:15.700
kind of

00:43:15.700 --> 00:43:16.140
lightweight

00:43:16.140 --> 00:43:16.680
classes

00:43:16.680 --> 00:43:17.620
in the

00:43:17.620 --> 00:43:17.860
form

00:43:17.860 --> 00:43:18.200
of

00:43:18.200 --> 00:43:18.780
dictionaries

00:43:18.780 --> 00:43:19.060
that

00:43:19.060 --> 00:43:19.460
have

00:43:19.460 --> 00:43:20.200
keys

00:43:20.200 --> 00:43:21.060
and

00:43:21.060 --> 00:43:21.500
values

00:43:21.500 --> 00:43:21.940
of

00:43:21.940 --> 00:43:22.640
various

00:43:22.640 --> 00:43:23.020
types

00:43:23.020 --> 00:43:23.900
so

00:43:23.900 --> 00:43:24.480
there

00:43:24.480 --> 00:43:24.860
can be

00:43:24.860 --> 00:43:25.300
name

00:43:25.300 --> 00:43:25.540
which

00:43:25.540 --> 00:43:25.680
is

00:43:25.680 --> 00:43:25.800
a

00:43:25.800 --> 00:43:26.100
string

00:43:26.100 --> 00:43:26.400
but

00:43:26.400 --> 00:43:26.580
there

00:43:26.580 --> 00:43:26.840
can

00:43:26.840 --> 00:43:27.200
be

00:43:27.200 --> 00:43:27.640
a

00:43:27.640 --> 00:43:28.260
birth

00:43:28.260 --> 00:43:28.600
year

00:43:28.600 --> 00:43:28.880
which

00:43:28.880 --> 00:43:29.040
is

00:43:29.040 --> 00:43:29.180
going

00:43:29.180 --> 00:43:29.260
to

00:43:29.260 --> 00:43:29.460
be

00:43:29.460 --> 00:43:29.680
an

00:43:29.680 --> 00:43:30.040
int

00:43:30.040 --> 00:43:30.400
right

00:43:30.400 --> 00:43:30.720
and

00:43:30.720 --> 00:43:31.420
based

00:43:31.420 --> 00:43:31.880
on

00:43:31.880 --> 00:43:32.120
the

00:43:32.120 --> 00:43:32.680
actual

00:43:32.680 --> 00:43:33.640
name

00:43:33.640 --> 00:43:33.860
of

00:43:33.860 --> 00:43:34.020
that

00:43:34.020 --> 00:43:34.320
key

00:43:34.320 --> 00:43:35.080
you're

00:43:35.080 --> 00:43:35.180
going

00:43:35.180 --> 00:43:35.260
to

00:43:35.260 --> 00:43:35.400
have

00:43:35.400 --> 00:43:35.720
different

00:43:35.720 --> 00:43:36.080
types

00:43:36.080 --> 00:43:36.280
so

00:43:36.280 --> 00:43:36.460
that

00:43:36.460 --> 00:43:36.620
was

00:43:36.620 --> 00:43:36.820
very

00:43:36.820 --> 00:43:37.360
cumbersome

00:43:37.360 --> 00:43:37.620
to

00:43:37.620 --> 00:43:38.840
express

00:43:38.840 --> 00:43:39.520
in

00:43:39.520 --> 00:43:39.900
the

00:43:39.900 --> 00:43:40.540
previous

00:43:40.540 --> 00:43:40.840
form

00:43:40.840 --> 00:43:41.060
almost

00:43:41.060 --> 00:43:41.240
like

00:43:41.240 --> 00:43:41.440
a

00:43:41.440 --> 00:43:41.780
schema

00:43:41.780 --> 00:43:42.200
yeah

00:43:42.200 --> 00:43:42.720
yes

00:43:42.720 --> 00:43:42.900
it's

00:43:42.900 --> 00:43:43.500
very

00:43:43.500 --> 00:43:43.800
much

00:43:43.800 --> 00:43:44.040
like

00:43:44.040 --> 00:43:44.560
schemas

00:43:44.560 --> 00:43:44.780
so

00:43:44.780 --> 00:43:45.080
now

00:43:45.080 --> 00:43:45.580
there

00:43:45.580 --> 00:43:45.960
is

00:43:45.960 --> 00:43:46.240
a

00:43:46.240 --> 00:43:46.500
way

00:43:46.500 --> 00:43:47.060
to

00:43:47.060 --> 00:43:47.700
describe

00:43:47.700 --> 00:43:47.940
a

00:43:47.940 --> 00:43:48.140
type

00:43:48.140 --> 00:43:48.540
dictionary

00:43:48.540 --> 00:43:48.940
in

00:43:48.940 --> 00:43:49.120
the

00:43:49.120 --> 00:43:49.420
form

00:43:49.420 --> 00:43:49.880
of

00:43:49.880 --> 00:43:50.140
like

00:43:50.140 --> 00:43:50.320
a

00:43:50.320 --> 00:43:50.880
data

00:43:50.880 --> 00:43:51.220
class

00:43:51.220 --> 00:43:51.680
like

00:43:51.680 --> 00:43:52.340
type

00:43:52.340 --> 00:43:53.080
where you

00:43:53.080 --> 00:43:53.260
just

00:43:53.260 --> 00:43:53.700
express

00:43:53.700 --> 00:43:53.860
it

00:43:53.860 --> 00:43:54.040
like

00:43:54.040 --> 00:43:54.580
class

00:43:54.580 --> 00:43:54.840
like

00:43:54.840 --> 00:43:55.220
saying

00:43:55.220 --> 00:43:55.820
this

00:43:55.820 --> 00:43:56.380
dictionary

00:43:56.380 --> 00:43:56.660
is

00:43:56.660 --> 00:43:56.880
going to

00:43:56.880 --> 00:43:57.300
have

00:43:57.300 --> 00:43:57.760
keys

00:43:57.760 --> 00:43:57.940
that

00:43:57.940 --> 00:43:58.040
are

00:43:58.040 --> 00:43:58.240
like

00:43:58.240 --> 00:43:58.600
this

00:43:58.600 --> 00:43:58.980
and

00:43:58.980 --> 00:43:59.660
this

00:43:59.660 --> 00:43:59.880
key

00:43:59.880 --> 00:44:00.040
is

00:44:00.040 --> 00:44:00.260
going to

00:44:00.260 --> 00:44:00.480
be

00:44:00.480 --> 00:44:00.620
a

00:44:00.620 --> 00:44:00.920
string

00:44:00.920 --> 00:44:01.220
this

00:44:01.220 --> 00:44:01.460
other

00:44:01.460 --> 00:44:01.680
key

00:44:01.680 --> 00:44:01.840
is

00:44:01.840 --> 00:44:02.080
going to

00:44:02.080 --> 00:44:02.280
be

00:44:02.280 --> 00:44:02.500
an

00:44:02.500 --> 00:44:02.840
int

00:44:02.840 --> 00:44:03.400
that

00:44:03.400 --> 00:44:03.720
solves

00:44:03.720 --> 00:44:04.080
already

00:44:04.080 --> 00:44:04.340
a

00:44:04.340 --> 00:44:04.600
lot

00:44:04.600 --> 00:44:04.880
but

00:44:04.880 --> 00:44:05.780
then

00:44:05.780 --> 00:44:06.180
the

00:44:06.180 --> 00:44:06.820
interesting

00:44:06.820 --> 00:44:07.180
part

00:44:07.180 --> 00:44:07.380
is

00:44:07.380 --> 00:44:07.620
when

00:44:07.620 --> 00:44:07.820
those

00:44:07.820 --> 00:44:08.060
things

00:44:08.060 --> 00:44:08.460
start

00:44:08.460 --> 00:44:09.240
nesting

00:44:09.240 --> 00:44:10.020
that

00:44:10.020 --> 00:44:10.360
actually

00:44:10.360 --> 00:44:10.920
enables

00:44:10.920 --> 00:44:11.120
you

00:44:11.120 --> 00:44:11.480
to

00:44:11.480 --> 00:44:12.000
construct

00:44:12.000 --> 00:44:12.440
rather

00:44:12.440 --> 00:44:13.240
complex

00:44:13.240 --> 00:44:13.820
schemas

00:44:13.820 --> 00:44:13.980
that

00:44:13.980 --> 00:44:14.320
can

00:44:14.320 --> 00:44:14.500
be

00:44:14.500 --> 00:44:14.720
used

00:44:14.720 --> 00:44:15.140
directly

00:44:15.140 --> 00:44:15.340
in

00:44:15.340 --> 00:44:15.600
JSON

00:44:15.600 --> 00:44:16.100
or

00:44:16.100 --> 00:44:16.760
in

00:44:16.760 --> 00:44:17.020
other

00:44:17.020 --> 00:44:17.340
forms

00:44:17.340 --> 00:44:17.480
of

00:44:17.480 --> 00:44:18.060
serialization

00:44:18.060 --> 00:44:18.400
so

00:44:18.400 --> 00:44:19.140
that

00:44:19.140 --> 00:44:19.400
pep

00:44:19.400 --> 00:44:19.660
alone

00:44:19.660 --> 00:44:19.840
is

00:44:19.840 --> 00:44:20.100
also

00:44:20.100 --> 00:44:20.400
very

00:44:20.400 --> 00:44:20.720
useful

00:44:20.720 --> 00:44:21.000
in

00:44:21.000 --> 00:44:21.360
practice

00:44:21.360 --> 00:44:21.600
even

00:44:21.600 --> 00:44:21.840
though

00:44:21.840 --> 00:44:22.040
you

00:44:22.040 --> 00:44:22.280
could

00:44:22.280 --> 00:44:22.440
just

00:44:22.440 --> 00:44:22.600
say

00:44:22.600 --> 00:44:23.140
people

00:44:23.140 --> 00:44:23.340
are

00:44:23.340 --> 00:44:23.600
doing

00:44:23.600 --> 00:44:23.740
it

00:44:23.740 --> 00:44:24.020
wrong

00:44:24.020 --> 00:44:24.200
they

00:44:24.200 --> 00:44:24.360
should

00:44:24.360 --> 00:44:24.520
be

00:44:24.520 --> 00:44:24.800
using

00:44:24.800 --> 00:44:25.560
name

00:44:25.560 --> 00:44:25.920
tuples

00:44:25.920 --> 00:44:26.120
or

00:44:26.120 --> 00:44:26.380
other

00:44:26.380 --> 00:44:26.700
forms

00:44:26.700 --> 00:44:26.860
of

00:44:26.860 --> 00:44:27.160
typing

00:44:27.160 --> 00:44:27.620
instead

00:44:27.620 --> 00:44:28.400
well

00:44:28.400 --> 00:44:28.880
you

00:44:28.880 --> 00:44:29.320
have to

00:44:29.320 --> 00:44:29.460
be

00:44:29.460 --> 00:44:29.860
pragmatic

00:44:29.860 --> 00:44:30.200
you

00:44:30.200 --> 00:44:31.080
see

00:44:31.080 --> 00:44:31.640
pre-existing

00:44:31.640 --> 00:44:32.300
valid

00:44:32.300 --> 00:44:32.540
use

00:44:32.540 --> 00:44:32.840
cases

00:44:32.840 --> 00:44:33.100
of

00:44:33.100 --> 00:44:33.400
this

00:44:33.400 --> 00:44:34.040
you

00:44:34.040 --> 00:44:34.220
have

00:44:34.220 --> 00:44:34.340
to

00:44:34.340 --> 00:44:34.780
adhere

00:44:34.780 --> 00:44:34.960
to

00:44:34.960 --> 00:44:35.340
those

00:44:35.340 --> 00:44:35.660
yeah

00:44:35.660 --> 00:44:36.420
interesting

00:44:36.420 --> 00:44:36.860
I guess

00:44:36.860 --> 00:44:37.840
since

00:44:37.840 --> 00:44:38.040
you're

00:44:38.040 --> 00:44:38.280
really

00:44:38.280 --> 00:44:38.560
into

00:44:38.560 --> 00:44:38.900
typing

00:44:38.900 --> 00:44:39.800
and

00:44:39.800 --> 00:44:40.160
you're

00:44:40.160 --> 00:44:40.540
on

00:44:40.540 --> 00:44:40.860
the

00:44:40.860 --> 00:44:41.300
core

00:44:41.300 --> 00:44:41.480
dev

00:44:41.480 --> 00:44:41.700
side

00:44:41.700 --> 00:44:41.820
of

00:44:41.820 --> 00:44:42.180
things

00:44:42.180 --> 00:44:42.580
what

00:44:42.580 --> 00:44:42.700
do

00:44:42.700 --> 00:44:42.800
you

00:44:42.800 --> 00:44:43.060
think

00:44:43.060 --> 00:44:43.440
about

00:44:43.440 --> 00:44:44.120
libraries

00:44:44.120 --> 00:44:44.700
especially

00:44:44.700 --> 00:44:44.900
I'm

00:44:44.900 --> 00:44:45.080
thinking

00:44:45.080 --> 00:44:45.260
of

00:44:45.260 --> 00:44:45.660
web

00:44:45.660 --> 00:44:46.120
frameworks

00:44:46.120 --> 00:44:47.300
that

00:44:47.300 --> 00:44:47.860
use

00:44:47.860 --> 00:44:48.380
typing

00:44:48.380 --> 00:44:49.700
for

00:44:49.700 --> 00:44:51.020
serialization

00:44:51.020 --> 00:44:51.440
and stuff

00:44:51.440 --> 00:44:51.900
so like

00:44:51.900 --> 00:44:52.340
Molten

00:44:52.340 --> 00:44:52.880
for example

00:44:52.880 --> 00:44:53.480
you can

00:44:53.480 --> 00:44:53.940
have

00:44:53.940 --> 00:44:54.720
a

00:44:54.720 --> 00:44:55.320
class

00:44:55.320 --> 00:44:55.580
that

00:44:55.580 --> 00:44:56.380
has

00:44:56.380 --> 00:44:57.400
fields

00:44:57.400 --> 00:44:58.160
but also

00:44:58.160 --> 00:44:58.440
those

00:44:58.440 --> 00:44:58.700
fields

00:44:58.700 --> 00:44:58.880
have

00:44:58.880 --> 00:44:59.300
types

00:44:59.300 --> 00:44:59.680
and

00:44:59.680 --> 00:44:59.820
then

00:44:59.820 --> 00:44:59.980
you

00:44:59.980 --> 00:45:00.260
say

00:45:00.260 --> 00:45:00.580
this

00:45:00.580 --> 00:45:01.200
web

00:45:01.200 --> 00:45:01.540
function

00:45:01.540 --> 00:45:01.980
takes

00:45:01.980 --> 00:45:02.460
this

00:45:02.460 --> 00:45:03.180
class

00:45:03.180 --> 00:45:03.440
but

00:45:03.440 --> 00:45:03.580
it's

00:45:03.580 --> 00:45:03.860
really

00:45:03.860 --> 00:45:04.060
a

00:45:04.060 --> 00:45:04.300
form

00:45:04.300 --> 00:45:04.720
submission

00:45:04.720 --> 00:45:05.420
and

00:45:05.420 --> 00:45:05.560
it'll

00:45:05.560 --> 00:45:05.980
convert

00:45:05.980 --> 00:45:06.260
stuff

00:45:06.260 --> 00:45:06.400
to

00:45:06.400 --> 00:45:06.760
integers

00:45:06.760 --> 00:45:07.160
or

00:45:07.160 --> 00:45:07.740
validate

00:45:07.740 --> 00:45:08.060
against

00:45:08.060 --> 00:45:08.200
the

00:45:08.200 --> 00:45:08.460
types

00:45:08.460 --> 00:45:09.340
is

00:45:09.340 --> 00:45:09.640
that

00:45:09.640 --> 00:45:09.860
in

00:45:09.860 --> 00:45:10.140
your

00:45:10.140 --> 00:45:10.560
mind

00:45:10.560 --> 00:45:11.340
awesome

00:45:11.340 --> 00:45:11.720
or

00:45:11.720 --> 00:45:11.860
is

00:45:11.860 --> 00:45:12.000
that

00:45:12.000 --> 00:45:12.120
an

00:45:12.120 --> 00:45:12.480
abuse

00:45:12.480 --> 00:45:12.600
of

00:45:12.600 --> 00:45:12.700
the

00:45:12.700 --> 00:45:12.880
type

00:45:12.880 --> 00:45:13.200
system

00:45:13.200 --> 00:45:13.580
so

00:45:13.580 --> 00:45:13.720
this

00:45:13.720 --> 00:45:13.820
is

00:45:13.820 --> 00:45:14.160
interesting

00:45:14.160 --> 00:45:14.380
right

00:45:14.380 --> 00:45:14.640
because

00:45:14.640 --> 00:45:15.280
obviously

00:45:15.280 --> 00:45:16.120
as long

00:45:16.120 --> 00:45:16.400
as the

00:45:16.400 --> 00:45:16.580
type

00:45:16.580 --> 00:45:16.940
system

00:45:16.940 --> 00:45:17.500
is

00:45:17.500 --> 00:45:17.900
kind

00:45:17.900 --> 00:45:18.100
of

00:45:18.100 --> 00:45:18.320
an

00:45:18.320 --> 00:45:18.720
extension

00:45:18.720 --> 00:45:19.480
of

00:45:19.480 --> 00:45:19.700
the

00:45:19.700 --> 00:45:19.860
type

00:45:19.860 --> 00:45:20.080
system

00:45:20.080 --> 00:45:20.260
we're

00:45:20.260 --> 00:45:20.440
using

00:45:20.440 --> 00:45:20.620
for

00:45:20.620 --> 00:45:20.800
type

00:45:20.800 --> 00:45:21.120
checking

00:45:21.120 --> 00:45:21.520
or

00:45:21.520 --> 00:45:21.860
maybe

00:45:21.860 --> 00:45:22.080
it's

00:45:22.080 --> 00:45:22.340
even

00:45:22.340 --> 00:45:22.800
exactly

00:45:22.800 --> 00:45:23.020
the

00:45:23.020 --> 00:45:23.240
same

00:45:23.240 --> 00:45:23.460
like

00:45:23.460 --> 00:45:24.200
that

00:45:24.200 --> 00:45:24.380
is

00:45:24.380 --> 00:45:24.780
using

00:45:24.780 --> 00:45:24.940
a

00:45:24.940 --> 00:45:25.080
shared

00:45:25.080 --> 00:45:25.580
vocabulary

00:45:25.580 --> 00:45:26.020
that's

00:45:26.020 --> 00:45:26.260
great

00:45:26.260 --> 00:45:27.540
we support

00:45:27.540 --> 00:45:27.820
that

00:45:27.820 --> 00:45:28.320
we would

00:45:28.320 --> 00:45:29.000
wish to

00:45:29.000 --> 00:45:29.320
see

00:45:29.320 --> 00:45:30.220
type

00:45:30.220 --> 00:45:30.580
hints

00:45:30.580 --> 00:45:31.080
in

00:45:31.080 --> 00:45:31.280
more

00:45:31.280 --> 00:45:31.660
places

00:45:31.660 --> 00:45:31.860
in

00:45:31.860 --> 00:45:32.160
fact

00:45:32.160 --> 00:45:32.680
in

00:45:32.680 --> 00:45:33.140
3.7

00:45:33.140 --> 00:45:33.600
I

00:45:33.600 --> 00:45:34.400
extended

00:45:34.400 --> 00:45:34.820
single

00:45:34.820 --> 00:45:35.280
dispatch

00:45:35.280 --> 00:45:35.740
so that

00:45:35.740 --> 00:45:36.060
now

00:45:36.060 --> 00:45:36.380
you can

00:45:36.380 --> 00:45:36.640
just

00:45:36.640 --> 00:45:37.060
use

00:45:37.060 --> 00:45:38.260
annotations

00:45:38.260 --> 00:45:38.500
on

00:45:38.500 --> 00:45:39.000
arguments

00:45:39.000 --> 00:45:39.400
instead

00:45:39.400 --> 00:45:39.660
of

00:45:39.660 --> 00:45:40.340
saying

00:45:40.340 --> 00:45:41.180
register

00:45:41.180 --> 00:45:41.720
off

00:45:41.720 --> 00:45:42.080
and

00:45:42.080 --> 00:45:43.880
using

00:45:43.880 --> 00:45:44.140
the

00:45:44.140 --> 00:45:44.600
annotations

00:45:44.600 --> 00:45:44.940
of

00:45:44.940 --> 00:45:45.100
the

00:45:45.100 --> 00:45:45.380
first

00:45:45.380 --> 00:45:46.080
argument

00:45:46.080 --> 00:45:46.500
it'll

00:45:46.500 --> 00:45:46.960
behave

00:45:46.960 --> 00:45:47.800
as

00:45:47.800 --> 00:45:47.920
you

00:45:47.920 --> 00:45:48.240
expect

00:45:48.240 --> 00:45:48.520
so

00:45:48.520 --> 00:45:49.120
you

00:45:49.120 --> 00:45:49.300
can

00:45:49.300 --> 00:45:49.480
use

00:45:49.480 --> 00:45:49.780
type

00:45:49.780 --> 00:45:50.600
annotations

00:45:50.600 --> 00:45:50.940
at

00:45:50.940 --> 00:45:51.280
runtime

00:45:51.280 --> 00:45:51.920
for

00:45:51.920 --> 00:45:52.500
whatever

00:45:52.500 --> 00:45:52.740
you

00:45:52.740 --> 00:45:53.060
want

00:45:53.060 --> 00:45:53.360
as

00:45:53.360 --> 00:45:53.580
long

00:45:53.580 --> 00:45:53.740
as

00:45:53.740 --> 00:45:53.920
the

00:45:53.920 --> 00:45:54.200
type

00:45:54.200 --> 00:45:54.640
system

00:45:54.640 --> 00:45:54.940
is

00:45:54.940 --> 00:45:55.980
the

00:45:55.980 --> 00:45:56.300
same

00:45:56.300 --> 00:45:56.920
with

00:45:56.920 --> 00:45:57.320
what

00:45:57.320 --> 00:45:57.500
we're

00:45:57.500 --> 00:45:57.720
using

00:45:57.720 --> 00:45:57.880
it

00:45:57.880 --> 00:45:58.160
for

00:45:58.160 --> 00:45:58.960
some

00:45:58.960 --> 00:45:59.180
use

00:45:59.180 --> 00:45:59.500
cases

00:45:59.500 --> 00:46:00.200
use

00:46:00.200 --> 00:46:01.180
annotations

00:46:01.180 --> 00:46:01.660
function

00:46:01.660 --> 00:46:02.460
annotations

00:46:02.460 --> 00:46:02.840
in

00:46:02.840 --> 00:46:03.600
incompatible

00:46:03.600 --> 00:46:03.900
ways

00:46:03.900 --> 00:46:04.080
and

00:46:04.080 --> 00:46:04.300
that

00:46:04.300 --> 00:46:04.620
creates

00:46:04.620 --> 00:46:05.000
issues

00:46:05.000 --> 00:46:05.320
because

00:46:05.320 --> 00:46:05.500
an

00:46:05.500 --> 00:46:05.880
increasing

00:46:05.880 --> 00:46:06.460
amount

00:46:06.460 --> 00:46:06.640
of

00:46:06.640 --> 00:46:07.140
tooling

00:46:07.140 --> 00:46:07.540
like

00:46:07.540 --> 00:46:07.760
Visual

00:46:07.760 --> 00:46:08.020
Studio

00:46:08.020 --> 00:46:08.520
Code

00:46:08.520 --> 00:46:09.220
PyCharm

00:46:09.220 --> 00:46:09.360
and

00:46:09.360 --> 00:46:09.640
whatnot

00:46:09.640 --> 00:46:10.500
gets

00:46:10.500 --> 00:46:10.980
confused

00:46:10.980 --> 00:46:11.200
by

00:46:11.200 --> 00:46:11.520
seeing

00:46:11.520 --> 00:46:11.860
something

00:46:11.860 --> 00:46:12.120
that

00:46:12.120 --> 00:46:12.820
is

00:46:12.820 --> 00:46:13.180
clearly

00:46:13.180 --> 00:46:13.560
not

00:46:13.560 --> 00:46:13.740
a

00:46:13.740 --> 00:46:14.100
type

00:46:14.100 --> 00:46:14.520
in

00:46:14.520 --> 00:46:14.640
the

00:46:14.640 --> 00:46:14.980
place

00:46:14.980 --> 00:46:15.220
where

00:46:15.220 --> 00:46:15.520
types

00:46:15.520 --> 00:46:15.660
are

00:46:15.660 --> 00:46:16.160
expected

00:46:16.160 --> 00:46:16.540
so

00:46:16.540 --> 00:46:17.100
I

00:46:17.100 --> 00:46:17.340
kind

00:46:17.340 --> 00:46:17.480
of

00:46:17.480 --> 00:46:17.700
yeah

00:46:17.700 --> 00:46:18.020
yeah

00:46:18.020 --> 00:46:18.360
an

00:46:18.360 --> 00:46:18.700
example

00:46:18.700 --> 00:46:18.880
of

00:46:18.880 --> 00:46:19.000
that

00:46:19.000 --> 00:46:19.160
like

00:46:19.160 --> 00:46:19.320
so

00:46:19.320 --> 00:46:19.540
this

00:46:19.540 --> 00:46:19.900
example

00:46:19.900 --> 00:46:20.160
I gave

00:46:20.160 --> 00:46:20.240
you

00:46:20.240 --> 00:46:20.380
with

00:46:20.380 --> 00:46:20.680
Molten

00:46:20.680 --> 00:46:21.060
seems

00:46:21.060 --> 00:46:21.300
like

00:46:21.300 --> 00:46:21.500
it's

00:46:21.500 --> 00:46:22.080
consistent

00:46:22.080 --> 00:46:22.900
the

00:46:22.900 --> 00:46:23.180
type

00:46:23.180 --> 00:46:23.500
checker

00:46:23.500 --> 00:46:23.800
says

00:46:23.800 --> 00:46:24.120
it takes

00:46:24.120 --> 00:46:24.280
an

00:46:24.280 --> 00:46:24.440
int

00:46:24.440 --> 00:46:24.620
it's

00:46:24.620 --> 00:46:24.900
actually

00:46:24.900 --> 00:46:25.060
an

00:46:25.060 --> 00:46:25.240
int

00:46:25.240 --> 00:46:25.380
at

00:46:25.380 --> 00:46:25.720
runtime

00:46:25.720 --> 00:46:25.980
it

00:46:25.980 --> 00:46:26.180
is

00:46:26.180 --> 00:46:26.800
but

00:46:26.800 --> 00:46:27.200
I

00:46:27.200 --> 00:46:27.380
can't

00:46:27.380 --> 00:46:27.620
remember

00:46:27.620 --> 00:46:27.920
but

00:46:27.920 --> 00:46:28.120
some

00:46:28.120 --> 00:46:28.220
of

00:46:28.220 --> 00:46:28.320
the

00:46:28.320 --> 00:46:28.520
other

00:46:28.520 --> 00:46:29.020
frameworks

00:46:29.020 --> 00:46:29.300
maybe

00:46:29.300 --> 00:46:29.740
rest

00:46:29.740 --> 00:46:30.420
frameworks

00:46:30.420 --> 00:46:31.060
they

00:46:31.060 --> 00:46:31.240
would

00:46:31.240 --> 00:46:31.460
say

00:46:31.460 --> 00:46:31.740
like

00:46:31.740 --> 00:46:31.940
you

00:46:31.940 --> 00:46:32.100
could

00:46:32.100 --> 00:46:32.340
say

00:46:32.340 --> 00:46:32.540
that

00:46:32.540 --> 00:46:32.800
this

00:46:32.800 --> 00:46:33.200
parameter

00:46:33.200 --> 00:46:33.500
is

00:46:33.500 --> 00:46:33.640
a

00:46:33.640 --> 00:46:33.900
header

00:46:33.900 --> 00:46:34.520
and

00:46:34.520 --> 00:46:34.640
what

00:46:34.640 --> 00:46:34.740
it

00:46:34.740 --> 00:46:35.000
actually

00:46:35.000 --> 00:46:35.260
is

00:46:35.260 --> 00:46:35.400
is

00:46:35.400 --> 00:46:35.560
the

00:46:35.560 --> 00:46:35.860
string

00:46:35.860 --> 00:46:36.280
value

00:46:36.280 --> 00:46:36.880
with

00:46:36.880 --> 00:46:37.060
that

00:46:37.060 --> 00:46:37.520
name

00:46:37.520 --> 00:46:38.200
out of

00:46:38.200 --> 00:46:38.320
the

00:46:38.320 --> 00:46:38.580
header

00:46:38.580 --> 00:46:39.280
right

00:46:39.280 --> 00:46:39.460
it's

00:46:39.460 --> 00:46:39.580
like

00:46:39.580 --> 00:46:39.700
the

00:46:39.700 --> 00:46:39.940
value

00:46:39.940 --> 00:46:40.320
comes

00:46:40.320 --> 00:46:40.500
from

00:46:40.500 --> 00:46:40.620
the

00:46:40.620 --> 00:46:40.760
header

00:46:40.760 --> 00:46:40.980
but

00:46:40.980 --> 00:46:41.180
like

00:46:41.180 --> 00:46:41.340
at

00:46:41.340 --> 00:46:41.620
runtime

00:46:41.620 --> 00:46:41.940
it's

00:46:41.940 --> 00:46:42.140
not

00:46:42.140 --> 00:46:42.260
a

00:46:42.260 --> 00:46:42.500
header

00:46:42.500 --> 00:46:42.940
it's

00:46:42.940 --> 00:46:43.540
not

00:46:43.540 --> 00:46:43.680
a

00:46:43.680 --> 00:46:43.920
dictionary

00:46:43.920 --> 00:46:44.220
whatever

00:46:44.220 --> 00:46:44.380
the

00:46:44.380 --> 00:46:44.520
header

00:46:44.520 --> 00:46:44.720
is

00:46:44.720 --> 00:46:45.000
it's

00:46:45.000 --> 00:46:45.600
actually

00:46:45.600 --> 00:46:45.760
a

00:46:45.760 --> 00:46:45.980
string

00:46:45.980 --> 00:46:46.160
or

00:46:46.160 --> 00:46:46.240
an

00:46:46.240 --> 00:46:46.380
int

00:46:46.380 --> 00:46:46.480
or

00:46:46.480 --> 00:46:46.760
something

00:46:46.760 --> 00:46:47.380
it

00:46:47.380 --> 00:46:47.840
seemed

00:46:47.840 --> 00:46:48.160
like

00:46:48.160 --> 00:46:48.500
it was

00:46:48.500 --> 00:46:48.900
really

00:46:48.900 --> 00:46:49.380
cool

00:46:49.380 --> 00:46:49.600
and

00:46:49.600 --> 00:46:49.860
clever

00:46:49.860 --> 00:46:50.100
but

00:46:50.100 --> 00:46:50.520
also

00:46:50.520 --> 00:46:51.800
incongruent

00:46:51.800 --> 00:46:52.140
with what

00:46:52.140 --> 00:46:52.460
Python

00:46:52.460 --> 00:46:52.900
intended

00:46:52.900 --> 00:46:53.120
a

00:46:53.120 --> 00:46:53.400
certain

00:46:53.400 --> 00:46:53.800
amount

00:46:53.800 --> 00:46:54.020
of

00:46:54.020 --> 00:46:54.240
those

00:46:54.240 --> 00:46:54.600
things

00:46:54.600 --> 00:46:54.920
like

00:46:54.920 --> 00:46:55.180
our

00:46:55.180 --> 00:46:55.440
valid

00:46:55.440 --> 00:46:55.620
use

00:46:55.620 --> 00:46:55.980
cases

00:46:55.980 --> 00:46:56.280
like

00:46:56.280 --> 00:46:56.540
let's

00:46:56.540 --> 00:46:56.720
say

00:46:56.720 --> 00:46:57.580
in

00:46:57.580 --> 00:46:57.760
the

00:46:57.760 --> 00:46:57.960
case

00:46:57.960 --> 00:46:58.160
of

00:46:58.160 --> 00:46:58.700
adders

00:46:58.700 --> 00:46:59.320
adders

00:46:59.320 --> 00:47:00.420
create

00:47:00.420 --> 00:47:01.300
valid

00:47:01.300 --> 00:47:01.680
classes

00:47:01.680 --> 00:47:02.220
for you

00:47:02.220 --> 00:47:02.560
from

00:47:02.560 --> 00:47:03.040
minimal

00:47:03.040 --> 00:47:03.640
information

00:47:03.640 --> 00:47:03.900
that

00:47:03.900 --> 00:47:04.020
you

00:47:04.020 --> 00:47:04.440
provide

00:47:04.440 --> 00:47:04.660
in

00:47:04.660 --> 00:47:04.880
source

00:47:04.880 --> 00:47:05.200
code

00:47:05.200 --> 00:47:06.000
so

00:47:06.000 --> 00:47:06.820
this

00:47:06.820 --> 00:47:07.560
class

00:47:07.560 --> 00:47:08.220
is being

00:47:08.220 --> 00:47:08.520
fully

00:47:08.520 --> 00:47:09.020
functional

00:47:09.020 --> 00:47:09.280
at

00:47:09.280 --> 00:47:09.560
runtime

00:47:09.560 --> 00:47:10.360
however

00:47:10.360 --> 00:47:10.980
the

00:47:10.980 --> 00:47:11.140
type

00:47:11.140 --> 00:47:11.480
checker

00:47:11.480 --> 00:47:11.700
does

00:47:11.700 --> 00:47:11.860
not

00:47:11.860 --> 00:47:12.080
know

00:47:12.080 --> 00:47:12.360
this

00:47:12.360 --> 00:47:12.660
it

00:47:12.660 --> 00:47:12.880
just

00:47:12.880 --> 00:47:13.160
sees

00:47:13.160 --> 00:47:13.440
like

00:47:13.440 --> 00:47:13.680
just

00:47:13.680 --> 00:47:13.960
some

00:47:13.960 --> 00:47:14.280
magic

00:47:14.280 --> 00:47:14.900
decorator

00:47:14.900 --> 00:47:15.340
and

00:47:15.340 --> 00:47:15.640
just

00:47:15.640 --> 00:47:15.840
this

00:47:15.840 --> 00:47:16.160
minimal

00:47:16.160 --> 00:47:16.420
set

00:47:16.420 --> 00:47:16.540
of

00:47:16.540 --> 00:47:16.880
attributes

00:47:16.880 --> 00:47:17.200
on

00:47:17.200 --> 00:47:17.360
it

00:47:17.360 --> 00:47:17.820
and

00:47:17.820 --> 00:47:18.520
it

00:47:18.520 --> 00:47:18.700
does

00:47:18.700 --> 00:47:18.880
not

00:47:18.880 --> 00:47:19.140
know

00:47:19.140 --> 00:47:19.380
that

00:47:19.380 --> 00:47:19.740
a

00:47:19.740 --> 00:47:20.000
certain

00:47:20.000 --> 00:47:20.340
amount

00:47:20.340 --> 00:47:20.620
of

00:47:20.620 --> 00:47:21.040
built

00:47:21.040 --> 00:47:21.240
in

00:47:21.240 --> 00:47:21.640
methods

00:47:21.640 --> 00:47:21.920
have

00:47:21.920 --> 00:47:22.200
been

00:47:22.200 --> 00:47:23.080
created

00:47:23.080 --> 00:47:23.640
and

00:47:23.640 --> 00:47:23.780
a

00:47:23.780 --> 00:47:24.000
certain

00:47:24.000 --> 00:47:24.340
amount

00:47:24.340 --> 00:47:24.600
of

00:47:24.600 --> 00:47:25.200
functionality

00:47:25.200 --> 00:47:25.800
within

00:47:25.800 --> 00:47:26.020
it

00:47:26.020 --> 00:47:26.780
has

00:47:26.780 --> 00:47:26.960
been

00:47:26.960 --> 00:47:27.320
added

00:47:27.320 --> 00:47:28.080
so

00:47:28.080 --> 00:47:28.640
at

00:47:28.640 --> 00:47:28.820
least

00:47:28.820 --> 00:47:29.020
in

00:47:29.020 --> 00:47:29.180
the

00:47:29.180 --> 00:47:29.440
case

00:47:29.440 --> 00:47:29.700
of

00:47:29.700 --> 00:47:30.080
mypy

00:47:30.080 --> 00:47:30.540
Empire

00:47:30.540 --> 00:47:31.480
additional

00:47:31.480 --> 00:47:32.120
functionality

00:47:32.120 --> 00:47:33.120
had to

00:47:33.120 --> 00:47:33.340
be

00:47:33.340 --> 00:47:34.120
implemented

00:47:34.120 --> 00:47:34.420
in

00:47:34.420 --> 00:47:34.560
those

00:47:34.560 --> 00:47:34.760
type

00:47:34.760 --> 00:47:35.060
checkers

00:47:35.060 --> 00:47:35.180
to

00:47:35.180 --> 00:47:35.660
understand

00:47:35.660 --> 00:47:35.920
that

00:47:35.920 --> 00:47:36.260
those

00:47:36.260 --> 00:47:36.700
types

00:47:36.700 --> 00:47:37.380
actually

00:47:37.380 --> 00:47:37.860
behave

00:47:37.860 --> 00:47:38.220
a bit

00:47:38.220 --> 00:47:38.660
differently

00:47:38.660 --> 00:47:39.340
from

00:47:39.340 --> 00:47:39.700
regular

00:47:39.700 --> 00:47:40.140
classes

00:47:40.140 --> 00:47:40.460
but

00:47:40.460 --> 00:47:40.740
that's

00:47:40.740 --> 00:47:40.900
just

00:47:40.900 --> 00:47:41.700
something

00:47:41.700 --> 00:47:41.980
that

00:47:41.980 --> 00:47:42.320
users

00:47:42.320 --> 00:47:42.700
want

00:47:42.700 --> 00:47:43.200
something

00:47:43.200 --> 00:47:43.440
that

00:47:43.440 --> 00:47:43.680
users

00:47:43.680 --> 00:47:44.000
need

00:47:44.000 --> 00:47:44.240
so

00:47:44.240 --> 00:47:45.900
we're

00:47:45.900 --> 00:47:46.020
going

00:47:46.020 --> 00:47:46.100
to

00:47:46.100 --> 00:47:46.280
be

00:47:46.280 --> 00:47:46.740
extending

00:47:46.740 --> 00:47:47.020
that

00:47:47.020 --> 00:47:47.580
cool

00:47:47.580 --> 00:47:47.900
cool

00:47:47.900 --> 00:47:48.360
Anthony

00:47:48.360 --> 00:47:48.800
what do

00:47:48.800 --> 00:47:48.820
you

00:47:48.820 --> 00:47:48.940
got

00:47:48.940 --> 00:47:49.120
next

00:47:49.120 --> 00:47:49.240
on

00:47:49.240 --> 00:47:49.340
our

00:47:49.340 --> 00:47:49.500
list

00:47:49.500 --> 00:47:49.720
here

00:47:49.720 --> 00:47:50.380
so

00:47:50.380 --> 00:47:52.820
ship

00:47:52.820 --> 00:47:53.020
it

00:47:53.020 --> 00:47:53.260
we're

00:47:53.260 --> 00:47:53.400
good

00:47:53.400 --> 00:47:53.700
yeah

00:47:53.700 --> 00:47:53.960
I think

00:47:53.960 --> 00:47:54.100
we're

00:47:54.100 --> 00:47:54.260
done

00:47:54.260 --> 00:47:54.500
now

00:47:54.500 --> 00:47:55.380
that

00:47:55.380 --> 00:47:55.680
actually

00:47:55.680 --> 00:47:55.920
that

00:47:55.920 --> 00:47:56.140
pep

00:47:56.140 --> 00:47:56.260
in

00:47:56.260 --> 00:47:56.640
particular

00:47:56.640 --> 00:47:56.860
the

00:47:56.860 --> 00:47:57.080
type

00:47:57.080 --> 00:47:57.620
dictionary

00:47:57.620 --> 00:47:58.120
pep

00:47:58.120 --> 00:47:58.780
I've

00:47:58.780 --> 00:47:58.880
been

00:47:58.880 --> 00:47:59.220
thinking

00:47:59.220 --> 00:47:59.600
if

00:47:59.600 --> 00:47:59.800
anyone

00:47:59.800 --> 00:48:00.020
seen

00:48:00.020 --> 00:48:00.200
the

00:48:00.200 --> 00:48:00.540
json

00:48:00.540 --> 00:48:00.920
schema

00:48:00.920 --> 00:48:01.440
project

00:48:01.440 --> 00:48:01.900
it's

00:48:01.900 --> 00:48:02.100
really

00:48:02.100 --> 00:48:02.420
cool

00:48:02.420 --> 00:48:02.620
it's

00:48:02.620 --> 00:48:03.140
basically

00:48:03.140 --> 00:48:03.600
a way

00:48:03.600 --> 00:48:03.840
of

00:48:03.840 --> 00:48:04.700
defining

00:48:04.700 --> 00:48:04.920
a

00:48:04.920 --> 00:48:05.220
schema

00:48:05.220 --> 00:48:05.560
for

00:48:05.560 --> 00:48:06.100
json

00:48:06.100 --> 00:48:06.680
documents

00:48:06.680 --> 00:48:07.280
you can

00:48:07.280 --> 00:48:07.500
definitely

00:48:07.500 --> 00:48:07.780
see

00:48:07.780 --> 00:48:07.940
that

00:48:07.940 --> 00:48:08.080
if

00:48:08.080 --> 00:48:08.560
this

00:48:08.560 --> 00:48:08.800
pep

00:48:08.800 --> 00:48:09.060
gets

00:48:09.060 --> 00:48:09.500
accepted

00:48:09.500 --> 00:48:10.460
somebody

00:48:10.460 --> 00:48:10.700
will

00:48:10.700 --> 00:48:11.040
build

00:48:11.040 --> 00:48:11.520
tooling

00:48:11.520 --> 00:48:12.060
to

00:48:12.060 --> 00:48:12.500
integrate

00:48:12.500 --> 00:48:12.860
between

00:48:12.860 --> 00:48:13.060
the

00:48:13.060 --> 00:48:13.320
json

00:48:13.320 --> 00:48:13.960
schemas

00:48:13.960 --> 00:48:14.720
and

00:48:14.720 --> 00:48:14.980
this

00:48:14.980 --> 00:48:15.280
new

00:48:15.280 --> 00:48:15.580
type

00:48:15.580 --> 00:48:15.820
dict

00:48:15.820 --> 00:48:16.300
type

00:48:16.300 --> 00:48:16.600
yeah

00:48:16.600 --> 00:48:16.900
I think

00:48:16.900 --> 00:48:17.220
it makes

00:48:17.220 --> 00:48:17.560
perfect

00:48:17.560 --> 00:48:17.860
sense

00:48:17.860 --> 00:48:18.140
I mean

00:48:18.140 --> 00:48:18.820
dictionaries

00:48:18.820 --> 00:48:19.440
are so

00:48:19.440 --> 00:48:19.820
similar

00:48:19.820 --> 00:48:20.040
to

00:48:20.040 --> 00:48:20.560
json

00:48:20.560 --> 00:48:21.520
in a

00:48:21.520 --> 00:48:21.960
and

00:48:21.960 --> 00:48:22.080
they

00:48:22.080 --> 00:48:22.320
both

00:48:22.320 --> 00:48:22.500
have

00:48:22.500 --> 00:48:22.720
this

00:48:22.720 --> 00:48:23.000
sort

00:48:23.000 --> 00:48:23.140
of

00:48:23.140 --> 00:48:23.540
dynamic

00:48:23.540 --> 00:48:24.020
but

00:48:24.020 --> 00:48:24.460
mixed

00:48:24.460 --> 00:48:24.880
types

00:48:24.880 --> 00:48:25.020
and

00:48:25.020 --> 00:48:25.180
I mean

00:48:25.180 --> 00:48:25.300
they're

00:48:25.300 --> 00:48:25.560
very

00:48:25.560 --> 00:48:26.360
sort

00:48:26.360 --> 00:48:26.480
of

00:48:26.480 --> 00:48:26.940
mappable

00:48:26.940 --> 00:48:27.140
yeah

00:48:27.140 --> 00:48:27.360
yeah

00:48:27.360 --> 00:48:27.560
so

00:48:27.560 --> 00:48:27.760
I think

00:48:27.760 --> 00:48:27.900
it's

00:48:27.900 --> 00:48:28.200
just a matter

00:48:28.200 --> 00:48:28.580
of time

00:48:28.580 --> 00:48:28.800
until

00:48:28.800 --> 00:48:29.100
someone

00:48:29.100 --> 00:48:29.420
builds

00:48:29.420 --> 00:48:29.540
a

00:48:29.540 --> 00:48:29.820
library

00:48:29.820 --> 00:48:30.220
where

00:48:30.220 --> 00:48:30.360
you

00:48:30.360 --> 00:48:30.640
give it

00:48:30.640 --> 00:48:30.760
a

00:48:30.760 --> 00:48:31.040
json

00:48:31.040 --> 00:48:31.380
schema

00:48:31.380 --> 00:48:32.020
and

00:48:32.020 --> 00:48:32.100
it

00:48:32.100 --> 00:48:32.220
will

00:48:32.220 --> 00:48:32.560
generate

00:48:32.560 --> 00:48:32.740
a

00:48:32.740 --> 00:48:32.940
type

00:48:32.940 --> 00:48:33.300
dict

00:48:33.300 --> 00:48:34.180
class

00:48:34.180 --> 00:48:34.380
and

00:48:34.380 --> 00:48:34.500
then

00:48:34.500 --> 00:48:34.600
you

00:48:34.600 --> 00:48:34.800
use

00:48:34.800 --> 00:48:34.940
that

00:48:34.940 --> 00:48:35.340
class

00:48:35.340 --> 00:48:36.100
similar

00:48:36.100 --> 00:48:36.280
in

00:48:36.280 --> 00:48:36.400
the

00:48:36.400 --> 00:48:36.580
same

00:48:36.580 --> 00:48:36.780
way

00:48:36.780 --> 00:48:36.940
that

00:48:36.940 --> 00:48:37.080
you

00:48:37.080 --> 00:48:37.380
in

00:48:37.380 --> 00:48:37.560
an

00:48:37.560 --> 00:48:38.080
ORM

00:48:38.080 --> 00:48:38.740
when

00:48:38.740 --> 00:48:38.940
you

00:48:38.940 --> 00:48:39.100
would

00:48:39.100 --> 00:48:39.580
describe

00:48:39.580 --> 00:48:39.880
a

00:48:39.880 --> 00:48:40.320
data

00:48:40.320 --> 00:48:40.780
class

00:48:40.780 --> 00:48:41.420
and

00:48:41.420 --> 00:48:41.580
then

00:48:41.580 --> 00:48:41.740
you

00:48:41.740 --> 00:48:41.900
would

00:48:41.900 --> 00:48:42.180
deploy

00:48:42.180 --> 00:48:42.300
it

00:48:42.300 --> 00:48:42.400
as

00:48:42.400 --> 00:48:42.500
a

00:48:42.500 --> 00:48:42.880
database

00:48:42.880 --> 00:48:43.620
it's

00:48:43.620 --> 00:48:43.920
basically

00:48:43.920 --> 00:48:44.180
like

00:48:44.180 --> 00:48:44.300
a

00:48:44.300 --> 00:48:44.520
similar

00:48:44.520 --> 00:48:44.780
way

00:48:44.780 --> 00:48:44.880
of

00:48:44.880 --> 00:48:45.180
reflecting

00:48:45.180 --> 00:48:46.380
documents

00:48:46.380 --> 00:48:46.680
that's

00:48:46.680 --> 00:48:46.800
cool

00:48:46.800 --> 00:48:47.180
I can

00:48:47.180 --> 00:48:47.400
definitely

00:48:47.400 --> 00:48:47.600
see

00:48:47.600 --> 00:48:47.780
for

00:48:47.780 --> 00:48:48.400
serialization

00:48:48.400 --> 00:48:48.680
like

00:48:48.680 --> 00:48:48.820
you

00:48:48.820 --> 00:48:49.060
say

00:48:49.060 --> 00:48:49.660
this

00:48:49.660 --> 00:48:50.140
function

00:48:50.140 --> 00:48:50.800
takes

00:48:50.800 --> 00:48:51.100
a

00:48:51.100 --> 00:48:51.320
type

00:48:51.320 --> 00:48:51.640
dict

00:48:51.640 --> 00:48:51.960
but

00:48:51.960 --> 00:48:52.120
what

00:48:52.120 --> 00:48:52.400
actually

00:48:52.400 --> 00:48:52.600
this

00:48:52.600 --> 00:48:52.620
is

00:48:52.620 --> 00:48:52.820
a

00:48:52.820 --> 00:48:53.040
form

00:48:53.040 --> 00:48:53.400
post

00:48:53.400 --> 00:48:53.560
or

00:48:53.560 --> 00:48:53.920
JSON

00:48:53.920 --> 00:48:54.420
post

00:48:54.420 --> 00:48:54.680
or

00:48:54.680 --> 00:48:54.820
you

00:48:54.820 --> 00:48:54.960
know

00:48:54.960 --> 00:48:55.200
like

00:48:55.200 --> 00:48:55.320
a

00:48:55.320 --> 00:48:55.520
rest

00:48:55.520 --> 00:48:55.800
call

00:48:55.800 --> 00:48:55.920
or

00:48:55.920 --> 00:48:56.040
something

00:48:56.040 --> 00:48:56.200
like

00:48:56.200 --> 00:48:56.320
that

00:48:56.320 --> 00:48:56.440
that's

00:48:56.440 --> 00:48:56.560
cool

00:48:56.560 --> 00:48:57.260
so

00:48:57.260 --> 00:48:57.820
let's

00:48:57.820 --> 00:48:57.960
see

00:48:57.960 --> 00:48:58.240
did

00:48:58.240 --> 00:48:58.400
we

00:48:58.400 --> 00:48:58.700
talk

00:48:58.700 --> 00:48:59.100
about

00:48:59.100 --> 00:49:00.280
multiprocessing

00:49:00.280 --> 00:49:01.120
is that

00:49:01.120 --> 00:49:01.520
coming in

00:49:01.520 --> 00:49:01.740
3.8

00:49:01.740 --> 00:49:01.880
or is

00:49:01.880 --> 00:49:02.000
that

00:49:02.000 --> 00:49:02.400
beyond

00:49:02.400 --> 00:49:02.960
that's

00:49:02.960 --> 00:49:03.080
in

00:49:03.080 --> 00:49:03.440
3.8

00:49:03.440 --> 00:49:03.660
so

00:49:03.660 --> 00:49:04.540
one

00:49:04.540 --> 00:49:04.980
particular

00:49:04.980 --> 00:49:05.260
thing

00:49:05.260 --> 00:49:05.440
that

00:49:05.440 --> 00:49:05.580
is

00:49:05.580 --> 00:49:05.840
not

00:49:05.840 --> 00:49:06.100
pep

00:49:06.100 --> 00:49:06.420
worthy

00:49:06.420 --> 00:49:06.700
but

00:49:06.700 --> 00:49:06.920
it's

00:49:06.920 --> 00:49:07.080
still

00:49:07.080 --> 00:49:07.240
a

00:49:07.240 --> 00:49:07.460
very

00:49:07.460 --> 00:49:07.820
interesting

00:49:07.820 --> 00:49:08.080
new

00:49:08.080 --> 00:49:08.480
feature

00:49:08.480 --> 00:49:08.880
is

00:49:08.880 --> 00:49:09.100
that

00:49:09.100 --> 00:49:09.620
traditionally

00:49:09.620 --> 00:49:10.660
multiprocessing

00:49:10.660 --> 00:49:11.560
which has

00:49:11.560 --> 00:49:12.120
been created

00:49:12.120 --> 00:49:12.920
to solve

00:49:12.920 --> 00:49:13.740
the gill

00:49:13.740 --> 00:49:14.260
problem

00:49:14.260 --> 00:49:15.440
has solved

00:49:15.440 --> 00:49:15.760
it

00:49:15.760 --> 00:49:16.060
you know

00:49:16.060 --> 00:49:16.520
partially

00:49:16.520 --> 00:49:17.080
what I

00:49:17.080 --> 00:49:17.440
mean by

00:49:17.440 --> 00:49:17.680
this

00:49:17.680 --> 00:49:18.060
is that

00:49:18.060 --> 00:49:18.340
yes

00:49:18.340 --> 00:49:18.560
there

00:49:18.560 --> 00:49:18.840
is

00:49:18.840 --> 00:49:19.220
a

00:49:19.220 --> 00:49:19.500
master

00:49:19.500 --> 00:49:19.880
process

00:49:19.880 --> 00:49:20.220
that

00:49:20.220 --> 00:49:20.600
creates

00:49:20.600 --> 00:49:20.720
a

00:49:20.720 --> 00:49:20.920
bunch

00:49:20.920 --> 00:49:21.100
of

00:49:21.100 --> 00:49:21.420
children

00:49:21.420 --> 00:49:21.680
and

00:49:21.680 --> 00:49:21.880
then

00:49:21.880 --> 00:49:22.300
delegates

00:49:22.300 --> 00:49:23.160
work

00:49:23.160 --> 00:49:23.400
to

00:49:23.400 --> 00:49:23.580
it

00:49:23.580 --> 00:49:23.860
so

00:49:23.860 --> 00:49:24.360
you

00:49:24.360 --> 00:49:24.500
can

00:49:24.500 --> 00:49:24.680
just

00:49:24.680 --> 00:49:24.920
call

00:49:24.920 --> 00:49:25.240
python

00:49:25.240 --> 00:49:25.740
functions

00:49:25.740 --> 00:49:26.000
and

00:49:26.000 --> 00:49:26.180
those

00:49:26.180 --> 00:49:26.500
python

00:49:26.500 --> 00:49:26.920
functions

00:49:26.920 --> 00:49:27.320
actually

00:49:27.320 --> 00:49:27.560
are

00:49:27.560 --> 00:49:28.000
executed

00:49:28.000 --> 00:49:28.300
on

00:49:28.300 --> 00:49:28.500
the

00:49:28.500 --> 00:49:28.780
other

00:49:28.780 --> 00:49:29.180
side

00:49:29.180 --> 00:49:29.440
in

00:49:29.440 --> 00:49:29.560
the

00:49:29.560 --> 00:49:29.780
child

00:49:29.780 --> 00:49:30.240
process

00:49:30.240 --> 00:49:30.980
but

00:49:30.980 --> 00:49:31.140
the

00:49:31.140 --> 00:49:31.320
way

00:49:31.320 --> 00:49:31.540
this

00:49:31.540 --> 00:49:31.660
is

00:49:31.660 --> 00:49:32.120
achieved

00:49:32.120 --> 00:49:32.540
was

00:49:32.540 --> 00:49:33.120
that

00:49:33.120 --> 00:49:33.580
function

00:49:33.580 --> 00:49:34.020
call

00:49:34.020 --> 00:49:34.420
has

00:49:34.420 --> 00:49:34.720
been

00:49:34.720 --> 00:49:35.340
pickling

00:49:35.340 --> 00:49:35.620
the

00:49:35.620 --> 00:49:36.220
arguments

00:49:36.220 --> 00:49:36.800
of

00:49:36.800 --> 00:49:36.980
the

00:49:36.980 --> 00:49:37.260
function

00:49:37.260 --> 00:49:37.480
you're

00:49:37.480 --> 00:49:37.880
calling

00:49:37.880 --> 00:49:38.940
that

00:49:38.940 --> 00:49:39.300
ended

00:49:39.300 --> 00:49:39.520
up

00:49:39.520 --> 00:49:39.840
being

00:49:39.840 --> 00:49:40.240
on

00:49:40.240 --> 00:49:40.460
the

00:49:40.460 --> 00:49:40.820
child

00:49:40.820 --> 00:49:41.300
side

00:49:41.300 --> 00:49:41.780
that

00:49:41.780 --> 00:49:42.500
child

00:49:42.500 --> 00:49:43.260
unpickled

00:49:43.260 --> 00:49:43.440
the

00:49:43.440 --> 00:49:44.020
arguments

00:49:44.020 --> 00:49:44.260
it

00:49:44.260 --> 00:49:44.440
did

00:49:44.440 --> 00:49:44.600
the

00:49:44.600 --> 00:49:45.060
computation

00:49:45.060 --> 00:49:45.280
it

00:49:45.280 --> 00:49:45.500
needed

00:49:45.500 --> 00:49:45.840
and

00:49:45.840 --> 00:49:46.000
then

00:49:46.000 --> 00:49:46.200
if

00:49:46.200 --> 00:49:46.360
there

00:49:46.360 --> 00:49:46.560
was

00:49:46.560 --> 00:49:46.760
a

00:49:46.760 --> 00:49:47.000
return

00:49:47.000 --> 00:49:47.320
value

00:49:47.320 --> 00:49:47.540
it

00:49:47.540 --> 00:49:47.860
wanted

00:49:47.860 --> 00:49:48.480
it

00:49:48.480 --> 00:49:48.700
actually

00:49:48.700 --> 00:49:48.900
had

00:49:48.900 --> 00:49:49.020
to

00:49:49.020 --> 00:49:49.260
pickle

00:49:49.260 --> 00:49:49.560
that

00:49:49.560 --> 00:49:49.860
return

00:49:49.860 --> 00:49:50.160
value

00:49:50.160 --> 00:49:50.500
again

00:49:50.500 --> 00:49:50.720
and

00:49:50.720 --> 00:49:51.000
pass

00:49:51.000 --> 00:49:51.480
back

00:49:51.480 --> 00:49:51.660
to

00:49:51.660 --> 00:49:51.820
the

00:49:51.820 --> 00:49:52.060
master

00:49:52.060 --> 00:49:52.480
process

00:49:52.480 --> 00:49:53.980
unpickled

00:49:53.980 --> 00:49:54.280
the

00:49:54.280 --> 00:49:54.680
return

00:49:54.680 --> 00:49:55.000
value

00:49:55.000 --> 00:49:55.340
again

00:49:55.340 --> 00:49:55.700
and

00:49:55.700 --> 00:49:55.820
if

00:49:55.820 --> 00:49:56.040
that's

00:49:56.040 --> 00:49:56.220
big

00:49:56.220 --> 00:49:56.440
it's

00:49:56.440 --> 00:49:56.620
very

00:49:56.620 --> 00:49:56.940
slow

00:49:56.940 --> 00:49:57.120
for

00:49:57.120 --> 00:49:57.380
example

00:49:57.380 --> 00:49:57.980
for

00:49:57.980 --> 00:49:58.560
small

00:49:58.560 --> 00:49:58.960
things

00:49:58.960 --> 00:49:59.180
that

00:49:59.180 --> 00:49:59.440
was

00:49:59.440 --> 00:50:00.020
mostly

00:50:00.020 --> 00:50:00.420
fine

00:50:00.420 --> 00:50:00.720
but

00:50:00.720 --> 00:50:01.020
if

00:50:01.020 --> 00:50:01.200
you

00:50:01.200 --> 00:50:01.640
had

00:50:01.640 --> 00:50:02.360
a

00:50:02.360 --> 00:50:02.960
gigantic

00:50:02.960 --> 00:50:03.820
haystack

00:50:03.820 --> 00:50:04.020
and

00:50:04.020 --> 00:50:04.140
you

00:50:04.140 --> 00:50:04.260
were

00:50:04.260 --> 00:50:04.540
looking

00:50:04.540 --> 00:50:04.720
for

00:50:04.720 --> 00:50:04.880
a

00:50:04.880 --> 00:50:05.080
needle

00:50:05.080 --> 00:50:05.380
in

00:50:05.380 --> 00:50:05.620
it

00:50:05.620 --> 00:50:06.060
just

00:50:06.060 --> 00:50:06.840
a

00:50:06.840 --> 00:50:07.200
pickling

00:50:07.200 --> 00:50:07.440
that

00:50:07.440 --> 00:50:08.040
haystack

00:50:08.040 --> 00:50:08.320
was

00:50:08.320 --> 00:50:08.620
taking

00:50:08.620 --> 00:50:10.900
a

00:50:10.900 --> 00:50:11.000
lot

00:50:11.000 --> 00:50:11.120
of

00:50:11.120 --> 00:50:11.380
time

00:50:11.380 --> 00:50:11.560
we

00:50:11.560 --> 00:50:11.700
were

00:50:11.700 --> 00:50:11.820
going

00:50:11.820 --> 00:50:11.900
to

00:50:11.900 --> 00:50:12.060
run

00:50:12.060 --> 00:50:12.200
that

00:50:12.200 --> 00:50:12.320
on

00:50:12.320 --> 00:50:12.500
all

00:50:12.500 --> 00:50:12.760
six

00:50:12.760 --> 00:50:13.060
cores

00:50:13.060 --> 00:50:13.300
so

00:50:13.300 --> 00:50:13.680
here's

00:50:13.680 --> 00:50:13.920
six

00:50:13.920 --> 00:50:14.340
copies

00:50:14.340 --> 00:50:14.600
of

00:50:14.600 --> 00:50:14.820
our

00:50:14.820 --> 00:50:15.520
10

00:50:15.520 --> 00:50:16.640
megabyte

00:50:16.640 --> 00:50:17.040
whatever

00:50:17.040 --> 00:50:17.340
that

00:50:17.340 --> 00:50:17.600
is

00:50:17.600 --> 00:50:17.940
actually

00:50:17.940 --> 00:50:18.360
annoying

00:50:18.360 --> 00:50:18.760
because

00:50:18.760 --> 00:50:19.160
if

00:50:19.160 --> 00:50:19.300
you

00:50:19.300 --> 00:50:19.560
had

00:50:19.560 --> 00:50:20.060
a

00:50:20.060 --> 00:50:20.360
master

00:50:20.360 --> 00:50:20.720
process

00:50:20.720 --> 00:50:20.940
that

00:50:20.940 --> 00:50:22.220
gets

00:50:22.220 --> 00:50:22.980
web

00:50:22.980 --> 00:50:23.600
requests

00:50:23.600 --> 00:50:24.460
in

00:50:24.460 --> 00:50:25.240
the

00:50:25.240 --> 00:50:25.600
time

00:50:25.600 --> 00:50:25.820
that

00:50:25.820 --> 00:50:25.960
you

00:50:25.960 --> 00:50:26.100
are

00:50:26.100 --> 00:50:26.560
spending

00:50:26.560 --> 00:50:26.900
on

00:50:26.900 --> 00:50:27.520
pickling

00:50:27.520 --> 00:50:27.840
that

00:50:27.840 --> 00:50:28.480
haystack

00:50:28.480 --> 00:50:29.220
nothing

00:50:29.220 --> 00:50:29.600
else

00:50:29.600 --> 00:50:29.840
can

00:50:29.840 --> 00:50:30.020
be

00:50:30.020 --> 00:50:30.400
actually

00:50:30.400 --> 00:50:30.900
done

00:50:30.900 --> 00:50:31.460
in

00:50:31.460 --> 00:50:31.840
Python

00:50:31.840 --> 00:50:32.540
because

00:50:32.540 --> 00:50:33.060
the

00:50:33.060 --> 00:50:33.340
gill

00:50:33.340 --> 00:50:33.880
is

00:50:33.880 --> 00:50:34.320
still

00:50:34.320 --> 00:50:34.700
there

00:50:34.700 --> 00:50:34.880
on

00:50:34.880 --> 00:50:35.000
that

00:50:35.000 --> 00:50:35.260
master

00:50:35.260 --> 00:50:35.660
process

00:50:35.660 --> 00:50:35.960
so

00:50:35.960 --> 00:50:36.400
you

00:50:36.400 --> 00:50:36.580
are

00:50:36.580 --> 00:50:36.920
solving

00:50:36.920 --> 00:50:37.100
the

00:50:37.100 --> 00:50:37.220
gill

00:50:37.220 --> 00:50:37.560
problem

00:50:37.560 --> 00:50:37.860
only

00:50:37.860 --> 00:50:38.280
partially

00:50:38.280 --> 00:50:39.040
so

00:50:39.040 --> 00:50:39.300
now

00:50:39.300 --> 00:50:40.140
multiprocessing

00:50:40.140 --> 00:50:40.580
introduces

00:50:40.580 --> 00:50:40.880
this

00:50:40.880 --> 00:50:41.320
new

00:50:41.320 --> 00:50:41.980
fantastic

00:50:41.980 --> 00:50:42.440
feature

00:50:42.440 --> 00:50:42.800
where

00:50:42.800 --> 00:50:43.240
you

00:50:43.240 --> 00:50:43.400
can

00:50:43.400 --> 00:50:43.720
declare

00:50:43.720 --> 00:50:43.960
a

00:50:43.960 --> 00:50:44.120
shared

00:50:44.120 --> 00:50:44.400
memory

00:50:44.400 --> 00:50:46.840
between

00:50:46.840 --> 00:50:47.560
parents

00:50:47.560 --> 00:50:49.980
and

00:50:49.980 --> 00:50:50.380
children

00:50:50.380 --> 00:50:51.100
what

00:50:51.100 --> 00:50:51.300
that

00:50:51.300 --> 00:50:51.920
does

00:50:51.920 --> 00:50:52.420
is

00:50:52.420 --> 00:50:52.740
you

00:50:52.740 --> 00:50:53.020
can

00:50:53.020 --> 00:50:53.480
actually

00:50:53.480 --> 00:50:53.720
get

00:50:53.720 --> 00:50:53.980
away

00:50:53.980 --> 00:50:54.240
with

00:50:54.240 --> 00:50:54.620
a lot

00:50:54.620 --> 00:50:54.800
of

00:50:54.800 --> 00:50:55.520
serialization

00:50:55.520 --> 00:50:55.820
and

00:50:55.820 --> 00:50:56.600
deserialization

00:50:56.600 --> 00:50:57.320
so

00:50:57.320 --> 00:50:57.840
for

00:50:57.840 --> 00:50:58.300
certain

00:50:58.300 --> 00:50:58.740
kinds

00:50:58.740 --> 00:50:58.880
of

00:50:58.880 --> 00:50:59.380
tasks

00:50:59.380 --> 00:50:59.740
like

00:50:59.740 --> 00:51:00.260
search

00:51:00.260 --> 00:51:00.540
like

00:51:00.540 --> 00:51:01.040
filtering

00:51:01.040 --> 00:51:01.540
this

00:51:01.540 --> 00:51:01.740
will

00:51:01.740 --> 00:51:02.700
decrease

00:51:02.700 --> 00:51:03.040
the

00:51:03.040 --> 00:51:03.380
churn

00:51:03.380 --> 00:51:03.820
just

00:51:03.820 --> 00:51:04.260
needed

00:51:04.260 --> 00:51:04.580
to

00:51:04.580 --> 00:51:04.920
pass

00:51:04.920 --> 00:51:05.300
data

00:51:05.300 --> 00:51:05.840
around

00:51:05.840 --> 00:51:06.680
meaning

00:51:06.680 --> 00:51:07.260
it

00:51:07.260 --> 00:51:07.420
will

00:51:07.420 --> 00:51:07.700
bring

00:51:07.700 --> 00:51:07.960
us

00:51:07.960 --> 00:51:08.300
way

00:51:08.300 --> 00:51:08.720
closer

00:51:08.720 --> 00:51:08.980
to

00:51:08.980 --> 00:51:09.140
the

00:51:09.140 --> 00:51:09.360
world

00:51:09.360 --> 00:51:09.520
we

00:51:09.520 --> 00:51:09.680
want

00:51:09.680 --> 00:51:09.800
to

00:51:09.800 --> 00:51:10.100
see

00:51:10.100 --> 00:51:10.740
which

00:51:10.740 --> 00:51:10.980
is

00:51:10.980 --> 00:51:11.220
that

00:51:11.220 --> 00:51:11.640
yes

00:51:11.640 --> 00:51:11.860
there

00:51:11.860 --> 00:51:12.200
are

00:51:12.200 --> 00:51:12.880
certain

00:51:12.880 --> 00:51:13.160
Python

00:51:13.160 --> 00:51:13.640
processes

00:51:13.640 --> 00:51:13.980
you

00:51:13.980 --> 00:51:14.100
know

00:51:14.100 --> 00:51:14.300
they

00:51:14.300 --> 00:51:14.520
still

00:51:14.520 --> 00:51:14.680
have

00:51:14.680 --> 00:51:14.820
the

00:51:14.820 --> 00:51:15.000
guild

00:51:15.000 --> 00:51:15.200
but

00:51:15.200 --> 00:51:15.340
it

00:51:15.340 --> 00:51:15.520
does

00:51:15.520 --> 00:51:15.680
not

00:51:15.680 --> 00:51:15.980
matter

00:51:15.980 --> 00:51:16.300
because

00:51:16.300 --> 00:51:16.500
we

00:51:16.500 --> 00:51:16.680
can

00:51:16.680 --> 00:51:16.880
use

00:51:16.880 --> 00:51:17.380
as many

00:51:17.380 --> 00:51:17.520
of

00:51:17.520 --> 00:51:17.660
those

00:51:17.660 --> 00:51:18.000
processes

00:51:18.000 --> 00:51:18.360
as we

00:51:18.360 --> 00:51:18.540
have

00:51:18.540 --> 00:51:18.860
cores

00:51:18.860 --> 00:51:19.060
and

00:51:19.060 --> 00:51:19.360
everything

00:51:19.360 --> 00:51:19.880
is fine

00:51:19.880 --> 00:51:20.160
yeah

00:51:20.160 --> 00:51:20.380
and you

00:51:20.380 --> 00:51:20.660
don't have

00:51:20.660 --> 00:51:21.260
the replication

00:51:21.260 --> 00:51:21.760
of memory

00:51:21.760 --> 00:51:22.580
and the copying

00:51:22.580 --> 00:51:22.940
and all that

00:51:22.940 --> 00:51:23.340
that's awesome

00:51:23.340 --> 00:51:23.600
yes

00:51:23.600 --> 00:51:24.240
so I'm

00:51:24.240 --> 00:51:24.660
really excited

00:51:24.660 --> 00:51:25.220
when I saw that

00:51:25.220 --> 00:51:25.560
come out

00:51:25.560 --> 00:51:25.880
I'm like oh

00:51:25.880 --> 00:51:26.440
this is going to be

00:51:26.440 --> 00:51:27.160
great so that's in

00:51:27.160 --> 00:51:27.440
3.8

00:51:27.440 --> 00:51:28.360
yes that is already

00:51:28.360 --> 00:51:28.640
in

00:51:28.640 --> 00:51:29.420
cool and

00:51:29.420 --> 00:51:30.840
what about

00:51:30.840 --> 00:51:30.860
what about

00:51:30.860 --> 00:51:31.360
the sub

00:51:31.360 --> 00:51:31.920
interpreter

00:51:31.920 --> 00:51:33.580
5.5.4

00:51:33.580 --> 00:51:34.020
that's

00:51:34.020 --> 00:51:34.540
beyond

00:51:34.540 --> 00:51:35.260
oh so that's

00:51:35.260 --> 00:51:35.580
interesting

00:51:35.580 --> 00:51:35.920
that is

00:51:35.920 --> 00:51:36.340
kind of

00:51:36.340 --> 00:51:36.700
related

00:51:36.700 --> 00:51:37.220
yeah

00:51:37.220 --> 00:51:37.440
they're

00:51:37.440 --> 00:51:37.640
they're

00:51:37.640 --> 00:51:37.800
in the

00:51:37.800 --> 00:51:37.940
same

00:51:37.940 --> 00:51:38.420
category

00:51:38.420 --> 00:51:38.900
yes

00:51:38.900 --> 00:51:39.440
however

00:51:39.440 --> 00:51:40.080
the

00:51:40.080 --> 00:51:40.820
multiprocessing

00:51:40.820 --> 00:51:41.300
feature

00:51:41.300 --> 00:51:41.920
like does

00:51:41.920 --> 00:51:42.100
have

00:51:42.100 --> 00:51:42.540
limitations

00:51:42.540 --> 00:51:42.920
right

00:51:42.920 --> 00:51:43.360
like the

00:51:43.360 --> 00:51:43.920
the shared

00:51:43.920 --> 00:51:44.160
memory

00:51:44.160 --> 00:51:44.460
segment

00:51:44.460 --> 00:51:44.900
is not

00:51:44.900 --> 00:51:45.180
right

00:51:45.180 --> 00:51:45.460
for

00:51:45.460 --> 00:51:45.880
any

00:51:45.880 --> 00:51:46.400
arbitrary

00:51:46.400 --> 00:51:46.780
Python

00:51:46.780 --> 00:51:47.120
object

00:51:47.120 --> 00:51:47.440
there's

00:51:47.440 --> 00:51:47.660
like

00:51:47.660 --> 00:51:48.160
you know

00:51:48.160 --> 00:51:49.060
restrictions

00:51:49.060 --> 00:51:49.440
on

00:51:49.440 --> 00:51:49.900
what

00:51:49.900 --> 00:51:50.120
types

00:51:50.120 --> 00:51:50.220
you

00:51:50.220 --> 00:51:50.360
can

00:51:50.360 --> 00:51:50.700
use

00:51:50.700 --> 00:51:51.080
that

00:51:51.080 --> 00:51:51.180
was

00:51:51.180 --> 00:51:51.400
actually

00:51:51.400 --> 00:51:51.580
a

00:51:51.580 --> 00:51:52.020
complex

00:51:52.020 --> 00:51:52.600
functionality

00:51:52.600 --> 00:51:53.020
to be

00:51:53.020 --> 00:51:53.240
added

00:51:53.240 --> 00:51:53.600
you know

00:51:53.600 --> 00:51:53.940
within

00:51:53.940 --> 00:51:54.740
particular

00:51:54.740 --> 00:51:55.160
operating

00:51:55.160 --> 00:51:55.700
systems

00:51:55.700 --> 00:51:56.120
shared

00:51:56.120 --> 00:51:56.360
memory

00:51:56.360 --> 00:51:56.720
handling

00:51:56.720 --> 00:51:57.100
is

00:51:57.100 --> 00:51:57.740
way

00:51:57.740 --> 00:51:58.080
different

00:51:58.080 --> 00:51:58.440
so you

00:51:58.440 --> 00:51:58.800
have to

00:51:58.800 --> 00:51:59.480
understand

00:51:59.480 --> 00:52:00.000
how those

00:52:00.000 --> 00:52:00.340
differences

00:52:00.340 --> 00:52:00.740
work

00:52:00.740 --> 00:52:00.960
and

00:52:00.960 --> 00:52:01.480
which

00:52:01.480 --> 00:52:01.880
process

00:52:01.880 --> 00:52:02.160
is

00:52:02.160 --> 00:52:02.480
now

00:52:02.480 --> 00:52:02.960
responsible

00:52:02.960 --> 00:52:03.480
for

00:52:03.480 --> 00:52:04.180
creating

00:52:04.180 --> 00:52:04.420
that

00:52:04.420 --> 00:52:04.600
shared

00:52:04.600 --> 00:52:04.820
memory

00:52:04.820 --> 00:52:05.180
segment

00:52:05.180 --> 00:52:05.620
and

00:52:05.620 --> 00:52:05.960
shutting

00:52:05.960 --> 00:52:06.160
it

00:52:06.160 --> 00:52:06.400
down

00:52:06.400 --> 00:52:06.580
and

00:52:06.580 --> 00:52:07.000
freeing

00:52:07.000 --> 00:52:07.160
that

00:52:07.160 --> 00:52:07.460
memory

00:52:07.460 --> 00:52:07.680
when

00:52:07.680 --> 00:52:08.000
everything

00:52:08.000 --> 00:52:08.340
is

00:52:08.340 --> 00:52:08.880
shutting

00:52:08.880 --> 00:52:09.180
down

00:52:09.180 --> 00:52:09.400
so

00:52:09.400 --> 00:52:09.820
that

00:52:09.820 --> 00:52:09.960
is

00:52:09.960 --> 00:52:10.240
all

00:52:10.240 --> 00:52:10.580
great

00:52:10.580 --> 00:52:10.940
work

00:52:10.940 --> 00:52:11.220
by

00:52:11.220 --> 00:52:11.620
Davin

00:52:11.620 --> 00:52:12.020
Potts

00:52:12.020 --> 00:52:12.560
like

00:52:12.560 --> 00:52:13.580
multiprocessing

00:52:13.580 --> 00:52:14.200
is one

00:52:14.200 --> 00:52:14.480
thing

00:52:14.480 --> 00:52:14.720
but

00:52:14.720 --> 00:52:14.980
sub

00:52:14.980 --> 00:52:15.600
interpreters

00:52:15.600 --> 00:52:15.880
is

00:52:15.880 --> 00:52:16.360
what

00:52:16.360 --> 00:52:16.600
if

00:52:16.600 --> 00:52:16.820
you

00:52:16.820 --> 00:52:17.160
had

00:52:17.160 --> 00:52:17.380
this

00:52:17.380 --> 00:52:18.200
multiprocessing

00:52:18.200 --> 00:52:18.580
API

00:52:18.580 --> 00:52:19.020
and

00:52:19.020 --> 00:52:19.500
actually

00:52:19.500 --> 00:52:19.740
just

00:52:19.740 --> 00:52:19.920
had

00:52:19.920 --> 00:52:20.260
one

00:52:20.260 --> 00:52:20.840
process

00:52:20.840 --> 00:52:21.180
and

00:52:21.180 --> 00:52:21.360
just

00:52:21.360 --> 00:52:21.540
used

00:52:21.540 --> 00:52:21.880
many

00:52:21.880 --> 00:52:22.180
Python

00:52:22.180 --> 00:52:22.680
interpreters

00:52:22.680 --> 00:52:22.920
within

00:52:22.920 --> 00:52:23.140
it

00:52:23.140 --> 00:52:23.860
each

00:52:23.860 --> 00:52:24.060
with

00:52:24.060 --> 00:52:24.240
its

00:52:24.240 --> 00:52:24.540
own

00:52:24.540 --> 00:52:24.880
gill

00:52:24.880 --> 00:52:25.340
to

00:52:25.340 --> 00:52:25.700
achieve

00:52:25.700 --> 00:52:25.980
that

00:52:25.980 --> 00:52:26.580
many

00:52:26.580 --> 00:52:27.160
changes

00:52:27.160 --> 00:52:27.540
in

00:52:27.540 --> 00:52:27.640
the

00:52:27.640 --> 00:52:27.840
Python

00:52:27.840 --> 00:52:28.120
API

00:52:28.120 --> 00:52:28.560
have

00:52:28.560 --> 00:52:28.660
to

00:52:28.660 --> 00:52:28.780
be

00:52:28.780 --> 00:52:29.080
added

00:52:29.080 --> 00:52:29.300
like

00:52:29.300 --> 00:52:29.580
a

00:52:29.580 --> 00:52:30.440
much

00:52:30.440 --> 00:52:31.000
clean up

00:52:31.000 --> 00:52:31.520
internally

00:52:31.520 --> 00:52:32.200
in terms

00:52:32.200 --> 00:52:32.460
of

00:52:32.460 --> 00:52:33.040
what

00:52:33.040 --> 00:52:33.680
constitutes

00:52:33.680 --> 00:52:34.100
local

00:52:34.100 --> 00:52:34.620
and what

00:52:34.620 --> 00:52:35.120
constitutes

00:52:35.120 --> 00:52:35.540
global

00:52:35.540 --> 00:52:35.900
state

00:52:35.900 --> 00:52:36.280
have to

00:52:36.280 --> 00:52:36.400
be

00:52:36.400 --> 00:52:36.680
done

00:52:36.680 --> 00:52:37.300
Eric

00:52:37.300 --> 00:52:37.740
is

00:52:37.740 --> 00:52:38.220
working

00:52:38.220 --> 00:52:38.500
hard

00:52:38.500 --> 00:52:38.640
on

00:52:38.640 --> 00:52:38.900
that

00:52:38.900 --> 00:52:39.660
as far

00:52:39.660 --> 00:52:39.900
as I

00:52:39.900 --> 00:52:40.020
can

00:52:40.020 --> 00:52:40.300
tell

00:52:40.300 --> 00:52:40.540
this

00:52:40.540 --> 00:52:40.680
is

00:52:40.680 --> 00:52:41.100
deferred

00:52:41.100 --> 00:52:41.200
to

00:52:41.200 --> 00:52:41.420
Python

00:52:41.420 --> 00:52:42.240
3.9

00:52:42.240 --> 00:52:42.760
I'm

00:52:42.760 --> 00:52:43.160
eagerly

00:52:43.160 --> 00:52:43.500
awaiting

00:52:43.500 --> 00:52:43.820
that

00:52:43.820 --> 00:52:44.400
I think

00:52:44.400 --> 00:52:44.600
this

00:52:44.600 --> 00:52:44.680
is

00:52:44.680 --> 00:52:44.780
going

00:52:44.780 --> 00:52:44.820
to

00:52:44.820 --> 00:52:44.900
be

00:52:44.900 --> 00:52:45.000
a

00:52:45.000 --> 00:52:45.200
great

00:52:45.200 --> 00:52:45.580
improvement

00:52:45.580 --> 00:52:46.040
yeah

00:52:46.040 --> 00:52:46.500
it

00:52:46.500 --> 00:52:46.660
could

00:52:46.660 --> 00:52:46.940
definitely

00:52:46.940 --> 00:52:47.320
change

00:52:47.320 --> 00:52:47.520
the

00:52:47.520 --> 00:52:47.940
threading

00:52:47.940 --> 00:52:48.420
story

00:52:48.420 --> 00:52:49.000
in

00:52:49.000 --> 00:52:49.540
multipress

00:52:49.540 --> 00:52:50.300
processing

00:52:50.300 --> 00:52:50.940
strong

00:52:50.940 --> 00:52:51.120
in

00:52:51.120 --> 00:52:51.480
Python

00:52:51.480 --> 00:52:52.440
async

00:52:52.440 --> 00:52:52.760
in a way

00:52:52.760 --> 00:52:53.220
is super

00:52:53.220 --> 00:52:53.720
cool

00:52:53.720 --> 00:52:54.100
for

00:52:54.100 --> 00:52:54.720
IO

00:52:54.720 --> 00:52:55.000
bound

00:52:55.000 --> 00:52:55.340
stuff

00:52:55.340 --> 00:52:55.620
but

00:52:55.620 --> 00:52:55.960
threads

00:52:55.960 --> 00:52:56.100
have

00:52:56.100 --> 00:52:56.300
always

00:52:56.300 --> 00:52:56.540
been

00:52:56.540 --> 00:52:56.660
a

00:52:56.660 --> 00:52:56.840
kind

00:52:56.840 --> 00:52:56.960
of

00:52:56.960 --> 00:52:57.340
well

00:52:57.340 --> 00:52:58.240
sometimes

00:52:58.240 --> 00:52:58.580
they're

00:52:58.580 --> 00:52:58.840
helpful

00:52:58.840 --> 00:52:59.280
sometimes

00:52:59.280 --> 00:52:59.460
they're

00:52:59.460 --> 00:52:59.620
not

00:52:59.620 --> 00:53:00.020
depends

00:53:00.020 --> 00:53:00.700
and

00:53:00.700 --> 00:53:00.860
this

00:53:00.860 --> 00:53:00.960
could

00:53:00.960 --> 00:53:01.060
be

00:53:01.060 --> 00:53:01.320
awesome

00:53:01.320 --> 00:53:01.500
right

00:53:01.500 --> 00:53:01.620
you

00:53:01.620 --> 00:53:01.740
could

00:53:01.740 --> 00:53:01.960
just

00:53:01.960 --> 00:53:02.560
dedicate

00:53:02.560 --> 00:53:02.820
a

00:53:02.820 --> 00:53:03.080
sub

00:53:03.080 --> 00:53:03.640
interpreter

00:53:03.640 --> 00:53:05.440
to

00:53:05.440 --> 00:53:05.760
each

00:53:05.760 --> 00:53:06.800
thread

00:53:06.800 --> 00:53:07.040
right

00:53:07.040 --> 00:53:07.660
and really

00:53:07.660 --> 00:53:07.980
get free

00:53:07.980 --> 00:53:08.140
of that

00:53:08.140 --> 00:53:08.520
I agree

00:53:08.520 --> 00:53:08.800
cool

00:53:08.800 --> 00:53:09.280
all right

00:53:09.280 --> 00:53:09.700
well

00:53:09.700 --> 00:53:10.680
thank you

00:53:10.680 --> 00:53:10.940
both

00:53:10.940 --> 00:53:11.280
for

00:53:11.280 --> 00:53:11.900
sharing

00:53:11.900 --> 00:53:12.220
what's

00:53:12.220 --> 00:53:12.500
coming

00:53:12.500 --> 00:53:13.800
pretty

00:53:13.800 --> 00:53:14.080
excited

00:53:14.080 --> 00:53:14.300
about

00:53:14.300 --> 00:53:14.720
3.8

00:53:14.720 --> 00:53:15.400
cool

00:53:15.400 --> 00:53:15.740
that was

00:53:15.740 --> 00:53:16.080
a pleasure

00:53:16.080 --> 00:53:16.520
yeah

00:53:16.520 --> 00:53:16.860
it's

00:53:16.860 --> 00:53:17.020
going to

00:53:17.020 --> 00:53:17.120
be

00:53:17.120 --> 00:53:17.360
great

00:53:17.360 --> 00:53:17.680
yeah

00:53:17.680 --> 00:53:17.920
and

00:53:17.920 --> 00:53:18.860
on that

00:53:18.860 --> 00:53:19.100
topic

00:53:19.100 --> 00:53:19.480
as well

00:53:19.480 --> 00:53:19.760
I guess

00:53:19.760 --> 00:53:19.920
we've

00:53:19.920 --> 00:53:20.000
got

00:53:20.000 --> 00:53:20.740
3.9

00:53:20.740 --> 00:53:21.080
so some

00:53:21.080 --> 00:53:21.320
of the

00:53:21.320 --> 00:53:21.620
PEPs

00:53:21.620 --> 00:53:21.860
are being

00:53:21.860 --> 00:53:22.260
deferred

00:53:22.260 --> 00:53:22.340
to

00:53:22.340 --> 00:53:23.100
3.9

00:53:23.100 --> 00:53:23.860
and on

00:53:23.860 --> 00:53:23.960
the

00:53:23.960 --> 00:53:24.160
topic

00:53:24.160 --> 00:53:24.360
of

00:53:24.360 --> 00:53:24.600
sub

00:53:24.600 --> 00:53:25.280
interpreters

00:53:25.280 --> 00:53:25.620
the

00:53:25.620 --> 00:53:26.280
unpacking

00:53:26.280 --> 00:53:26.580
of the

00:53:26.580 --> 00:53:26.860
startup

00:53:26.860 --> 00:53:27.460
sequence

00:53:27.460 --> 00:53:28.320
and also

00:53:28.320 --> 00:53:28.580
the

00:53:28.580 --> 00:53:29.220
initialization

00:53:29.220 --> 00:53:29.760
configuration

00:53:29.760 --> 00:53:31.080
there's

00:53:31.080 --> 00:53:31.280
two

00:53:31.280 --> 00:53:31.720
proposals

00:53:31.720 --> 00:53:32.340
for that

00:53:32.340 --> 00:53:32.520
one

00:53:32.520 --> 00:53:32.660
is

00:53:32.660 --> 00:53:32.860
PEP

00:53:32.860 --> 00:53:33.640
4.3.2

00:53:33.640 --> 00:53:33.880
and the

00:53:33.880 --> 00:53:34.120
there's

00:53:34.120 --> 00:53:35.240
PEP 587

00:53:35.240 --> 00:53:36.400
which are

00:53:36.400 --> 00:53:36.960
interrelated

00:53:36.960 --> 00:53:37.820
because if

00:53:37.820 --> 00:53:38.100
you have

00:53:38.100 --> 00:53:38.880
sub interpreters

00:53:38.880 --> 00:53:39.200
you want

00:53:39.200 --> 00:53:39.740
the interpreter

00:53:39.740 --> 00:53:40.560
startup time

00:53:40.560 --> 00:53:41.200
to be fast

00:53:41.200 --> 00:53:42.320
and also

00:53:42.320 --> 00:53:42.880
the configuration

00:53:42.880 --> 00:53:43.640
to be flexible

00:53:43.640 --> 00:53:44.600
so I think

00:53:44.600 --> 00:53:45.260
3.9

00:53:45.260 --> 00:53:45.820
will definitely

00:53:45.820 --> 00:53:46.520
see

00:53:46.520 --> 00:53:47.860
some more

00:53:47.860 --> 00:53:48.300
proposals

00:53:48.300 --> 00:53:48.980
related to

00:53:48.980 --> 00:53:49.180
that

00:53:49.180 --> 00:53:50.080
which are

00:53:50.080 --> 00:53:50.500
going to

00:53:50.500 --> 00:53:50.780
hopefully

00:53:50.780 --> 00:53:51.220
improve

00:53:51.220 --> 00:53:51.740
the startup

00:53:51.740 --> 00:53:52.280
time

00:53:52.280 --> 00:53:52.760
of

00:53:52.760 --> 00:53:53.760
Python 3

00:53:53.760 --> 00:53:54.540
as we know

00:53:54.540 --> 00:53:55.240
it's a little

00:53:55.240 --> 00:53:55.720
behind where

00:53:55.720 --> 00:53:56.180
Python 2

00:53:56.180 --> 00:53:56.560
was

00:53:56.560 --> 00:53:57.420
for various

00:53:57.420 --> 00:53:57.840
reasons

00:53:57.840 --> 00:53:58.440
but that'll

00:53:58.440 --> 00:53:59.160
be a great

00:53:59.160 --> 00:53:59.720
step forward

00:53:59.720 --> 00:53:59.900
yeah

00:53:59.900 --> 00:54:00.160
that'd be

00:54:00.160 --> 00:54:00.600
really awesome

00:54:00.600 --> 00:54:00.940
and then

00:54:00.940 --> 00:54:01.420
it also

00:54:01.420 --> 00:54:01.980
might make

00:54:01.980 --> 00:54:02.540
this sub

00:54:02.540 --> 00:54:03.100
interpreter

00:54:03.100 --> 00:54:03.420
stuff

00:54:03.420 --> 00:54:03.940
even better

00:54:03.940 --> 00:54:04.280
if those

00:54:04.280 --> 00:54:04.420
little

00:54:04.420 --> 00:54:05.140
sub interpreters

00:54:05.140 --> 00:54:05.420
can get

00:54:05.420 --> 00:54:05.740
created

00:54:05.740 --> 00:54:06.400
faster as

00:54:06.400 --> 00:54:06.540
well

00:54:06.540 --> 00:54:06.820
I don't

00:54:06.820 --> 00:54:06.980
know

00:54:06.980 --> 00:54:07.180
how

00:54:07.180 --> 00:54:07.480
related

00:54:07.480 --> 00:54:07.640
they

00:54:07.640 --> 00:54:07.800
are

00:54:07.800 --> 00:54:07.960
but

00:54:07.960 --> 00:54:09.020
pretty

00:54:09.020 --> 00:54:09.200
cool

00:54:09.200 --> 00:54:09.460
pretty

00:54:09.460 --> 00:54:09.620
cool

00:54:09.620 --> 00:54:09.960
all right

00:54:09.960 --> 00:54:10.580
one

00:54:10.580 --> 00:54:11.400
we used

00:54:11.400 --> 00:54:11.800
up almost

00:54:11.800 --> 00:54:12.140
all our

00:54:12.140 --> 00:54:12.340
time

00:54:12.340 --> 00:54:12.640
so I won't

00:54:12.640 --> 00:54:13.040
keep you guys

00:54:13.040 --> 00:54:13.540
much longer

00:54:13.540 --> 00:54:13.960
but

00:54:13.960 --> 00:54:14.800
especially

00:54:14.800 --> 00:54:15.620
Lucas let me

00:54:15.620 --> 00:54:16.100
ask you this

00:54:16.100 --> 00:54:17.040
like will

00:54:17.040 --> 00:54:17.460
there be a

00:54:17.460 --> 00:54:18.100
Python 4

00:54:18.100 --> 00:54:19.100
and does

00:54:19.100 --> 00:54:19.540
it matter

00:54:19.540 --> 00:54:19.960
I mean

00:54:19.960 --> 00:54:20.560
on one hand

00:54:20.560 --> 00:54:20.980
like we've

00:54:20.980 --> 00:54:21.360
got stuff

00:54:21.360 --> 00:54:22.580
that's 0.1

00:54:22.580 --> 00:54:23.940
2 versions

00:54:23.940 --> 00:54:24.640
that have been

00:54:24.640 --> 00:54:25.220
around for 10

00:54:25.220 --> 00:54:25.840
years with 100

00:54:25.840 --> 00:54:26.280
releases

00:54:26.280 --> 00:54:27.800
we've got

00:54:27.800 --> 00:54:28.460
Python 3

00:54:28.460 --> 00:54:29.780
if we don't

00:54:29.780 --> 00:54:30.540
have like major

00:54:30.540 --> 00:54:31.240
breaking changes

00:54:31.240 --> 00:54:31.760
is there a

00:54:31.760 --> 00:54:32.400
reason to start

00:54:32.400 --> 00:54:34.040
calling it 4 and 5 and 6

00:54:34.040 --> 00:54:35.000
or is that just

00:54:35.000 --> 00:54:35.840
gonna like scare

00:54:35.840 --> 00:54:36.520
people with the

00:54:36.520 --> 00:54:37.200
history or like

00:54:37.200 --> 00:54:38.060
what's your

00:54:38.060 --> 00:54:39.000
perspective here

00:54:39.000 --> 00:54:39.840
we are at

00:54:39.840 --> 00:54:41.040
Python 3.8 now

00:54:41.040 --> 00:54:42.120
we're about to

00:54:42.120 --> 00:54:43.720
release 3.9 later

00:54:43.720 --> 00:54:44.780
you know another

00:54:44.780 --> 00:54:45.660
18 months later

00:54:45.660 --> 00:54:46.760
historically

00:54:46.760 --> 00:54:48.260
Guido expressed

00:54:48.260 --> 00:54:49.280
his distaste

00:54:49.280 --> 00:54:50.400
with numbers

00:54:50.400 --> 00:54:51.360
after the

00:54:51.360 --> 00:54:52.760
decimal point

00:54:52.760 --> 00:54:53.760
that have more

00:54:53.760 --> 00:54:54.680
than one digit

00:54:54.680 --> 00:54:55.440
right and so

00:54:55.440 --> 00:54:56.400
he disliked

00:54:56.400 --> 00:54:57.380
the notion of

00:54:57.380 --> 00:54:58.440
having 2.10

00:54:58.440 --> 00:54:59.160
2.11

00:54:59.160 --> 00:54:59.840
same with

00:54:59.840 --> 00:55:00.760
3.10

00:55:00.760 --> 00:55:01.480
3.11

00:55:01.480 --> 00:55:02.880
however we have

00:55:02.880 --> 00:55:04.160
both philosophical

00:55:04.160 --> 00:55:05.400
and technical

00:55:05.400 --> 00:55:06.320
challenges

00:55:06.320 --> 00:55:07.380
with just

00:55:07.380 --> 00:55:08.460
releasing a

00:55:08.460 --> 00:55:09.080
Python 4

00:55:09.080 --> 00:55:09.860
well the

00:55:09.860 --> 00:55:10.800
obvious philosophical

00:55:10.800 --> 00:55:11.780
one is that

00:55:11.780 --> 00:55:12.680
the transition

00:55:12.680 --> 00:55:13.560
between Python 2

00:55:13.560 --> 00:55:14.300
and Python 3

00:55:14.300 --> 00:55:15.100
was very

00:55:15.100 --> 00:55:15.880
very challenging

00:55:15.880 --> 00:55:16.800
right it took us

00:55:16.800 --> 00:55:17.600
a lot of effort

00:55:17.600 --> 00:55:18.180
and there's a lot

00:55:18.180 --> 00:55:18.760
of fatigue

00:55:18.760 --> 00:55:19.700
I think in the

00:55:19.700 --> 00:55:20.080
community

00:55:20.080 --> 00:55:20.760
we just not

00:55:20.760 --> 00:55:21.380
go through that

00:55:21.380 --> 00:55:22.200
again for a while

00:55:22.200 --> 00:55:22.800
absolutely

00:55:22.800 --> 00:55:23.840
our closets

00:55:23.840 --> 00:55:24.580
are still full

00:55:24.580 --> 00:55:25.140
of skeletons

00:55:25.140 --> 00:55:26.660
so like

00:55:26.660 --> 00:55:28.200
we are really

00:55:28.200 --> 00:55:29.020
trying hard

00:55:29.020 --> 00:55:29.600
not to make

00:55:29.600 --> 00:55:30.120
that mistake

00:55:30.120 --> 00:55:30.480
again

00:55:30.480 --> 00:55:31.580
it's not only

00:55:31.580 --> 00:55:32.260
a problem

00:55:32.260 --> 00:55:32.920
for the users

00:55:32.920 --> 00:55:34.020
it was also

00:55:34.020 --> 00:55:34.800
unpleasant

00:55:34.800 --> 00:55:35.420
and a problem

00:55:35.420 --> 00:55:36.000
for the core

00:55:36.000 --> 00:55:36.440
developers

00:55:36.440 --> 00:55:37.060
so we are

00:55:37.060 --> 00:55:37.700
really careful

00:55:37.700 --> 00:55:39.080
to make changes

00:55:39.080 --> 00:55:39.980
in a very

00:55:39.980 --> 00:55:41.140
incremental manner

00:55:41.140 --> 00:55:41.640
now and

00:55:41.640 --> 00:55:42.460
communicate them

00:55:42.460 --> 00:55:43.300
well and make

00:55:43.300 --> 00:55:44.100
them gradually

00:55:44.100 --> 00:55:45.120
so that we are

00:55:45.120 --> 00:55:45.980
disrupting our

00:55:45.980 --> 00:55:47.100
users the least

00:55:47.100 --> 00:55:48.720
which just means

00:55:48.720 --> 00:55:49.580
calling something

00:55:49.580 --> 00:55:50.320
Python 4

00:55:50.320 --> 00:55:51.660
well would

00:55:51.660 --> 00:55:52.600
probably be just

00:55:52.600 --> 00:55:53.460
scary on its

00:55:53.460 --> 00:55:54.500
own just on the

00:55:54.500 --> 00:55:55.440
power of that

00:55:55.440 --> 00:55:56.520
number but just

00:55:56.520 --> 00:55:57.200
more practically

00:55:57.200 --> 00:55:58.180
speaking because

00:55:58.180 --> 00:55:59.080
of this Python 2

00:55:59.080 --> 00:55:59.920
and 3 transition

00:55:59.920 --> 00:56:01.100
there is a ton

00:56:01.100 --> 00:56:01.940
of code in the

00:56:01.940 --> 00:56:02.800
wild that does

00:56:02.800 --> 00:56:03.780
checks exactly

00:56:03.780 --> 00:56:04.380
for the number

00:56:04.380 --> 00:56:05.300
3 in this

00:56:05.300 --> 00:56:06.000
version and

00:56:06.000 --> 00:56:06.920
version info

00:56:06.920 --> 00:56:08.260
and those checks

00:56:08.260 --> 00:56:09.060
would you know

00:56:09.060 --> 00:56:10.480
become invalid

00:56:10.480 --> 00:56:11.520
if we introduced

00:56:11.520 --> 00:56:12.360
Python 4

00:56:12.360 --> 00:56:13.280
like which is one

00:56:13.280 --> 00:56:13.820
of the reasons

00:56:13.820 --> 00:56:14.520
why you know

00:56:14.520 --> 00:56:16.080
like Linux had

00:56:16.080 --> 00:56:17.140
problems when it

00:56:17.140 --> 00:56:18.300
suddenly became

00:56:18.300 --> 00:56:19.580
Linux 3 and

00:56:19.580 --> 00:56:20.320
why we have

00:56:20.320 --> 00:56:21.380
Windows 10 now

00:56:21.380 --> 00:56:22.520
just for that

00:56:22.520 --> 00:56:23.200
practical reason

00:56:23.200 --> 00:56:24.280
I do expect

00:56:24.280 --> 00:56:24.880
that we're gonna

00:56:24.880 --> 00:56:26.280
see Python 3.10

00:56:26.380 --> 00:56:27.480
first at least

00:56:27.480 --> 00:56:28.580
before we ever

00:56:28.580 --> 00:56:29.920
decide to call

00:56:29.920 --> 00:56:30.580
the next release

00:56:30.580 --> 00:56:31.260
Python 4

00:56:31.260 --> 00:56:32.040
yeah yeah so

00:56:32.040 --> 00:56:32.780
3.10 is way

00:56:32.780 --> 00:56:33.300
more likely

00:56:33.300 --> 00:56:34.300
maybe we should

00:56:34.300 --> 00:56:35.720
call it Python 6

00:56:35.720 --> 00:56:36.240
because then it's

00:56:36.240 --> 00:56:36.980
like two times

00:56:36.980 --> 00:56:37.260
three

00:56:37.260 --> 00:56:37.940
well I was

00:56:37.940 --> 00:56:38.220
wondering if

00:56:38.220 --> 00:56:38.760
there's a proposal

00:56:38.760 --> 00:56:39.440
to introduce

00:56:39.440 --> 00:56:40.300
calendar versioning

00:56:40.300 --> 00:56:41.060
to Python

00:56:41.060 --> 00:56:41.840
oh yeah what do

00:56:41.840 --> 00:56:42.160
you think about

00:56:42.160 --> 00:56:43.000
calendar versioning

00:56:43.000 --> 00:56:44.420
if Python 2.7

00:56:44.420 --> 00:56:44.960
was called

00:56:44.960 --> 00:56:46.280
2014.1

00:56:46.280 --> 00:56:47.240
actually yeah

00:56:47.240 --> 00:56:47.820
yeah yeah

00:56:47.820 --> 00:56:48.140
maybe people

00:56:48.140 --> 00:56:48.740
would reconsider

00:56:48.740 --> 00:56:49.980
really 2014

00:56:49.980 --> 00:56:50.800
what's up here

00:56:50.800 --> 00:56:51.620
like we just

00:56:51.620 --> 00:56:52.080
upgraded from

00:56:52.080 --> 00:56:52.580
2013

00:56:52.580 --> 00:56:53.520
it would

00:56:53.520 --> 00:56:53.720
certainly

00:56:53.720 --> 00:56:54.240
remind people

00:56:54.240 --> 00:56:54.700
how old

00:56:54.700 --> 00:56:55.180
that Python

00:56:55.180 --> 00:56:55.960
distribution is

00:56:55.960 --> 00:56:56.380
so maybe

00:56:56.380 --> 00:56:56.860
that upgrade

00:56:56.860 --> 00:56:57.340
faster

00:56:57.340 --> 00:56:58.640
that's funny

00:56:58.640 --> 00:56:59.420
well I'm in

00:56:59.420 --> 00:57:00.340
no power to

00:57:00.340 --> 00:57:01.120
just you know

00:57:01.120 --> 00:57:01.740
like make that

00:57:01.740 --> 00:57:02.120
change

00:57:02.120 --> 00:57:02.660
I could be

00:57:02.660 --> 00:57:03.300
in power to

00:57:03.300 --> 00:57:04.000
create a pep

00:57:04.000 --> 00:57:04.520
about it

00:57:04.520 --> 00:57:05.620
but this is

00:57:05.620 --> 00:57:06.520
probably not a

00:57:06.520 --> 00:57:07.460
sword I'm willing

00:57:07.460 --> 00:57:08.200
to fall on

00:57:08.200 --> 00:57:09.600
however like let me

00:57:09.600 --> 00:57:10.120
tell you this

00:57:10.120 --> 00:57:11.240
like all of my

00:57:11.240 --> 00:57:12.040
private projects

00:57:12.040 --> 00:57:12.780
do use calendar

00:57:12.780 --> 00:57:13.540
versioning like

00:57:13.540 --> 00:57:14.160
that's the only

00:57:14.160 --> 00:57:15.080
versioning that I

00:57:15.080 --> 00:57:16.080
am familiar and

00:57:16.080 --> 00:57:16.880
comfortable with

00:57:16.880 --> 00:57:17.520
there's obviously

00:57:17.520 --> 00:57:18.480
semantic versioning

00:57:18.480 --> 00:57:19.120
but I don't know

00:57:19.120 --> 00:57:19.900
about others but

00:57:19.900 --> 00:57:20.820
at least I

00:57:20.820 --> 00:57:21.600
don't see myself

00:57:21.600 --> 00:57:23.220
being as strict

00:57:23.220 --> 00:57:24.180
and consistent

00:57:24.180 --> 00:57:25.140
with applying

00:57:25.140 --> 00:57:25.900
semantic versioning

00:57:25.900 --> 00:57:26.540
like every time

00:57:26.540 --> 00:57:27.240
what does it mean

00:57:27.240 --> 00:57:27.880
to push the

00:57:27.880 --> 00:57:28.540
major version

00:57:28.540 --> 00:57:29.180
versus minor

00:57:29.180 --> 00:57:29.860
version like

00:57:29.860 --> 00:57:30.820
yeah so obviously

00:57:30.820 --> 00:57:31.760
there's rules but

00:57:31.760 --> 00:57:32.700
like the devil is

00:57:32.700 --> 00:57:33.820
in the application

00:57:33.820 --> 00:57:34.680
like do you apply

00:57:34.680 --> 00:57:35.200
those rules

00:57:35.200 --> 00:57:36.300
consistently and

00:57:36.300 --> 00:57:37.220
every given time

00:57:37.220 --> 00:57:37.800
like you know I

00:57:37.800 --> 00:57:38.520
wrote an auto

00:57:38.520 --> 00:57:39.380
formatter because I

00:57:39.380 --> 00:57:40.280
was not able to

00:57:40.280 --> 00:57:41.740
apply rules of

00:57:41.740 --> 00:57:42.780
code styling you

00:57:42.780 --> 00:57:43.580
know consistently

00:57:43.580 --> 00:57:44.380
and every time

00:57:44.380 --> 00:57:45.500
so I don't trust

00:57:45.500 --> 00:57:46.340
myself enough to

00:57:46.340 --> 00:57:47.160
do the same for

00:57:47.160 --> 00:57:48.020
semantic versioning

00:57:48.020 --> 00:57:49.060
and if I'm not

00:57:49.060 --> 00:57:49.820
doing that then my

00:57:49.820 --> 00:57:50.360
users cannot

00:57:50.360 --> 00:57:52.060
depend on you

00:57:52.060 --> 00:57:52.560
know what they

00:57:52.560 --> 00:57:53.140
expect from

00:57:53.140 --> 00:57:53.940
semantic versioning

00:57:53.940 --> 00:57:55.040
hence just using

00:57:55.040 --> 00:57:55.780
calendar versioning

00:57:55.780 --> 00:57:57.120
way easier adopted

00:57:57.120 --> 00:57:58.320
by many popular

00:57:58.320 --> 00:57:59.400
projects like Ubuntu

00:57:59.400 --> 00:58:00.520
like Twisted like

00:58:00.520 --> 00:58:01.540
others yeah I

00:58:01.540 --> 00:58:02.140
love the calendar

00:58:02.140 --> 00:58:02.900
versioning I don't

00:58:02.900 --> 00:58:03.460
know that it makes

00:58:03.460 --> 00:58:04.260
sense for like the

00:58:04.260 --> 00:58:06.020
main Python maybe

00:58:06.020 --> 00:58:06.900
maybe it does maybe

00:58:06.900 --> 00:58:07.900
it doesn't it would

00:58:07.900 --> 00:58:08.600
be effective on

00:58:08.600 --> 00:58:09.200
showing how old

00:58:09.200 --> 00:58:10.540
some stuff is but

00:58:10.540 --> 00:58:11.660
certainly I feel like

00:58:11.660 --> 00:58:12.760
semantic versioning

00:58:12.760 --> 00:58:13.880
requires like on

00:58:13.880 --> 00:58:15.180
libraries it requires

00:58:15.180 --> 00:58:16.660
some expertise in

00:58:16.660 --> 00:58:18.260
that library like I

00:58:18.260 --> 00:58:19.740
depend on library a

00:58:19.740 --> 00:58:20.840
it depends on

00:58:20.840 --> 00:58:22.440
library b I see

00:58:22.440 --> 00:58:23.080
that when I pip

00:58:23.080 --> 00:58:24.280
installed it it's

00:58:24.280 --> 00:58:27.240
0.1.3 six months

00:58:27.240 --> 00:58:28.680
later is that out of

00:58:28.680 --> 00:58:29.900
date I have no idea

00:58:29.900 --> 00:58:30.520
like I don't even

00:58:30.520 --> 00:58:31.680
know like roughly how

00:58:31.680 --> 00:58:32.540
old that is but if I

00:58:32.540 --> 00:58:33.700
saw the calendar

00:58:33.700 --> 00:58:34.440
version on all the

00:58:34.440 --> 00:58:35.580
dependencies or stuff

00:58:35.580 --> 00:58:36.120
I'm not super

00:58:36.120 --> 00:58:37.240
familiar with be like

00:58:37.240 --> 00:58:38.060
oh yeah this is

00:58:38.060 --> 00:58:39.000
actually this is

00:58:39.000 --> 00:58:39.800
pretty much new or

00:58:39.800 --> 00:58:40.500
it's old like it

00:58:40.500 --> 00:58:41.220
just it makes it

00:58:41.220 --> 00:58:42.940
easier for newcomers

00:58:42.940 --> 00:58:44.420
I think yeah all

00:58:44.420 --> 00:58:45.200
right guys thank you

00:58:45.200 --> 00:58:45.880
for being on the show

00:58:45.880 --> 00:58:46.620
and sharing all this

00:58:46.620 --> 00:58:47.440
and looking forward to

00:58:47.440 --> 00:58:47.940
when you actually

00:58:47.940 --> 00:58:49.160
release 3.8 I'm

00:58:49.160 --> 00:58:49.740
looking forward to

00:58:49.740 --> 00:58:50.360
that too thank you

00:58:50.360 --> 00:58:50.900
very much I can

00:58:50.900 --> 00:58:51.500
imagine thanks

00:58:51.500 --> 00:58:52.280
Michael yeah bye

00:58:52.280 --> 00:58:54.060
this has been another

00:58:54.060 --> 00:58:55.020
episode of talk

00:58:55.020 --> 00:58:56.600
Python to me our

00:58:56.600 --> 00:58:57.280
guests in this episode

00:58:57.280 --> 00:58:58.060
have been Lucas

00:58:58.060 --> 00:58:59.380
Lenga and Anthony

00:58:59.380 --> 00:59:00.440
Shaw and it's been

00:59:00.440 --> 00:59:01.100
brought to you by

00:59:01.100 --> 00:59:03.340
Microsoft if you're a

00:59:03.340 --> 00:59:03.980
Python developer

00:59:03.980 --> 00:59:04.980
Microsoft has you

00:59:04.980 --> 00:59:06.380
covered from VS Code

00:59:06.380 --> 00:59:07.020
and their modern

00:59:07.020 --> 00:59:08.440
editor plugins to

00:59:08.440 --> 00:59:09.440
Azure pipelines for

00:59:09.440 --> 00:59:10.360
continuous integration

00:59:10.360 --> 00:59:12.040
and serverless Python

00:59:12.040 --> 00:59:13.140
functions on Azure

00:59:13.140 --> 00:59:14.420
check them out at

00:59:14.420 --> 00:59:15.640
talkpython.fm

00:59:15.640 --> 00:59:16.800
slash Microsoft

00:59:16.800 --> 00:59:18.660
want to level up

00:59:18.660 --> 00:59:19.600
your Python if

00:59:19.600 --> 00:59:20.180
you're just getting

00:59:20.180 --> 00:59:21.260
started try my

00:59:21.260 --> 00:59:22.400
Python jumpstart by

00:59:22.400 --> 00:59:23.380
building 10 apps

00:59:23.380 --> 00:59:24.960
course or if you're

00:59:24.960 --> 00:59:25.520
looking for something

00:59:25.520 --> 00:59:26.560
more advanced check

00:59:26.560 --> 00:59:27.720
out our new async

00:59:27.720 --> 00:59:29.000
course that digs into

00:59:29.000 --> 00:59:30.080
all the different types

00:59:30.080 --> 00:59:31.240
of async programming you

00:59:31.240 --> 00:59:32.480
can do in Python and

00:59:32.480 --> 00:59:33.260
of course if you're

00:59:33.260 --> 00:59:34.280
interested in more than

00:59:34.280 --> 00:59:35.580
one of these be sure to

00:59:35.580 --> 00:59:36.020
check out our

00:59:36.020 --> 00:59:37.040
everything bundle it's

00:59:37.040 --> 00:59:37.920
like a subscription that

00:59:37.920 --> 00:59:39.780
never expires be sure

00:59:39.780 --> 00:59:40.720
to subscribe to the

00:59:40.720 --> 00:59:41.800
show open your favorite

00:59:41.800 --> 00:59:42.820
podcatcher and search

00:59:42.820 --> 00:59:43.840
for Python we should

00:59:43.840 --> 00:59:44.560
be right at the top

00:59:44.560 --> 00:59:45.940
you can also find the

00:59:45.940 --> 00:59:47.080
iTunes feed at slash

00:59:47.080 --> 00:59:48.340
iTunes the Google Play

00:59:48.340 --> 00:59:49.960
feed at /play in

00:59:49.960 --> 00:59:51.300
the direct RSS feed at

00:59:51.300 --> 00:59:53.540
/rss on talkpython.fm

00:59:53.540 --> 00:59:55.020
this is your host

00:59:55.020 --> 00:59:56.560
Michael Kennedy thanks so

00:59:56.560 --> 00:59:57.420
much for listening I

00:59:57.420 --> 00:59:58.540
really appreciate it now

00:59:58.540 --> 00:59:59.240
get out there and write

00:59:59.240 --> 01:00:00.020
some Python code

01:00:00.020 --> 01:00:13.260
you're welcome you're a

01:00:13.260 --> 01:00:14.360
good one you're a good one

01:00:14.360 --> 01:00:15.580
you're a good one you're a good one

01:00:15.580 --> 01:00:20.580
you're a good one you're a good one

01:00:20.580 --> 01:00:21.080
you're a good one you're a good one

