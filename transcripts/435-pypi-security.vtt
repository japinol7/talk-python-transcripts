WEBVTT

00:00:00.000 --> 00:00:03.960
Do you worry about your developer data science supply chain safety?


00:00:03.960 --> 00:00:09.200
All the packages for the Python ecosystem are much of what makes Python awesome.


00:00:09.200 --> 00:00:13.360
But they are also a bit of an open door to your code and machine.


00:00:13.360 --> 00:00:18.960
Luckily, the PSF is taking this seriously and hired Mike Fiedler as the full-time PyPI


00:00:18.960 --> 00:00:24.040
safety and security engineer, not to be confused with a security developer in residence tapped


00:00:24.040 --> 00:00:26.120
by Seth Michael Larsen.


00:00:26.120 --> 00:00:32.320
Mike Fiedler is here to give us the state of PyPI security and their plans for the future.


00:00:32.320 --> 00:00:51.520
This is Talk Python to Me, episode 435, recorded September 18th, 2023.


00:00:51.520 --> 00:00:54.920
Welcome to Talk Python to Me, a weekly podcast on Python.


00:00:54.920 --> 00:00:56.760
This is your host, Michael Kennedy.


00:00:56.760 --> 00:01:01.680
Follow me on Mastodon, where I'm@mkennedy, and follow the podcast using at Talk Python,


00:01:01.680 --> 00:01:04.320
both on fosstodon.org.


00:01:04.320 --> 00:01:09.520
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.


00:01:09.520 --> 00:01:13.040
We've started streaming most of our episodes live on YouTube.


00:01:13.040 --> 00:01:18.320
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming


00:01:18.320 --> 00:01:21.400
shows and be part of that episode.


00:01:21.400 --> 00:01:23.720
This episode is sponsored by Sentry.


00:01:23.720 --> 00:01:25.360
Don't let those errors go unnoticed.


00:01:25.360 --> 00:01:26.360
Use Sentry.


00:01:26.360 --> 00:01:30.320
Get started at talkpython.fm/Sentry.


00:01:30.320 --> 00:01:34.120
And it's also brought to you by us over at Talk Python Training.


00:01:34.120 --> 00:01:38.280
Did you know that we have over 250 hours of Python courses?


00:01:38.280 --> 00:01:39.600
Yeah, that's right.


00:01:39.600 --> 00:01:42.320
Check them out at talkpython.fm/courses.


00:01:42.320 --> 00:01:43.720
Hey, Mike.


00:01:43.720 --> 00:01:45.140
Hey, Michael.


00:01:45.140 --> 00:01:46.140
Welcome to Talk Python to Me.


00:01:46.140 --> 00:01:47.640
It's awesome to have you here.


00:01:47.640 --> 00:01:48.640
Thanks for having me.


00:01:48.640 --> 00:01:49.880
I'm really excited to be here.


00:01:49.880 --> 00:01:52.120
Yeah, I'm excited to have you.


00:01:52.120 --> 00:01:53.840
It's interesting to talk about security.


00:01:53.840 --> 00:01:58.080
I got to tell you, talking about security just makes me nervous.


00:01:58.080 --> 00:01:59.080
Why is that?


00:01:59.080 --> 00:02:00.480
Well, two reasons.


00:02:00.480 --> 00:02:03.640
I feel like when you talk about security, you're kind of sticking your head up and people


00:02:03.640 --> 00:02:05.320
are like, let me see if I could whack that.


00:02:05.320 --> 00:02:08.320
You know, not everybody, but a few people in the world, right?


00:02:08.320 --> 00:02:09.320
But it is the internet.


00:02:09.320 --> 00:02:16.160
So if you take a very, very small percentage and multiply it by billions, it becomes non-zero.


00:02:16.160 --> 00:02:18.880
And then, you know, it's just one of those things.


00:02:18.880 --> 00:02:22.720
It's like trying to prove the absence of something.


00:02:22.720 --> 00:02:27.280
It's very hard to prove that you're not missing stuff, some step.


00:02:27.280 --> 00:02:30.600
It's very hard to prove that you haven't, that there's not a, you know, you've got all


00:02:30.600 --> 00:02:32.800
the controls and there's not one control you forgot.


00:02:32.800 --> 00:02:33.800
Right.


00:02:33.800 --> 00:02:36.320
In that regard, probably more so.


00:02:36.320 --> 00:02:37.320
It's pretty tricky.


00:02:37.320 --> 00:02:41.200
The way I've often thought about security is it's a spectrum, right?


00:02:41.200 --> 00:02:42.800
I used this quote a million years ago.


00:02:42.800 --> 00:02:47.400
I don't know who said it first, but the most secure computer is powered off and buried


00:02:47.400 --> 00:02:50.920
in six feet of under concrete, right?


00:02:50.920 --> 00:02:53.200
But it's useless, right?


00:02:53.200 --> 00:02:56.080
It's very secure, but nothing in there is useful.


00:02:56.080 --> 00:03:01.280
So if we take that as like a crazy extreme of secure and say the most insecure computer


00:03:01.280 --> 00:03:06.360
is, you know, powered on, has zero password control, connected to the internet and auto


00:03:06.360 --> 00:03:10.960
publishing IP data, so that way anyone can come and do whatever they want.


00:03:10.960 --> 00:03:11.960
All right.


00:03:11.960 --> 00:03:13.200
So that's the other end of the spectrum.


00:03:13.200 --> 00:03:15.600
That's a really bad situation.


00:03:15.600 --> 00:03:21.680
There's a fine balance that every software application system company has to kind of


00:03:21.680 --> 00:03:27.480
navigate to figure out where along those two crazy extremes, where do they fall and where


00:03:27.480 --> 00:03:32.120
are their kind of risk thresholds of tolerance are?


00:03:32.120 --> 00:03:34.960
Like what would it cost me to add more security?


00:03:34.960 --> 00:03:39.640
Well, I could, you know, lock down all of my users and not allow them in unless they


00:03:39.640 --> 00:03:43.840
come to the front door and show a picture ID, right?


00:03:43.840 --> 00:03:48.080
Like, okay, if that's how we want to secure our building, that's one way to do it, but


00:03:48.080 --> 00:03:51.480
that'll slow down the ingress to our building.


00:03:51.480 --> 00:03:55.840
So we issue our employees badge cards and we assume that they act in good faith and


00:03:55.840 --> 00:03:59.120
they don't kind of lose them and report if they lose them.


00:03:59.120 --> 00:04:00.120
Oh, great.


00:04:00.120 --> 00:04:05.480
So that's kind of a middle ground where you kind of delegate some of the security to the


00:04:05.480 --> 00:04:12.480
individuals and just kind of, you have to figure out where your security is and what


00:04:12.480 --> 00:04:15.840
you're willing to do and sacrifice in order to get it.


00:04:15.840 --> 00:04:17.840
Yeah, I totally agree.


00:04:17.840 --> 00:04:18.840
Wild sidebar.


00:04:18.840 --> 00:04:24.800
I can't believe the internet in its early days was like you described, like no NAT firewalls


00:04:24.800 --> 00:04:29.240
that stop direct access, no passwords.


00:04:29.240 --> 00:04:33.080
We might want to know who you are just so we can assign the files more conveniently


00:04:33.080 --> 00:04:34.440
to you, you know?


00:04:34.440 --> 00:04:35.440
Yeah.


00:04:35.440 --> 00:04:38.920
I hearken back to like the bulletin board days where you would dial up into somebody's


00:04:38.920 --> 00:04:41.800
random computer and you would do stuff in there.


00:04:41.800 --> 00:04:48.040
And I hosted a BBS and I interacted with others and it was like, we were all generally operating


00:04:48.040 --> 00:04:51.800
in good faith because we wanted to kind of play together.


00:04:51.800 --> 00:04:58.400
And not until much later did bad actors saying, you know what, I see how I could take advantage


00:04:58.400 --> 00:05:01.800
of this in a way that suits me and not you.


00:05:01.800 --> 00:05:05.920
To which we started to say, all right, well then how do we control for these things?


00:05:05.920 --> 00:05:11.840
Today that conversation comes into modern systems development of secure by design, right?


00:05:11.840 --> 00:05:15.120
Or a lot of folks will say shift left, right?


00:05:15.120 --> 00:05:20.600
Take security into account much earlier into the life cycle as opposed to, oh, we have


00:05:20.600 --> 00:05:22.660
to tack this on at the end.


00:05:22.660 --> 00:05:29.440
So I think the evolution of the internet was necessary for us to get to here.


00:05:29.440 --> 00:05:34.320
But as we're seeing newer protocols develop, those are taking this more secure by design


00:05:34.320 --> 00:05:35.320
approach.


00:05:35.320 --> 00:05:36.320
Yeah.


00:05:36.320 --> 00:05:37.880
In depth and with layers.


00:05:37.880 --> 00:05:39.360
Were you a trade wars fan?


00:05:39.360 --> 00:05:43.160
Oh man, that's a name I have not heard in a very long time.


00:05:43.160 --> 00:05:44.640
That was a good one though.


00:05:44.640 --> 00:05:45.640
Yeah.


00:05:45.640 --> 00:05:49.240
I was very much a news and mail kind of relay kind of kid.


00:05:49.240 --> 00:05:51.360
Just wanted to see what was going on.


00:05:51.360 --> 00:05:56.920
Got very much involved in like understanding how the pretty good privacy would allow you


00:05:56.920 --> 00:06:02.880
to sign your messages so that way other folks could believe that those were you.


00:06:02.880 --> 00:06:07.120
Kind of like a test to truth and that kind of fell apart because again, these are all


00:06:07.120 --> 00:06:08.120
imperfect systems.


00:06:08.120 --> 00:06:13.520
They were, but it was such a world full of possibilities back in those days.


00:06:13.520 --> 00:06:18.200
I remember even just sending a mail and getting it back through that whole systems of relays


00:06:18.200 --> 00:06:20.060
was mind boggling.


00:06:20.060 --> 00:06:27.720
At the time I was living on top of a mountain in the middle of Israel and having that ability


00:06:27.720 --> 00:06:34.120
to connect with other people who there's no way I was ever going to see this variety of


00:06:34.120 --> 00:06:35.760
people back then.


00:06:35.760 --> 00:06:37.680
Like Oh, this opened the world.


00:06:37.680 --> 00:06:38.680
Right.


00:06:38.680 --> 00:06:39.680
Yeah.


00:06:39.680 --> 00:06:43.180
And that kind of fueled my desire to like, okay, what else can I do with these computers


00:06:43.180 --> 00:06:44.180
with these systems?


00:06:44.180 --> 00:06:46.520
And Oh wait, there's this internet thing.


00:06:46.520 --> 00:06:47.520
All right.


00:06:47.520 --> 00:06:52.040
Well, my mom's going to be ticked off because I'm tying up the phone line for hours and


00:06:52.040 --> 00:06:54.520
like, all right, well, let's just have some fun.


00:06:54.520 --> 00:06:55.520
Yeah.


00:06:55.520 --> 00:06:57.600
That's when call waiting was the nemesis.


00:06:57.600 --> 00:07:03.080
So I bring, I kind of focus on that a little bit because while we're going to talk about


00:07:03.080 --> 00:07:08.920
things that are not necessarily positive or people trying to do negative things to something


00:07:08.920 --> 00:07:12.760
that we all love and has been a very positive thing for the Python ecosystem.


00:07:12.760 --> 00:07:16.680
I do want to point out mostly technology is doing really awesome things for people like


00:07:16.680 --> 00:07:20.260
opening these doors and educating and connecting.


00:07:20.260 --> 00:07:23.640
It's just some of the bad people, they like to connect and bad ways.


00:07:23.640 --> 00:07:27.500
So before we get too far down that let's, let's just have you give people a quick introduction


00:07:27.500 --> 00:07:28.500
about yourself.


00:07:28.500 --> 00:07:29.500
So, so they all know you.


00:07:29.500 --> 00:07:30.500
Hey everyone.


00:07:30.500 --> 00:07:31.500
I'm Mike Fiedler.


00:07:31.500 --> 00:07:36.000
I'm in New York city and that's where I've been living for the last 15 years, I say,


00:07:36.000 --> 00:07:37.000
I think.


00:07:37.000 --> 00:07:42.080
And I've been working in software development systems engineering for over 30 years across


00:07:42.080 --> 00:07:45.800
a couple of continents, variety of different companies.


00:07:45.800 --> 00:07:53.960
And for the past two years, I think, or three, I've been an active contributor to pypi.org.


00:07:53.960 --> 00:07:59.400
Prior to that, I was contributing to a lot of Ruby projects, the chef ecosystem.


00:07:59.400 --> 00:08:04.420
And I've worked at a variety of different companies, both startups and enterprises.


00:08:04.420 --> 00:08:10.360
You may have heard of some like Datadog, Warby Parker, MongoDB, Capital One, just kind of


00:08:10.360 --> 00:08:15.260
like working through different scenarios and learning different industries along the way.


00:08:15.260 --> 00:08:20.740
For the past year, I've been, well, since January, I've been focusing pretty much purely


00:08:20.740 --> 00:08:22.480
on pypi.org.


00:08:22.480 --> 00:08:25.240
You work for the PSF officially or what's the story?


00:08:25.240 --> 00:08:26.240
Yeah.


00:08:26.240 --> 00:08:28.640
As of August, I was hired to come on full-time.


00:08:28.640 --> 00:08:33.760
We thank you to our grants from Amazon web services, AWS, and some other folks that are


00:08:33.760 --> 00:08:38.340
chipping in to fund this pypi safety and security role.


00:08:38.340 --> 00:08:46.040
But the PSF got some funding and I am the first full-time engineer to focus on pypi.org


00:08:46.040 --> 00:08:47.340
as a full-time.


00:08:47.340 --> 00:08:52.660
In the past, you've spoken to some other folks who were contracted out to build out different


00:08:52.660 --> 00:08:56.460
aspects or features, but now I'm a full-time maintainer.


00:08:56.460 --> 00:08:58.420
Yeah, that's really cool.


00:08:58.420 --> 00:09:04.260
You know, the developer in residence at Łukasz Langa is playing, working in that role now.


00:09:04.260 --> 00:09:07.540
I feel like that was the first one of these types of roles, but now there's a couple,


00:09:07.540 --> 00:09:08.540
right?


00:09:08.540 --> 00:09:09.540
Yeah.


00:09:09.540 --> 00:09:13.380
I mean, the PSF is a nonprofit organization, very small staff.


00:09:13.380 --> 00:09:21.140
I think we number a total of 12 and of those 12, I think only about five of us are engineers


00:09:21.140 --> 00:09:23.180
and everything else is volunteer based.


00:09:23.180 --> 00:09:27.700
The first developer in residence program, which is Lukash, has been successful enough


00:09:27.700 --> 00:09:33.900
that we got another organization and grants to fund the security developer in residence,


00:09:33.900 --> 00:09:36.220
which Seth Larson is doing.


00:09:36.220 --> 00:09:41.260
And he is kind of focusing on the wider Python ecosystem as a whole.


00:09:41.260 --> 00:09:47.580
Whereas my role is very much more narrowly focused on PyPI.org and the ecosystem surrounding


00:09:47.580 --> 00:09:49.080
that.


00:09:49.080 --> 00:09:56.860
So that way, you know, we can focus on specific targets around security for the packaging


00:09:56.860 --> 00:09:59.420
world as opposed to the Python core.


00:09:59.420 --> 00:10:00.420
Okay.


00:10:00.420 --> 00:10:04.900
Well, I do believe if you talk to people about why they like Python and especially why they


00:10:04.900 --> 00:10:07.500
stick with Python, the language is good.


00:10:07.500 --> 00:10:14.340
You can do cool stuff with it, but it's pip install, say your name, say the name of your


00:10:14.340 --> 00:10:22.040
useful library that just brings so much and makes it so sticky and useful and productive.


00:10:22.040 --> 00:10:26.980
And so making sure that we have trust and pip install is really important.


00:10:26.980 --> 00:10:33.420
Last year, I think Dustin Ingram came on and talked about some of the stats that he had


00:10:33.420 --> 00:10:38.520
pulled together that speak about like how much PyPI.org is used.


00:10:38.520 --> 00:10:44.260
That doesn't even count for the countless folk out there who are mirroring PyPI packages.


00:10:44.260 --> 00:10:49.420
So that way they can have a local cache, you know, deal with corporate firewalls or whatever


00:10:49.420 --> 00:10:50.840
need, right.


00:10:50.840 --> 00:10:52.300
But it's true.


00:10:52.300 --> 00:10:56.380
There's the very popular request library or the Django project.


00:10:56.380 --> 00:11:01.540
Pip install Django, and you have all the things that you need to start a Django project.


00:11:01.540 --> 00:11:02.620
Right.


00:11:02.620 --> 00:11:08.940
And the speed at which the folks who are kind of working on the tooling like pip or some


00:11:08.940 --> 00:11:15.700
of the other alternatives out there to enable users to get those packages is such a wonderful


00:11:15.700 --> 00:11:18.060
tool in anyone's toolbox.


00:11:18.060 --> 00:11:24.500
But then very often folks figure out, forget that there is an entire kind of package universe


00:11:24.500 --> 00:11:27.100
behind what they just did as a consumer.


00:11:27.100 --> 00:11:28.100
Right.


00:11:28.100 --> 00:11:31.140
So pip install Django is, yeah, I got this thing.


00:11:31.140 --> 00:11:32.140
It installed it.


00:11:32.140 --> 00:11:33.140
Where did it install it from?


00:11:33.140 --> 00:11:34.300
How did it get there?


00:11:34.300 --> 00:11:35.300
Who put it up there?


00:11:35.300 --> 00:11:36.620
Why is it there?


00:11:36.620 --> 00:11:40.480
All of those questions, most people go their entire career with not even having to worry


00:11:40.480 --> 00:11:41.620
about or think about.


00:11:41.620 --> 00:11:43.800
They're just like on the consumer side.


00:11:43.800 --> 00:11:48.700
But then on the producer side or the package maintainer or project maintainer, that's,


00:11:48.700 --> 00:11:52.820
there's a whole other slew of things that one has to worry about.


00:11:52.820 --> 00:11:53.820
Yeah.


00:11:53.820 --> 00:11:55.820
There's some stuff we'll talk about in there, which will be really fun.


00:11:55.820 --> 00:12:01.720
I think also there's the third level of just the people who run IPI and the infrastructure


00:12:01.720 --> 00:12:02.980
and the stats behind it.


00:12:02.980 --> 00:12:06.460
I mean, maybe give us a quick, I kind of started us off down this path.


00:12:06.460 --> 00:12:10.660
Maybe give us a quick statement for those who don't necessarily know what PyPI is, but


00:12:10.660 --> 00:12:14.580
I think more interestingly, maybe try to give us some of the stats about the scale of things


00:12:14.580 --> 00:12:15.580
behind the.


00:12:15.580 --> 00:12:16.580
Sure.


00:12:16.580 --> 00:12:21.100
I mean, I haven't, I haven't computed the, the runtime stats in a little bit, but pypi.org


00:12:21.100 --> 00:12:23.460
stands for the Python package index.


00:12:23.460 --> 00:12:31.140
And it's distinct from other things that have pypy in their name, which is a different runtime.


00:12:31.140 --> 00:12:37.780
But pypi.org is a package index, very much kind of a, a grocery or a, a store where you


00:12:37.780 --> 00:12:42.360
would pick up ingredients for the thing that you want to bake, right?


00:12:42.360 --> 00:12:44.500
If you wanted to bake a cake, you need your ingredients.


00:12:44.500 --> 00:12:46.460
What kind of flour are you going to use?


00:12:46.460 --> 00:12:47.460
What kind of sugar?


00:12:47.460 --> 00:12:48.460
Sure.


00:12:48.460 --> 00:12:49.580
There's different kinds of flour and sugar.


00:12:49.580 --> 00:12:50.740
Which one do you want?


00:12:50.740 --> 00:12:58.060
How do you know you go and find one and where the package index helps is we store kind of


00:12:58.060 --> 00:13:02.460
publish all the different kinds of flour and sugar that you might want that other people


00:13:02.460 --> 00:13:04.440
have spent time developing.


00:13:04.440 --> 00:13:09.140
That doesn't mean that there's only one type of flour, but there's a variety and we just


00:13:09.140 --> 00:13:13.340
make it easy for people to publish their projects.


00:13:13.340 --> 00:13:21.460
And as you've highlighted, there's over 480,000 projects live on PyPI right now and over 4.8


00:13:21.460 --> 00:13:25.200
or almost 4.9 million releases.


00:13:25.200 --> 00:13:27.740
And a release is not a one-to-one to a project.


00:13:27.740 --> 00:13:29.460
A project may have many releases.


00:13:29.460 --> 00:13:35.580
So for instance, if there's the requests library and they publish a new version that comes


00:13:35.580 --> 00:13:37.140
as a release.


00:13:37.140 --> 00:13:42.140
And then beyond that we have files and files map to releases as you could have a source


00:13:42.140 --> 00:13:43.460
distribution.


00:13:43.460 --> 00:13:49.180
So there's like literally the source code of a given release, or you could have compiled


00:13:49.180 --> 00:13:51.740
wheels for different platforms.


00:13:51.740 --> 00:13:56.340
So there's a lot more files than there are releases and there's a lot more releases than


00:13:56.340 --> 00:13:57.940
there are projects.


00:13:57.940 --> 00:14:02.180
And then on the, like the last stat that we show on the front page is the users.


00:14:02.180 --> 00:14:07.400
We do have over 740,000 users on pypi.org.


00:14:07.400 --> 00:14:11.700
That doesn't mean that these are active users, but they have at some point signed up for


00:14:11.700 --> 00:14:13.400
an account on pypi.org.


00:14:13.400 --> 00:14:14.400
That's a huge number.


00:14:14.400 --> 00:14:16.860
And these are not people who might pip install a thing.


00:14:16.860 --> 00:14:22.020
These are people who for some reason or other are interested in potentially creating content


00:14:22.020 --> 00:14:23.620
for others to use.


00:14:23.620 --> 00:14:24.620
Exactly.


00:14:24.620 --> 00:14:30.740
Today, the only way you can publish a project on PyPI is by having a user or, you know,


00:14:30.740 --> 00:14:31.780
it starts with a user.


00:14:31.780 --> 00:14:37.140
There's other ways to publish, but you have to have a user to kind of start the process.


00:14:37.140 --> 00:14:44.020
And a lot of folks have started to kind of get the idea that if this project needs long-term


00:14:44.020 --> 00:14:47.180
maintainership, right, it's not just me.


00:14:47.180 --> 00:14:50.620
Maybe I should ask somebody else to help co-maintain this.


00:14:50.620 --> 00:14:54.820
So it's also not a one-to-one mapping of users to projects or releases or something like


00:14:54.820 --> 00:14:55.820
that.


00:14:55.820 --> 00:14:58.260
For sure.


00:14:58.260 --> 00:15:01.340
This portion of Talk Python to Me is brought to you by Sentry.


00:15:01.340 --> 00:15:03.660
You know Sentry for their error tracking service.


00:15:03.660 --> 00:15:07.540
But did you know you can take that all the way through your multi-tiered and distributed


00:15:07.540 --> 00:15:10.840
app with their distributed tracing feature?


00:15:10.840 --> 00:15:15.520
Distributed tracing is a debugging technique that involves tracking requests of your system


00:15:15.520 --> 00:15:20.120
starting from the very beginning, like a user action, all the way to the back end, database,


00:15:20.120 --> 00:15:21.780
and third-party services.


00:15:21.780 --> 00:15:25.780
This can help you identify if the cause of an error in one project is due to the error


00:15:25.780 --> 00:15:26.980
in another.


00:15:26.980 --> 00:15:32.080
Every system can benefit from distributed tracing, but they're especially useful for microservices.


00:15:32.080 --> 00:15:36.140
In this architecture, logs won't give you the full picture, so you can't debug every


00:15:36.140 --> 00:15:39.120
request in full just by reading the logs.


00:15:39.120 --> 00:15:44.100
Distributed tracing with a platform like Sentry gives you a visual overview about which services


00:15:44.100 --> 00:15:47.060
were called during the execution of certain requests.


00:15:47.060 --> 00:15:51.640
Aside from debugging and visualizing your architecture, distributed tracing also helps


00:15:51.640 --> 00:15:54.120
you identify performance bottlenecks.


00:15:54.120 --> 00:15:58.140
Through a visual like a Gantt chart, you can see if a particular span in your stack took


00:15:58.140 --> 00:16:03.060
longer than expected and how it could be causing slowdowns in other parts of your app.


00:16:03.060 --> 00:16:08.320
Learn more and see some examples in the tracing section at docs.sentry.io to take advantage


00:16:08.320 --> 00:16:10.880
of all the features of the Sentry platform.


00:16:10.880 --> 00:16:12.660
Just create your free account.


00:16:12.660 --> 00:16:17.560
And for all of you Talk Python listeners, use the code TALKPYTHON, all one word, and you'll


00:16:17.560 --> 00:16:21.340
activate a free month of their premium paid features.


00:16:21.340 --> 00:16:25.520
Get started today at talkpython.fm/sentry dash trace.


00:16:25.520 --> 00:16:29.140
That link is in your podcast player show notes and the episode page.


00:16:29.140 --> 00:16:33.940
Thank you to Sentry for supporting Talk Python to me.


00:16:33.940 --> 00:16:39.420
Some of the changes coming, I think, allow for like, almost like a GitHub organization


00:16:39.420 --> 00:16:41.100
within PyPI, right?


00:16:41.100 --> 00:16:44.660
Rather than, well, we're going to create an account and that one account is for all of


00:16:44.660 --> 00:16:49.120
AWS, for example, which is not really the right granularity, probably.


00:16:49.120 --> 00:16:51.700
It definitely isn't, but it historically has been, right?


00:16:51.700 --> 00:16:54.400
Like that is just a feature we had never built.


00:16:54.400 --> 00:17:01.600
It was never a focus, but over the past year or so, I think we got funded to build out


00:17:01.600 --> 00:17:04.780
some of the organizations aspect.


00:17:04.780 --> 00:17:08.920
We have launched the community organizations.


00:17:08.920 --> 00:17:13.680
So that way, if you're running a, an open source project or an ecosystem there, you


00:17:13.680 --> 00:17:17.260
can sign up today and get an organization name.


00:17:17.260 --> 00:17:21.800
We are still working through a long backlog of organizations in order to approve them.


00:17:21.800 --> 00:17:27.900
It still requires a, an admin to do so, but we are still working through some of the complexities


00:17:27.900 --> 00:17:33.340
around corporate organizations when it comes to just as a nonprofit, how can we kind of


00:17:33.340 --> 00:17:36.860
figure out how to support corporations properly?


00:17:36.860 --> 00:17:37.860
Yeah.


00:17:37.860 --> 00:17:42.940
I've always thought that that was something of an opportunity to work with corporations


00:17:42.940 --> 00:17:47.700
more closely on PyPI and indirectly through the PSF.


00:17:47.700 --> 00:17:51.660
Your role exists because of these grants, because connections with certain high profile


00:17:51.660 --> 00:17:54.940
and high consumers of Python tech companies, right?


00:17:54.940 --> 00:17:56.780
Like AWS and others.


00:17:56.780 --> 00:18:02.500
But there's tons of companies that have things that support their product and they're at


00:18:02.500 --> 00:18:08.660
least their developers work with and having a way to make them feel more at home on PyPI


00:18:08.660 --> 00:18:09.660
I think is a good idea.


00:18:09.660 --> 00:18:16.500
Beyond what lots of organizations may do is, you know, have some of their in-house engineers


00:18:16.500 --> 00:18:19.660
contribute to PyPI.org to the warehouse code base.


00:18:19.660 --> 00:18:20.820
It's open source.


00:18:20.820 --> 00:18:22.900
Everything you're looking at is open source.


00:18:22.900 --> 00:18:24.460
That's where I started.


00:18:24.460 --> 00:18:28.060
And it's, that's the easiest way of like, Oh, you want this thing?


00:18:28.060 --> 00:18:29.900
Open an issue, talk about it with us.


00:18:29.900 --> 00:18:33.900
You know, if you want to go ahead and put some effort behind it, we'll welcome that


00:18:33.900 --> 00:18:34.900
too.


00:18:34.900 --> 00:18:41.620
But there is a, a wiki page out there of like packaging fundable improvement projects of


00:18:41.620 --> 00:18:45.740
like, all right, if you're considering throwing some money at the problem, here are some things


00:18:45.740 --> 00:18:48.660
we've thought about and would love your assistance with.


00:18:48.660 --> 00:18:53.220
And that like there's other ways of just like straight up funding a role that can focus


00:18:53.220 --> 00:18:54.540
on a particular thing.


00:18:54.540 --> 00:18:55.540
Excellent.


00:18:55.540 --> 00:18:56.540
All right.


00:18:56.540 --> 00:18:58.860
Let's talk about supply chain issues.


00:18:58.860 --> 00:19:05.580
We were talking before we went live here that probably the biggest side of security or the


00:19:05.580 --> 00:19:10.060
biggest, at least from my perspective, what seems like a very huge opportunity for people


00:19:10.060 --> 00:19:15.700
to do bad things is to just upload malware basically of different ways.


00:19:15.700 --> 00:19:16.700
Right?


00:19:16.700 --> 00:19:20.380
And I don't want to talk about hacking PyPI org itself or other stuff, but I think that


00:19:20.380 --> 00:19:22.460
that's probably quite well covered.


00:19:22.460 --> 00:19:28.820
And it's more about, can I get trick somebody and through various ways of installing something


00:19:28.820 --> 00:19:29.940
that they, they didn't.


00:19:29.940 --> 00:19:33.940
And that generally falls under the supply chain security side of things.


00:19:33.940 --> 00:19:39.580
So I wanted to just point out three examples that just show this is a industry wide problem,


00:19:39.580 --> 00:19:44.220
not necessarily a PyPI problem, but there is a PyPI manifestation of it.


00:19:44.220 --> 00:19:45.220
Right?


00:19:45.220 --> 00:19:46.220
Yeah.


00:19:46.220 --> 00:19:50.420
So just to lay the groundwork for folks who aren't familiar with supply chain attacks,


00:19:50.420 --> 00:19:56.500
the notion is that instead of an attacker trying to get onto your computer, they're


00:19:56.500 --> 00:20:01.100
going to go after something that they have a high probability of knowing is going to


00:20:01.100 --> 00:20:07.100
be on your computer through for the solar winds as kind of an administrative action.


00:20:07.100 --> 00:20:12.780
Well, you know, many, many solar winds were installed on servers, on computers.


00:20:12.780 --> 00:20:16.940
That's part of the supply chain that it's not, I'm not going directly after you.


00:20:16.940 --> 00:20:18.860
I'm going after something you consume.


00:20:18.860 --> 00:20:19.860
Right.


00:20:20.860 --> 00:20:22.860
And it can be very, very meta, right?


00:20:22.860 --> 00:20:26.900
So one of the examples that I would say that that falls under is this thing called Xcode


00:20:26.900 --> 00:20:27.900
ghost.


00:20:27.900 --> 00:20:32.620
And so I believe this was primarily a Chinese problem, basically because in China, there


00:20:32.620 --> 00:20:37.540
were a lot of app store developers who weren't either weren't registered as Apple developers


00:20:37.540 --> 00:20:41.060
or for whatever reason, didn't go, maybe it's just a latency thing.


00:20:41.060 --> 00:20:44.900
Didn't go through the app store to get their Xcode or go through the developer portal.


00:20:44.900 --> 00:20:47.300
They just found like a local mirror.


00:20:47.300 --> 00:20:49.380
What are those local mirrors?


00:20:49.380 --> 00:20:50.380
What could go wrong?


00:20:50.380 --> 00:20:54.220
I just, I'll just get it from, you know, this IP address instead of apple.com.


00:20:54.220 --> 00:20:55.220
Right.


00:20:55.220 --> 00:20:56.220
Yeah.


00:20:56.220 --> 00:21:00.060
So what it did was it was a backdoored version of Xcode.


00:21:00.060 --> 00:21:03.900
So not, they weren't attacking even the things that people were using.


00:21:03.900 --> 00:21:07.120
They said, let's take over the developers tool chain.


00:21:07.120 --> 00:21:10.540
So whatever they happen to be building, we don't know what that is, but we'll install


00:21:10.540 --> 00:21:11.780
a virus into their app.


00:21:11.780 --> 00:21:15.420
That Apple go in the app store, then whoever installs that app, we'll have it right.


00:21:15.420 --> 00:21:17.220
These things get very indirect.


00:21:17.220 --> 00:21:22.260
This is kind of the, the challenge is like nobody until somebody surfaced this as an


00:21:22.260 --> 00:21:24.120
attack, right?


00:21:24.120 --> 00:21:25.780
Nobody thought this was a problem.


00:21:25.780 --> 00:21:30.660
This is kind of earlier to your comment of like, how do you disprove the evidence, the


00:21:30.660 --> 00:21:33.420
existence of, of a, of a problem.


00:21:33.420 --> 00:21:38.580
And a lot of it is just like, all right, we gotta, we gotta think about every aspect that


00:21:38.580 --> 00:21:42.380
goes into producing a given piece of software.


00:21:42.380 --> 00:21:47.740
But like the strongest answer here is don't download random stuff from people on the internet.


00:21:47.740 --> 00:21:48.740
Right.


00:21:48.740 --> 00:21:53.100
Like I'm sure that this one in particular had a good reason for having a local mirror,


00:21:53.100 --> 00:21:57.620
but if you're going to local mirror it, then who is the local mirror and what is there?


00:21:57.620 --> 00:21:58.620
What are they doing?


00:21:58.620 --> 00:21:59.620
Right.


00:21:59.620 --> 00:22:04.080
How, what kind of attestation or assurances do you have that they haven't modified anything


00:22:04.080 --> 00:22:05.420
in the process?


00:22:05.420 --> 00:22:09.920
It's very tricky because I might absolutely trust some company out there that's building


00:22:09.920 --> 00:22:13.300
a very popular, they have 10 million downloads like that.


00:22:13.300 --> 00:22:14.300
Surely that's fine.


00:22:14.300 --> 00:22:18.540
But one of their developers or one of their consultants to one of their developers may


00:22:18.540 --> 00:22:22.180
have, you know, misappropriately gotten their tools.


00:22:22.180 --> 00:22:26.660
And it's very hard from the outside to even know that that could be a problem.


00:22:26.660 --> 00:22:27.660
So these things are tricky.


00:22:27.660 --> 00:22:28.660
Yeah.


00:22:28.660 --> 00:22:34.180
I mean, the good news is that there's a large volume of security companies out there who,


00:22:34.180 --> 00:22:38.820
you know, make their bread and butter by scanning and looking for patterns that looks, you know,


00:22:38.820 --> 00:22:43.780
sneaky, tricky, and they spend a lot of investigative time digging into these.


00:22:43.780 --> 00:22:49.420
We get lots of reports from the, from those types of folk of like, here, this is a new


00:22:49.420 --> 00:22:50.420
package.


00:22:50.420 --> 00:22:52.180
It looks fishy and here's why.


00:22:52.180 --> 00:22:54.020
And then we, we take action on those.


00:22:54.020 --> 00:22:55.020
I hear you.


00:22:55.020 --> 00:22:59.100
Hypo squatting was a big issue for a while.


00:22:59.100 --> 00:23:01.300
That's a form of supply chain attack.


00:23:01.300 --> 00:23:08.140
Like here, this Xcode ghost is we're going to get people to use a fake Xcode or a broken


00:23:08.140 --> 00:23:10.620
bad Xcode with that they think is fine.


00:23:10.620 --> 00:23:11.620
Right.


00:23:11.620 --> 00:23:16.100
Instead of trying to say, take over Django, the package and do some militia to it, try


00:23:16.100 --> 00:23:20.460
to take over Django or, you know, whatever, right.


00:23:20.460 --> 00:23:24.720
Some common misspelling of that and upload that package.


00:23:24.720 --> 00:23:26.340
And you could even embed Django.


00:23:26.340 --> 00:23:27.340
Right.


00:23:27.340 --> 00:23:28.860
And so it still functions.


00:23:29.420 --> 00:23:32.220
I don't remember it being spelled this way, but it's working.


00:23:32.220 --> 00:23:33.500
So it gotta be fine.


00:23:33.500 --> 00:23:34.500
Yeah.


00:23:34.500 --> 00:23:37.020
Typo squatting is, is, is very much a prevalent problem.


00:23:37.020 --> 00:23:38.020
Right.


00:23:38.020 --> 00:23:40.740
And because like, I can't prevent you from making a typo.


00:23:40.740 --> 00:23:44.700
Like I literally can't, if you type in Django, that's it game over.


00:23:44.700 --> 00:23:45.700
Right.


00:23:45.700 --> 00:23:50.180
What I can do is look or receive reports that Django exists.


00:23:50.180 --> 00:23:52.460
It looks malware and let's just take that down.


00:23:52.460 --> 00:23:53.460
Let's not do that.


00:23:53.460 --> 00:23:54.460
Right.


00:23:54.460 --> 00:23:55.460
Yeah.


00:23:55.460 --> 00:23:59.900
And I was going to say when it comes to type of, oh, you talked about typo scouting and,


00:23:59.900 --> 00:24:06.660
and I was reminded of a, of, of an article I remember reading around DNS record bit flipping


00:24:06.660 --> 00:24:14.140
where some computers, some browsers would not properly process a given bit in a memory


00:24:14.140 --> 00:24:17.040
register for a DNS record.


00:24:17.040 --> 00:24:22.980
So this author figured out what those bit flips would be for popular DNS names, registered


00:24:22.980 --> 00:24:27.740
those DNS names and started just harvesting traffic and said, you know what, this is not


00:24:27.740 --> 00:24:28.740
anything you can do.


00:24:28.740 --> 00:24:31.180
This is just how browsers and memory work.


00:24:31.180 --> 00:24:33.660
And that was, I don't know, about six, seven years ago.


00:24:33.660 --> 00:24:36.700
And I believe it's been fixed since, but it was like, yeah, there's sometimes there's


00:24:36.700 --> 00:24:39.900
just not anything that you did wrong.


00:24:39.900 --> 00:24:46.860
It's the ecosystem you're in is doing things in a way that you don't expect for something


00:24:46.860 --> 00:24:49.600
as nefarious as, as like DNS bit flipping.


00:24:49.600 --> 00:24:56.220
Like this is where like having outbound firewalls can help a whole lot to say, don't allow traffic


00:24:56.220 --> 00:24:59.160
that I didn't initiate in some manner.


00:24:59.160 --> 00:25:03.600
And if I did have, I have, I initiated the traffic to this address before.


00:25:03.600 --> 00:25:07.880
Do you remember zone alarm from the early two thousands?


00:25:07.880 --> 00:25:08.880
Yes.


00:25:08.880 --> 00:25:14.520
So this is before this is, this harkens back to a slightly less naive version of, I can't


00:25:14.520 --> 00:25:18.240
believe there was no passwords on the accounts, just on the open internet.


00:25:18.240 --> 00:25:22.180
But windows 95, 98, there were no firewalls.


00:25:22.180 --> 00:25:29.020
And I, I was at a company that was based inside of a university where we all got ethernet


00:25:29.020 --> 00:25:34.700
and every computer that plugged in, got its own IP address and all sorts of crazy stuff,


00:25:34.700 --> 00:25:36.580
but there were no firewalls.


00:25:36.580 --> 00:25:40.120
And I remember when that thing came out, I thought, you know what, maybe I'm just gonna


00:25:40.120 --> 00:25:41.960
go around and put this on all the dev machines.


00:25:41.960 --> 00:25:46.880
Like it's kind of insane that we have this incredibly insecure software just on the open


00:25:46.880 --> 00:25:47.880
internet.


00:25:47.880 --> 00:25:52.600
And so I did in all the, when I started, it used to say, do you want to let such and such


00:25:52.600 --> 00:25:53.800
thing act as a server?


00:25:53.800 --> 00:25:58.000
Do you want to let IIS or, you know, NGINX or this type of thing.


00:25:58.000 --> 00:25:59.640
Sure, that can be a server.


00:25:59.640 --> 00:26:03.520
Then the next pop-up was, do you want to let notepad.exe be a server?


00:26:03.520 --> 00:26:06.800
I'm like, huh, that's not probably what it should be doing.


00:26:06.800 --> 00:26:07.800
Yeah.


00:26:07.800 --> 00:26:08.800
That doesn't sound right.


00:26:09.800 --> 00:26:10.800
I said, no.


00:26:10.800 --> 00:26:15.240
And then the next one, and the next one, the whole companies and notepad.exe were being


00:26:15.240 --> 00:26:17.680
servers and I'm like, this can't be good.


00:26:17.680 --> 00:26:20.640
And it turned out they had, something had infected it.


00:26:20.640 --> 00:26:24.040
And until I put on one of those outbound firewalls, how do you know?


00:26:24.040 --> 00:26:25.040
Right.


00:26:25.040 --> 00:26:27.640
No one knew there was no indication we had, you know, super fast internet.


00:26:27.640 --> 00:26:29.240
It wasn't like it was dragging it down.


00:26:29.240 --> 00:26:31.120
I don't even remember what it was doing, but it was bad.


00:26:31.120 --> 00:26:35.480
The number one thing that I think we can learn from all of those things is that awareness


00:26:35.480 --> 00:26:42.220
is the biggest part of security, because if folks aren't aware that downloading something


00:26:42.220 --> 00:26:45.840
from the internet could be a danger, then they're just going to download it and run


00:26:45.840 --> 00:26:46.840
it.


00:26:46.840 --> 00:26:53.640
If somebody who had a previously version of, you know, software working on their machine


00:26:53.640 --> 00:26:56.420
suddenly pop up and say, this has been modified.


00:26:56.420 --> 00:26:58.380
Are you sure you want to open it?


00:26:58.380 --> 00:27:01.480
So many of us just click okay, without reading the dialogue.


00:27:01.480 --> 00:27:06.620
It's like, well, wait, think about that for just a second, because you are the biggest


00:27:06.620 --> 00:27:12.300
kind of enabler and disabler of security, the human behind the keyboard, because you


00:27:12.300 --> 00:27:17.760
probably have some administrative rights on your computer that allows you to do some stuff.


00:27:17.760 --> 00:27:23.600
And in the example with Notepad EXE, I think today, if we were to try to do that on some


00:27:23.600 --> 00:27:30.780
popular developer environment like VS Code, VS Code does act as a server in a lot of cases.


00:27:30.780 --> 00:27:34.820
So it's like, I don't know, should this work as an inbound server or not?


00:27:34.820 --> 00:27:35.820
I don't know.


00:27:35.820 --> 00:27:40.340
Maybe it's just part of the local language server that I need for autocomplete.


00:27:40.340 --> 00:27:41.660
Or maybe it's not.


00:27:41.660 --> 00:27:43.940
It's getting more subtle every day.


00:27:43.940 --> 00:27:45.560
It is absolutely getting more subtle.


00:27:45.560 --> 00:27:49.700
Even Zoom had like a local loopback web server thing, I think for a while.


00:27:49.700 --> 00:27:53.700
So before we move off of this typo squatting part of the conversation, out in the audience,


00:27:53.700 --> 00:27:56.140
we've got a pretty decent question here.


00:27:56.140 --> 00:28:00.260
What's the possibility of something like a verified badge for popular packages?


00:28:00.260 --> 00:28:02.220
I mean, if Twitter can charge $8 a month.


00:28:02.220 --> 00:28:03.220
No, I'm just kidding.


00:28:03.220 --> 00:28:07.580
I don't think they're called Twitter anymore.


00:28:07.580 --> 00:28:11.100
But the artist formerly known as Twitter.


00:28:11.100 --> 00:28:14.500
The challenge there is what does verified mean?


00:28:14.500 --> 00:28:19.540
This is something that we kind of introduced some features later on that we'll talk about.


00:28:19.540 --> 00:28:22.540
But this notion of verified is like, well, verified by whom?


00:28:22.540 --> 00:28:24.580
Where does the level of trust?


00:28:24.580 --> 00:28:28.940
Because if a supply chain attack happens for Django, so if you were to like search Django


00:28:28.940 --> 00:28:36.740
here in PyPI.org and we get Django, all right, we've got Django, the second line Django 425.


00:28:36.740 --> 00:28:39.060
And if we were to enter there, like, how do we know?


00:28:39.060 --> 00:28:40.100
This is a thing, right?


00:28:40.100 --> 00:28:44.860
So I could add a badge here, but that doesn't give me any confidence that any of the Django


00:28:44.860 --> 00:28:49.420
folk, which are great people, that one of them didn't get compromised and suddenly a


00:28:49.420 --> 00:28:51.260
new version was pushed.


00:28:51.260 --> 00:28:56.760
So verified, I guess it's what does that mean to whom and why?


00:28:56.760 --> 00:29:01.900
Because the last thing I want to do is tell people, give them a false sense of security


00:29:01.900 --> 00:29:05.300
when honestly you're downloading software from the internet.


00:29:05.300 --> 00:29:10.620
If you don't have a process to vet what it is you're doing is doing the thing, then you


00:29:10.620 --> 00:29:15.940
should probably look at that aspect of a, we vetted this version of Django.


00:29:15.940 --> 00:29:19.860
We got these hashes, we got these releases, we pin this dependency.


00:29:19.860 --> 00:29:21.380
We're happy with this.


00:29:21.380 --> 00:29:25.540
And then when you upgrade, you kind of do a similar evaluation.


00:29:25.540 --> 00:29:31.260
There's a bunch of projects out there like PyUp and safety and others that will publish,


00:29:31.260 --> 00:29:32.860
you know, and scan for advisories.


00:29:32.860 --> 00:29:40.100
There's also the PyPA advisory database for packages that we know have some problems with


00:29:40.100 --> 00:29:41.100
them.


00:29:41.100 --> 00:29:45.220
So that way you can use other tools to audit what you have installed to see if you have


00:29:45.220 --> 00:29:47.060
something smelly.


00:29:47.060 --> 00:29:53.360
But we are thinking about what it would look like to add a, this release and these files


00:29:53.360 --> 00:29:59.020
of a given project have been published under, you know, stringent, you know, more secure


00:29:59.020 --> 00:30:00.020
methods.


00:30:00.020 --> 00:30:01.020
Yeah.


00:30:01.020 --> 00:30:06.700
I certainly see that a verified wouldn't prove that the Django devs hadn't, you know, somebody


00:30:06.700 --> 00:30:12.860
could have taken over their computer and swapped out like twine or poetry or whatever they're


00:30:12.860 --> 00:30:17.420
using to upload the package and do exactly what they did with Xcode Ghost basically.


00:30:17.420 --> 00:30:18.420
Right.


00:30:18.420 --> 00:30:19.500
Something equivalent to that.


00:30:19.500 --> 00:30:23.640
So the last part we want to do is like, we don't want to give people a false sense of


00:30:23.640 --> 00:30:27.360
security and say, well, PyPI told me this was okay.


00:30:27.360 --> 00:30:31.980
And then they find out it wasn't because then that looks really bad for us.


00:30:31.980 --> 00:30:38.480
But on the flip side, we are looking at how do we provide mechanisms and measures to publishers


00:30:38.480 --> 00:30:46.980
to reduce the potential for the situations that you described to happen.


00:30:46.980 --> 00:30:52.440
This portion of talk Python to me is brought to you by us over at Talk Python Training.


00:30:52.440 --> 00:30:55.800
Let me tell you about one of our really popular courses.


00:30:55.800 --> 00:31:00.240
HTMX plus flask modern Python web apps hold the JavaScript.


00:31:00.240 --> 00:31:04.080
HTMX is one of the hottest properties in web development today.


00:31:04.080 --> 00:31:08.140
And for good reason, you might even remember all the stuff we talked about with Carson


00:31:08.140 --> 00:31:10.240
Gross back on episode 321.


00:31:10.240 --> 00:31:14.760
HTMX along with the libraries and techniques we introduced in our new course, will have


00:31:14.760 --> 00:31:19.680
you writing the best Python web apps you've ever written clean, fast and interactive all


00:31:19.680 --> 00:31:21.560
without that front end overhead.


00:31:21.560 --> 00:31:25.600
If you're a Python web developer that has wanted to build more dynamic interactive apps,


00:31:25.600 --> 00:31:30.640
but don't want to or can't write a significant portion of your app in rich front end JavaScript


00:31:30.640 --> 00:31:34.440
frameworks, you'll absolutely love HTMX.


00:31:34.440 --> 00:31:38.800
Check it out over at talkpython.fm/ HTMX or just click the link in your podcast


00:31:38.800 --> 00:31:39.800
player show notes.


00:31:39.800 --> 00:31:46.400
All right, let me throw some ideas out to you and tell me what I think.


00:31:46.400 --> 00:31:50.800
So as I think about this, especially when the very first news a couple years ago, I


00:31:50.800 --> 00:31:55.040
can't remember exactly the timeframe, but not very long ago, the first malicious PyPI


00:31:55.040 --> 00:32:01.440
package, you know, NPM had been getting whacked on for a while because JavaScript yellow.


00:32:01.440 --> 00:32:05.280
But you know, when it came to PyPI, I was like, okay, this seems to be a little more


00:32:05.280 --> 00:32:06.960
serious and more pervasive.


00:32:06.960 --> 00:32:13.680
And they were often typo squatting type of issues, or people would introduce some package


00:32:13.680 --> 00:32:14.960
and say, here's a cool thing.


00:32:14.960 --> 00:32:15.960
You should check it out.


00:32:15.960 --> 00:32:17.680
And it's really a virus or one of those types of things.


00:32:17.680 --> 00:32:21.920
And so one of my thoughts, one of the metrics I would have liked, or maybe in the future


00:32:21.920 --> 00:32:31.000
will like to apply to my local Python environment is don't let me install packages that are


00:32:31.000 --> 00:32:36.360
too new, or don't let me install install packages that have too few downloads.


00:32:36.360 --> 00:32:40.560
And like, give me a mechanism to say that, like, I don't want to ever say pip install


00:32:40.560 --> 00:32:44.120
something and that something has not existed on PyPI for less than a week.


00:32:44.120 --> 00:32:46.960
I don't ever want to be able to say pip install something.


00:32:46.960 --> 00:32:52.120
And that thing has less than a thousand or 10,000, whatever downloads unless, and they


00:32:52.120 --> 00:32:53.680
could say, Nope, you can't install that.


00:32:53.680 --> 00:32:54.680
It breaks your rules.


00:32:54.680 --> 00:32:56.800
You could say, okay, no, I actually uploaded this.


00:32:56.800 --> 00:33:01.200
I really need to, you know, you could do like a pip install of force --force, or


00:33:01.200 --> 00:33:02.600
you know, some kind of override.


00:33:02.600 --> 00:33:06.520
But by default, if I could just say, you know, it has to have at least 5,000 downloads, or


00:33:06.520 --> 00:33:07.520
I just don't want it.


00:33:07.520 --> 00:33:10.960
I feel like at that point, somebody would have discovered, Oh, you know what is actually


00:33:10.960 --> 00:33:15.520
using a hundred percent CPU usage and crypto mining or whatever it happens to be doing.


00:33:15.520 --> 00:33:18.360
I don't want to be the first Guinea pig in the world to discover this.


00:33:18.360 --> 00:33:19.920
What do you think about this idea?


00:33:19.920 --> 00:33:22.480
The download count one is always an interesting one, right?


00:33:22.480 --> 00:33:24.680
It's a topic that comes up a lot.


00:33:24.680 --> 00:33:30.800
And like, I can tell you personally from experience that writing a little loop to increase download


00:33:30.800 --> 00:33:32.360
counts is super easy.


00:33:32.360 --> 00:33:33.360
Interesting.


00:33:33.360 --> 00:33:34.360
Okay.


00:33:34.360 --> 00:33:39.480
Like write a wild true pip install something and like you'll drive up download counts


00:33:39.480 --> 00:33:41.920
that will be meaningless in the grand scheme of things.


00:33:41.920 --> 00:33:45.720
So you could say, well, maybe make it like, it's got to have, you know, a thousand distinct


00:33:45.720 --> 00:33:49.160
IP addresses, but then, you know, if you own a botnet, then you're good to go.


00:33:49.160 --> 00:33:50.160
Okay.


00:33:50.160 --> 00:33:51.160
Fair.


00:33:51.160 --> 00:33:54.320
This becomes the, like the cat and mouse game of like, all right, well, what is something


00:33:54.320 --> 00:33:55.640
that is good?


00:33:55.640 --> 00:34:02.280
Today we have a mechanism where we don't advertise new packages that have been there for, I think


00:34:02.280 --> 00:34:05.640
under a week to any kind of crawlers.


00:34:05.640 --> 00:34:07.680
So any search engine crawlers.


00:34:07.680 --> 00:34:14.400
So if you were going to like Google for Python, Django, and it was a brand new package, you


00:34:14.400 --> 00:34:18.640
wouldn't find it via Google because we wouldn't advertise that for indexing yet.


00:34:18.640 --> 00:34:19.640
Right.


00:34:19.640 --> 00:34:21.500
But after a week, like we do.


00:34:21.500 --> 00:34:27.960
So that's one method that we have for preventing some of these like newer packages from getting


00:34:27.960 --> 00:34:32.440
widespread visibility because they, you know, everything is a webpage.


00:34:32.440 --> 00:34:34.740
They are all subject to search engine optimization.


00:34:34.740 --> 00:34:40.700
Somebody could craft their readme to, you know, be the best hit on Google and therefore


00:34:40.700 --> 00:34:41.700
they'll show up first.


00:34:41.700 --> 00:34:44.400
And with all this crazy AI stuff, it's only getting easier.


00:34:44.400 --> 00:34:50.600
Hey ChatGPT, I would like to create a page that is like the Django PyPI page, but I want


00:34:50.600 --> 00:34:52.380
it to rank highly for this.


00:34:52.380 --> 00:34:57.680
Something that we are talking about internally of like, how do we put packages that are brand


00:34:57.680 --> 00:35:02.560
new, either from some heuristic of a brand new user or a brand new version, or differs


00:35:02.560 --> 00:35:07.720
enough from the previous versions and kind of put those in kind of a holding or a time


00:35:07.720 --> 00:35:13.800
out zone to let our security research partners who are really excellent at like just listening


00:35:13.800 --> 00:35:19.960
to the package feeds and going after and just running all their analysis on them to give


00:35:19.960 --> 00:35:21.160
them first crack.


00:35:21.160 --> 00:35:22.160
Right.


00:35:22.160 --> 00:35:25.760
And then when they see, okay, out of these hundred thousand packages that were published


00:35:25.760 --> 00:35:31.000
in the last 24 hours, 1% need to be addressed or reviewed by a human.


00:35:31.000 --> 00:35:36.320
They can raise those red flags and then we can kind of apply the administrative action


00:35:36.320 --> 00:35:42.920
that is necessary in order to keep the users from getting too much of the bad stuff on


00:35:42.920 --> 00:35:43.920
their computers.


00:35:43.920 --> 00:35:49.120
What about some kind of whitelist or a check back to like sneak or one of these other companies


00:35:49.120 --> 00:35:52.040
that you kind of referenced there just a moment ago?


00:35:52.040 --> 00:35:54.320
Having like published allow lists, right?


00:35:54.320 --> 00:35:59.720
These are very prevalent in large corporations that have very strong security policies and


00:35:59.720 --> 00:36:05.280
they have teams of folks that will maintain internal mirrors of a package index.


00:36:05.280 --> 00:36:11.880
So they will disallow any pip install of anything unless you're using their package index.


00:36:11.880 --> 00:36:19.640
And I think that is another tool in the security toolbox to have people who are that like security


00:36:19.640 --> 00:36:25.560
focused to say, we will only allow in the things that we have already tested to be true.


00:36:25.560 --> 00:36:30.320
We vetted them and those kind of match our heuristics.


00:36:30.320 --> 00:36:35.560
If you scroll down a little bit on the Django page, almost every sidebar to every one of


00:36:35.560 --> 00:36:38.040
these has these statistics.


00:36:38.040 --> 00:36:42.680
This particular one shows GitHub statistics because this package has a GitHub URL, but


00:36:42.680 --> 00:36:47.080
there's also libraries.io, which is not affiliated with pypi.org.


00:36:47.080 --> 00:36:52.760
They're just a really great service and you can search for packages of any shape, kind


00:36:52.760 --> 00:36:57.480
of any ecosystem, but they have a really good kind of ranking system.


00:36:57.480 --> 00:37:01.840
Again, if it works for you, the crux of it, don't install garbage off the internet, right?


00:37:01.840 --> 00:37:03.220
Check out what you're doing.


00:37:03.220 --> 00:37:07.520
But by using something like libraries, which I don't know why that didn't load.


00:37:07.520 --> 00:37:08.520
Probably was just getting a virus.


00:37:08.520 --> 00:37:09.520
I probably misspelled it.


00:37:09.520 --> 00:37:10.520
Oh yeah.


00:37:10.520 --> 00:37:11.520
Just kidding.


00:37:11.520 --> 00:37:17.680
But they offer a nice set of stats around a given package.


00:37:17.680 --> 00:37:21.600
So you can try and be a little bit more informed on your own.


00:37:21.600 --> 00:37:29.120
The challenge there remains that nothing is going to tell you on libraries.io or PyPI


00:37:29.120 --> 00:37:33.200
if somebody has uploaded malicious software and this is a bad one.


00:37:33.200 --> 00:37:35.840
The best we can do is once we know about it, we handle it.


00:37:35.840 --> 00:37:36.840
Yeah.


00:37:36.840 --> 00:37:39.540
I feel like PyPI has been pretty on top of it.


00:37:39.540 --> 00:37:40.540
We try.


00:37:40.540 --> 00:37:45.480
I published a blog earlier today where I pulled together a lot of analytics and stats from


00:37:45.480 --> 00:37:50.620
our inbound malware reporters and it's looking pretty good.


00:37:50.620 --> 00:37:55.320
We handle over 80% of inbound reports in under 60 minutes.


00:37:55.320 --> 00:38:01.560
I go into the article about the whys and wherefores, the timeliness matters and the response time


00:38:01.560 --> 00:38:08.140
because the longer something is out there, the worse it can contagion to other folks.


00:38:08.140 --> 00:38:12.900
So we try and do as quick as possible, often under like five to 10 minutes, but we also


00:38:12.900 --> 00:38:18.020
have to do some investigation and kind of like confirm that the report is accurate.


00:38:18.020 --> 00:38:19.780
We don't want false positives.


00:38:19.780 --> 00:38:22.960
Most of our researchers don't give us false positives.


00:38:22.960 --> 00:38:27.440
So shout out to all those folk, but it's hard and time consuming.


00:38:27.440 --> 00:38:33.200
I remember one of the more recent IPI supply chain issues where somebody uploaded something


00:38:33.200 --> 00:38:40.400
bad was attributed to all these different ATP and hacking groups have cutesy names like


00:38:40.400 --> 00:38:43.560
the solar winds was by something bear.


00:38:43.560 --> 00:38:44.560
Hold on.


00:38:44.560 --> 00:38:45.560
Which bear?


00:38:45.560 --> 00:38:46.560
Cozy bear.


00:38:46.560 --> 00:38:49.880
That's the kind of bear it was, which is really Russia state actor hacking.


00:38:49.880 --> 00:38:50.880
Right.


00:38:50.880 --> 00:38:53.720
And one of the PyPI ones was North Korea.


00:38:53.720 --> 00:38:59.240
I think they were doing crypto mining on computers, which seems like a real big waste of I have


00:38:59.240 --> 00:39:01.280
access to the server in a bank.


00:39:01.280 --> 00:39:03.160
But anyway, it works for them.


00:39:03.160 --> 00:39:07.720
It works for them, you know, like, but the reason I bring this up is like, it's you all


00:39:07.720 --> 00:39:13.840
have a serious challenge in that if you're up against state actors from a security perspective,


00:39:13.840 --> 00:39:18.480
like that's not just script kiddies or some weird automation or, you know, like those


00:39:18.480 --> 00:39:21.320
are you guys got to be on top of the top of your game.


00:39:21.320 --> 00:39:22.320
Right.


00:39:22.320 --> 00:39:28.520
This is again, where I think relying on our ecosystem of security partners is so important


00:39:28.520 --> 00:39:33.640
because they will corroborate intelligence that they've garnered from other ecosystems


00:39:33.640 --> 00:39:37.880
that are beyond PyPI and be able to identify these kinds of actors.


00:39:37.880 --> 00:39:42.080
Me, I see kind of just a slice of what the universe has.


00:39:42.080 --> 00:39:47.620
They're going to see a different slice, but broader in spectrum and not necessarily as


00:39:47.620 --> 00:39:50.320
focused on one particular ecosystem.


00:39:50.320 --> 00:39:56.400
So working together, we can kind of do the best that we can for all the users out there.


00:39:56.400 --> 00:39:57.400
Excellent.


00:39:57.400 --> 00:40:02.000
So let's talk about hypo squatting, which is serious, but also kind of the silliest,


00:40:02.000 --> 00:40:08.000
kind of not that big of a deal because recommendations could be like, you know, actually use a requirements


00:40:08.000 --> 00:40:12.840
management system rather than just every time you create a new environment, just type pip


00:40:12.840 --> 00:40:14.320
install X, Y, and Z.


00:40:14.320 --> 00:40:19.800
Like the chances you might fat finger that versus pip install dash R requirements, TXT


00:40:19.800 --> 00:40:22.680
or, you know, poet something with poetry or whatever.


00:40:22.680 --> 00:40:23.680
Right.


00:40:23.680 --> 00:40:25.760
So that helps a lot, although it's not perfect.


00:40:25.760 --> 00:40:28.800
The other one is more the Xcode go style.


00:40:28.800 --> 00:40:34.160
Like what if somebody were to take over one of the other systems and you all had over


00:40:34.160 --> 00:40:39.580
here, you have a new two factor requirement or high PI.


00:40:39.580 --> 00:40:40.580
You want to talk about that?


00:40:40.580 --> 00:40:41.660
Yeah, absolutely.


00:40:41.660 --> 00:40:48.800
This also was covered on an earlier podcast of talk Python where I think in 2022, we had


00:40:48.800 --> 00:40:56.200
announced that we were starting to ratchet down the amount of potential.


00:40:56.200 --> 00:40:57.200
I think you got the wrong link there.


00:40:57.200 --> 00:40:58.920
I do have the wrong link.


00:40:58.920 --> 00:41:00.400
Keep going.


00:41:00.400 --> 00:41:02.240
It's Dustin, Dustin Ingrams.


00:41:02.240 --> 00:41:03.240
Yes, exactly.


00:41:03.240 --> 00:41:04.240
I thought I pulled it up.


00:41:04.240 --> 00:41:05.240
I put the other one twice.


00:41:05.240 --> 00:41:06.240
There we go.


00:41:06.240 --> 00:41:11.880
The 2FA story is largely, again, we talked about there's about 740,000 users, right?


00:41:11.880 --> 00:41:15.040
These are the publishers of packages, right?


00:41:15.040 --> 00:41:19.000
So if in our use case, we talked about Django devs, right?


00:41:19.000 --> 00:41:20.320
And I'm sorry to pick on Django.


00:41:20.320 --> 00:41:21.880
They're just the one that's up there.


00:41:21.880 --> 00:41:27.480
But if one of the Django devs was using a classic problem, which is an email expiry


00:41:27.480 --> 00:41:29.620
or a domain expiry attack.


00:41:29.620 --> 00:41:36.240
So let's say I'm a Django admin maintainer and I use MikeDemand.com as my email address,


00:41:36.240 --> 00:41:37.240
right?


00:41:37.240 --> 00:41:38.240
And that's great.


00:41:38.240 --> 00:41:39.720
Because we don't want to ever, we don't use Gmail.


00:41:39.720 --> 00:41:43.520
We don't want to use or, you know, the dot me or Outlook.


00:41:43.520 --> 00:41:45.320
I'm a good citizen of the internet.


00:41:45.320 --> 00:41:46.320
So I got my own domain.


00:41:46.320 --> 00:41:47.320
Yeah.


00:41:47.320 --> 00:41:48.320
I just haven't been paying attention.


00:41:48.320 --> 00:41:49.320
Right.


00:41:49.320 --> 00:41:50.320
I haven't been paying attention this year.


00:41:50.320 --> 00:41:51.320
Right.


00:41:51.320 --> 00:41:52.960
And then let's say I let it expire.


00:41:52.960 --> 00:41:53.960
Whoops.


00:41:53.960 --> 00:41:54.960
You know, like that happens.


00:41:54.960 --> 00:41:56.360
People forget to pay their bills.


00:41:56.360 --> 00:41:58.240
Or your credit card gets stolen and canceled.


00:41:58.240 --> 00:42:00.000
You forget to renew it there.


00:42:00.000 --> 00:42:01.520
And then the other thing goes to spam.


00:42:01.520 --> 00:42:04.560
Like it could actually be super easy that that happens.


00:42:04.560 --> 00:42:05.800
And it happens all the time, right?


00:42:05.800 --> 00:42:09.600
Like people, there are numerous domains that I've registered over the year that I was like,


00:42:09.600 --> 00:42:11.520
yeah, I don't need that anymore.


00:42:11.520 --> 00:42:15.720
Obviously I have never used anything from that domain to sign up for anything securely


00:42:15.720 --> 00:42:16.720
that's there.


00:42:16.720 --> 00:42:22.200
But then someone else can come along and register mikedemand.com, set up an email server, request


00:42:22.200 --> 00:42:24.920
a password reset, get that email.


00:42:24.920 --> 00:42:28.680
And now they can do anything I could have done before.


00:42:28.680 --> 00:42:32.680
With 2FA, that entire set of problems goes away.


00:42:32.680 --> 00:42:34.400
And we're not even talking about like phishing.


00:42:34.400 --> 00:42:39.000
If somebody fishes my password or if they use the same, if I made the mistake and use


00:42:39.000 --> 00:42:43.720
the same password on two websites and one website stored it in securely, and they pop


00:42:43.720 --> 00:42:48.280
that in a breach and you know, now they have my username and password.


00:42:48.280 --> 00:42:49.280
2FA just solves.


00:42:49.280 --> 00:42:51.800
Do you discourage that using the same username and password?


00:42:51.800 --> 00:42:53.320
I absolutely discourage that.


00:42:53.320 --> 00:42:55.440
I find it very inconvenient to have a separate password.


00:42:55.440 --> 00:42:59.120
I just use the letter A. Yeah, that's a choice, right?


00:42:59.120 --> 00:43:00.600
It's a bad choice.


00:43:00.600 --> 00:43:07.640
No, like the amount of tooling out there today, both free and paid for password management


00:43:07.640 --> 00:43:10.080
is just so pervasive.


00:43:10.080 --> 00:43:12.680
It's almost like irresponsible to not use one.


00:43:12.680 --> 00:43:13.680
I 100% agree.


00:43:13.680 --> 00:43:15.280
Yeah, I was one password.


00:43:15.280 --> 00:43:20.280
I think I don't know if it'll tell me how many I have in here, but I think it's coming


00:43:20.280 --> 00:43:28.320
up on like 1500 and not quite just just under 1000 different distinct passwords and accounts.


00:43:28.320 --> 00:43:30.520
But you know, a lot of people don't want to pay for it.


00:43:30.520 --> 00:43:31.520
Bitwarden.


00:43:31.520 --> 00:43:32.520
Bitwarden is fantastic.


00:43:32.520 --> 00:43:33.520
It's open source.


00:43:33.520 --> 00:43:35.560
I don't know if you got a recommendation, but you're right.


00:43:35.560 --> 00:43:36.560
It's irresponsible.


00:43:36.560 --> 00:43:38.160
I mean, I'm a one password fan.


00:43:38.160 --> 00:43:39.320
It's just a great tool.


00:43:39.320 --> 00:43:45.340
I used it back when when it was like a single thing and I used it as a as a organization


00:43:45.340 --> 00:43:46.680
account, right?


00:43:46.680 --> 00:43:52.160
Like I was an admin for our org and like managing that lifecycle was pretty sweet.


00:43:52.160 --> 00:43:54.240
And then it's like, OK, we have this as an organization.


00:43:54.240 --> 00:43:55.640
We have over 400 employees.


00:43:55.640 --> 00:43:57.760
Why doesn't everyone have this right now?


00:43:57.760 --> 00:44:00.880
So you know, it became a good rollout.


00:44:00.880 --> 00:44:08.520
But having a second factor, a two FBA or multifactor MFA, I think, is this notion of something


00:44:08.520 --> 00:44:10.680
you have versus something, you know.


00:44:10.680 --> 00:44:15.880
So let's say that even by using a password manager, you don't know that password anymore,


00:44:15.880 --> 00:44:16.880
right?


00:44:16.880 --> 00:44:18.240
You don't remember it, but let's say you do.


00:44:18.240 --> 00:44:19.240
Right.


00:44:19.240 --> 00:44:21.440
Like let's say somebody gets your entire vault of passwords.


00:44:21.440 --> 00:44:28.640
They still don't have this second factor, which is often a time based one time password


00:44:28.640 --> 00:44:35.440
or web authentication device, which could be a hardware device or a browser fingerprint.


00:44:35.440 --> 00:44:36.600
Like they don't have that.


00:44:36.600 --> 00:44:37.600
Right.


00:44:37.600 --> 00:44:42.220
It's a defense in depth kind of problem that is solving where it's like you need you need


00:44:42.220 --> 00:44:45.980
to have two things in order to get through this door.


00:44:45.980 --> 00:44:49.360
And if you only have one, that's not good enough.


00:44:49.360 --> 00:44:57.020
And using that capability and having that ability on PyPI user management has enabled


00:44:57.020 --> 00:45:03.760
us to roll out a higher grade of security for the packages and maintainers of those


00:45:03.760 --> 00:45:10.520
packages by attesting that, well, we know that this maintainer or this publisher of


00:45:10.520 --> 00:45:14.720
this package has already secured themselves.


00:45:14.720 --> 00:45:17.680
So against these kinds of attacks.


00:45:17.680 --> 00:45:20.480
Yeah, I can just hear the voices.


00:45:20.480 --> 00:45:22.840
In fact, they don't come through an audio form.


00:45:22.840 --> 00:45:26.640
They come in email like, you know, on that last episode.


00:45:26.640 --> 00:45:29.620
Sometimes they come through on the artist formerly known as Twitter.


00:45:29.620 --> 00:45:31.200
Sometimes they come through an email.


00:45:31.200 --> 00:45:35.840
But like, you know, Michael, you said that two factor will help you realize you don't


00:45:35.840 --> 00:45:38.520
seem to realize I'm saying I realize so I don't get this email.


00:45:38.520 --> 00:45:41.080
Please don't email me that this doesn't stop phishing.


00:45:41.080 --> 00:45:42.320
Like people could still fish you.


00:45:42.320 --> 00:45:46.560
You go and they could ask you your name and password and they'll ask for your time based


00:45:46.560 --> 00:45:48.560
authentication and then they're in.


00:45:48.560 --> 00:45:49.900
Yes, that's true.


00:45:49.900 --> 00:45:54.600
But it stops some things and stopping some things rather than going, well, it's not good


00:45:54.600 --> 00:45:55.600
enough.


00:45:55.600 --> 00:46:00.200
That is certainly not not a responsible way.


00:46:00.200 --> 00:46:01.200
Way to go.


00:46:01.200 --> 00:46:04.960
I think it's kind of like making the argument that if nothing is perfect, don't do anything


00:46:04.960 --> 00:46:05.960
else.


00:46:05.960 --> 00:46:06.960
Exactly right.


00:46:06.960 --> 00:46:07.960
That's a fallacy.


00:46:07.960 --> 00:46:09.600
If you're going to die, don't get out of bed.


00:46:09.600 --> 00:46:10.600
Right.


00:46:10.600 --> 00:46:13.920
Like, no, like we get out of bed, we go to work, we do our things right.


00:46:13.920 --> 00:46:15.640
We ultimately as sad as it is right.


00:46:15.640 --> 00:46:17.720
We have an end date.


00:46:17.720 --> 00:46:19.600
We hopefully don't know what that is.


00:46:19.600 --> 00:46:22.140
But like, do the best you can while you can.


00:46:22.140 --> 00:46:26.020
That's where I come to from like, this is the best we know.


00:46:26.020 --> 00:46:27.020
Yes.


00:46:27.020 --> 00:46:30.180
Will there be something new and exciting tomorrow that is even better?


00:46:30.180 --> 00:46:31.180
Maybe.


00:46:31.180 --> 00:46:35.700
But until then, let's do the thing that we know to be the best that we can do right now.


00:46:35.700 --> 00:46:36.700
Right.


00:46:36.700 --> 00:46:37.700
Maybe PASCYs will be awesome.


00:46:37.700 --> 00:46:38.700
I don't know about that.


00:46:38.700 --> 00:46:39.700
Yeah.


00:46:39.700 --> 00:46:43.660
But for example, you know, from a phishing perspective, things like 1Password and Bitwarden


00:46:43.660 --> 00:46:49.220
have plugins for your browsers and they will suggest to autofill on the right domains.


00:46:49.220 --> 00:46:56.060
But if you're on pypi.io, is it a pi.org or, you know, whatever, right.


00:46:56.060 --> 00:47:00.660
If they're on some kind of phishing domain, they will not suggest to autofill.


00:47:00.660 --> 00:47:01.660
Right.


00:47:01.660 --> 00:47:04.620
If you find yourself going to your password manager and going, God, why does this not


00:47:04.620 --> 00:47:05.620
work?


00:47:05.620 --> 00:47:06.620
Like, let me just copy this over.


00:47:06.620 --> 00:47:12.700
Stop, figure out why it's not working really, really, really well before you somehow subvert


00:47:12.700 --> 00:47:15.500
this broken extension that won't autofill.


00:47:15.500 --> 00:47:16.500
Right.


00:47:16.500 --> 00:47:21.900
There are ways to limit phishing through these mechanisms, even if they're not perfect.


00:47:21.900 --> 00:47:22.900
Exactly.


00:47:22.900 --> 00:47:26.340
I think I said this before, but like, I'll reiterate it.


00:47:26.340 --> 00:47:29.820
You the human are the best defender.


00:47:29.820 --> 00:47:31.340
Use your logic, use your sense.


00:47:31.340 --> 00:47:34.320
Like don't just click at things mindlessly.


00:47:34.320 --> 00:47:37.700
Take a moment, take a look, see that error message.


00:47:37.700 --> 00:47:38.700
That looks weird.


00:47:38.700 --> 00:47:39.980
Why does that look weird?


00:47:39.980 --> 00:47:42.580
The domain I'm on looks a little odd.


00:47:42.580 --> 00:47:45.780
The little browser lock symbol isn't locked.


00:47:45.780 --> 00:47:46.780
Why is that?


00:47:46.780 --> 00:47:47.780
Hmm.


00:47:47.780 --> 00:47:48.780
Take a moment.


00:47:48.780 --> 00:47:49.780
Notepad.exe once stacked at the server.


00:47:49.780 --> 00:47:50.780
Yes, I want to load it.


00:47:50.780 --> 00:47:51.780
Come on.


00:47:51.780 --> 00:47:52.780
Yes, let it.


00:47:52.780 --> 00:47:53.780
I got it.


00:47:53.780 --> 00:47:54.780
Yeah.


00:47:54.780 --> 00:48:01.780
The reason that I think the news around the 2FA for PyPI.org is not that it exists, but


00:48:01.780 --> 00:48:03.100
that it's required now.


00:48:03.100 --> 00:48:05.500
I think that's what's different since I spoke with Dustin.


00:48:05.500 --> 00:48:11.180
We've been on a path and as you've got this blog post open, we've been on a path of like


00:48:11.180 --> 00:48:12.420
starting with the carrot.


00:48:12.420 --> 00:48:18.900
We want to provide as many people in the packaging ecosystem, all the incentive, all the time,


00:48:18.900 --> 00:48:25.420
all the kind of expectation that they could have in order to set this up voluntarily.


00:48:25.420 --> 00:48:32.220
There was even a wonderful giveaway of hardware security keys that Google sponsored, which


00:48:32.220 --> 00:48:33.500
is excellent.


00:48:33.500 --> 00:48:35.440
That doesn't mean you need a physical security key.


00:48:35.440 --> 00:48:36.440
You can use them.


00:48:36.440 --> 00:48:40.740
You can use software security keys, Google Authenticator or any other tool.


00:48:40.740 --> 00:48:50.460
Duo Labs has a nice one, but anything in order to kind of move the bar on this 2FA engagement.


00:48:50.460 --> 00:48:56.140
We've seen some decent adoption and it's like, okay, well now let's set a timeline.


00:48:56.140 --> 00:49:00.620
This post by Donald kind of starts the clock on that.


00:49:00.620 --> 00:49:06.180
We are basically drawing a line in the sand that's saying at the end of 2023, if you want


00:49:06.180 --> 00:49:11.260
to publish a new package, like that's it, you need to have 2FA.


00:49:11.260 --> 00:49:17.700
We've started on that process by requiring 2FA for new users.


00:49:17.700 --> 00:49:21.140
So if you registered today, you need to set up 2FA.


00:49:21.140 --> 00:49:25.900
Like if you've been around for a while and you don't have it yet, we'll still allow you


00:49:25.900 --> 00:49:29.460
to upload, but we'll send you a notice that's saying, here's what's going to happen at the


00:49:29.460 --> 00:49:30.940
end of this year.


00:49:30.940 --> 00:49:37.340
And we've slowly been kind of ratcheting down the areas at which 2FA is not required with


00:49:37.340 --> 00:49:45.380
the intent on basically January, December 31st, January 1st, 2024, enabling the requirement


00:49:45.380 --> 00:49:46.980
on all accounts.


00:49:46.980 --> 00:49:53.380
So that way we can kind of walk away from the problem of, well, I guess one of the Django


00:49:53.380 --> 00:49:57.500
maintainers got phished and that's why we had a big issue in the ecosystem.


00:49:57.500 --> 00:49:59.660
Like I don't want that to be the problem.


00:49:59.660 --> 00:50:02.060
But again, apologies to Django, y'all are awesome.


00:50:02.060 --> 00:50:05.380
It's because they're so popular and loved that you pick on them, I can tell.


00:50:05.380 --> 00:50:06.380
Yes.


00:50:06.380 --> 00:50:12.740
Again, this doesn't completely solve all phishing attempts, but it certainly is another layer


00:50:12.740 --> 00:50:13.740
of defense.


00:50:13.740 --> 00:50:15.860
So I think it's certainly worth doing.


00:50:15.860 --> 00:50:18.860
Now there was a bit of a pushback.


00:50:18.860 --> 00:50:22.940
I think somebody even like rage quit their package temporarily and then said, oh no,


00:50:22.940 --> 00:50:27.480
I want it back on PyPI when this came out as if it was a big deal.


00:50:27.480 --> 00:50:31.100
And this is, you know, this blog post was from May.


00:50:31.100 --> 00:50:33.620
The deadline is end of 2023.


00:50:33.620 --> 00:50:37.420
In between those two times, GitHub just comes out and goes, everyone gets 2FA right now.


00:50:37.420 --> 00:50:38.420
I don't care.


00:50:38.420 --> 00:50:39.420
Right.


00:50:39.420 --> 00:50:44.980
And it's such a broader, more impactful thing in terms of the many people use Python who


00:50:44.980 --> 00:50:49.620
are not creating packages, but almost everyone who uses Python is also in some way using


00:50:49.620 --> 00:50:50.620
GitHub.


00:50:50.620 --> 00:50:53.820
And so it just touches so much more of the ecosystem and people are like, oh, okay.


00:50:53.820 --> 00:50:56.980
I don't know why there was so much blowback in one and not the other.


00:50:56.980 --> 00:51:00.200
But it's an odd thing, right?


00:51:00.200 --> 00:51:05.820
Because on the one hand, PyPI or the index itself, right, has been around for about 20


00:51:05.820 --> 00:51:06.820
years.


00:51:06.820 --> 00:51:13.500
This is a long lived concept in the Python ecosystem of having a place where people can


00:51:13.500 --> 00:51:20.700
publish software freely, no charge, and others can install that software.


00:51:20.700 --> 00:51:24.940
This requirement is a shift, right?


00:51:24.940 --> 00:51:27.820
And a lot of folks are like, well, what else is going to happen?


00:51:27.820 --> 00:51:29.940
It's like, well, probably nothing, right?


00:51:29.940 --> 00:51:35.980
I don't see us talking about other requirements or enforcements unless they're necessary.


00:51:35.980 --> 00:51:38.340
Again, I can't predict the future.


00:51:38.340 --> 00:51:44.740
And if somebody says that like pass keys are the best way and TOTP is broken and proves


00:51:44.740 --> 00:51:50.160
it, and the industry wide decides, oh, wow, this is not a good idea.


00:51:50.160 --> 00:51:51.540
Let's do this other thing.


00:51:51.540 --> 00:51:53.060
Then maybe we'll do that.


00:51:53.060 --> 00:51:56.860
But until then, this is the best we've got.


00:51:56.860 --> 00:52:05.300
The requirement for 2FA is even on the OWASP top 10 list of why you should be doing this.


00:52:05.300 --> 00:52:11.100
And it's like, this is what governments use, companies use, and auditors use to say, we


00:52:11.100 --> 00:52:13.780
are adhering to the best practices.


00:52:13.780 --> 00:52:18.740
Because if you had a security vulnerability reported to your company because you weren't


00:52:18.740 --> 00:52:21.540
using 2FA, auditors will say, well, why not?


00:52:21.540 --> 00:52:23.040
It's in the top 10 list.


00:52:23.040 --> 00:52:26.020
It's like the SQL injection of yesteryear.


00:52:26.020 --> 00:52:27.020
Yeah.


00:52:27.020 --> 00:52:29.980
Just like, just do this, right?


00:52:29.980 --> 00:52:31.820
Just solve this class of problem.


00:52:31.820 --> 00:52:33.100
You will have other problems.


00:52:33.100 --> 00:52:38.340
We all have problems, but solve the ones that we know are relatively easy to solve.


00:52:38.340 --> 00:52:39.340
Good advice.


00:52:39.340 --> 00:52:45.220
I feel like, you know, when the two factor software problem, like that's not good enough,


00:52:45.220 --> 00:52:47.580
you know, these YubiKeys and stuff are too tricky.


00:52:47.580 --> 00:52:49.500
We're just going to go back to SMS.


00:52:49.500 --> 00:52:51.700
Like that's, that's where it's.


00:52:51.700 --> 00:52:54.180
I cannot believe that my bank will let me use 2FA.


00:52:54.180 --> 00:52:56.860
They forced me to use SMS.


00:52:56.860 --> 00:52:58.620
You might want to check out for different banks.


00:52:58.620 --> 00:53:01.540
Well, it's like one of the top four banks in the U.S.


00:53:01.540 --> 00:53:02.540
It's nuts.


00:53:02.540 --> 00:53:07.020
They also have limits on the length, not lower bounds, upper bounds on the length of the


00:53:07.020 --> 00:53:08.020
password.


00:53:08.020 --> 00:53:13.340
My, that, that, that I understand why, right?


00:53:13.340 --> 00:53:14.340
Upper bounds.


00:53:14.340 --> 00:53:18.140
I understand why, but it usually boils down to like database design and like the cost


00:53:18.140 --> 00:53:19.580
of doing a database migration.


00:53:19.580 --> 00:53:21.980
I hear like, I think it's like 12 or something.


00:53:21.980 --> 00:53:22.980
It's very short.


00:53:22.980 --> 00:53:23.980
Oh, that's short.


00:53:23.980 --> 00:53:24.980
That's way too short.


00:53:24.980 --> 00:53:25.980
But here's the thing.


00:53:25.980 --> 00:53:28.100
Do you know, it doesn't matter if you have one letter or a hundred letters, the hash


00:53:28.100 --> 00:53:29.660
is still the same length.


00:53:29.660 --> 00:53:30.660
Depending on how you're hashing it.


00:53:30.660 --> 00:53:31.660
Yeah.


00:53:32.660 --> 00:53:33.660
But they will not be stored.


00:53:33.660 --> 00:53:35.740
Like if they're not storing the hash, it makes me extra nervous.


00:53:35.740 --> 00:53:36.740
Anyway, onward.


00:53:36.740 --> 00:53:41.740
I'm glad they got the SMS 2FA backing it up.


00:53:41.740 --> 00:53:42.740
Yeah.


00:53:42.740 --> 00:53:46.220
Another thing that I, that I, that I do want to kind of plug on the, the, like the security


00:53:46.220 --> 00:53:51.180
spectrum and kind of to address the question around like verifiable releases is something


00:53:51.180 --> 00:53:55.100
that we launched earlier this year, which is called trusted publishers.


00:53:55.100 --> 00:53:56.100
That's right.


00:53:56.100 --> 00:54:02.700
That's alluded to or linked to in the there we go on our docs.pypi.org of what it is.


00:54:02.700 --> 00:54:04.700
Links in the show notes, people can check it out.


00:54:04.700 --> 00:54:08.640
Where we leverage an open standard called OpenID Connect.


00:54:08.640 --> 00:54:14.860
And today we only implement this with one publishing tool called you know, GitHub actions


00:54:14.860 --> 00:54:22.980
where the service GitHub actions is now delegated to be a trusted publisher for your project.


00:54:22.980 --> 00:54:25.700
When you set this up, you have to opt into this completely.


00:54:25.700 --> 00:54:30.560
We didn't do this for you, but you can now opt in to say GitHub actions is allowed to


00:54:30.560 --> 00:54:32.460
publish my project.


00:54:32.460 --> 00:54:34.740
And then you can say, you know what?


00:54:34.740 --> 00:54:37.480
None of my humans are allowed to publish the project.


00:54:37.480 --> 00:54:42.340
The computer that is getting a short lived token for like five minutes or 10 minutes,


00:54:42.340 --> 00:54:46.900
whatever it is, is allowed to publish this package and no one else's.


00:54:46.900 --> 00:54:54.060
And that's how we can start to build the levels of attestation and kind of the software supply


00:54:54.060 --> 00:54:57.820
chain security to say, I know where the source code is.


00:54:57.820 --> 00:55:00.380
I know the source code that built it.


00:55:00.380 --> 00:55:02.220
I know the builder who built it.


00:55:02.220 --> 00:55:08.180
I know the builder who published it and no one else tampered with it in the interim.


00:55:08.180 --> 00:55:13.300
We're not there to like prove that nobody else tampered, but we are there to say, I


00:55:13.300 --> 00:55:19.860
can now delegate authority to GitHub, GitHub actions to perform this release for me as


00:55:19.860 --> 00:55:25.980
opposed to me creating a token in PyPI and giving that token to GitHub actions.


00:55:25.980 --> 00:55:26.980
That's how we did it before.


00:55:26.980 --> 00:55:27.980
Right.


00:55:27.980 --> 00:55:33.020
A long lived permanent token that you put in plain text somewhere, right?


00:55:33.020 --> 00:55:34.020
What could go wrong?


00:55:34.020 --> 00:55:37.860
I mean, usually like an environment variable or a secrets and GitHub actions, they have


00:55:37.860 --> 00:55:42.340
pretty good ways of securing data, but again, it's long lived.


00:55:42.340 --> 00:55:46.860
So if anything ever happened over there, if anybody dumped a debug log that they shouldn't


00:55:46.860 --> 00:55:48.940
have, that token could be there.


00:55:48.940 --> 00:55:56.060
So by using a trusted publisher flow, you can now have your GitHub actions deployed


00:55:56.060 --> 00:56:03.420
directly to pypi.org once the artifact is complete and not have to do that token management.


00:56:03.420 --> 00:56:05.420
So we're getting short on time, Mike.


00:56:05.420 --> 00:56:10.580
What else do you want people to know about what you all in particular, what you're doing


00:56:10.580 --> 00:56:14.340
at PyPI and some of the initiatives and maybe how they can help?


00:56:14.340 --> 00:56:19.420
The top of mind for me right now is the malware reporting project that we're engaged in.


00:56:19.420 --> 00:56:24.380
And that's kind of linked to at the very bottom of my blog from today, the inbound malware


00:56:24.380 --> 00:56:30.820
reporting blog, where we are looking to establish what a kind of machine readable protocol would


00:56:30.820 --> 00:56:33.900
be to interact with security researchers.


00:56:33.900 --> 00:56:37.940
A few of them have chimed in already on what they think of, and we're just kind of building


00:56:37.940 --> 00:56:41.420
the conversation around what it would look like to report.


00:56:41.420 --> 00:56:43.060
How do you like to report?


00:56:43.060 --> 00:56:49.400
And then we'll proceed with whatever guidance we get there and kind of build out the payloads


00:56:49.400 --> 00:56:54.980
and stuff like that all the way at the bottom, very bottom, all the way at the bottom.


00:56:54.980 --> 00:57:00.260
And once we have this format in place, we're going to be building out like the infrastructure


00:57:00.260 --> 00:57:05.700
and ecosystem in order to submit those payloads and then figure out how to kind of put packages


00:57:05.700 --> 00:57:09.100
in timeout while these payloads are being investigated.


00:57:09.100 --> 00:57:15.900
So that way we can continue to provide a secure ecosystem for all users of pypi.org.


00:57:15.900 --> 00:57:16.900
I think that's great.


00:57:16.900 --> 00:57:21.820
I certainly, you know, these companies that are checking out and just monitoring the flow


00:57:21.820 --> 00:57:25.220
of packages and scanning them, that's a huge service.


00:57:25.220 --> 00:57:30.020
Is there, there probably is, never will be like a bug bounty equivalent.


00:57:30.020 --> 00:57:31.020
Is there?


00:57:31.020 --> 00:57:32.360
I mean, never say never, but.


00:57:32.360 --> 00:57:33.420
Never say never.


00:57:33.420 --> 00:57:38.420
From that perspective, it becomes a bit of a challenge because then you could start funneling


00:57:38.420 --> 00:57:43.900
money through a bug bounty program because we are offering an ability for people to create


00:57:43.900 --> 00:57:50.020
packages and then saying, we're giving you a monetary incentive to report them to us.


00:57:50.020 --> 00:57:54.060
So it's like, well, now we've given you a pipeline for money.


00:57:54.060 --> 00:57:57.860
There's a whole shadow industry of like, you first create it, then you get it popular,


00:57:57.860 --> 00:57:58.860
then you report it.


00:57:58.860 --> 00:57:59.860
Yeah, yeah, yeah.


00:57:59.860 --> 00:58:00.860
No, I hear you.


00:58:00.860 --> 00:58:01.860
Yeah.


00:58:01.860 --> 00:58:04.660
But you know, no, no ideas too farfetched.


00:58:04.660 --> 00:58:09.820
We like talking about ideas and figuring out what, what makes sense and kind of, again,


00:58:09.820 --> 00:58:14.020
with a lot of security work is like, okay, well, how can this go wrong?


00:58:14.020 --> 00:58:15.020
How can this fail?


00:58:15.020 --> 00:58:16.020
Right.


00:58:16.020 --> 00:58:17.020
How can it be gamed?


00:58:17.020 --> 00:58:18.020
Yeah, absolutely.


00:58:18.020 --> 00:58:23.260
Well, I, for one, feel better that you're putting all your time and energy into focusing


00:58:23.260 --> 00:58:27.380
on these problems and seeing how we can make PyPI better for everyone.


00:58:27.380 --> 00:58:31.740
Almost everyone, not for everyone, but for 99.9% of us, for most people, just want to


00:58:31.740 --> 00:58:34.740
use it in a solid way to build Python software.


00:58:34.740 --> 00:58:37.260
That's kind of why I was drawn to it, right?


00:58:37.260 --> 00:58:43.740
Like to contributing to it is such a foundational piece of modern day infrastructure that it's


00:58:43.740 --> 00:58:50.940
important that it be safe, secure, convenient, useful to anybody who wants to use it because


00:58:50.940 --> 00:58:57.300
Python itself is such a ubiquitous language across the planet and beyond that, you know,


00:58:57.300 --> 00:58:59.140
we want to make it the right thing.


00:58:59.140 --> 00:59:00.140
Yeah.


00:59:00.140 --> 00:59:02.060
Surprisingly, every time you say that statement, it's more true.


00:59:02.060 --> 00:59:06.260
Like that just, that graph continues to go up and in surprising ways.


00:59:06.260 --> 00:59:07.260
All right.


00:59:07.260 --> 00:59:12.740
Before you get out of here, I'll ask you one of the final questions, a notable PyPI package,


00:59:12.740 --> 00:59:16.140
not malware ridden, but a good, useful one.


00:59:16.140 --> 00:59:17.140
What do you recommend?


00:59:17.140 --> 00:59:18.340
Anything you come across that's awesome lately?


00:59:18.340 --> 00:59:22.860
I'm a huge fan of pytest and I know that, you know, your big pals with Brian Okken,


00:59:22.860 --> 00:59:29.100
hey Brian, who talks a lot about testing and pytest plugins are a wonderful extension to


00:59:29.100 --> 00:59:30.100
pytest.


00:59:30.100 --> 00:59:31.100
Yes.


00:59:31.100 --> 00:59:36.560
And there's so many of them out there and there's even like an awesome pytest aggregator


00:59:36.560 --> 00:59:37.560
of these.


00:59:37.560 --> 00:59:41.380
And I think I have one on here, which is called pytest Socket.


00:59:41.380 --> 00:59:42.380
Nice.


00:59:42.380 --> 00:59:44.420
Which I maintain till today.


00:59:44.420 --> 00:59:48.140
But the one that I want to point out is one that I recently learned about, which is called


00:59:48.140 --> 00:59:49.140
ICDiff.


00:59:49.140 --> 00:59:52.220
I, the letter C, diff.


00:59:52.220 --> 00:59:53.860
I don't even know if it's on this.


00:59:53.860 --> 00:59:54.860
It's the letter C.


00:59:54.860 --> 00:59:55.860
I gotcha.


00:59:55.860 --> 00:59:56.860
Yeah, there it is.


00:59:56.860 --> 01:00:02.580
So that's not the pytest package, but there's an extension pytest ICDiff.


01:00:02.580 --> 01:00:03.580
We'll get there.


01:00:03.580 --> 01:00:04.780
So this uses that other one.


01:00:04.780 --> 01:00:10.300
But the notion here is a lot of times you get big pytest output if you're comparing,


01:00:10.300 --> 01:00:14.420
you know, dictionaries, lists or stuff that has lots of data.


01:00:14.420 --> 01:00:21.100
Sometimes detecting the difference is very hard in the terminal and the pytest ICDiff


01:00:21.100 --> 01:00:26.420
extension will help highlight a lot of these with colors, with spacing, which makes finding


01:00:26.420 --> 01:00:28.220
the problem much easier.


01:00:28.220 --> 01:00:29.220
Yeah.


01:00:29.220 --> 01:00:30.500
That seems super helpful right there.


01:00:30.500 --> 01:00:35.300
And it does a partial character by character diff and line by line diff with different


01:00:35.300 --> 01:00:36.300
colors.


01:00:36.300 --> 01:00:37.300
Yeah.


01:00:37.300 --> 01:00:38.300
And the here's what we expected.


01:00:38.300 --> 01:00:39.300
Here's what you got.


01:00:39.300 --> 01:00:40.300
Yeah.


01:00:40.300 --> 01:00:44.420
So I'm learning that there's even more madness to the pretty print.


01:00:44.420 --> 01:00:51.100
So it could say from pprint import pprint, but there's also apparently a pprint pp with


01:00:51.100 --> 01:00:52.100
ppi.


01:00:52.100 --> 01:00:53.100
Okay.


01:00:53.100 --> 01:00:54.100
Yeah.


01:00:54.100 --> 01:00:55.100
I don't know.


01:00:55.100 --> 01:00:56.100
That's more things to explore.


01:00:56.100 --> 01:00:59.220
It's always, it's going to be in one of those 400,000 packages on PyPI.


01:00:59.220 --> 01:01:00.220
Right.


01:01:00.220 --> 01:01:01.220
It's got to be there.


01:01:02.220 --> 01:01:03.220
And it might be a little different.


01:01:03.220 --> 01:01:08.980
It might be just enough different to meet this use case that is, you know, perfect.


01:01:08.980 --> 01:01:09.980
Yeah.


01:01:09.980 --> 01:01:14.380
So pprint plus plus that's what the PP is like CPP up there.


01:01:14.380 --> 01:01:15.380
Okay.


01:01:15.380 --> 01:01:16.380
Got it.


01:01:16.380 --> 01:01:17.380
Notepad plus plus dot exe.


01:01:17.380 --> 01:01:19.020
It wants to act as a server.


01:01:19.020 --> 01:01:20.020
All right.


01:01:20.020 --> 01:01:21.020
Let's leave it with that.


01:01:21.020 --> 01:01:24.260
I guess a final thing, people are excited to hear about this.


01:01:24.260 --> 01:01:25.260
They want to get engaged.


01:01:25.260 --> 01:01:26.900
You know, they have ideas.


01:01:26.900 --> 01:01:27.900
They want to reach out to you.


01:01:27.900 --> 01:01:28.900
What do you say?


01:01:28.900 --> 01:01:33.740
Open an issue for us on, you know, the warehouse repository, if it's relevant to the warehouse


01:01:33.740 --> 01:01:34.740
code base.


01:01:34.740 --> 01:01:38.260
If you need to reach me directly, I'm on GitHub as Mike the man.


01:01:38.260 --> 01:01:42.820
I'm on a mastodon as Mike the man at hackyderm.io.


01:01:42.820 --> 01:01:47.660
Or if all of that fails, go ahead and email me at Mike at python.org.


01:01:47.660 --> 01:01:48.660
Awesome.


01:01:48.660 --> 01:01:49.660
Thank you so much.


01:01:49.660 --> 01:01:52.380
Thanks for being on the show and giving us a status report here.


01:01:52.380 --> 01:01:53.380
Absolutely.


01:01:53.380 --> 01:01:55.260
Thanks for having me, Michael.


01:01:55.260 --> 01:01:58.460
This has been another episode of talk Python to me.


01:01:58.460 --> 01:01:59.460
Thank you to our sponsors.


01:01:59.460 --> 01:02:01.180
Be sure to check out what they're offering.


01:02:01.180 --> 01:02:03.820
It really helps support the show.


01:02:03.820 --> 01:02:05.580
Take some stress out of your life.


01:02:05.580 --> 01:02:10.320
Get notified immediately about errors and performance issues in your web or mobile applications


01:02:10.320 --> 01:02:11.620
with Sentry.


01:02:11.620 --> 01:02:16.460
Just visit talkpython.fm/Sentry and get started for free.


01:02:16.460 --> 01:02:19.900
Be sure to use the promo code talk Python, all one word.


01:02:19.900 --> 01:02:22.100
Want to level up your Python?


01:02:22.100 --> 01:02:26.180
We have one of the largest catalogs of Python video courses over at talk Python.


01:02:26.180 --> 01:02:31.280
Our content ranges from true beginners to deeply advanced topics like memory and async.


01:02:31.280 --> 01:02:33.980
And best of all, there's not a subscription in sight.


01:02:33.980 --> 01:02:37.100
Check it out for yourself at training.talkpython.fm.


01:02:37.100 --> 01:02:38.860
Be sure to subscribe to the show.


01:02:38.860 --> 01:02:41.740
Open your favorite podcast app and search for Python.


01:02:41.740 --> 01:02:43.100
We should be right at the top.


01:02:43.100 --> 01:02:48.060
You can also find the iTunes feed at /itunes, the Google Play feed at /play


01:02:48.060 --> 01:02:52.700
and the direct RSS feed at /rss on talkpython.fm.


01:02:52.700 --> 01:02:55.220
We're live streaming most of our recordings these days.


01:02:55.220 --> 01:02:58.820
If you want to be part of the show and have your comments featured on the air, be sure


01:02:58.820 --> 01:03:03.740
to subscribe to our YouTube channel at talkpython.fm/youtube.


01:03:03.740 --> 01:03:05.020
This is your host, Michael Kennedy.


01:03:05.020 --> 01:03:06.180
Thanks so much for listening.


01:03:06.180 --> 01:03:07.420
I really appreciate it.


01:03:07.420 --> 01:03:09.140
Now get out there and write some Python code.


01:03:10.140 --> 01:03:11.140
Bye.


01:03:16.140 --> 01:03:21.140
Thank you for watching.


01:03:21.140 --> 01:03:29.140
Please subscribe to my channel.


01:03:29.140 --> 01:03:31.200
you

