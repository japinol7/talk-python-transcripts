WEBVTT

00:00:00.000 --> 00:00:04.720
In recent years, there's been a lot of experimenting with how we work with dependencies and external


00:00:04.720 --> 00:00:07.280
libraries for our Python code.


00:00:07.280 --> 00:00:14.680
There's pip, piptools, poetry, pdm, pyenv, pipenv, hatch, and other workflows.


00:00:14.680 --> 00:00:22.160
We dove into this deeply back on episode 406, reimagining Python's packaging workflow with


00:00:22.160 --> 00:00:23.360
a panel.


00:00:23.360 --> 00:00:27.380
And this time, we're back with Ofek Lev to take a deeper look at hatch.


00:00:27.380 --> 00:00:34.380
This is Talk Python to Me, episode 408, recorded March 1st, 2023.


00:00:34.380 --> 00:00:49.660
Welcome to Talk Python to Me, a weekly podcast on Python.


00:00:49.660 --> 00:00:51.500
This is your host, Michael Kennedy.


00:00:51.500 --> 00:00:56.420
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython,


00:00:56.420 --> 00:00:58.660
both on fosstodon.org.


00:00:58.660 --> 00:01:01.300
Be careful with impersonating accounts on other instances.


00:01:01.300 --> 00:01:02.500
There are many.


00:01:02.500 --> 00:01:04.620
Keep up with the show and listen to over seven years


00:01:04.620 --> 00:01:08.000
of past episodes at talkpython.fm.


00:01:08.000 --> 00:01:11.500
We've started streaming most of our episodes live on YouTube.


00:01:11.500 --> 00:01:12.700
Subscribe to our YouTube channel


00:01:12.700 --> 00:01:15.100
over at talkpython.fm/youtube


00:01:15.100 --> 00:01:17.300
to get notified about upcoming shows


00:01:17.300 --> 00:01:18.940
and be part of that episode.


00:01:18.940 --> 00:01:21.660
This episode is sponsored by


00:01:21.660 --> 00:01:23.840
Microsoft for Startups Founders Hub.


00:01:23.840 --> 00:01:27.360
check them out at talkpython.fm/foundershub


00:01:27.360 --> 00:01:29.800
to get early support for your startup.


00:01:29.800 --> 00:01:32.080
And it's brought to you by Sentry.


00:01:32.080 --> 00:01:34.120
Don't let those errors go unnoticed.


00:01:34.120 --> 00:01:35.160
Use Sentry.


00:01:35.160 --> 00:01:38.600
Get started at talkpython.fm/sentry.


00:01:38.600 --> 00:01:40.920
Ovech, welcome to Talk Python to Me.


00:01:40.920 --> 00:01:42.040
- Thank you, good to be here.


00:01:42.040 --> 00:01:43.080
- It's been a long time,


00:01:43.080 --> 00:01:45.040
at least a week since you've been on the show.


00:01:45.040 --> 00:01:46.280
(Ovech laughs)


00:01:46.280 --> 00:01:47.520
- Yep, just about a week.


00:01:47.520 --> 00:01:48.360
- Welcome back.


00:01:48.360 --> 00:01:52.460
In that appearance, it was a big panel of many of us


00:01:52.460 --> 00:01:54.300
talking about Python packaging.


00:01:54.300 --> 00:01:58.020
And you're the author of Hatch and Hatchling


00:01:58.020 --> 00:02:01.760
and a really interesting take on that tooling story.


00:02:01.760 --> 00:02:03.060
So I thought it'd be fun to go ahead


00:02:03.060 --> 00:02:06.780
and just dive into that in particular for this episode


00:02:06.780 --> 00:02:07.860
and get your thoughts on it.


00:02:07.860 --> 00:02:09.540
So I'm looking forward to talking about Hatch.


00:02:09.540 --> 00:02:10.420
- Yeah, sounds fun.


00:02:10.420 --> 00:02:11.660
- Yeah, it will be fun.


00:02:11.660 --> 00:02:13.100
Before we get into it though,


00:02:13.100 --> 00:02:15.340
a lot of people maybe don't know you out there.


00:02:15.340 --> 00:02:16.340
What's your background?


00:02:16.340 --> 00:02:18.120
How did you get into programming in Python?


00:02:18.120 --> 00:02:19.180
Those sorts of things.


00:02:19.180 --> 00:02:20.020
Let us know.


00:02:20.020 --> 00:02:24.460
I guess originally, this was like maybe 15 years ago now,


00:02:24.460 --> 00:02:27.620
I was just automating stuff that I was doing every day.


00:02:27.620 --> 00:02:30.220
So for me personally, I have a condition


00:02:30.220 --> 00:02:31.740
that makes me kind of weak,


00:02:31.740 --> 00:02:34.560
so all I can use is like a mouse.


00:02:34.560 --> 00:02:36.340
Therefore, I type pretty slow.


00:02:36.340 --> 00:02:40.260
So I was auto-completing like sentences,


00:02:40.260 --> 00:02:43.020
templating for like sending emails,


00:02:43.020 --> 00:02:45.820
basically like the traditional developer mindset.


00:02:45.820 --> 00:02:48.540
If you're doing anything more than once or twice,


00:02:48.540 --> 00:02:49.900
just write a script for it.


00:02:49.900 --> 00:02:55.620
I had like dozens or maybe even a hundred scripts just to automate like boring stuff.


00:02:55.620 --> 00:02:59.860
Kind of like the book, which I've never read the book, I would make the boring stuff, but


00:02:59.860 --> 00:03:01.940
I imagine it's what I was doing.


00:03:01.940 --> 00:03:03.660
That's how I originally got into Python.


00:03:03.660 --> 00:03:04.660
Excellent.


00:03:04.660 --> 00:03:06.820
You were doing the traditional developer thing.


00:03:06.820 --> 00:03:10.500
Why spend 20 minutes doing something when you can spend two weeks automating it?


00:03:10.500 --> 00:03:11.500
Yeah.


00:03:11.500 --> 00:03:12.500
Just kidding.


00:03:12.500 --> 00:03:16.420
Like, I really think that that's a huge value.


00:03:16.420 --> 00:03:21.420
There's so many people out there, probably many people even listen to this podcast, where


00:03:21.420 --> 00:03:26.340
they don't consider themselves developers, but there's like little things that could


00:03:26.340 --> 00:03:30.020
be automated that are super annoying.


00:03:30.020 --> 00:03:31.680
You don't look forward to it.


00:03:31.680 --> 00:03:36.900
Just a little bit of programming skill will let you really blaze through those things.


00:03:36.900 --> 00:03:41.040
Plus it also gets you further into Python where, you know, maybe one day you're releasing


00:03:41.040 --> 00:03:43.420
tools to manage everyone else's Python projects.


00:03:43.420 --> 00:03:45.420
Yeah, for sure.


00:03:45.420 --> 00:03:47.120
You don't know where it's going to go, right?


00:03:47.120 --> 00:03:51.760
>> Yeah, now I work at Datadog, working on agent integrations.


00:03:51.760 --> 00:03:54.600
So it's like, the thing that you physically install


00:03:54.600 --> 00:03:57.540
on your server host, it ships out of the box


00:03:57.540 --> 00:04:00.440
with like, almost 200 integrations.


00:04:00.440 --> 00:04:04.120
Like connecting to databases like Postgres,


00:04:04.120 --> 00:04:07.320
or monitoring like, Windows APIs,


00:04:07.320 --> 00:04:10.000
or hypervisors like vSphere.


00:04:10.000 --> 00:04:13.400
Pretty much whatever our customers want to monitor,


00:04:13.400 --> 00:04:17.200
it's our job to like find a way to connect to it


00:04:17.200 --> 00:04:18.800
and provide useful data.


00:04:18.800 --> 00:04:19.920
So. - Yeah, excellent.


00:04:19.920 --> 00:04:22.240
- A lot of research into every product


00:04:22.240 --> 00:04:23.480
that we integrate with.


00:04:23.480 --> 00:04:27.040
Sometimes the documentation is kind of sparse.


00:04:27.040 --> 00:04:29.680
So it's lots of investigative work.


00:04:29.680 --> 00:04:31.420
- Yeah, I can imagine.


00:04:31.420 --> 00:04:32.320
That sounds really fun.


00:04:32.320 --> 00:04:34.360
And I can see that as a follow on


00:04:34.360 --> 00:04:37.480
from the way you got started as well, right?


00:04:37.480 --> 00:04:39.800
Automating a bunch of tasks is not that different


00:04:39.800 --> 00:04:41.680
from kind of automating integration


00:04:41.680 --> 00:04:46.140
with a hundred different apps and performance counters


00:04:46.140 --> 00:04:48.440
and logs and different things, right?


00:04:48.440 --> 00:04:49.280
- Definitely.


00:04:49.280 --> 00:04:50.120
- Cool.


00:04:50.120 --> 00:04:51.020
Is that part of the application


00:04:51.020 --> 00:04:52.680
performance monitoring type thing?


00:04:52.680 --> 00:04:53.520
Are there--


00:04:53.520 --> 00:04:54.640
- We do that as well.


00:04:54.640 --> 00:04:56.160
That's not my team, but yeah.


00:04:56.160 --> 00:04:57.000
- Okay.


00:04:57.000 --> 00:04:57.820
- That's probably what we do.


00:04:57.820 --> 00:05:01.320
- All right, well, let's go ahead and dive in.


00:05:01.320 --> 00:05:02.160
- Sure.


00:05:02.160 --> 00:05:04.120
- So as I said, if people want to check it out,


00:05:04.120 --> 00:05:07.800
you were on the Python packaging discussion


00:05:07.800 --> 00:05:11.000
and over there was a broad conversation


00:05:11.000 --> 00:05:14.900
with a bunch of core developers and other interested folks,


00:05:14.900 --> 00:05:16.780
building tools like Hatch and so on,


00:05:16.780 --> 00:05:19.800
about where are we with packaging?


00:05:19.800 --> 00:05:21.540
Because a little while ago,


00:05:21.540 --> 00:05:25.980
I remember packaging mostly felt like PIP,


00:05:25.980 --> 00:05:28.540
instead of tools, maybe just this detail,


00:05:28.540 --> 00:05:29.500
something like that.


00:05:29.500 --> 00:05:32.580
And then it kind of got unlocked,


00:05:32.580 --> 00:05:35.500
the separation of like the build backends and stuff.


00:05:35.500 --> 00:05:37.360
And then many people started creating things.


00:05:37.360 --> 00:05:42.000
We had pipenv, we have poetry, we have pdm.


00:05:42.000 --> 00:05:43.580
There's a bunch of different ones


00:05:43.580 --> 00:05:45.280
and Hatch is amongst them, right?


00:05:45.280 --> 00:05:46.120
- Yeah.


00:05:46.120 --> 00:05:48.320
- Let's set the stage by just talking about,


00:05:48.320 --> 00:05:50.120
first of all, what do we mean


00:05:50.120 --> 00:05:52.640
when we're talking about Python packaging?


00:05:52.640 --> 00:05:54.240
And I'll ask you for you, right?


00:05:54.240 --> 00:05:56.640
Like it might mean something different for me


00:05:56.640 --> 00:05:58.620
than it might mean for you


00:05:58.620 --> 00:06:00.720
and it might be different for someone else as well.


00:06:00.720 --> 00:06:03.040
But let's just start with, you know,


00:06:03.040 --> 00:06:05.800
when we talk packaging, is that getting libraries to devs?


00:06:05.800 --> 00:06:08.960
Is that developers deploying their apps to servers?


00:06:08.960 --> 00:06:12.560
Or is that me sending an executable end product


00:06:12.560 --> 00:06:13.560
to a desktop?


00:06:13.560 --> 00:06:15.120
Like, what does it mean?


00:06:15.120 --> 00:06:16.840
- Yeah, that's a good question.


00:06:16.840 --> 00:06:19.760
I would say all of those are packaging.


00:06:19.760 --> 00:06:23.440
Historically though, we've mostly put our efforts


00:06:23.440 --> 00:06:25.960
toward the first one, which is basically like


00:06:25.960 --> 00:06:30.160
a developer making a library and making that really simple


00:06:30.160 --> 00:06:33.280
for other developers to use that library.


00:06:33.280 --> 00:06:38.280
So in the form of wheels being hosted on PyPI in particular,


00:06:38.280 --> 00:06:40.040
that's what we put our efforts on,


00:06:40.040 --> 00:06:41.800
which I think either way you look at it


00:06:41.800 --> 00:06:45.600
was the right choice to focus on in the beginning.


00:06:45.600 --> 00:06:48.880
'Cause either way, from either first principles


00:06:48.880 --> 00:06:51.600
or even hindsight looking back,


00:06:51.600 --> 00:06:55.040
you can't build a community without packages


00:06:55.040 --> 00:06:58.800
and being able to get packages and distribute packages.


00:06:58.800 --> 00:07:01.080
So I think that was the right choice.


00:07:01.080 --> 00:07:07.320
And I think now we're trying to satisfy other use cases, notably applications, I guess.


00:07:07.320 --> 00:07:07.740
Yeah.


00:07:07.740 --> 00:07:10.240
I mean, we even have an XKCD for it, right?


00:07:10.240 --> 00:07:11.320
True.


00:07:11.320 --> 00:07:13.720
And I don't know how many people know this.


00:07:13.720 --> 00:07:20.320
If you were in the Python REPL, you can type import antigravity and actually it does something.


00:07:20.320 --> 00:07:25.520
So the old XKCD is there's a person flying and the person on the ground looks at us.


00:07:25.520 --> 00:07:26.520
How are you flying?


00:07:26.520 --> 00:07:27.320
Python.


00:07:27.320 --> 00:07:29.320
Just learned it last night.


00:07:29.320 --> 00:07:30.480
Everything's so simple.


00:07:30.760 --> 00:07:32.040
Hello world is just print.


00:07:32.040 --> 00:07:32.960
Hello world.


00:07:32.960 --> 00:07:36.720
The person on the ground says, I don't know, dynamics, hyping white space.


00:07:36.720 --> 00:07:38.380
Come on, join us.


00:07:38.380 --> 00:07:39.580
Programming's fun again.


00:07:39.580 --> 00:07:39.940
Okay.


00:07:39.940 --> 00:07:40.820
But how are you flying?


00:07:40.820 --> 00:07:42.620
I just typed import anti-gravity.


00:07:42.620 --> 00:07:43.500
Right.


00:07:43.500 --> 00:07:49.240
And it's a great joke, but honestly, that is one of those superpowers of Python.


00:07:49.240 --> 00:07:52.220
Is that how many things do we have right now?


00:07:52.220 --> 00:07:53.020
How many packages?


00:07:53.020 --> 00:07:55.780
436,000 packages.


00:07:55.780 --> 00:07:57.220
Like insane.


00:07:57.220 --> 00:07:58.540
It's just insane.


00:07:58.540 --> 00:07:59.700
Yeah, no, it's.


00:07:59.960 --> 00:08:04.680
Yeah, massive community and really all kinds of domains from doing, you know,


00:08:04.680 --> 00:08:09.560
as we talked about automating scripts, you know, different tasks to doing like


00:08:09.560 --> 00:08:15.880
computing for, whether, you know, biomedical stuff, you know, even,


00:08:15.880 --> 00:08:20.520
embedded devices now with like, MicroPython stuff like that.


00:08:20.520 --> 00:08:21.640
So it's yeah.


00:08:21.640 --> 00:08:24.760
Users of Python do everything pretty much.


00:08:24.760 --> 00:08:25.000
Yeah.


00:08:25.000 --> 00:08:27.600
- Yeah, I think in the near term,


00:08:27.600 --> 00:08:30.540
we're gonna be talking about front end web as well


00:08:30.540 --> 00:08:31.800
with PyScript.


00:08:31.800 --> 00:08:35.000
And PyScript showed the possibilities,


00:08:35.000 --> 00:08:39.640
but I recently had a show on PyScript intersection


00:08:39.640 --> 00:08:42.120
with MicroPython, and that starts to be like,


00:08:42.120 --> 00:08:44.800
well, here's a couple hundred K download,


00:08:44.800 --> 00:08:46.080
and now you got Python in the front end.


00:08:46.080 --> 00:08:47.560
What do you think about it now?


00:08:47.560 --> 00:08:49.740
But of course, that has its own packaging


00:08:49.740 --> 00:08:52.200
and distribution story that we're gonna have


00:08:52.200 --> 00:08:53.080
to think about as well.


00:08:53.080 --> 00:08:55.320
like, well, kind of like node modules.


00:08:55.320 --> 00:08:57.120
Now what do you do with packages that got to run


00:08:57.120 --> 00:08:57.960
on the front end?


00:08:57.960 --> 00:08:58.800
This is getting weird.


00:08:58.800 --> 00:09:01.040
- Yeah, that kind of goes to, you know,


00:09:01.040 --> 00:09:04.200
talking about like how hard it is to do packaging


00:09:04.200 --> 00:09:07.520
when you have, you know, dozens of use cases


00:09:07.520 --> 00:09:09.120
that we have to satisfy.


00:09:09.120 --> 00:09:12.220
And with us being mostly just volunteers


00:09:12.220 --> 00:09:14.360
in our free time trying to do everything.


00:09:14.360 --> 00:09:17.960
So yeah, it's fun and also challenging.


00:09:17.960 --> 00:09:18.800
Yeah.


00:09:18.800 --> 00:09:19.620
- Yeah, absolutely.


00:09:19.620 --> 00:09:22.280
Another area, another thing we could consider


00:09:22.280 --> 00:09:24.600
Could be Conda, right, actually,


00:09:24.600 --> 00:09:25.800
yeah, I got that pulled over here.


00:09:25.800 --> 00:09:26.880
Could be Conda, right?


00:09:26.880 --> 00:09:30.320
This is a completely different take on pip and wheels.


00:09:30.320 --> 00:09:32.000
- Yeah, Conda is pretty cool.


00:09:32.000 --> 00:09:34.620
I think Conda, if I have my history right,


00:09:34.620 --> 00:09:38.920
it came about because there really was no packaging story


00:09:38.920 --> 00:09:40.100
some time ago.


00:09:40.100 --> 00:09:43.920
So Conda, I think was made by Peter Yang,


00:09:43.920 --> 00:09:45.280
if I remember correctly.


00:09:45.280 --> 00:09:48.200
And he has a whole company now around it,


00:09:48.200 --> 00:09:49.680
supporting Conda.


00:09:49.680 --> 00:09:52.640
And yeah, it just makes it easy to install


00:09:52.640 --> 00:09:54.260
very complex stuff.


00:09:54.260 --> 00:09:56.440
So if your package depends on,


00:09:56.440 --> 00:09:59.600
yeah, you can put in Fortran and Rust


00:09:59.600 --> 00:10:02.760
and all kinds of stuff and it just magically builds it


00:10:02.760 --> 00:10:05.960
and you can install it pretty easily.


00:10:05.960 --> 00:10:07.680
Yeah, it's pretty impressive.


00:10:07.680 --> 00:10:08.680
- It is pretty impressive.


00:10:08.680 --> 00:10:12.500
And with wheels now, it's closer, what we do with pip.


00:10:12.500 --> 00:10:15.760
It used to be setup.py would run


00:10:15.760 --> 00:10:17.400
and whatever it needed to do, it would do.


00:10:17.400 --> 00:10:18.600
But often that would require,


00:10:18.600 --> 00:10:21.940
"Well, compile this," usually with C back then,


00:10:21.940 --> 00:10:24.900
but for the scientific libraries, it says,


00:10:24.900 --> 00:10:27.080
"Well, compile this thing with Fortran,"


00:10:27.080 --> 00:10:29.840
and they compile this thing with Scala.


00:10:29.840 --> 00:10:31.360
You're like, "I have neither of those things


00:10:31.360 --> 00:10:33.600
"set up as dev tools on my environment.


00:10:33.600 --> 00:10:35.300
"I'm a science student.


00:10:35.300 --> 00:10:37.080
"What am I doing here?"


00:10:37.080 --> 00:10:39.520
Right, and so that was the angle they were solving,


00:10:39.520 --> 00:10:41.780
and I think pip and Conda


00:10:41.780 --> 00:10:43.140
are coming a little bit closer together.


00:10:43.140 --> 00:10:45.020
I think they're not necessarily converging,


00:10:45.020 --> 00:10:47.360
but they're more similar now than they used to be.


00:10:47.360 --> 00:10:49.360
- Yeah, definitely that is true.


00:10:49.360 --> 00:10:50.800
And yeah, there's talk,


00:10:50.800 --> 00:10:51.940
I don't know how many people are aware,


00:10:51.940 --> 00:10:55.640
but the Python forums has a subsection


00:10:55.640 --> 00:10:57.600
on discourse for packaging.


00:10:57.600 --> 00:10:59.960
So yeah, right now there's actually talks


00:10:59.960 --> 00:11:03.240
from people at Conda trying to decide


00:11:03.240 --> 00:11:06.160
how we can kind of provide a more,


00:11:06.160 --> 00:11:07.880
like a unified experience.


00:11:07.880 --> 00:11:08.880
- That's interesting.


00:11:08.880 --> 00:11:11.740
- 'Cause right now Conda has their own repo,


00:11:11.740 --> 00:11:13.480
like for all their packages,


00:11:13.480 --> 00:11:17.440
And PyPI is its own thing outside of Conda.


00:11:17.440 --> 00:11:20.600
So yeah, there's talk about possibly making that


00:11:20.600 --> 00:11:23.320
like interoperable.


00:11:23.320 --> 00:11:25.380
- Oh yeah, okay, that'd be really interesting.


00:11:25.380 --> 00:11:29.160
Let's see, there was a question out here from Copa.


00:11:29.160 --> 00:11:30.520
Since we're in this realm,


00:11:30.520 --> 00:11:32.080
like what do you think about Docker


00:11:32.080 --> 00:11:33.840
as a way of shipping things?


00:11:33.840 --> 00:11:36.600
You know, a lot of times we'll get checkout,


00:11:36.600 --> 00:11:39.680
get clone, some code on a server,


00:11:39.680 --> 00:11:40.880
maybe some production branch,


00:11:40.880 --> 00:11:43.720
and then go through these steps, right?


00:11:43.720 --> 00:11:47.960
Pip install requirements or a hatch run type


00:11:47.960 --> 00:11:50.480
of initialization, or you just get that done


00:11:50.480 --> 00:11:52.400
in a Docker container and you just hand that out.


00:11:52.400 --> 00:11:54.840
What are your thoughts on Docker as part of this?


00:11:54.840 --> 00:11:57.580
- Yeah, Docker definitely has its use cases.


00:11:57.580 --> 00:12:00.660
Like I guess in lieu of the black file,


00:12:00.660 --> 00:12:05.240
you can kind of use Docker as a reproducible environment.


00:12:05.240 --> 00:12:08.360
But I still think there's a place for a way


00:12:08.360 --> 00:12:12.800
to actually build applications outside of Docker,


00:12:12.800 --> 00:12:16.320
outside of containers in a reproducible fashion.


00:12:16.320 --> 00:12:17.680
I think that's still necessary.


00:12:17.680 --> 00:12:19.280
- I do as well.


00:12:19.280 --> 00:12:23.720
So Docker really, it addresses some of the types


00:12:23.720 --> 00:12:26.520
of packaging that we discussed really, really well.


00:12:26.520 --> 00:12:30.240
For example, I need to get my running code onto a server,


00:12:30.240 --> 00:12:32.480
but Docker is less good.


00:12:32.480 --> 00:12:34.000
It's not completely irrelevant,


00:12:34.000 --> 00:12:38.220
but it's less good at giving a developer a library, right?


00:12:38.220 --> 00:12:43.900
If people that make HTTPS and the people that make FastAPI, they're not going to


00:12:43.900 --> 00:12:46.620
build a combo Docker, right?


00:12:46.620 --> 00:12:49.020
There's still a place where you've just got to get the things.


00:12:49.020 --> 00:12:52.180
And that's like a base level closer to where a hatch might be working.


00:12:52.180 --> 00:12:55.980
And also Docker is not fantastic at sending to an end user.


00:12:55.980 --> 00:13:00.500
If I want to build an app that a non-technical non-developer person can


00:13:00.500 --> 00:13:03.100
use, Docker is the opposite of what they want.


00:13:03.100 --> 00:13:04.780
Yeah, true.


00:13:04.780 --> 00:13:05.420
Yeah.


00:13:05.780 --> 00:13:12.260
I will say there's another use case, which is like, if your machine is like messed up somehow,


00:13:12.260 --> 00:13:18.340
and some library package isn't working, I've had this happen with my co-workers on their Macs.


00:13:18.340 --> 00:13:22.660
It is nice to be able to just go into a container and start fresh.


00:13:22.660 --> 00:13:24.180
So I've had that happen a few times.


00:13:24.180 --> 00:13:28.020
It is isolated in quite a good way. And that's pretty, pretty excellent.


00:13:28.020 --> 00:13:32.500
So on that packaging panel that we were on,


00:13:33.220 --> 00:13:41.220
There was a really interesting focus for a little bit talking about, well, what is responsible for what?


00:13:41.220 --> 00:13:49.860
So right now, for example, I might use pip as a way to add tools to Python to a Python project,


00:13:49.860 --> 00:13:56.020
but I'll have to already have Python there. And in other communities, and even a little bit like


00:13:56.020 --> 00:14:01.940
Honda, and in this as well, there's tools that will say, what you do is use a tool kind of like pip,


00:14:01.940 --> 00:14:03.420
But it gets you the runtime.


00:14:03.420 --> 00:14:07.540
It gets, it would get you a version of Python you asked for plus the libraries.


00:14:07.540 --> 00:14:13.820
You know, I think rust up was one of the, the things that was brought up there.


00:14:13.820 --> 00:14:14.380
Right.


00:14:14.380 --> 00:14:19.460
So for people who don't know rust up, it's an installer for system for basically


00:14:19.460 --> 00:14:22.300
setting up a rust environment for doing rust.


00:14:22.300 --> 00:14:22.580
So.


00:14:22.580 --> 00:14:24.840
Pip up Python up.


00:14:24.840 --> 00:14:25.340
I don't know.


00:14:25.340 --> 00:14:28.780
I don't know what we would call it, but do you want to just, you know, maybe give


00:14:28.780 --> 00:14:32.020
of your thoughts on that? Cause I think you had some comments on that, like


00:14:32.020 --> 00:14:36.220
inside out, outside in where, if you could start fresh, where were the tools?


00:14:36.220 --> 00:14:37.020
How would that work?


00:14:37.020 --> 00:14:41.540
Yeah, I think if we were to start fresh, I think the way Rust does it is like now


00:14:41.540 --> 00:14:47.380
the, the gold standard, it's probably the best way to do it, which is how, as you


00:14:47.380 --> 00:14:51.660
mentioned, Conda, a similar thing where you have a tool that you download and


00:14:51.660 --> 00:14:58.220
that one tool is in charge of managing the various Python or programming language


00:14:58.220 --> 00:15:03.680
versions. So if I were to start fresh, you would have a tool like Catch that you


00:15:03.680 --> 00:15:09.960
would download as an MSI or EXE or some kind of installer similar to Rustup.


00:15:09.960 --> 00:15:17.200
And that tool would manage the various Python versions and environments and


00:15:17.200 --> 00:15:22.960
packaging. So for Rustup, when you download this, it gives you Rustup, which


00:15:22.960 --> 00:15:28.480
manages Rust, but then it gives you Cargo, which is a separate command, and that's their


00:15:28.480 --> 00:15:29.480
package manager.


00:15:29.480 --> 00:15:30.480
Right.


00:15:30.480 --> 00:15:32.440
But in both cases, they live outside of Python.


00:15:32.440 --> 00:15:33.440
Interesting.


00:15:33.440 --> 00:15:36.160
Yeah, Cargo is to Rust as pip is to Python, right?


00:15:36.160 --> 00:15:38.160
That kind of thing.


00:15:38.160 --> 00:15:40.960
Hey folks, let's pause for an ad.


00:15:40.960 --> 00:15:44.240
Remember last time I had this advertisement for Microsoft for Startups?


00:15:44.240 --> 00:15:48.680
Well, I asked the AI to have some fun with it just to show you how powerful what they


00:15:48.680 --> 00:15:50.600
have on offer really is.


00:15:50.600 --> 00:15:51.600
Here we go.


00:15:51.600 --> 00:15:52.600
Me.


00:15:52.600 --> 00:15:56.600
Can you rephrase that Microsoft Founders Hub ad as a hipster?


00:15:56.600 --> 00:15:58.120
AI, sure.


00:15:58.120 --> 00:16:01.240
Here's a rephrased version of the ad in hipster style.


00:16:01.240 --> 00:16:04.160
Yo, Talk Python fam, this segment is brought to you


00:16:04.160 --> 00:16:06.520
by the sickest program out there for startup founders,


00:16:06.520 --> 00:16:08.520
Microsoft for Startups Founders Hub.


00:16:08.520 --> 00:16:10.240
If you're a boss running a startup,


00:16:10.240 --> 00:16:11.400
you're gonna wanna listen up


00:16:11.400 --> 00:16:13.360
because this is the deal of a lifetime.


00:16:13.360 --> 00:16:15.080
Microsoft for Founders Hub is your ticket


00:16:15.080 --> 00:16:17.800
to scaling efficiently and preserving your runway


00:16:17.800 --> 00:16:20.720
all the while keeping your cool factor intact.


00:16:20.720 --> 00:16:22.440
With over six figures worth of benefits,


00:16:22.440 --> 00:16:24.840
this program is seriously next level.


00:16:24.840 --> 00:16:27.240
You'll get $150,000 in Azure credits,


00:16:27.240 --> 00:16:29.640
the richest cloud credit offering on the market,


00:16:29.640 --> 00:16:34.180
access to the OpenAI APIs in the new Azure OpenAI service,


00:16:34.180 --> 00:16:36.680
where you can infuse some serious generative AI


00:16:36.680 --> 00:16:39.580
into your apps, and a one-on-one technical advisory


00:16:39.580 --> 00:16:41.420
from the Microsoft squad,


00:16:41.420 --> 00:16:43.060
who will help you with your tech stack


00:16:43.060 --> 00:16:44.660
and architectural plans.


00:16:44.660 --> 00:16:45.760
This program is open all,


00:16:45.760 --> 00:16:47.800
whether you're just starting or you're already killing it.


00:16:47.800 --> 00:16:50.600
And the best part, there's no funding requirement.


00:16:50.600 --> 00:16:52.200
All it takes is five minutes to apply,


00:16:52.200 --> 00:16:54.640
and you'll be reaping the benefits in no time.


00:16:54.640 --> 00:16:56.440
Check it out and sign up for Microsoft for Startup


00:16:56.440 --> 00:16:59.840
Founders Hub at toppython.fm/foundershub.


00:16:59.840 --> 00:17:01.520
Peace out and keep listening.


00:17:01.520 --> 00:17:02.800
Thank you, Hipster Michael.


00:17:02.800 --> 00:17:04.440
And thank you, Microsoft for Startups,


00:17:04.440 --> 00:17:06.320
Founders Hub for sponsoring the show.


00:17:06.320 --> 00:17:10.320
I think that's pretty helpful


00:17:10.320 --> 00:17:12.200
because one of the problems is,


00:17:12.200 --> 00:17:13.760
well, you need to pip and saw this thing.


00:17:13.760 --> 00:17:16.120
Oh, do you have the wrong version of Python?


00:17:16.120 --> 00:17:19.400
Well, you gotta, you know, there's a lot of steps back


00:17:19.400 --> 00:17:21.440
and there's no immediately obvious command


00:17:21.440 --> 00:17:24.940
other than completely from scratch, install a new Python.


00:17:24.940 --> 00:17:25.240
>> Yeah.


00:17:25.240 --> 00:17:26.720
>> There's a tools that manage that, right?


00:17:26.720 --> 00:17:29.280
Like pyenv can work,


00:17:29.280 --> 00:17:30.460
although I've had trouble with it.


00:17:30.460 --> 00:17:31.960
>> Yeah, I've had issues with that.


00:17:31.960 --> 00:17:36.100
Yeah, I think it would be less error-prone in this hypothetical way,


00:17:36.100 --> 00:17:41.480
where the tool doesn't mess with your shell in a global manner.


00:17:41.480 --> 00:17:47.760
It just has its own paths to Python and just does everything by itself.


00:17:47.760 --> 00:17:50.720
>> That's interesting. That starts to maybe make it easier to


00:17:50.720 --> 00:17:55.120
to solve the, I want to ship you an executable binary,


00:17:55.120 --> 00:17:57.480
is if the tool were in charge of,


00:17:57.480 --> 00:18:00.760
I create this working directory where part of the things


00:18:00.760 --> 00:18:03.060
I've installed is all of Python


00:18:03.060 --> 00:18:05.200
and all the packages you've asked me for,


00:18:05.200 --> 00:18:07.960
I can see how that pretty quickly becomes something


00:18:07.960 --> 00:18:10.200
I'll bundle that up and hand it to somebody


00:18:10.200 --> 00:18:11.760
and give them an entry point.


00:18:11.760 --> 00:18:14.000
- Definitely, I could help that situation.


00:18:14.000 --> 00:18:18.680
I think there's not really a standard way to build an EXE


00:18:18.680 --> 00:18:21.020
from like a Python package.


00:18:21.020 --> 00:18:25.740
There are a few tools, like PyOxidizer is one newer option.


00:18:25.740 --> 00:18:29.840
PyInstaller, CXFreeze, I think was the thing


00:18:29.840 --> 00:18:31.000
that I've used before.


00:18:31.000 --> 00:18:32.440
So, there's a few options.


00:18:32.440 --> 00:18:33.560
- Yeah, I've used Py2App,


00:18:33.560 --> 00:18:35.640
and that's actually worked really well.


00:18:35.640 --> 00:18:38.300
I've used PyInstaller, and it's worked mostly well,


00:18:38.300 --> 00:18:40.080
except for I've had weird situations


00:18:40.080 --> 00:18:42.120
where on Windows it's great,


00:18:42.120 --> 00:18:44.800
but on Mac it has a dangling terminal.


00:18:44.800 --> 00:18:47.000
In addition to the GUI, I'm like,


00:18:47.000 --> 00:18:48.040
what are we supposed to do with that?


00:18:48.040 --> 00:18:49.040
How do we make it go away?


00:18:49.040 --> 00:18:50.600
Like, you know, here's the command.


00:18:50.600 --> 00:18:51.600
Like, no, it's not going away.


00:18:51.600 --> 00:18:52.880
I don't know why.


00:18:52.880 --> 00:18:58.640
And if there was a more official sort of core dev organized way, that would make me super


00:18:58.640 --> 00:18:59.640
happy.


00:18:59.640 --> 00:19:02.840
I'm not so much for official or unofficial.


00:19:02.840 --> 00:19:05.880
My view is like, if it works, it works.


00:19:05.880 --> 00:19:10.840
So as long as it's satisfying, you know, all the use cases, that's what I would push for.


00:19:10.840 --> 00:19:16.120
So I think right now, based on what I've used personally, I think PyOxidizer would be the


00:19:16.120 --> 00:19:19.900
the best choice for distributing standalone apps.


00:19:19.900 --> 00:19:21.260
- Interesting, okay.


00:19:21.260 --> 00:19:24.380
All right, cool, well, let's move on


00:19:24.380 --> 00:19:26.420
and start talking about Hatch.


00:19:26.420 --> 00:19:30.380
So, first off, why'd you build it, right?


00:19:30.380 --> 00:19:31.560
We had Pip.


00:19:31.560 --> 00:19:32.740
(laughing)


00:19:32.740 --> 00:19:33.780
Why do we need Hatch?


00:19:33.780 --> 00:19:36.620
And I don't know exactly the timeframe of when it came out,


00:19:36.620 --> 00:19:39.040
so maybe we had other things like poetry,


00:19:39.040 --> 00:19:41.180
or why'd you go and create this?


00:19:41.180 --> 00:19:44.980
- So Hatch, I did, it was kind of an owner project


00:19:44.980 --> 00:19:49.200
back in the end of 2016 or early 2017.


00:19:49.200 --> 00:19:54.000
I wasn't pleased with the tooling in Python.


00:19:54.000 --> 00:19:57.440
I think very similar to the author of poetry.


00:19:57.440 --> 00:19:59.240
That's kind of why he made poetry.


00:19:59.240 --> 00:20:03.280
So I wanted something that kind of matched my mental model


00:20:03.280 --> 00:20:07.120
of how development would go with building packages


00:20:07.120 --> 00:20:10.900
and managing environments automatically, stuff like that.


00:20:10.900 --> 00:20:14.560
When I made it though, there weren't very many standards


00:20:14.560 --> 00:20:18.760
for packaging and everything was kind of in limbo at that point,


00:20:18.760 --> 00:20:23.520
which kind of discouraged me from continuing because I was like, okay,


00:20:23.520 --> 00:20:26.440
in a six months or a year or two,


00:20:26.440 --> 00:20:29.560
I'm going to have to rewrite to follow standards.


00:20:29.560 --> 00:20:34.800
So I kind of just stopped development for a few years until everything was


00:20:34.800 --> 00:20:35.640
standardized.


00:20:35.640 --> 00:20:40.920
And then I rewrote it about a year and a half ago with this new


00:20:40.920 --> 00:20:42.840
version and new docs.


00:20:43.360 --> 00:20:45.460
So that's kind of the history of it.


00:20:45.460 --> 00:20:45.820
Yeah.


00:20:45.820 --> 00:20:46.900
I saw that there's a.


00:20:46.900 --> 00:20:51.960
Hatch dot Tommel and a pipe project dot Tommel, and you can use either of them.


00:20:51.960 --> 00:20:55.700
Was your hatch dot Tommel the original and then PI project dot Tommel gain


00:20:55.700 --> 00:20:58.360
traction and you're like, all right, well, we'll, we'll integrate with that as well.


00:20:58.360 --> 00:21:01.480
No, I had to came, I said, Tom, came with the rewrite.


00:21:01.480 --> 00:21:03.440
It's mostly for environments.


00:21:03.440 --> 00:21:08.020
Sometimes when you define lots of environments, it's very verbose.


00:21:08.060 --> 00:21:13.380
Like at my workplace, I saw a tax file that was like over a thousand lines.


00:21:13.380 --> 00:21:17.180
So bringing that in Pi project wouldn't be very nice.


00:21:17.180 --> 00:21:20.220
So that's why I have a second file to isolate certain things.


00:21:20.220 --> 00:21:20.740
Yeah.


00:21:20.740 --> 00:21:21.540
That makes sense.


00:21:21.540 --> 00:21:23.500
Like, just like maybe you don't want to write your entire


00:21:23.500 --> 00:21:27.140
application in an app.py, but maybe have multiple files.


00:21:27.140 --> 00:21:27.340
Yeah.


00:21:27.340 --> 00:21:27.980
Something like that.


00:21:27.980 --> 00:21:28.500
All right.


00:21:28.500 --> 00:21:31.220
Well, out in the audience, we've got some kind words.


00:21:31.220 --> 00:21:34.740
Like I switched to hatch and pip tools from poetry and love it.


00:21:34.740 --> 00:21:35.860
That's pretty awesome.


00:21:35.860 --> 00:21:36.340
Yeah.


00:21:36.620 --> 00:21:40.340
And then probably before I forget, because it was right at the top of the


00:21:40.340 --> 00:21:46.020
conversation, Marwan asks, is there a time estimate for when a hatch might


00:21:46.020 --> 00:21:47.540
support things like lock files?


00:21:47.540 --> 00:21:48.660
That's a good question.


00:21:48.660 --> 00:21:57.580
Uh, so my goal is by PyCon to write the plugin interface for locking.


00:21:57.580 --> 00:22:02.340
So the first version we use pip tools, actually, that would be


00:22:02.340 --> 00:22:04.340
the first plugin for lock files.


00:22:04.620 --> 00:22:08.840
But I won't be writing like an actual lock file spec.


00:22:08.840 --> 00:22:10.800
I'll just be using an existing pool.


00:22:10.800 --> 00:22:15.780
The new hypothetical lock file is kind of blocked on Brett because he has


00:22:15.780 --> 00:22:18.500
most context and knowledge about that.


00:22:18.500 --> 00:22:21.580
So yeah, I'm waiting on Brett basically.


00:22:21.580 --> 00:22:21.920
Got it.


00:22:21.920 --> 00:22:23.720
Brett Cannon, that'd be Brett Cannon.


00:22:23.720 --> 00:22:24.280
Yes.


00:22:24.280 --> 00:22:25.980
Python developer extraordinaire.


00:22:25.980 --> 00:22:26.580
We all know.


00:22:26.580 --> 00:22:27.260
Okay.


00:22:27.260 --> 00:22:27.820
Very cool.


00:22:27.820 --> 00:22:30.860
Other thing before we dive into it here, I see that you have


00:22:30.860 --> 00:22:33.740
a, some rough action going there.


00:22:33.740 --> 00:22:37.980
I just had Charlie on the show not too long ago to talk about Ruff.


00:22:37.980 --> 00:22:39.180
It's pretty impressive.


00:22:39.180 --> 00:22:40.260
When did you adopt that?


00:22:40.260 --> 00:22:41.460
>> I was an early adopter.


00:22:41.460 --> 00:22:42.980
I guess a few months ago now.


00:22:42.980 --> 00:22:43.380
>> Yeah.


00:22:43.380 --> 00:22:44.140
What's your experience?


00:22:44.140 --> 00:22:44.980
>> It's fantastic.


00:22:44.980 --> 00:22:48.500
It's kind of like a meme to say it now, but it's true.


00:22:48.500 --> 00:22:49.780
Like it's so fast.


00:22:49.780 --> 00:22:52.940
It's almost like you wonder if it's doing anything.


00:22:52.940 --> 00:22:54.100
Like it's-


00:22:54.100 --> 00:22:55.140
>> That was my first thought.


00:22:55.140 --> 00:22:57.620
When I ran it, I'm like, wait a minute, maybe I didn't give it any files or


00:22:57.620 --> 00:23:01.740
something, because I ran it on Talk Python Training, which is like 20,000 lines of


00:23:01.740 --> 00:23:04.340
Python code and it just went bam like that.


00:23:04.340 --> 00:23:07.020
I'm like, maybe it didn't take that because that seems like that should


00:23:07.020 --> 00:23:09.720
take a moment at least somehow.


00:23:09.720 --> 00:23:10.140
Yeah.


00:23:10.140 --> 00:23:10.860
Okay.


00:23:10.860 --> 00:23:11.720
So you recommend it?


00:23:11.720 --> 00:23:12.060
Yeah.


00:23:12.060 --> 00:23:19.140
All in one location and it supports like so many options as well, which is nice.


00:23:19.140 --> 00:23:19.980
Yeah, indeed.


00:23:19.980 --> 00:23:20.260
Cool.


00:23:20.260 --> 00:23:20.500
Cool.


00:23:20.500 --> 00:23:21.260
All right.


00:23:21.260 --> 00:23:24.100
Well, let's start with a high level overview.


00:23:24.100 --> 00:23:28.140
And then what I want to do is I want to walk through creating a project with this


00:23:28.180 --> 00:23:32.860
And I've got questions and thoughts as I kind of experience Hatch,


00:23:32.860 --> 00:23:36.460
not for the first time, but for a somewhat of a newbie perspective.


00:23:36.460 --> 00:23:37.740
So I think we'll do that.


00:23:37.740 --> 00:23:40.060
But let's start with the high level features.


00:23:40.060 --> 00:23:44.740
So the Hatch project is, I guess, conceptually two different projects.


00:23:44.740 --> 00:23:47.900
Hatch itself is the command line.


00:23:47.900 --> 00:23:53.660
So doing publishing and environment management, versioning, stuff like that.


00:23:54.260 --> 00:24:00.460
Then Hatchling is the build system, similar to a split or set of tools.


00:24:00.460 --> 00:24:02.380
So that's where the build system is.


00:24:02.380 --> 00:24:06.020
Uh, from, you can use it independently, right?


00:24:06.020 --> 00:24:11.380
You don't have to be doing anything with Hatch to use Hatchling basically


00:24:11.380 --> 00:24:13.520
to replace setup.py, right?


00:24:13.520 --> 00:24:13.780
Yeah.


00:24:13.780 --> 00:24:16.900
You can replace the .py with the pyproject.toml.


00:24:16.900 --> 00:24:17.540
Yeah.


00:24:17.540 --> 00:24:21.660
And most people do use Hatchling and not use Hatch.


00:24:21.860 --> 00:24:25.780
So yeah, Hatchling is much more popular than Hatch itself.


00:24:25.780 --> 00:24:26.140
Okay.


00:24:26.140 --> 00:24:30.740
So for a config, it's a bit more simple than set of tools.


00:24:30.740 --> 00:24:37.540
The default logic makes more sense for, for new users, especially.


00:24:37.540 --> 00:24:41.260
It's hard to mess up packaging with Hatchling.


00:24:41.260 --> 00:24:41.500
Yeah.


00:24:41.500 --> 00:24:41.900
Excellent.


00:24:41.900 --> 00:24:45.540
So I could have just some random Python project that I've put together


00:24:45.540 --> 00:24:50.740
with a pyproject.toml I wrote by hand, and I could just put Hatchling in as


00:24:50.740 --> 00:24:53.980
the build subsystem to make the wheels and whatnot.


00:24:53.980 --> 00:24:56.940
>> One benefit of hatching a hatch too,


00:24:56.940 --> 00:24:58.740
basically everything is a plugin.


00:24:58.740 --> 00:25:03.300
So you can have a builder that does like the mypyC,


00:25:03.300 --> 00:25:07.260
which we have, you can have a metadata hook where you


00:25:07.260 --> 00:25:12.740
insert project URLs from some arbitrary location.


00:25:12.740 --> 00:25:16.700
Pretty much everything you can plug into and modify.


00:25:16.700 --> 00:25:18.260
>> Yeah, excellent. All right.


00:25:18.260 --> 00:25:20.980
- And then a robust environment management.


00:25:20.980 --> 00:25:22.320
- Yeah, so for this,


00:25:22.320 --> 00:25:26.900
this you can think of as a, as Tox or Knox,


00:25:26.900 --> 00:25:29.000
similar in spirit to that.


00:25:29.000 --> 00:25:31.860
The difference is Knox and Tox


00:25:31.860 --> 00:25:35.520
kind of treat environments as applications


00:25:35.520 --> 00:25:38.440
where an environment is tied to a command


00:25:38.440 --> 00:25:40.140
and you run an environment.


00:25:40.140 --> 00:25:44.180
Whereas in Hatch, you have environments that you define


00:25:44.180 --> 00:25:47.820
and then within that, you have scripts that you can run.


00:25:47.820 --> 00:25:54.780
So you can have a style environment that might be able to rent with one script or


00:25:54.780 --> 00:26:00.420
run the formatter to change the code with another script and environment itself.


00:26:00.420 --> 00:26:06.060
Isn't actually like, like an app you can run arbitrary commands, right?


00:26:06.060 --> 00:26:10.860
Like I could run hatch test or something like that.


00:26:10.860 --> 00:26:11.100
Yeah.


00:26:11.100 --> 00:26:12.500
And passing flags.


00:26:12.500 --> 00:26:12.980
Yeah.


00:26:12.980 --> 00:26:13.340
Okay.


00:26:13.860 --> 00:26:18.960
And then often people who published packages to PyPI, they've done this


00:26:18.960 --> 00:26:21.740
with Twine or some tool like that.


00:26:21.740 --> 00:26:23.880
And Hatch has that capability as well.


00:26:23.880 --> 00:26:24.140
Right?


00:26:24.140 --> 00:26:24.480
Right.


00:26:24.480 --> 00:26:24.700
Yeah.


00:26:24.700 --> 00:26:25.740
To yeah.


00:26:25.740 --> 00:26:31.400
PyPI or some private, you know, corporate owned index.


00:26:31.400 --> 00:26:35.080
I think those are probably getting to be more popular than they used to be


00:26:35.080 --> 00:26:38.060
with all the supply chain silliness.


00:26:38.060 --> 00:26:38.700
Yeah, that's true.


00:26:38.700 --> 00:26:39.100
Yeah.


00:26:39.100 --> 00:26:43.260
Do you have any visibility into how people are using it, whether it's public


00:26:43.260 --> 00:26:44.940
or private or as far as hatch.


00:26:44.940 --> 00:26:45.420
Yeah.


00:26:45.420 --> 00:26:47.900
Well, how they're using the hatch to publish.


00:26:47.900 --> 00:26:50.260
Do you have any visibility, whether they're publishing the pipe


00:26:50.260 --> 00:26:52.420
yet or to some kind of private index?


00:26:52.420 --> 00:26:53.700
Based on the issues I have.


00:26:53.700 --> 00:26:55.500
Open like future requests.


00:26:55.500 --> 00:26:58.420
Most are talking about private indices.


00:26:58.420 --> 00:26:59.140
Actually.


00:26:59.140 --> 00:26:59.780
Interesting.


00:26:59.780 --> 00:27:02.500
Yeah, it's probably, those are the ones where the edge cases live.


00:27:02.500 --> 00:27:08.100
You know, the standard one place is dialed in and well, what if mine's on using


00:27:08.100 --> 00:27:11.500
active directory for authentication as I publish it, like it's doing what


00:27:12.980 --> 00:27:15.460
Artifactory is quite popular as well.


00:27:15.460 --> 00:27:17.500
- Yeah, yeah, that absolutely is.


00:27:17.500 --> 00:27:18.760
Another thing that was interesting


00:27:18.760 --> 00:27:21.220
is you have the ability to do version management,


00:27:21.220 --> 00:27:22.380
as we'll see in just a minute.


00:27:22.380 --> 00:27:25.460
You can say like, what version is my package?


00:27:25.460 --> 00:27:29.380
Increment the build, do a major version increment,


00:27:29.380 --> 00:27:31.020
or put it into a release candidate mode.


00:27:31.020 --> 00:27:34.120
- Yeah, and this is Plugable as well.


00:27:34.120 --> 00:27:36.260
So there's one plugin that's popular


00:27:36.260 --> 00:27:38.980
that wraps setup tools SCM,


00:27:38.980 --> 00:27:42.060
which doesn't actually depend on setup tools anymore.


00:27:42.060 --> 00:27:44.180
It's just a name that's still called that.


00:27:44.180 --> 00:27:50.220
So that pulls your version from Git or Mercurial or Subversion.


00:27:50.220 --> 00:27:53.180
And you can source the versions that way as well.


00:27:53.180 --> 00:27:53.740
Interesting.


00:27:53.740 --> 00:27:54.700
Yeah, I really liked that.


00:27:54.700 --> 00:27:56.460
I think that's a neat aspect.


00:27:56.460 --> 00:28:01.180
And then configurable project generation, same defaults.


00:28:01.180 --> 00:28:06.980
Yeah, I don't have too many options with this yet, but you can make it a flat


00:28:06.980 --> 00:28:09.380
layout or like a source directory.


00:28:09.980 --> 00:28:16.540
There's an option to add tests, which puts more stuff in your pyproject.toml.


00:28:16.540 --> 00:28:22.980
You can add a CLI, which has a very simple template for GitHub actions.


00:28:22.980 --> 00:28:29.540
And then there's a flag for a CLI that would give you a click and set up


00:28:29.540 --> 00:28:32.060
a command line for your package.


00:28:32.060 --> 00:28:35.780
I don't know how directly related this is to anything that Hatch does, but


00:28:35.980 --> 00:28:40.180
the usage of the pyproject.toml and then building it as a package,


00:28:40.180 --> 00:28:45.260
something you could install gives you a really nice way to create a global CLI.


00:28:45.260 --> 00:28:45.960
Right.


00:28:45.960 --> 00:28:48.260
Which is the entry points in the pyproject.toml.


00:28:48.260 --> 00:28:48.460
Yeah.


00:28:48.460 --> 00:28:50.060
That's what that CLI flag does.


00:28:50.060 --> 00:28:50.480
Yeah.


00:28:50.480 --> 00:28:51.180
It's very nice.


00:28:51.180 --> 00:28:51.620
Okay.


00:28:51.620 --> 00:28:52.060
Yeah.


00:28:52.060 --> 00:28:55.920
Then also you say it's two to three times faster than equivalent tools.


00:28:55.920 --> 00:28:56.420
That's great.


00:28:56.420 --> 00:28:58.100
It really just one trick.


00:28:58.100 --> 00:29:04.420
It just, I make the code not as readable by using lazy imports everywhere.


00:29:04.940 --> 00:29:08.300
I've just put lazy imports and that's why it's faster.


00:29:08.300 --> 00:29:09.140
Yeah.


00:29:09.140 --> 00:29:12.740
Because there's a lot of execution paths that only use some of the imports in effect.


00:29:12.740 --> 00:29:12.980
Right.


00:29:12.980 --> 00:29:13.260
Yeah.


00:29:13.260 --> 00:29:17.860
Going back to the scripts, Jonathan points out, I love the custom scripts within Hatch.


00:29:17.860 --> 00:29:21.620
It makes creating build pipelines way easier and moves most of the logic within


00:29:21.620 --> 00:29:24.740
the Hatch configure rather than spreading them around multiple files, which is,


00:29:24.740 --> 00:29:25.340
that's pretty cool.


00:29:25.340 --> 00:29:25.580
Yeah.


00:29:25.580 --> 00:29:26.500
That's what I do as well.


00:29:26.500 --> 00:29:26.820
Cool.


00:29:26.820 --> 00:29:32.220
I even use Hatch for non-Python projects just for the scripting ability.


00:29:32.220 --> 00:29:32.620
Yeah.


00:29:32.620 --> 00:29:32.980
Cool.


00:29:33.500 --> 00:29:37.400
Well, I mean, Python traditionally had been used for a lot of that, you know,


00:29:37.400 --> 00:29:38.500
called it glue code, right?


00:29:38.500 --> 00:29:41.860
A lot of, well, I really want to do these other things with these other systems


00:29:41.860 --> 00:29:44.340
and scripts, but let me kind of orchestrate that in Python.


00:29:44.340 --> 00:29:46.820
And that's, it sounds a bit, a bit like that.


00:29:46.820 --> 00:29:48.180
Let's do a little walkthrough.


00:29:48.180 --> 00:29:49.820
I think, I think that'll be fun.


00:29:49.820 --> 00:29:54.380
But first of all, I think this is just MK docs, but thank you for pointing it out.


00:29:54.380 --> 00:29:59.420
That your documentation and your website here have hotkeys.


00:29:59.420 --> 00:29:59.620
Yeah.


00:29:59.620 --> 00:30:03.540
MKDocs with the material theme, which is very nice.


00:30:03.540 --> 00:30:05.380
>> Yeah. So it turns out if I just press a dot,


00:30:05.380 --> 00:30:07.260
it goes to the next page and if I comment,


00:30:07.260 --> 00:30:10.040
it goes to the previous page and it doesn't sound like much,


00:30:10.040 --> 00:30:11.300
but actually it's really nice.


00:30:11.300 --> 00:30:12.420
It is really nice.


00:30:12.420 --> 00:30:14.200
>> Before we read this front page,


00:30:14.200 --> 00:30:16.860
one other thing to note to go back to the top,


00:30:16.860 --> 00:30:18.440
just because I'm very happy with it.


00:30:18.440 --> 00:30:22.300
The logo was actually generated by Dolly, the AI.


00:30:22.300 --> 00:30:23.180
>> Okay.


00:30:23.180 --> 00:30:23.620
>> Yeah.


00:30:23.620 --> 00:30:24.420
>> Fantastic.


00:30:24.420 --> 00:30:28.140
>> Yeah. Generate the logo and then I had a brother of a friend from work,


00:30:28.140 --> 00:30:30.140
I like actually touch it up.


00:30:30.140 --> 00:30:32.540
So it's a really cool logo. I like it.


00:30:32.540 --> 00:30:35.660
I didn't catch on that it was made by Dolly, but now I see that.


00:30:35.660 --> 00:30:39.900
I've been doing a lot with mid journey and I think these AI tools are,


00:30:39.900 --> 00:30:44.140
I think they're a little bit fraught with maybe a few moral issues about like,


00:30:44.140 --> 00:30:47.500
well, did you really train it on stuff that you were allowed to train on?


00:30:47.500 --> 00:30:49.900
But putting that aside, if they exist, you know,


00:30:49.900 --> 00:30:51.740
assuming just they exist, they're really neat.


00:30:51.740 --> 00:30:53.900
And there's really amazing stuff you can do with them.


00:30:53.900 --> 00:30:55.420
Yeah. Yeah. Cool.


00:30:55.420 --> 00:31:02.060
I guess maybe a quick sidebar there is if you were a project maintainer out there and you don't really have an a logo


00:31:02.060 --> 00:31:06.780
Drop in on dolly or a mid journey and spend half an hour and you probably will


00:31:06.780 --> 00:31:09.420
but I I just think


00:31:09.420 --> 00:31:13.420
There are so many people that build web apps out there that don't put hotkeys into them


00:31:13.420 --> 00:31:17.420
And it's it is not that hard and it is such a nice experience


00:31:17.420 --> 00:31:20.460
And it brings you so much closer to a native app type of experience


00:31:20.460 --> 00:31:22.860
So, please put put some hotkeys out there for us


00:31:22.940 --> 00:31:23.180
All right.


00:31:23.180 --> 00:31:24.980
So pressing dot takes us to the first one.


00:31:24.980 --> 00:31:26.720
So installing hatch.


00:31:26.720 --> 00:31:28.640
Obviously you can pip install it.


00:31:28.640 --> 00:31:32.900
However, you offer some interesting other areas I want to talk about.


00:31:32.900 --> 00:31:36.220
First of all, my favorite pipX, I love pipX.


00:31:36.220 --> 00:31:42.100
If you've got a tool that you don't directly import into your code that


00:31:42.100 --> 00:31:46.980
does stuff against your Python apps, boy, pipX is almost always a good choice.


00:31:46.980 --> 00:31:47.580
What do you think?


00:31:47.580 --> 00:31:48.820
Oh yeah, pipX is awesome.


00:31:48.820 --> 00:31:49.160
Yeah.


00:31:49.220 --> 00:31:55.120
Yeah, it just allows you to provide isolated apps for command line apps.


00:31:55.120 --> 00:31:55.620
Yeah.


00:31:55.620 --> 00:31:58.520
It manages everything and you don't even have to think about it.


00:31:58.520 --> 00:31:59.020
So.


00:31:59.020 --> 00:31:59.520
Yep.


00:31:59.520 --> 00:32:01.020
It just creates its own little environment.


00:32:01.020 --> 00:32:03.960
You can say upgrade all my installed CLI tools.


00:32:03.960 --> 00:32:07.420
It's like package manager if the thing that it's managing


00:32:07.420 --> 00:32:08.420
is built with Python.


00:32:08.420 --> 00:32:08.920
It's great.


00:32:08.920 --> 00:32:11.320
I had chat on the creator of PIPX a while ago.


00:32:11.320 --> 00:32:12.520
So people, if they want to hear more about it,


00:32:12.520 --> 00:32:13.660
they can listen to that show.


00:32:13.660 --> 00:32:14.620
Homebrew, good.


00:32:14.620 --> 00:32:16.220
Conda brew.


00:32:16.220 --> 00:32:17.460
Mac ports is interesting.


00:32:17.460 --> 00:32:19.960
But the one that stood out to me was Mamba.


00:32:19.960 --> 00:32:21.600
I'm like, wait, what's Mamba?


00:32:21.600 --> 00:32:24.460
So it's interesting.


00:32:24.460 --> 00:32:25.720
I hadn't heard of that, but yeah.


00:32:25.720 --> 00:32:27.340
- Yeah, I don't use Conda that much,


00:32:27.340 --> 00:32:28.600
but as far as I know,


00:32:28.600 --> 00:32:32.000
there's a few different distributions of Conda.


00:32:32.000 --> 00:32:34.080
So there's Anaconda,


00:32:34.080 --> 00:32:37.240
which gives you like over a gigabyte installed,


00:32:37.240 --> 00:32:40.360
like massive scientific computing.


00:32:40.360 --> 00:32:42.160
There's Miniconda,


00:32:42.160 --> 00:32:46.960
and Miniconda gives you just the bare minimum Conda CLI


00:32:46.960 --> 00:32:50.240
with like package management and that's what most people use, I think.


00:32:50.240 --> 00:32:55.360
But now there's Mamba, which is like mini-conda, but it pulls from


00:32:55.360 --> 00:33:03.480
conda-forge by default and conda-forge is sort of like our PyPI where anybody


00:33:03.480 --> 00:33:05.840
can contribute their own packages.


00:33:05.840 --> 00:33:07.800
So I think that's the main difference.


00:33:07.800 --> 00:33:11.480
And yeah, it is faster and it was rewritten.


00:33:11.480 --> 00:33:13.280
And that's what Mamba is.


00:33:13.320 --> 00:33:18.320
It's a re-implementation of Conda, the Conda Package Manager and C++.


00:33:18.320 --> 00:33:23.760
Doing parallel downloading and other bits of that, which is interesting.


00:33:23.760 --> 00:33:24.080
Cool.


00:33:24.080 --> 00:33:29.320
Well, I don't use either all that much, but it's still kind of cool to see there.


00:33:29.320 --> 00:33:33.560
So you could Mamba install Hatch if that was your workflow as well, right?


00:33:33.560 --> 00:33:34.440
Okay.


00:33:34.440 --> 00:33:36.200
So installing it pretty easy.


00:33:36.200 --> 00:33:39.800
If you were to do it, if somebody gave you a blank machine and said,


00:33:39.800 --> 00:33:42.360
set this up to use Hatch, what would you do?


00:33:42.600 --> 00:33:44.960
- For now I would do PipX.


00:33:44.960 --> 00:33:45.800
- Okay.


00:33:45.800 --> 00:33:47.760
- In the future, like we talked about in the beginning,


00:33:47.760 --> 00:33:51.160
I plan to have like an actual executable


00:33:51.160 --> 00:33:53.840
that does the work, like Python does.


00:33:53.840 --> 00:33:56.240
But until then, then probably PipX.


00:33:56.240 --> 00:33:59.920
- Okay, so maybe then it would be Homebrew and Winget


00:33:59.920 --> 00:34:03.900
and apps, things like the higher level OS ones, okay.


00:34:03.900 --> 00:34:07.560
This portion of Talk Python to Me


00:34:07.560 --> 00:34:09.600
is brought to you by Sentry.


00:34:09.600 --> 00:34:12.040
Is your Python application fast


00:34:12.040 --> 00:34:14.320
Or does it sometimes suffer from slowdowns


00:34:14.320 --> 00:34:16.440
and unexpected latency?


00:34:16.440 --> 00:34:18.600
Does this usually only happen in production?


00:34:18.600 --> 00:34:20.440
It's really tough to track down the problems


00:34:20.440 --> 00:34:22.120
at that point, isn't it?


00:34:22.120 --> 00:34:23.480
If you've looked at APM,


00:34:23.480 --> 00:34:26.000
application performance monitoring products before,


00:34:26.000 --> 00:34:28.420
they may have felt out of place for software teams.


00:34:28.420 --> 00:34:31.200
Many of them are more focused on legacy problems


00:34:31.200 --> 00:34:33.160
made for ops and infrastructure teams


00:34:33.160 --> 00:34:36.640
to keep their infrastructure and services up and running.


00:34:36.640 --> 00:34:40.800
Sentry has just launched their new APM service.


00:34:40.800 --> 00:34:43.060
And Sentry's approach to application monitoring


00:34:43.060 --> 00:34:45.640
is focused on being actionable, affordable,


00:34:45.640 --> 00:34:47.900
and actually built for developers.


00:34:47.900 --> 00:34:49.300
Whether it's a slow running query


00:34:49.300 --> 00:34:51.380
or latent payment endpoint that's at risk


00:34:51.380 --> 00:34:53.640
of timing out and causing sales to tank,


00:34:53.640 --> 00:34:57.520
Sentry removes the complexity and does the analysis for you,


00:34:57.520 --> 00:34:59.780
surfacing the most critical performance issues


00:34:59.780 --> 00:35:01.580
so you can address them immediately.


00:35:01.580 --> 00:35:03.620
Most legacy APM tools focus on


00:35:03.620 --> 00:35:05.780
an ingest everything approach,


00:35:05.780 --> 00:35:08.620
resulting in high storage costs, noisy environments,


00:35:08.620 --> 00:35:11.020
and an enormous amount of telemetry data,


00:35:11.020 --> 00:35:14.120
most developers will never need to analyze.


00:35:14.120 --> 00:35:16.020
Sentry has taken a different approach,


00:35:16.020 --> 00:35:19.340
building the most affordable APM solution in the market.


00:35:19.340 --> 00:35:22.100
They've removed the noise and extract the maximum value


00:35:22.100 --> 00:35:23.260
out of your performance data


00:35:23.260 --> 00:35:25.980
while passing the savings directly onto you,


00:35:25.980 --> 00:35:27.940
especially for Talk Python listeners


00:35:27.940 --> 00:35:30.220
who use the code Talk Python.


00:35:30.220 --> 00:35:33.420
So get started at talkpython.fm/sentry


00:35:33.420 --> 00:35:37.140
and be sure to use their code, Talk Python, all lowercase,


00:35:37.140 --> 00:35:40.300
so you let them know that you heard about them from us.


00:35:40.300 --> 00:35:44.100
My thanks to Sentry for keeping this podcast going strong.


00:35:44.100 --> 00:35:48.700
All right, so the way we get started,


00:35:48.700 --> 00:35:50.820
if we just say Hatch New,


00:35:50.820 --> 00:35:52.100
and I thought one of the things


00:35:52.100 --> 00:35:54.260
I don't normally do here on the podcast,


00:35:54.260 --> 00:35:55.100
but I think it might be fun


00:35:55.100 --> 00:35:57.340
is just to kind of go through these steps here


00:35:57.340 --> 00:36:01.540
to see what it's like to get a sense,


00:36:01.540 --> 00:36:02.940
'cause then I can ask questions.


00:36:02.940 --> 00:36:05.660
So I'll say Hatch New Kalki,


00:36:05.660 --> 00:36:06.920
I'll call my little app Kalki,


00:36:06.920 --> 00:36:09.140
And tell us about what we get when we run that.


00:36:09.140 --> 00:36:13.160
- Sure, so it makes your package as you named it


00:36:13.160 --> 00:36:16.960
with about.py and in it.py.


00:36:16.960 --> 00:36:19.120
The in it.py obviously makes it,


00:36:19.120 --> 00:36:22.320
turns that directory into a Python package.


00:36:22.320 --> 00:36:26.000
The about.py stores the version by default.


00:36:26.000 --> 00:36:29.140
And that's where it reads it by default.


00:36:29.140 --> 00:36:30.640
It gives you, oh yeah, go ahead.


00:36:30.640 --> 00:36:31.480
- Well, I was just gonna say,


00:36:31.480 --> 00:36:33.880
one of the things I can type now is hatch version


00:36:33.880 --> 00:36:36.780
and it gives me, basically pulls out the version


00:36:36.780 --> 00:36:38.740
of about.py, right?


00:36:38.740 --> 00:36:42.180
- Yeah, you can, if you do the same command again,


00:36:42.180 --> 00:36:45.100
but pass in the arg like minor,


00:36:45.100 --> 00:36:46.580
then it can bump it as well.


00:36:46.580 --> 00:36:49.700
- Yeah, so the old version is what it says, is 001,


00:36:49.700 --> 00:36:51.900
new version is 010.


00:36:51.900 --> 00:36:54.620
Could I say build and get 11, something like that?


00:36:54.620 --> 00:36:56.460
No, what would I type to change the last one?


00:36:56.460 --> 00:36:58.100
- RC, you should do RC.


00:36:58.100 --> 00:36:58.920
- Okay.


00:36:58.920 --> 00:37:01.420
- It's documented to allow arguments as well.


00:37:01.420 --> 00:37:02.260
- Got it, yeah, sure.


00:37:02.260 --> 00:37:05.260
- So yeah, then it also gives you a test directory


00:37:05.260 --> 00:37:08.020
that doesn't have any predefined tests,


00:37:08.020 --> 00:37:09.660
but you can add tests to it.


00:37:09.660 --> 00:37:14.340
And then the most important part is the pyproject.toml,


00:37:14.340 --> 00:37:17.420
which has your metadata and your other config.


00:37:17.420 --> 00:37:20.860
- So it's got the build system set to be Hatchling,


00:37:20.860 --> 00:37:22.380
and then it's got all the project settings,


00:37:22.380 --> 00:37:25.860
like who is the author, what are the requirements,


00:37:25.860 --> 00:37:26.980
and all that stuff, right?


00:37:26.980 --> 00:37:30.140
- And from the author, it would have gotten that from Git.


00:37:30.140 --> 00:37:31.600
The default comes from Git,


00:37:31.600 --> 00:37:34.540
so that's why it has the right stuff for you.


00:37:34.540 --> 00:37:36.720
And then down here is testing.


00:37:36.720 --> 00:37:40.420
So some coverage stuff and environments.


00:37:40.420 --> 00:37:42.740
- When I typed Hatchenew, could I have made it


00:37:42.740 --> 00:37:44.880
ask me those questions like, who are you and stuff?


00:37:44.880 --> 00:37:46.500
- There is an interactive mode, yeah.


00:37:46.500 --> 00:37:48.020
- Okay, yeah.


00:37:48.020 --> 00:37:52.620
Yeah, so you also, as part of this pyproject.toml,


00:37:52.620 --> 00:37:54.420
you create some of these commands.


00:37:54.420 --> 00:37:56.020
These are the scripts you were talking about


00:37:56.020 --> 00:37:56.860
a little bit, right?


00:37:56.860 --> 00:37:59.740
Like you've got the test and other options you can run.


00:37:59.740 --> 00:38:03.540
- This default example down there has environment,


00:38:03.540 --> 00:38:06.600
which is just default, which is a little bit special.


00:38:06.600 --> 00:38:10.140
It just means you have to add a prefix on the command line.


00:38:10.140 --> 00:38:13.060
And so there's two scripts by default, a cov,


00:38:13.060 --> 00:38:16.300
so you could do like a hatch run cov,


00:38:16.300 --> 00:38:19.100
and it will run pytest with coverage.


00:38:19.100 --> 00:38:21.620
And then another command is no cov.


00:38:21.620 --> 00:38:25.260
- Yeah, I can do hatch test, hatch run test.


00:38:25.260 --> 00:38:26.100
Is that a thing as well?


00:38:26.100 --> 00:38:27.380
- There is no test command.


00:38:27.380 --> 00:38:28.860
You could do pytest,


00:38:28.860 --> 00:38:31.700
so if you do hatch run pytest, you could, yeah.


00:38:31.700 --> 00:38:33.200
- Yeah, excellent, that's really cool.


00:38:33.200 --> 00:38:36.320
- Yeah, so it basically creates the structure for you


00:38:36.320 --> 00:38:39.160
and the workflow that we just discussed


00:38:39.160 --> 00:38:41.140
would be if I've got a folder


00:38:41.140 --> 00:38:43.880
and I wanna start from absolute scratch,


00:38:43.880 --> 00:38:47.880
I want to create the entire directory structure


00:38:47.880 --> 00:38:51.160
through Hatch, but there's also a way I can


00:38:51.160 --> 00:38:54.920
go to an existing one and kinda convert it to Hatch


00:38:54.920 --> 00:38:56.160
or upgrade it to Hatch, right?


00:38:56.160 --> 00:38:59.120
- Me and other contributors have done it so much


00:38:59.120 --> 00:39:01.600
that most of the edge cases are gone,


00:39:01.600 --> 00:39:05.680
So it can take pretty much any setup.py


00:39:05.680 --> 00:39:10.060
and turn it into a hatch pyproject.toml.


00:39:10.060 --> 00:39:11.160
And it's pretty good now.


00:39:11.160 --> 00:39:14.640
- Okay, and because it doesn't actually need


00:39:14.640 --> 00:39:19.320
hatch the CLI, the environment tool to do that,


00:39:19.320 --> 00:39:22.600
to run and build, you could just use that


00:39:22.600 --> 00:39:25.600
to get your pyproject.toml out and use hatch.ling


00:39:25.600 --> 00:39:27.520
as a build engine, right?


00:39:27.520 --> 00:39:28.720
But still just keep going.


00:39:28.720 --> 00:39:29.560
- Yeah, exactly.


00:39:29.560 --> 00:39:31.000
- Okay, so people are sitting out there like,


00:39:31.000 --> 00:39:33.320
I really should be using pyproject.toml,


00:39:33.320 --> 00:39:36.920
but you know, inertia, I don't really want to do it.


00:39:36.920 --> 00:39:39.880
Like, Hatch new init might do it, right?


00:39:39.880 --> 00:39:41.600
- Yeah, yeah, that's an option.


00:39:41.600 --> 00:39:44.800
Before you time out, if you do which Python,


00:39:44.800 --> 00:39:46.440
which maybe I can just illustrate,


00:39:46.440 --> 00:39:49.880
and if you do Hatch run, which Python 3,


00:39:49.880 --> 00:39:52.000
it will show you that it's actually


00:39:52.000 --> 00:39:54.120
in a managed virtual environment.


00:39:54.120 --> 00:39:55.300
- Okay.


00:39:55.300 --> 00:39:58.200
So it's created a virtual environment over in,


00:39:58.200 --> 00:40:00.400
at least for me, library application support,


00:40:00.400 --> 00:40:02.200
and so on, based on the project name.


00:40:02.200 --> 00:40:04.960
And then it has some big long deal on the end.


00:40:04.960 --> 00:40:07.520
- It's just a, yeah, it's just a checksum.


00:40:07.520 --> 00:40:09.800
- Okay, what is that checksum based on?


00:40:09.800 --> 00:40:11.880
The reason I ask is what do I change


00:40:11.880 --> 00:40:13.360
to make this no longer work?


00:40:13.360 --> 00:40:15.560
(laughing)


00:40:15.560 --> 00:40:18.000
- So I do that because it's possible


00:40:18.000 --> 00:40:20.240
that somewhere else on your machine,


00:40:20.240 --> 00:40:22.080
you might have another project,


00:40:22.080 --> 00:40:25.080
maybe a fork of Kalki with the same name.


00:40:25.080 --> 00:40:25.920
So I have to add hash. - Likely,


00:40:25.920 --> 00:40:28.920
it's a very popular library, so it's likely.


00:40:28.920 --> 00:40:30.000
- That's likely.


00:40:30.000 --> 00:40:31.280
- That's why I do that, yeah.


00:40:31.280 --> 00:40:32.120
- I see, okay.


00:40:32.120 --> 00:40:33.960
That's like a hash of the path


00:40:33.960 --> 00:40:35.400
to where the project is or something.


00:40:35.400 --> 00:40:36.240
Okay. - Yep.


00:40:36.240 --> 00:40:38.120
- A lot of projects, a lot of management tools


00:40:38.120 --> 00:40:40.680
work this way, Conda works this way, for example,


00:40:40.680 --> 00:40:43.040
where there's some other place


00:40:43.040 --> 00:40:44.800
where the virtual environments live.


00:40:44.800 --> 00:40:47.920
Is there a way, another workflow that's pretty common


00:40:47.920 --> 00:40:49.400
is to have the virtual environment


00:40:49.400 --> 00:40:52.120
in a VNV folder at the root of the project.


00:40:52.120 --> 00:40:55.240
Is there a way when I create my project to say,


00:40:55.240 --> 00:40:57.120
I want a local ENV?


00:40:57.120 --> 00:40:59.620
not at project creation time,


00:40:59.620 --> 00:41:02.640
but there is a way in either HatchConfig


00:41:02.640 --> 00:41:06.260
or in pyproject.toml, they are able to change that.


00:41:06.260 --> 00:41:08.740
Yeah, which is documented on the site.


00:41:08.740 --> 00:41:13.240
- Yeah, the HatchConfig is one of the things I would do.


00:41:13.240 --> 00:41:15.700
There's a lot of cool CLI tools where you can ask it


00:41:15.700 --> 00:41:19.040
to show me the details of whatever it is.


00:41:19.040 --> 00:41:21.940
So what would I put, say, into the config


00:41:21.940 --> 00:41:25.820
to say create my VENV locally


00:41:26.700 --> 00:41:28.860
and call it what is it this DERS V?


00:41:28.860 --> 00:41:30.540
>> Yeah, DERS env.


00:41:30.540 --> 00:41:32.620
>> Yeah, env. What would I put in there?


00:41:32.620 --> 00:41:40.540
>> You would have a subtable for virtual and then have the path be just dot venv basically.


00:41:40.540 --> 00:41:42.380
>> Right. Okay. So like a dot slash,


00:41:42.380 --> 00:41:43.860
whatever you want to call it locally.


00:41:43.860 --> 00:41:44.340
>> Yeah.


00:41:44.340 --> 00:41:47.740
>> Is this, I guess I could do


00:41:47.740 --> 00:41:50.980
hatch find config or config find, I guess.


00:41:50.980 --> 00:41:51.820
>> Config find.


00:41:51.820 --> 00:41:55.380
>> Config find. Right. So this is a global,


00:41:55.380 --> 00:42:00.420
Like how do my projects get started using hatch for my machine, not a per project deal, right?


00:42:00.420 --> 00:42:00.780
Yeah.


00:42:00.780 --> 00:42:09.660
That's cool. So kind of like get config. Once I set up my machine, if I say, well, I like my virtual environments like this, then I'll be okay. Right?


00:42:09.660 --> 00:42:24.420
Yeah, it makes it easier to distribute tooling. Like for if you're managing like some corporate environment where you're using hatch for everything, then it's nice to have a config that you can modify just as a machine level.


00:42:24.700 --> 00:42:27.260
then every project will do the same.


00:42:27.260 --> 00:42:30.460
Just as a team to say, look, we always want tests.


00:42:30.460 --> 00:42:34.780
We always want this other thing that we call it that we always want this default library.


00:42:34.780 --> 00:42:37.420
Sorry, we want this default license, right?


00:42:37.420 --> 00:42:43.820
We don't want MIT, we want, you know, corp.inc or whatever license that we use.


00:42:43.820 --> 00:42:46.540
So quick question from ZL out there, I think is relevant.


00:42:46.540 --> 00:42:50.140
Is this useful for application development, not libraries?


00:42:50.140 --> 00:42:55.180
Say if I'm building like a flask app or a FastAPI app, like would, would this be relevant?


00:42:55.180 --> 00:42:59.980
Yeah. So especially with the environment management, that's kind of what applications


00:42:59.980 --> 00:43:06.380
we use anyway. The missing feature of course, like the other person asked is the lock files.


00:43:06.380 --> 00:43:12.540
For any app you're going to want to be able to reproducibly build the app. So right now


00:43:12.540 --> 00:43:18.700
there's not a way built in other than using an environment with like pip tools or something.


00:43:18.700 --> 00:43:21.580
So I'm going to add that plugin interface soon.


00:43:21.580 --> 00:43:22.080
Interesting.


00:43:22.080 --> 00:43:24.160
Does pip-tools work with pyproject.toml?


00:43:24.160 --> 00:43:24.860
It does now.


00:43:24.860 --> 00:43:25.840
Yeah, it does.


00:43:25.840 --> 00:43:26.140
Yeah.


00:43:26.140 --> 00:43:30.580
I've only used it with requirements.in and then generate the requirements.txt.


00:43:30.580 --> 00:43:32.700
But yeah, they added that last summer.


00:43:32.700 --> 00:43:34.760
I think I'm so behind the times on this.


00:43:34.760 --> 00:43:38.280
You know, these workflows, I, I, I'm sort of joking, but also not.


00:43:38.280 --> 00:43:41.920
These workflows, you kind of get into like, well, here's how I build these apps.


00:43:41.920 --> 00:43:43.380
Here's how I manage my requirements.


00:43:43.380 --> 00:43:45.100
And then you just tunnel.


00:43:45.100 --> 00:43:47.300
I think a lot of people just go, okay, well, that's working for me.


00:43:47.300 --> 00:43:47.940
I'm doing that.


00:43:48.020 --> 00:43:50.180
You know, I, yeah.


00:43:50.180 --> 00:43:50.580
Yeah.


00:43:50.580 --> 00:43:51.080
Yeah.


00:43:51.080 --> 00:43:56.780
And then, so if I want to like, so for example, when I asked which Python.


00:43:56.780 --> 00:43:59.880
It said the one from homebrew you've installed silly.


00:43:59.880 --> 00:44:01.320
Of course, that's your global Python.


00:44:01.320 --> 00:44:04.380
I want to activate a virtual environment.


00:44:04.380 --> 00:44:08.880
If I can, when I get into like this application mode, I would do a hatch shell.


00:44:08.880 --> 00:44:09.280
Right.


00:44:09.280 --> 00:44:09.780
Yes.


00:44:09.780 --> 00:44:12.320
And because I have an awesome, Oh my posh.


00:44:12.320 --> 00:44:16.620
You can see my prompt here's now taking on the calc 3.11.2


00:44:16.820 --> 00:44:18.140
environment as part of my prompt.


00:44:18.140 --> 00:44:20.400
So, yeah, that's the one.


00:44:20.400 --> 00:44:22.000
So it's, it's working now.


00:44:22.000 --> 00:44:25.760
If I ask just straight up, which Python is that virtual environment one, right.


00:44:25.760 --> 00:44:31.040
And I can do pip list and so on, but there's also ways I think I recall in


00:44:31.040 --> 00:44:36.400
hatch to like show me my dependencies and get a list of, yeah, show.


00:44:36.400 --> 00:44:37.520
DEP show.


00:44:37.520 --> 00:44:37.880
Yeah.


00:44:37.880 --> 00:44:38.540
Is it showed up?


00:44:38.540 --> 00:44:39.720
Table, table.


00:44:39.720 --> 00:44:41.500
Okay.


00:44:41.500 --> 00:44:46.000
I only have right now two dependencies, pytest and pytest-cov.


00:44:46.000 --> 00:44:46.240
Yeah.


00:44:46.240 --> 00:44:46.680
Interesting.


00:44:46.680 --> 00:44:49.480
Or I could do requirements.


00:44:49.480 --> 00:44:50.980
Yep, and I would spit out the...


00:44:50.980 --> 00:44:52.480
The same but it's not at the table, right?


00:44:52.480 --> 00:44:53.180
Just plain text.


00:44:53.180 --> 00:44:54.780
Yeah, just like requirements.txt.


00:44:54.780 --> 00:44:55.780
Got it. Okay.


00:44:55.780 --> 00:44:57.280
Yeah, excellent.


00:44:57.280 --> 00:44:58.280
What do you recommend?


00:44:58.280 --> 00:45:00.880
So there's the hatch run commands,


00:45:00.880 --> 00:45:01.780
which will use the environment,


00:45:01.780 --> 00:45:03.980
or you could just go into the shell and run it.


00:45:03.980 --> 00:45:09.280
Or, if I'm sneaky and I put my virtual environment in there,


00:45:09.280 --> 00:45:12.080
I might have something that automatically detects


00:45:12.080 --> 00:45:13.880
that environment and picks it up.


00:45:13.880 --> 00:45:15.780
So for example, PyCharm might go,


00:45:15.780 --> 00:45:20.140
you know what, I see a VE and V folder, we'll use that and, and just grab it and


00:45:20.140 --> 00:45:24.420
not care about hatch directly. Right. That's actually one of the reasons I was


00:45:24.420 --> 00:45:29.940
asking about putting it locally is it's kind of a hassle to find that thing and


00:45:29.940 --> 00:45:35.700
tell your editor, go find it over here. Whereas it automatically finds the top


00:45:35.700 --> 00:45:37.140
level of project variants, you know?


00:45:37.140 --> 00:45:41.900
Yeah. So you can do, as we talked about sitting in the current directory, like a


00:45:42.140 --> 00:45:49.100
dot vnv and yeah, Python, VS Code, they'll, they'll pick it up because it is just a virtual


00:45:49.100 --> 00:45:53.980
environment at the end of the day. Nothing too special. So yeah, it will work out of the box.


00:45:53.980 --> 00:45:59.580
Yeah. And klutz out there in the audience has got us covered. PIPtools command is pip compile,


00:45:59.580 --> 00:46:06.780
rebuild output file, such and such pyproject.txt from pyproject.toml. Yeah. Cool. Nice. Yeah. And


00:46:06.780 --> 00:46:09.380
and variations on that, I suspect.


00:46:09.380 --> 00:46:12.580
So one thing that I was thinking about this


00:46:12.580 --> 00:46:14.580
that I expected Hatch to do, and maybe it does,


00:46:14.580 --> 00:46:16.740
and maybe it doesn't, I just don't know,


00:46:16.740 --> 00:46:19.660
is suppose I want to use requests for Kalki.


00:46:19.660 --> 00:46:22.020
Like, Kalki can't run locally.


00:46:22.020 --> 00:46:24.340
It needs its calculator API service


00:46:24.340 --> 00:46:25.580
that it's going to connect to.


00:46:25.580 --> 00:46:27.820
So it needs a request or HTTPS or something.


00:46:27.820 --> 00:46:28.300
Yeah.


00:46:28.300 --> 00:46:31.060
Is there a way with Hatch to say, I have a new requirement,


00:46:31.060 --> 00:46:33.940
set that up, put it in the PyProject TOML, install it?


00:46:33.940 --> 00:46:36.940
That's going to come with the lock file plugin.


00:46:36.940 --> 00:46:40.460
I figured it wouldn't make sense to add those commands


00:46:40.460 --> 00:46:43.380
until I knew how locking would work.


00:46:43.380 --> 00:46:48.380
'Cause adding and removing always hits the locking logic.


00:46:48.380 --> 00:46:50.880
And since there wasn't locking,


00:46:50.880 --> 00:46:53.860
it didn't make sense to me to add those commands.


00:46:53.860 --> 00:46:55.740
So it's going to come soon.


00:46:55.740 --> 00:46:59.660
So right now you would just modify your pyproject.toml


00:46:59.660 --> 00:47:00.580
until those are added.


00:47:00.580 --> 00:47:02.900
- And then I think there's a way where


00:47:02.900 --> 00:47:06.500
Hatch looked at your PyProject Toml and said, okay, you're going to need.


00:47:06.500 --> 00:47:08.740
These dependencies, right?


00:47:08.740 --> 00:47:13.020
When you run it, I thought it installed the dependencies that were in the


00:47:13.020 --> 00:47:15.360
PyProject Toml, even if it won't edit it.


00:47:15.360 --> 00:47:18.500
Like if I put something in there and I try to run it, it'll say, oh, you need this.


00:47:18.500 --> 00:47:18.720
Yeah.


00:47:18.720 --> 00:47:19.980
It'll sync automatically.


00:47:19.980 --> 00:47:21.640
Oh, what command do I use to do that one?


00:47:21.640 --> 00:47:25.100
Either a run command or the shell command.


00:47:25.100 --> 00:47:25.580
I see.


00:47:25.580 --> 00:47:27.140
Oh, even the shell will do it, huh?


00:47:27.140 --> 00:47:30.160
You do hatch run pip list, for example.


00:47:30.160 --> 00:47:30.420
Yep.


00:47:30.460 --> 00:47:30.640
Okay.


00:47:30.640 --> 00:47:32.020
Now in pyproject.


00:47:32.020 --> 00:47:35.760
Tomo and like requests maybe too.


00:47:35.760 --> 00:47:36.020
Yeah.


00:47:36.020 --> 00:47:38.980
Right now I have requests and like friends of requests.


00:47:38.980 --> 00:47:39.340
Yeah.


00:47:39.340 --> 00:47:39.620
Yep.


00:47:39.620 --> 00:47:40.100
Yeah.


00:47:40.100 --> 00:47:40.980
Okay.


00:47:40.980 --> 00:47:41.820
That's pretty cool.


00:47:41.820 --> 00:47:42.500
Nice.


00:47:42.500 --> 00:47:46.180
And then I'm looking forward to the lock stuff because I absolutely love pip tools.


00:47:46.180 --> 00:47:49.340
I think it is a glorious way.


00:47:49.340 --> 00:47:54.060
I used for a while, I used panda bot at get up and it drives me crazy.


00:47:54.060 --> 00:47:55.300
It's like so noisy.


00:47:55.300 --> 00:47:58.260
I've got like 30 PRS a week.


00:47:58.260 --> 00:48:00.100
I'm like, you know, could you just.


00:48:00.100 --> 00:48:04.660
package this up and so now I just start periodically,


00:48:04.660 --> 00:48:06.460
I just go, "Okay, I'm going to use pip tools and just ask,


00:48:06.460 --> 00:48:07.820
how has the world changed?"


00:48:07.820 --> 00:48:10.900
and then update my stuff in a more sane way.


00:48:10.900 --> 00:48:12.400
>> It was a bit noisy for us too.


00:48:12.400 --> 00:48:17.300
At work, we have a custom dependency update logic as well.


00:48:17.300 --> 00:48:19.660
I think there is an open feature request for


00:48:19.660 --> 00:48:22.020
a dependent bot to chunk the updates,


00:48:22.020 --> 00:48:23.900
but I don't know if it has happened yet.


00:48:23.900 --> 00:48:28.420
>> Yeah, I've seen one of those for a couple of years and there was like 100 plus one.


00:48:28.420 --> 00:48:31.320
Me too, me too, like I gotta review these things.


00:48:31.320 --> 00:48:32.160
(laughing)


00:48:32.160 --> 00:48:33.000
You know what I mean?


00:48:33.000 --> 00:48:34.400
And I don't know if it's there.


00:48:34.400 --> 00:48:36.880
It's not there on my projects, it's still.


00:48:36.880 --> 00:48:40.440
I'll get 20, I'll do a pip compile update


00:48:40.440 --> 00:48:42.480
and I'll push that and I'll get like 20 messages.


00:48:42.480 --> 00:48:43.640
These are no longer required.


00:48:43.640 --> 00:48:44.860
I'm like, okay, thanks.


00:48:44.860 --> 00:48:47.360
Could you just batch them?


00:48:47.360 --> 00:48:48.400
You know, anyway.


00:48:48.400 --> 00:48:50.240
Okay, so Kalki is coming along here.


00:48:50.240 --> 00:48:52.000
Let's just imagine that it does good stuff.


00:48:52.000 --> 00:48:53.400
I haven't even written any code for it,


00:48:53.400 --> 00:48:56.080
but it depends upon requests, so that's a start.


00:48:56.080 --> 00:49:01.120
So the next step going kind of forking on the various possible definitions of what packaging


00:49:01.120 --> 00:49:05.720
is a next step for this thing might be I want to put it on to PyPI or create a wheel I can


00:49:05.720 --> 00:49:06.720
share.


00:49:06.720 --> 00:49:08.840
So Hatch also supports that, right?


00:49:08.840 --> 00:49:09.840
Yeah.


00:49:09.840 --> 00:49:12.520
So first you have to create the artifacts.


00:49:12.520 --> 00:49:18.560
So you would do Hatch build and that would build Metafault, both the source distribution


00:49:18.560 --> 00:49:19.560
and the wheel.


00:49:19.560 --> 00:49:20.560
Okay.


00:49:20.560 --> 00:49:26.920
Just like the other tools, there's going to be a dist G I S T that now has those.


00:49:26.920 --> 00:49:32.560
And if you run a hatch publish, that would put it on PyPI by default.


00:49:32.560 --> 00:49:36.960
And it would prompt you for your username.


00:49:36.960 --> 00:49:38.160
I'm not entering that.


00:49:38.160 --> 00:49:38.360
Yeah.


00:49:38.360 --> 00:49:40.680
I don't want to own calc on PyPI.


00:49:40.680 --> 00:49:41.400
No, just kidding.


00:49:41.400 --> 00:49:44.160
But yeah, I don't think I have it configured, so it wouldn't really do anything,


00:49:44.160 --> 00:49:46.760
but it would, it would go and put it on PyPI, right?


00:49:46.760 --> 00:49:47.080
Yeah.


00:49:47.080 --> 00:49:47.640
Potentially.


00:49:47.640 --> 00:49:48.200
Yeah.


00:49:48.200 --> 00:49:49.360
That's pretty straightforward.


00:49:49.720 --> 00:49:55.320
forward. You also point out in the docs that CI, build wheel and some, and


00:49:55.320 --> 00:49:59.820
things like TOX, they, you know, you could be the build, just Hatchling could


00:49:59.820 --> 00:50:01.300
be the build system for that, right?


00:50:01.300 --> 00:50:06.160
Hatch does like a lot. So you can use, you know, parts. Say you wanted to only


00:50:06.160 --> 00:50:11.740
use environment management to replace like TOX or NOX, you could do that. If


00:50:11.740 --> 00:50:16.780
you wanted to only use Hatchling with like CI build wheel or other tools, you


00:50:16.780 --> 00:50:17.620
You could do that.


00:50:17.620 --> 00:50:21.100
If you wanted to only use the version management,


00:50:21.100 --> 00:50:21.940
you could do that.


00:50:21.940 --> 00:50:24.580
It's kind of choose whatever you want.


00:50:24.580 --> 00:50:25.980
Yeah, you're not locked in.


00:50:25.980 --> 00:50:27.620
- Yeah, so the last thing I could do is publish,


00:50:27.620 --> 00:50:30.300
but I'm not really gonna go.


00:50:30.300 --> 00:50:31.140
- Yeah, yeah.


00:50:31.140 --> 00:50:33.840
- There's also a way to set in the config file.


00:50:33.840 --> 00:50:35.980
You said that if I set into the config file


00:50:35.980 --> 00:50:39.660
under the publish index, disable true,


00:50:39.660 --> 00:50:41.220
well, you can make it confirm


00:50:41.220 --> 00:50:43.100
rather than just straight up publishing it, right?


00:50:43.100 --> 00:50:44.860
- Yeah, that was a feature request.


00:50:44.860 --> 00:50:45.700
Yep, so.


00:50:45.700 --> 00:50:46.520
- Yeah, cool.


00:50:46.520 --> 00:50:52.960
Another thing that I've always stumbled on when I do this, at least with Twine, is I'll


00:50:52.960 --> 00:50:57.760
have some project, I've done this, I've published a version, later I'll come back to it, I'll


00:50:57.760 --> 00:50:59.760
make some changes, I'll increment the version.


00:50:59.760 --> 00:51:05.760
I used to have to do that manually, but now I can just do a hatch version and then something


00:51:05.760 --> 00:51:08.560
like, I could build one again, minor.


00:51:08.560 --> 00:51:11.040
There we go.


00:51:11.040 --> 00:51:13.920
It'll automatically change it and that changes the code, which is great.


00:51:13.920 --> 00:51:19.080
So now if I do a hatch build, which is really nice, it'll create a new one.


00:51:19.080 --> 00:51:23.280
But if I look in my project, I've got the old one and the new one and you can't republish


00:51:23.280 --> 00:51:24.460
the old one, I don't think.


00:51:24.460 --> 00:51:29.240
So what happens if I just say publish now and I've already got 0.1.0 out there?


00:51:29.240 --> 00:51:36.040
Yeah, so you can do hatch build -c for clean, and it should clean it first.


00:51:36.040 --> 00:51:37.100
Okay, that's cool.


00:51:37.100 --> 00:51:40.800
Because then I can just say hatch publish and not worry about conflicts.


00:51:40.800 --> 00:51:44.680
that exists already on PyPI, it will ignore us.


00:51:44.680 --> 00:51:48.120
It'll put a warning, but it won't fail the command.


00:51:48.120 --> 00:51:50.920
I think Twine by default does fail.


00:51:50.920 --> 00:51:51.760
- I think it does as well.


00:51:51.760 --> 00:51:52.580
- And has a pass if blank.


00:51:52.580 --> 00:51:56.280
So I do the inverse because that was frustrating to me too.


00:51:56.280 --> 00:51:58.880
So I do the opposite, yeah.


00:51:58.880 --> 00:52:00.520
- Perfect, I love it.


00:52:00.520 --> 00:52:03.920
Okay, yeah, that's a really cool aspect.


00:52:03.920 --> 00:52:08.160
And so, yeah, that was, I guess, walking through that.


00:52:08.160 --> 00:52:09.840
I think it was neat to just kind of explore it together.


00:52:09.840 --> 00:52:11.880
So thanks for talking me through that.


00:52:11.880 --> 00:52:14.600
- Yeah, the past month I've been pretty busy at work,


00:52:14.600 --> 00:52:16.960
but I'm gonna pick up development again


00:52:16.960 --> 00:52:18.800
next week for Hatch.


00:52:18.800 --> 00:52:21.920
There's a bunch of open feature requests


00:52:21.920 --> 00:52:23.600
I have to crank out.


00:52:23.600 --> 00:52:25.800
- Yeah, that's a pretty popular project on GitHub


00:52:25.800 --> 00:52:27.520
with 3.7 thousand stars.


00:52:27.520 --> 00:52:30.240
So I suspect there's some user feedback.


00:52:30.240 --> 00:52:33.240
- Yep, and so I guess the main next features


00:52:33.240 --> 00:52:37.440
are the lock file plugin mechanism,


00:52:37.440 --> 00:52:43.500
And also people are asking about workspaces, which is basically like,


00:52:43.500 --> 00:52:47.340
kind of like editable installs, but more built in and fundamental.


00:52:47.340 --> 00:52:51.800
So I'm going to add that especially useful for monorepos.


00:52:51.800 --> 00:52:52.620
Oh, right.


00:52:52.620 --> 00:52:52.980
Okay.


00:52:52.980 --> 00:52:57.320
Cause you, you don't necessarily want to hatch build all of


00:52:57.320 --> 00:52:58.880
Google or, or whatever, right?


00:52:58.880 --> 00:53:00.360
Right.


00:53:00.360 --> 00:53:00.640
Right.


00:53:00.640 --> 00:53:05.460
So workspaces, like a view into the monorepo that I said, I know


00:53:05.460 --> 00:53:09.420
there's like 500 projects here and they all have their things, but I want


00:53:09.420 --> 00:53:11.280
the web app and the data layer.


00:53:11.280 --> 00:53:12.560
That's it.


00:53:12.560 --> 00:53:13.560
Something like that.


00:53:13.560 --> 00:53:14.120
Exactly.


00:53:14.120 --> 00:53:14.440
Yeah.


00:53:14.440 --> 00:53:14.880
Okay.


00:53:14.880 --> 00:53:16.260
That sounds useful.


00:53:16.260 --> 00:53:16.560
Yeah.


00:53:16.560 --> 00:53:21.080
And I'm modeling it after cargo workspaces and rust.


00:53:21.080 --> 00:53:25.600
I worked with that recently and I think they have pretty good config and like a


00:53:25.600 --> 00:53:28.920
model of how local development works.


00:53:28.920 --> 00:53:30.600
So, yeah, that sounds really great.


00:53:30.600 --> 00:53:33.000
I do my preview of what Hatch will look like.


00:53:33.000 --> 00:53:36.800
It's basically cargo workspaces.


00:53:36.800 --> 00:53:37.840
Nice.


00:53:37.840 --> 00:53:39.840
Jonathan out there says--


00:53:39.840 --> 00:53:42.800
that sounds like music to his ears-- definitely waiting on the workspaces


00:53:42.800 --> 00:53:44.880
feature for our mono repo work.


00:53:44.880 --> 00:53:45.440
Nice.


00:53:45.440 --> 00:53:48.680
And then also Ryan is asking you, any chance


00:53:48.680 --> 00:53:51.560
there could be a package build target?


00:53:51.560 --> 00:53:54.600
I'm using PECs via TOCS currently.


00:53:54.600 --> 00:53:55.880
Yes, that's possible.


00:53:55.880 --> 00:54:00.160
One thing that's great about plugins is I don't have to do every feature.


00:54:00.160 --> 00:54:02.080
Uh, anybody can do that.


00:54:02.080 --> 00:54:07.480
So we do have a few to the docs and go to the top, plugins.


00:54:07.480 --> 00:54:07.920
Plugins.


00:54:07.920 --> 00:54:08.400
Where are you?


00:54:08.400 --> 00:54:08.640
Yeah.


00:54:08.640 --> 00:54:09.160
Home.


00:54:09.160 --> 00:54:09.440
Yeah.


00:54:09.440 --> 00:54:11.520
Again, builder builder.


00:54:11.520 --> 00:54:11.800
Yeah.


00:54:11.800 --> 00:54:13.040
And then reference.


00:54:13.040 --> 00:54:13.440
Yep.


00:54:13.440 --> 00:54:15.440
And then, yeah, so known third party.


00:54:15.440 --> 00:54:19.640
So here's some examples of third party builder plugins.


00:54:19.640 --> 00:54:25.360
So the build command that you ran, it has a option to output a target.


00:54:25.800 --> 00:54:29.800
if they named target other than we will and sdisk.


00:54:29.800 --> 00:54:32.160
So you can write an arbitrary builder


00:54:32.160 --> 00:54:34.360
and build those targets.


00:54:34.360 --> 00:54:35.200
So yeah.


00:54:35.200 --> 00:54:38.080
- Okay, it's probably not super hard to do, I'm guessing,


00:54:38.080 --> 00:54:40.280
to just like basically bundle up the commands


00:54:40.280 --> 00:54:41.320
to build the pecs.


00:54:41.320 --> 00:54:42.920
- Yep, and just implement the interface


00:54:42.920 --> 00:54:44.320
and that's all you gotta do.


00:54:44.320 --> 00:54:45.280
- Yeah, excellent.


00:54:45.280 --> 00:54:46.120
Good to hear.


00:54:46.120 --> 00:54:49.800
I vote for the lock file management,


00:54:49.800 --> 00:54:51.200
the dependency management.


00:54:51.200 --> 00:54:52.800
I'm excited to hear that that's coming.


00:54:52.800 --> 00:54:54.120
- Yep, that's coming next.


00:54:54.120 --> 00:54:58.480
Are you thinking of building on something like pip-tools or doing your own?


00:54:58.480 --> 00:55:05.980
I wouldn't feel confident doing my own without feedback from like other folks that have been


00:55:05.980 --> 00:55:07.400
in this for longer.


00:55:07.400 --> 00:55:12.720
Like Brett Cannon, I think he wrote the first black file pip attempt last year.


00:55:12.720 --> 00:55:18.960
For various reasons it got rejected, but I think his next attempt will happen.


00:55:18.960 --> 00:55:19.960
I just don't know when.


00:55:19.960 --> 00:55:20.960
Excellent.


00:55:20.960 --> 00:55:23.760
a suggestion, a Cython builder would be cool.


00:55:23.760 --> 00:55:25.760
Maybe a mypyC.


00:55:25.760 --> 00:55:26.600
I don't know, there's a lot of--


00:55:26.600 --> 00:55:28.120
- That one exists actually.


00:55:28.120 --> 00:55:29.280
- Oh, the mypyC one does?


00:55:29.280 --> 00:55:30.600
Okay, I do remember seeing.


00:55:30.600 --> 00:55:33.480
- Yeah, if you go back to the plugins,


00:55:33.480 --> 00:55:35.280
I know the docs are a lot, sorry.


00:55:35.280 --> 00:55:36.880
Back one, build hook.


00:55:36.880 --> 00:55:37.700
- Okay.


00:55:37.700 --> 00:55:38.840
- And then reference,


00:55:38.840 --> 00:55:40.840
and it's listed under third-party,


00:55:40.840 --> 00:55:42.280
hatch mypyC.


00:55:42.280 --> 00:55:43.760
I maintain that one actually.


00:55:43.760 --> 00:55:44.600
- Okay, nice.


00:55:44.600 --> 00:55:47.280
- Actually, I have black builds with that now.


00:55:47.280 --> 00:55:48.120
- Nice.


00:55:48.120 --> 00:55:50.740
What about the Jupyter builder?


00:55:50.740 --> 00:55:51.740
What does that do?


00:55:51.740 --> 00:55:56.580
- So recently, Jupyter switched their entire extension


00:55:56.580 --> 00:55:59.980
ecosystem to Hatchling, actually.


00:55:59.980 --> 00:56:03.260
So now the standard way to do Jupyter stuff


00:56:03.260 --> 00:56:05.540
is with Hatchling, and that's the plugin


00:56:05.540 --> 00:56:07.260
that everything happens with.


00:56:07.260 --> 00:56:08.420
- Nice, okay, cool.


00:56:08.420 --> 00:56:10.020
Probably makes you feel good to see


00:56:10.020 --> 00:56:12.900
major projects like that using your tools.


00:56:12.900 --> 00:56:15.780
- I'm happy that people are finding value in it,


00:56:15.780 --> 00:56:19.980
and every time someone says, "Oh, it's so easy to use,"


00:56:19.980 --> 00:56:20.940
Yeah, it makes me happy.


00:56:20.940 --> 00:56:21.940
- Yeah, indeed.


00:56:21.940 --> 00:56:25.140
- I like stuff that can do a lot, but is very simple.


00:56:25.140 --> 00:56:26.740
That's my purpose.


00:56:26.740 --> 00:56:29.180
- Yeah, I think I might play with the config,


00:56:29.180 --> 00:56:31.420
the global config to see how close I can make it


00:56:31.420 --> 00:56:33.700
match my current workflow and make it


00:56:33.700 --> 00:56:34.880
kind of coexist what I'm doing.


00:56:34.880 --> 00:56:35.900
So that'd be fun.


00:56:35.900 --> 00:56:37.140
Awesome.


00:56:37.140 --> 00:56:40.620
All right, well, I think we're about out of time.


00:56:40.620 --> 00:56:42.060
Anything else you want to throw out there


00:56:42.060 --> 00:56:44.100
while we're talking about your project?


00:56:44.100 --> 00:56:47.100
- If anybody wants to contribute,


00:56:47.100 --> 00:56:49.220
there's lots of open issues.


00:56:49.220 --> 00:56:52.460
I have had lots of really nice contributors.


00:56:52.460 --> 00:56:55.940
They almost finished adding type hinting everywhere.


00:56:55.940 --> 00:56:58.820
Like in the beginning I had zero type hinting,


00:56:58.820 --> 00:57:01.300
and then a bunch of contributors helped out with that,


00:57:01.300 --> 00:57:04.700
and that was almost fully my part.


00:57:04.700 --> 00:57:05.520
So.


00:57:05.520 --> 00:57:07.180
- Cool, yeah, I saw you had 40 contributors,


00:57:07.180 --> 00:57:08.100
so that's really cool.


00:57:08.100 --> 00:57:08.940
- Yeah.


00:57:08.940 --> 00:57:10.380
- Maybe one other quick comment


00:57:10.380 --> 00:57:13.140
that I'd like to ask you about here is,


00:57:13.140 --> 00:57:16.660
I see the domain this is on is hatch.pypa,


00:57:16.660 --> 00:57:19.180
as in Python Packaging Authority, .io.


00:57:19.180 --> 00:57:25.420
how'd it end up on pypa.io versus yeah, hatch.dev or whatever.


00:57:25.420 --> 00:57:29.140
This is just the standard domain for all the packages.


00:57:29.140 --> 00:57:34.300
So if you type in pip rather than hatch and get rid of the latest part,


00:57:34.300 --> 00:57:36.100
it'll go right to the pip docs.


00:57:36.100 --> 00:57:36.980
Right, right, right.


00:57:36.980 --> 00:57:40.780
Well, I was thinking more about like, how did it become sort of official?


00:57:40.780 --> 00:57:46.500
I announced hatch 1.0, like the rewrite that happened last year sometime.


00:57:46.840 --> 00:57:51.080
And then the same day, maybe the next day, I forget who, but somebody in the


00:57:51.080 --> 00:57:57.280
discord was asking if I wanted to join the PyPI and I was like, well, sure.


00:57:57.280 --> 00:57:58.240
That makes sense.


00:57:58.240 --> 00:58:03.240
So then there was a vote on a mailing list and it was unanimous that they


00:58:03.240 --> 00:58:09.200
agreed and then after I think seven or 10 days, then we transferred the repo


00:58:09.200 --> 00:58:12.240
and it was hosted on the new domain.


00:58:12.240 --> 00:58:12.720
Oh yeah.


00:58:12.720 --> 00:58:15.000
And it's also under the GitHub organization of PyPI.


00:58:15.000 --> 00:58:15.440
That's right.


00:58:15.440 --> 00:58:16.160
Excellent.


00:58:16.720 --> 00:58:17.020
All right.


00:58:17.020 --> 00:58:19.180
Well, really nice project.


00:58:19.180 --> 00:58:21.220
Congrats on all the uptake and.


00:58:21.220 --> 00:58:21.940
Thanks.


00:58:21.940 --> 00:58:22.220
Yeah.


00:58:22.220 --> 00:58:23.220
It looks like people are enjoying it.


00:58:23.220 --> 00:58:26.740
So two quick questions before you get out of here.


00:58:26.740 --> 00:58:30.300
I didn't get to ask you this on the panel one, because one we're over time


00:58:30.300 --> 00:58:33.400
and two, there was a bunch of people in order just another 10 minute debate.


00:58:33.400 --> 00:58:36.940
First of all, notable PyPI package, something that you've come across.


00:58:36.940 --> 00:58:37.880
Like, Oh, this is super cool.


00:58:37.880 --> 00:58:39.940
People should know about package X.


00:58:39.940 --> 00:58:40.840
Anything come to mind?


00:58:40.840 --> 00:58:45.400
I guess it's a bit cliche because right now it's actually pretty popular, but I


00:58:45.400 --> 00:58:48.360
I would still evangelize Textool.


00:58:48.360 --> 00:58:53.360
Textool is like a new application for building T-UIs,


00:58:53.360 --> 00:58:56.640
which is like textual, not user interfaces.


00:58:56.640 --> 00:59:00.600
I've actually been doing a project at work that uses this,


00:59:00.600 --> 00:59:02.840
and it's very nice.


00:59:02.840 --> 00:59:03.800
It's pretty awesome.


00:59:03.800 --> 00:59:05.920
- It's kind of nuts what this thing does.


00:59:05.920 --> 00:59:06.760
- Yeah.


00:59:06.760 --> 00:59:10.000
- This is like the higher order UI framework


00:59:10.000 --> 00:59:11.900
built on Rich by Will McGugan and team,


00:59:11.900 --> 00:59:15.060
and you get like fly out docking panels


00:59:15.060 --> 00:59:17.220
>> It's crazy.


00:59:17.220 --> 00:59:22.540
>> Yeah. It's like if the web could be in a terminal.


00:59:22.540 --> 00:59:23.060
>> True.


00:59:23.060 --> 00:59:23.820
>> Something like that.


00:59:23.820 --> 00:59:28.340
>> It's true. I plan to actually use this for a hatch when I have time.


00:59:28.340 --> 00:59:33.500
On the creation, the interactive creation of a new project,


00:59:33.500 --> 00:59:34.980
on the left-hand side,


00:59:34.980 --> 00:59:37.580
you would have the inputs and then it would render


00:59:37.580 --> 00:59:41.180
the pyproject.timel on the right-hand side and markdown.


00:59:41.180 --> 00:59:42.020
>> Oh, that's super cool.


00:59:42.020 --> 00:59:42.740
>> In a few months.


00:59:42.740 --> 00:59:43.040
Yeah.


00:59:43.040 --> 00:59:43.680
Fun.


00:59:43.680 --> 00:59:48.200
And then if you're going to work on hatch, what editor are you using these days?


00:59:48.200 --> 00:59:55.760
I have PyCharm for large projects when I'm doing like one-off scripts, then VS Code.


00:59:55.760 --> 00:59:57.140
Okay, cool.


00:59:57.140 --> 00:59:57.720
All right.


00:59:57.720 --> 01:00:00.140
So this may be a question I got to start asking people.


01:00:00.140 --> 01:00:00.840
I don't know.


01:00:00.840 --> 01:00:05.880
PyCharm is, and all the JetBrains IDs I believe are starting to promote a, what


01:00:05.880 --> 01:00:10.720
they call the new UI, which I think is more, much more like VS Code.


01:00:11.220 --> 01:00:15.420
Are you the old school style or are you the new UI style?


01:00:15.420 --> 01:00:16.580
I've not seen that yet.


01:00:16.580 --> 01:00:17.140
Actually.


01:00:17.140 --> 01:00:18.620
There's a gear in the upper right.


01:00:18.620 --> 01:00:20.460
If you click on it, it'll say new UI.


01:00:20.460 --> 01:00:21.820
To me, I'm still I'm old school.


01:00:21.820 --> 01:00:22.840
I love the old one.


01:00:22.840 --> 01:00:25.780
I mean, I'm, I'm using PyCharm, not VS Code for a reason.


01:00:25.780 --> 01:00:29.000
So I don't want it to look more like VS Code for my style.


01:00:29.000 --> 01:00:29.240
Right.


01:00:29.240 --> 01:00:30.980
But I know other people prefer the opposite.


01:00:30.980 --> 01:00:32.980
I wouldn't mind using VS Code.


01:00:32.980 --> 01:00:37.460
There's one missing feature that is like a blocker where I just want to use VS


01:00:37.460 --> 01:00:42.140
code full time, which is it can't yet do vertical tabs.


01:00:42.140 --> 01:00:44.960
There's an open feature for years.


01:00:44.960 --> 01:00:49.140
And I guess technically there's some kind of challenge to implementing that.


01:00:49.140 --> 01:00:53.640
So right now, if you have like a hundred times, it doesn't look very nice.


01:00:53.640 --> 01:00:54.500
It's all horizontal.


01:00:54.500 --> 01:00:55.580
It's just a bunch of X's.


01:00:55.580 --> 01:00:57.140
Yeah.


01:00:57.140 --> 01:00:58.520
I can't select them.


01:00:58.520 --> 01:00:59.260
I just closed them.


01:00:59.260 --> 01:00:59.600
Yeah.


01:00:59.600 --> 01:00:59.860
Yeah.


01:00:59.860 --> 01:01:00.220
I got it.


01:01:00.220 --> 01:01:00.580
Okay.


01:01:00.580 --> 01:01:01.360
Very cool.


01:01:01.360 --> 01:01:02.240
All right.


01:01:02.240 --> 01:01:06.640
Well, congrats with Hatch and thanks for coming on the show.


01:01:06.740 --> 01:01:08.180
- Yeah, thank you very much.


01:01:08.180 --> 01:01:09.020
Nice talking to you.


01:01:09.020 --> 01:01:09.840
- Yeah, you too, bye bye.


01:01:09.840 --> 01:01:11.840
- All right, bye bye.


01:01:11.840 --> 01:01:15.100
- This has been another episode of Talk Python to Me.


01:01:15.100 --> 01:01:16.540
Thank you to our sponsors.


01:01:16.540 --> 01:01:17.900
Be sure to check out what they're offering.


01:01:17.900 --> 01:01:19.780
It really helps support the show.


01:01:19.780 --> 01:01:20.940
Don't miss out on the opportunity


01:01:20.940 --> 01:01:22.180
to level up your startup game


01:01:22.180 --> 01:01:24.100
with Microsoft for Startups Founders Hub.


01:01:24.100 --> 01:01:25.800
Get over six figures in benefits,


01:01:25.800 --> 01:01:29.400
including Azure credits and access to open AIs, APIs.


01:01:29.400 --> 01:01:32.620
Apply now at talkpython.fm/foundershub.


01:01:32.620 --> 01:01:34.220
Take some stress out of your life.


01:01:34.220 --> 01:01:37.740
get notified immediately about errors and performance issues


01:01:37.740 --> 01:01:40.340
in your web or mobile applications with Sentry.


01:01:40.340 --> 01:01:45.220
Just visit talkpython.fm/sentry and get started for free.


01:01:45.220 --> 01:01:49.120
And be sure to use the promo code, talkpython, all one word.


01:01:49.120 --> 01:01:50.440
Want to level up your Python?


01:01:50.440 --> 01:01:52.220
We have one of the largest catalogs


01:01:52.220 --> 01:01:54.580
of Python video courses over at Talk Python.


01:01:54.580 --> 01:01:56.620
Our content ranges from true beginners


01:01:56.620 --> 01:01:59.600
to deeply advanced topics like memory and async.


01:01:59.600 --> 01:02:02.260
And best of all, there's not a subscription in sight.


01:02:02.260 --> 01:02:05.300
Check it out for yourself at training.talkpython.fm.


01:02:05.300 --> 01:02:06.920
Be sure to subscribe to the show,


01:02:06.920 --> 01:02:09.920
open your favorite podcast app, and search for Python.


01:02:09.920 --> 01:02:11.300
We should be right at the top.


01:02:11.300 --> 01:02:14.180
You can also find the iTunes feed at /itunes,


01:02:14.180 --> 01:02:16.360
the Google Play feed at /play,


01:02:16.360 --> 01:02:20.380
and the Direct RSS feed at /rss on talkpython.fm.


01:02:20.380 --> 01:02:23.900
We're live streaming most of our recordings these days.


01:02:23.900 --> 01:02:25.040
If you want to be part of the show


01:02:25.040 --> 01:02:27.300
and have your comments featured on the air,


01:02:27.300 --> 01:02:29.180
be sure to subscribe to our YouTube channel


01:02:29.180 --> 01:02:32.180
at talkpython.fm/youtube.


01:02:32.180 --> 01:02:33.580
This is your host, Michael Kennedy.


01:02:33.580 --> 01:02:34.740
Thanks so much for listening.


01:02:34.740 --> 01:02:35.980
I really appreciate it.


01:02:35.980 --> 01:02:38.220
Now get out there and write some Python code.


01:02:38.220 --> 01:02:40.800
(upbeat music)


01:02:40.800 --> 01:02:55.800
[Music]


01:02:55.800 --> 01:02:58.380
(upbeat music)

