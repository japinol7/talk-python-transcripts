WEBVTT

00:00:00.960 --> 00:00:04.000
Tonya, welcome to Talk Python to me. It's awesome to have you here.

00:00:04.000 --> 00:00:07.920
Oh my gosh, I'm so excited to be here. Thank you for having me, Michael.

00:00:07.920 --> 00:00:14.320
Yeah, you're very welcome. And I'm super excited. You know, in a good and bad way,

00:00:14.320 --> 00:00:18.160
excited to have you here because I'm very excited to talk to you. But some of the stuff that we're

00:00:18.160 --> 00:00:23.600
going to talk about might be a little unnerving for people out there listening. They may pause

00:00:23.600 --> 00:00:27.840
the show and then run off to make some changes to what they're doing and then come back. And

00:00:27.840 --> 00:00:32.080
that part might be a little exciting in a different way, but it's going to be fun.

00:00:32.080 --> 00:00:33.600
Yes, it will.

00:00:33.600 --> 00:00:38.320
Have you ever had that experience where you're giving a presentation or something and somebody

00:00:38.320 --> 00:00:41.040
goes gasp in the audience and maybe runs away or something?

00:00:41.040 --> 00:00:47.680
I was doing a capture the flag contest once and I was showing people how to do an SQL injection.

00:00:47.680 --> 00:00:53.760
And then we just like logged in without a password. And this woman was like, "Oh my gosh." And she

00:00:53.760 --> 00:01:00.480
literally just stood up. She's like, "I have to go." And she told me the next day she fixed three of them

00:01:00.480 --> 00:01:05.360
at work and she just stayed all night. Oh, amazing. You made a huge impression.

00:01:05.360 --> 00:01:12.480
It was pretty cool. Yeah, that's pretty awesome. I've never had that around security, but I was doing

00:01:12.480 --> 00:01:17.760
an in-person class once for database things, which we're going to touch on databases for sure. And this had

00:01:17.760 --> 00:01:23.520
to do with transactions. And I said, "If you do things this way, it doesn't actually use a transaction

00:01:23.520 --> 00:01:29.280
unless..." And oh, yes, it does. And I showed that it did. And somebody said, "I'll be back later." And

00:01:29.280 --> 00:01:36.560
they just took off. And they go, "Oh my gosh, this is not good. We have to fix this now." So yeah, hopefully no

00:01:36.560 --> 00:01:42.800
one actually has to do that here. But I'm sure there's a ton for people to learn. So speaking of

00:01:42.800 --> 00:01:50.400
learning, let's start with a little bit about you. You have a domain, shehackspurple.ca. That tells us

00:01:50.400 --> 00:01:57.760
several things about you, I believe. Purple is interesting. Hacks is interesting. And Canada.

00:01:57.760 --> 00:02:04.320
Tell us about yourself. So I was a software developer for a really long time. And then I switched to

00:02:04.320 --> 00:02:11.440
security. And when I was a software developer, I used to also play music in bars and music festivals as

00:02:11.440 --> 00:02:18.160
sort of my hobby. But I released albums and did all of that. So that's why I'm quite the public speaker,

00:02:18.160 --> 00:02:25.360
because I've been on stage my whole life. And so I switched to security and I became a pen tester,

00:02:25.360 --> 00:02:30.800
which is red team. And that's where you attack things. And it's offensive security. And I don't mean

00:02:30.800 --> 00:02:36.080
we swear at people. But then- No, it's the other way around, I believe,

00:02:36.080 --> 00:02:37.920
though. This is the direction the swearing probably goes.

00:02:37.920 --> 00:02:44.720
Right? But then as I was doing pen testing, I kept sitting with the devs and I would pair

00:02:44.720 --> 00:02:48.880
program with them and I'd help them fix things. And I'm like, "Well, if we threat model this, well..." And

00:02:48.880 --> 00:02:54.480
I kept doing AppSec, essentially. And people are like, "You keep doing blue team. You keep doing defenses.

00:02:54.480 --> 00:02:58.960
It's like you can't make up your mind." And eventually one of them's like, "You're a purple team."

00:02:58.960 --> 00:03:06.880
And so I was at a conference in Europe and on stage during the conference, this woman, she kept playing

00:03:06.880 --> 00:03:12.640
with her phone on a panel, ignoring the audience. And I was super shocked. And finally, she's like, "I'm really

00:03:12.640 --> 00:03:20.560
sorry, but her company had created WannaCry by accident." Yeah. And it had just broken out.

00:03:20.560 --> 00:03:27.760
And she's like, "So there's this virus and it just hit the NHS and took down the hospitals and this and

00:03:27.760 --> 00:03:33.920
that. And oh my gosh." And so everyone ran out of the room freaking out. And they all went to check

00:03:33.920 --> 00:03:38.480
Twitter because that's where everyone was talking. And so people are like, "You have to make a Twitter

00:03:38.480 --> 00:03:44.080
account." And so I was like, "Oh, what will I call myself?" And I was like, "She acts computers." And then

00:03:44.080 --> 00:03:48.960
it was too long because that was my email address. Sheactscomputers@gmail.com. That used to be my email.

00:03:48.960 --> 00:03:55.040
But then basically that was too long. So I was like, "I don't know." And someone's like, "Well,

00:03:55.040 --> 00:04:00.160
you have that purple team thing going." So I was like, "Well, it's not like anyone will ever follow me."

00:04:00.160 --> 00:04:06.720
So I changed it to She Hacks Purple. And then it turns out that I really... So then I put some purple in my

00:04:06.720 --> 00:04:13.760
hair to tease my friend, Kevin. And it went all from there. Like, yeah.

00:04:13.760 --> 00:04:14.720
I own a lot of purple now.

00:04:14.720 --> 00:04:19.840
That's amazing. Yeah. It's now part of the vibe, right? That's awesome. That's a really cool story.

00:04:19.840 --> 00:04:27.760
You said you've been a programmer for a while and then got into app security and pen testing. How did

00:04:27.760 --> 00:04:28.480
you get into all that?

00:04:28.480 --> 00:04:36.160
It was totally an accident. So like I said, I was in a band. And so we had this pen tester in our office

00:04:36.160 --> 00:04:41.280
and he was in a band. And so we obviously became friends. And one day I came to his desk and I was

00:04:41.280 --> 00:04:46.480
like, "Hey, my band wrote this song called Mandatory Dance Party. And we want to make this mobile app

00:04:46.480 --> 00:04:51.120
where if you're near someone else that has the app, it goes beep, beep, beep, mandatory dance party." And

00:04:51.120 --> 00:04:56.080
then you both have to dance or else. And then whoever jiggles their phone the most wins. I'm like,

00:04:56.080 --> 00:04:57.200
"Did you want to make this app with me?" He's like, "There's nothing. I want to do more." And so our friendship began. And then for a year and a half, he just nagged me to become a pen tester.

00:04:57.200 --> 00:05:16.320
He's like, "You'd be so good. You'd be really good at it. You've been doing, you've been a dev for like 17 years. It's time for something new." And I was like, "No, I am the king of software. This is the best.

00:05:16.320 --> 00:05:24.160
I make something out of nothing all day. It'll never be cooler than this." But then it turned out it was pretty cool.

00:05:24.160 --> 00:05:33.840
And you still get to write code sometimes. And then eventually I figured out I was not meant to be a pen tester. I was meant to do app secs. So I still get to hang out with devs all day.

00:05:33.840 --> 00:05:44.400
I'm not alone freezing cold in a data center at night. And I get to, it's like more like a social butterfly type of job where a pen tester is more like the lone wolf type of job.

00:05:44.400 --> 00:05:50.480
Yeah. Yeah. You're working on the disassembly, looking for, you know, fuzzing something, looking for it to crash.

00:05:50.480 --> 00:06:03.360
Yeah. So I, you still get to break stuff in app secs sometimes, but like, that's not all you do. You do a lot of conversations, a lot of brainstorming, and that's better for my extroverted personality.

00:06:03.360 --> 00:06:12.880
Yeah. That's awesome. You have a newsletter. People can visit your website and sign up and I'll put links to all those sorts of things in the show notes for you.

00:06:12.880 --> 00:06:26.960
Yeah. So yeah, a couple of things I wanted to talk about. First of all, I've seen you given presentations about threat modeling. Tell us what is threat modeling and what are some of the takeaways?

00:06:26.960 --> 00:06:39.040
Obviously our audience here is largely Python developers, data scientists, and a ginormous assorted other that sort of orbits around those spaces.

00:06:39.040 --> 00:06:45.040
But so they're, they'd probably be pretty interested on the developer data scientist side of threat modeling.

00:06:45.040 --> 00:06:47.920
What is it and what's it like for devs?

00:06:47.920 --> 00:07:02.960
So threat modeling is sort of like evil brainstorming. So you get a security person like me in the room, you get a dev or one of the technical leads for your system, and then you get the product owner.

00:07:02.960 --> 00:07:08.160
So the person that understands the business of this app and like why it exists in the world.

00:07:08.160 --> 00:07:13.440
And at least those three people, if more people come, it's better, but that's fine.

00:07:13.440 --> 00:07:18.080
And then you talk about what could go wrong. And what are you going to do about it?

00:07:18.800 --> 00:07:24.640
I have this friend named Adam Shostak, who's written a bunch of books about it. And he asked, so I used to ask a ton of questions.

00:07:24.640 --> 00:07:36.640
And then I met him. And now I asked four things. What are we doing? And so then I usually draw it out on a whiteboard. So like, oh, there's an API and it talks to this and then this happens and then people steal bikes. Okay.

00:07:36.640 --> 00:07:37.920
And then

00:07:37.920 --> 00:07:43.280
Do we have a database? Is it in the cloud? Is it in a data center that we own? Whatever. Yeah.

00:07:43.280 --> 00:08:12.800
Yeah. Yeah. And then I ask questions along the way. And then I'm like, so what could go wrong here? And then it's like, you know, these two things are talking. Do we authenticate first or do we just talk to any old API? Right? And we go through and we come up with some things that could go wrong. And we make a list. And then I'm like, okay, so what are we going to do about these things? And you talk about basically, is this a serious risk? Is it scary? Or is it like, you know what, if that happens, it's not really a big deal. And the likelihood is

00:08:12.800 --> 00:08:30.000
Is it really, really rare. So maybe we'll accept that risk. But a lot of them, it's like, you know, if we added a certificate here, or we included authentication there, like we can make some small changes. And if you're during the design phase of the system development lifecycle, it costs you nothing, right?

00:08:30.000 --> 00:08:30.560
Right.

00:08:30.560 --> 00:08:42.160
Usually it costs you nothing, or very little. And so then you basically improve your design. And then and you write it all out. And then hopefully someone approves

00:08:42.320 --> 00:08:54.320
This these changes. And then at the end, a thing that Adam asks is, did we do a good job? And that is the magical question. Because the very first time I did one of these in the government,

00:08:54.320 --> 00:09:08.320
I did not realize that that's what I was doing to my director. I was like, well, what about this? And what about that? And this could go wrong. And because I was trying to kill the project, because I thought it was a terrible part. And we did end up canceling it.

00:09:08.320 --> 00:09:22.320
But I brought up like all these huge existential risks to this ridiculous project they're thinking of doing. And he just kept saying, it'll be fine. And I'll manage that risk. And I was like, you realize manage that risk means nothing, right? You're going to do nothing.

00:09:22.320 --> 00:09:38.320
So I brought up eight really big risks. And you want to do nothing about any of them. I'm like, are we doing it? Like, do you think we've done a good job here? Like you feel proud today? Because I don't. And then we started again. And then eventually, over the months, we canceled the project, because it was quite silly.

00:09:38.320 --> 00:09:53.320
Just to be clear, I usually love it when software development projects go forward. This was a very special situation where it was not in the taxpayers best interest. Yes. Anyway, I'm like, there's more there, but I'm like, NDAs.

00:09:53.320 --> 00:09:54.320
Yeah, of course.

00:09:54.320 --> 00:10:02.320
But usually, we come up with like, a couple of changes that grossly reduce the risk of the system.

00:10:02.320 --> 00:10:03.320
Yeah.

00:10:03.320 --> 00:10:19.320
And it's quite fun. Like, once you start, so with the first time I went to a threat model, I came with my dev background of I will fix any problem you bring to me. I just need to do code, and I can fix whatever you need.

00:10:19.320 --> 00:10:31.320
But it's different when it's like, I'm going to try to break things, you have to learn kind of this new skill set of like, how can I make it do stuff it should not do. And it took me a while. And now I'm brutal.

00:10:31.320 --> 00:10:35.320
I go to the movies. I'm like, we could have gotten free.

00:10:35.320 --> 00:10:38.320
It's even outside of technology now, huh?

00:10:38.320 --> 00:10:41.320
Oh, yeah. Oh, it's everywhere now. Yeah.

00:10:41.320 --> 00:10:48.320
My significant other who does not work in tech will be like, I'm just trying to threat model this for the kids.

00:10:48.320 --> 00:10:52.320
If we go to the pool, they'll have wet bathing suits.

00:10:52.320 --> 00:11:00.320
Yeah, yeah. Very nice. You know, I think there's two different ways to look at it.

00:11:00.320 --> 00:11:13.320
Obviously, from a developer perspective, you've got to look at, well, what packages or libraries am I using? And how are we validating input and all those kinds of things?

00:11:13.320 --> 00:11:23.320
And I feel like that's one level, but maybe the threat modeling is a little bit broader. Like, are we storing stuff unencrypted anywhere?

00:11:23.320 --> 00:11:24.320
Yeah.

00:11:24.320 --> 00:11:29.320
Who could get that? And it's the thing that makes me nervous. I said I would be somewhat nervous about this at the beginning.

00:11:29.320 --> 00:11:42.320
The stuff that makes me nervous about all of these things is the asymmetry of it. As a developer or data scientist or somebody in charge of this information and the systems, you have to be right all the time.

00:11:42.320 --> 00:11:47.320
Right? And if you're ever not right, little Bobby tables is on you like nothing.

00:11:47.320 --> 00:11:48.320
It's bad.

00:11:48.320 --> 00:11:59.320
It's like a goalie. It's like a goalie, right? Like you let in two goals and everyone's like, you're the worst. And it's like, I defended against hundreds of shots. Do I get nothing?

00:11:59.320 --> 00:12:00.320
Exactly.

00:12:00.320 --> 00:12:25.320
Well, developers shouldn't be on their own in this. So that's the whole thing. So like the job of the app sec person, in my opinion, is to support the developers in making more secure apps. Right? So booking a threat modeling time with them, or, you know, providing a stack analysis tool or secret scanner or whatever to scan their code, so that they can make better code.

00:12:25.320 --> 00:12:54.320
Yeah. So they have help giving them training, giving them like a list of super clear requirements at the beginning of the project, rather than at the end telling them it's wrong. That is a huge one. Like if someone's going to build an API, I would prefer the API be behind an API gateway if it's publicly accessible. And I want to do things like turn on authentication and authorization and rate limiting and all sorts of fancy, nice, awesome stuff that they offer.

00:12:54.320 --> 00:13:01.320
And so I tell them at the very beginning of the project, I don't wait until the end. And I'm like, well, this design is all wrong.

00:13:01.320 --> 00:13:03.320
Like if you're right.

00:13:03.320 --> 00:13:22.320
Yeah, but that's what we did back in the day. Like when I had my first vulnerability assessment done, I, you know, I'm supposed to go to prod in two days and they ran the world's crappiest dynamic scanner on my computer, on my app. And they're like, you have cross site scripting. And this was so long ago.

00:13:22.320 --> 00:13:29.320
So I searched for cross site scripting on the internet and there was only three web pages. So I'm old everyone.

00:13:29.320 --> 00:13:36.320
And one was this thing called OWASP. And I was like, what the heck is that?

00:13:36.320 --> 00:13:58.320
And it took me quite a while to figure out how to fix it. Right? Like we've come a long way, but yeah, the developer shouldn't be alone in this anymore. They should have help. I'm not saying that every company does have that. I'm saying every company should. If you have a bunch of devs, you should have eventually a security person that supports them.

00:13:58.320 --> 00:14:14.320
Right. Maybe sits, sits with them for a few hours a week or a month or something and sort of, as you said, like a butterfly sort of moves around the team, hanging out with other people like, Oh, you work on the API. Okay. Let's let me hang out with you a bit this morning.

00:14:14.320 --> 00:14:31.980
Ideally, that would be great. Also, I mean, if you have a big enough company doing something like a security champions program, so like each dev team, there's one representative, and you just give them way more training and way more time and you check in with them regularly.

00:14:31.980 --> 00:14:42.360
Like, if I'm working with only like 50 or 60 devs, like you can get to know a lot of them. But I remember working at this one place and there were 2000 devs and me.

00:14:42.360 --> 00:14:43.140
Wow.

00:14:43.980 --> 00:15:10.960
And I was like, okay, so how do I do this? And just very quickly, there was just like that one person per team that I would talk to all the time. And I remember, ironically, I went to Montreal on this vacation trip, and my car got stuck in the mud, because there's been this big rainstorm. And I was like tweeting about it and how I was so sad. And one of my devs came to me and dragged me out of the mud. And I was like, he is champion.

00:15:10.960 --> 00:15:11.800
Wow.

00:15:11.800 --> 00:15:13.500
Oh, that's amazing.

00:15:13.640 --> 00:15:16.500
Yeah. And there's benefits to large teams in there.

00:15:16.500 --> 00:15:27.720
I know. I like, it never occurred to me that like, I would get an answer. He's like, hey, I live in Montreal. Do you need help? And I was like, I do. And he's like, you help me all the time. I'll be right there.

00:15:27.720 --> 00:15:28.720
I was just like, oh, shit.

00:15:29.220 --> 00:15:46.080
That's very cool. Yeah. So you managed it almost. I don't want to endorse Scrum necessarily. But like a Scrum of Scrum equivalent. So sort of you found somebody or different people from who could sort of represent different segments or apps and stuff and got together with those groups.

00:15:46.900 --> 00:16:00.640
Yeah. Yeah. So I didn't know what it was called when I started doing AppSec because I didn't have any training. Right. I was just like, all of our apps are a total mess. I just switched to the security team.

00:16:00.640 --> 00:16:18.320
And so I was like, oh, my gosh, my first one. I remember I because I'd been on the dev team. And then I switched to the security team. And I was like, I'm going to break into a bank at lunch. Who wants to watch? I brought donuts. And everyone's like, you're not going to.

00:16:18.320 --> 00:16:22.340
And I'm like, it's a it's a pretend bank, but I'm going to do it. And they're like, but donuts, right? I'm like, yeah.

00:16:22.340 --> 00:16:23.840
You just got to choose the right motivation.

00:16:23.840 --> 00:16:28.340
I feel like pizza, any sort of carb goes really like it goes over well.

00:16:28.340 --> 00:16:29.840
But yeah, I think it's a good idea.

00:16:29.840 --> 00:16:31.100
And I think it's a good idea.

00:16:31.100 --> 00:16:32.840
And I think it's a good idea.

00:16:32.840 --> 00:16:34.840
And I think it's a good idea.

00:16:34.840 --> 00:16:35.840
And I think it's a good idea.

00:16:42.840 --> 00:16:44.840
And I think it's a good idea.

00:16:44.840 --> 00:16:45.840
And I think it's a good idea.

00:17:22.840 --> 00:17:24.840
And I think it's a good idea.

00:17:24.840 --> 00:17:25.840
And I think it's a good idea.

00:17:25.840 --> 00:17:28.840
Yeah, because I can just read code and stuff.

00:17:28.840 --> 00:17:31.840
And the rest of the security team usually can't.

00:17:31.840 --> 00:17:35.840
And also, so I've gotten in trouble for that, though.

00:17:35.840 --> 00:17:39.840
I've gotten in trouble with the security team at a couple places I've worked,

00:17:39.840 --> 00:17:41.840
where they're like, you're always on their side.

00:17:41.840 --> 00:17:44.840
And I was like, yeah, but they're right.

00:17:44.840 --> 00:17:45.840
And we're wrong this time.

00:17:45.840 --> 00:17:50.840
Because sometimes the security team's being so completely unflexible.

00:17:50.840 --> 00:17:54.840
And I'm like, listen, this is like a minute risk if you really think about it.

00:17:54.840 --> 00:17:59.840
Where like if you look at the context of this and this, it doesn't generate legitimate business risks.

00:17:59.840 --> 00:18:05.840
So no, I'm not going to upgrade off of this vulnerable library because it's not actually exploitable.

00:18:05.840 --> 00:18:07.840
And there's this and this and this precaution.

00:18:07.840 --> 00:18:09.840
And like we're actually fine.

00:18:09.840 --> 00:18:12.840
And it's going to cost like months and months of time.

00:18:12.840 --> 00:18:15.840
And so I'd rather use my social currency on something that really matters.

00:18:15.840 --> 00:18:19.840
And I've just had people get really pissed at me on the security team.

00:18:19.840 --> 00:18:23.840
Like this plus between username and query.

00:18:23.840 --> 00:18:28.840
So yeah, it's just not good.

00:18:28.840 --> 00:18:29.840
It's just not good.

00:18:29.840 --> 00:18:40.840
There is, you know, you see all the time, whether it's NPM or pip or whatever package management tool you're using.

00:18:40.840 --> 00:18:43.840
You might see, oh, or GitHub.

00:18:43.840 --> 00:18:45.840
This library you're using has this vulnerability.

00:18:45.840 --> 00:18:47.840
And it sounds scary.

00:18:47.840 --> 00:18:57.840
But if the vulnerability is in a portion of it that you literally never use and you never expose the internet, you know, it's, there might be bigger fish to fry.

00:18:57.840 --> 00:18:58.840
Who knows? Maybe not.

00:18:58.840 --> 00:18:59.840
Maybe not.

00:18:59.840 --> 00:19:01.840
But a lot of it's, it's hard to decide.

00:19:01.840 --> 00:19:04.840
As you're saying where to spend your time.

00:19:04.840 --> 00:19:05.840
Yeah.

00:19:05.840 --> 00:19:08.840
So we call that reachability in the InfoSec field.

00:19:08.840 --> 00:19:14.840
And so my advice and not everyone agrees is basically if something.

00:19:14.840 --> 00:19:21.840
So let's say you have the math library and the math library has like a thousand different math functions because we love math.

00:19:21.840 --> 00:19:23.840
And one of them has a great big bug in it.

00:19:23.840 --> 00:19:25.840
But we're not calling that one.

00:19:25.840 --> 00:19:26.840
Right.

00:19:26.840 --> 00:19:28.840
And it could, it's probably like a denial of service.

00:19:28.840 --> 00:19:31.840
If you give it this weird number, it'll overflow and then like loop forever.

00:19:31.840 --> 00:19:33.840
And yeah, we're never calling it.

00:19:33.840 --> 00:19:34.840
Who cares?

00:19:34.840 --> 00:19:35.840
Yeah.

00:19:35.840 --> 00:19:37.840
Maybe, maybe it's something like really bad.

00:19:37.840 --> 00:19:39.840
It's like remote code execution.

00:19:39.840 --> 00:19:40.840
Like this sucks.

00:19:40.840 --> 00:19:41.840
Okay.

00:19:41.840 --> 00:19:46.840
But if it's not reachable from within your code, it's probably not actually a risk.

00:19:46.840 --> 00:19:48.840
So let's say it's like the worst one.

00:19:48.840 --> 00:19:49.840
It's remote code execution.

00:19:49.840 --> 00:19:52.840
I'm like, listen, at some point, could you upgrade off of this?

00:19:52.840 --> 00:20:01.840
And I need you to keep scanning it with your software composition analysis tool every time you check your code in to make sure you are not calling that dangerous function.

00:20:01.840 --> 00:20:10.840
So if you switch it around and you are no going to prod, but as long as it's not reachable, then we're not causing legit business risk.

00:20:10.840 --> 00:20:14.840
But I do want it in the backlog because at some point I'd like you to upgrade off.

00:20:14.840 --> 00:20:16.840
But like, let's say it's a medium.

00:20:16.840 --> 00:20:21.840
It's like, yeah, many bugs that I want people to fix.

00:20:21.840 --> 00:20:23.840
And some of them aren't even bugs.

00:20:23.840 --> 00:20:27.840
Like some of them are, I want you to use content security policy header.

00:20:27.840 --> 00:20:29.840
Is that a bug that you're not using it?

00:20:29.840 --> 00:20:32.840
In my heart it is, but technically no.

00:20:32.840 --> 00:20:37.840
But it's an additional layer of security that basically stops cross-site scripting in its tracks.

00:20:37.840 --> 00:20:38.840
Right?

00:20:38.840 --> 00:20:45.840
And so I'd rather spend my social currency getting like the entire organization to adopt CSP,

00:20:45.840 --> 00:20:51.840
then to like upgrade off of tons of different dependencies that aren't actually hurting anyone.

00:20:51.840 --> 00:20:53.840
Yeah, I agree.

00:20:53.840 --> 00:20:55.840
I think that makes a lot of sense.

00:20:55.840 --> 00:20:57.840
Once you've solved all the big...

00:20:57.840 --> 00:20:59.840
This is why security people yell at me.

00:20:59.840 --> 00:21:00.840
Yeah.

00:21:00.840 --> 00:21:04.840
Once you've solved all the other security problems, you can come back to the unreachable ones, right?

00:21:04.840 --> 00:21:05.840
Yeah.

00:21:05.840 --> 00:21:06.840
For sure.

00:21:06.840 --> 00:21:10.840
Yeah, I want to dive into your book and you've got a bunch of good recommendations.

00:21:10.840 --> 00:21:12.840
But before I do, I just have a quick question.

00:21:12.840 --> 00:21:17.840
What do you think, you know, the White House last year or beginning of this year released a thing saying,

00:21:17.840 --> 00:21:21.840
we call for memory safe languages.

00:21:21.840 --> 00:21:24.840
And I know you started in C and C++.

00:21:24.840 --> 00:21:25.840
I also started C++.

00:21:25.840 --> 00:21:30.840
I was kicked to Fortran kicking and screaming for a little while and went back to it and then moved on.

00:21:30.840 --> 00:21:34.840
But, you know, we got a lot more options these days, right?

00:21:34.840 --> 00:21:44.840
And I know folks at the PSF were actually working with the people at the White House to encourage them to consider Python as one of the options.

00:21:44.840 --> 00:21:48.840
What do you think about this and its implications?

00:21:48.840 --> 00:21:53.840
So, a lot of software is written in C. A lot.

00:21:53.840 --> 00:21:55.840
Like, maybe half.

00:21:55.840 --> 00:22:01.840
Like, it's nuts how much is written of our whole world is written in C.

00:22:01.840 --> 00:22:04.840
And they're like, oh, future software.

00:22:04.840 --> 00:22:11.840
So, if we're writing brand new software, yeah, I wouldn't write it in C unless I absolutely had to.

00:22:11.840 --> 00:22:13.840
I would try to use Rust.

00:22:13.840 --> 00:22:17.840
But do I think that everyone's going to suddenly rewrite everything into Rust?

00:22:17.840 --> 00:22:19.840
No, I don't believe that.

00:22:19.840 --> 00:22:21.840
And it's because of a lot of reasons.

00:22:21.840 --> 00:22:29.840
One, like, I'm told it's difficult to develop in Rust because basically there's like no libraries for it compared to C.

00:22:29.840 --> 00:22:31.840
C is so rich.

00:22:31.840 --> 00:22:34.840
There's so many options in C, C++, right?

00:22:34.840 --> 00:22:35.840
Because it's been around forever.

00:22:35.840 --> 00:22:43.840
There's a zillion code samples that you can copy from and then paste into your code, which you should not do unless you understand it fully.

00:22:43.840 --> 00:22:44.840
Yeah.

00:22:44.840 --> 00:22:46.840
So many comments there.

00:22:46.840 --> 00:22:49.840
So, memory safety.

00:22:49.840 --> 00:22:53.840
Like, if you are going to write a new app, I want it to be memory safe.

00:22:53.840 --> 00:22:54.840
Yes, absolutely.

00:22:54.840 --> 00:22:56.840
Do I expect everyone to rewrite all the old code?

00:22:56.840 --> 00:22:57.840
No, no one's going to do that.

00:22:57.840 --> 00:22:58.840
No one can afford to do that.

00:22:58.840 --> 00:22:59.840
No.

00:23:00.840 --> 00:23:06.840
But I'd love to see like a framework over top of C and C++ that provided memory safety.

00:23:06.840 --> 00:23:07.840
That would be amazing.

00:23:07.840 --> 00:23:08.840
I'd pay for that.

00:23:08.840 --> 00:23:09.840
Right?

00:23:09.840 --> 00:23:16.840
Like a library that just like, I collect your garbage and you don't have to think about it anymore.

00:23:16.840 --> 00:23:17.840
Right?

00:23:17.840 --> 00:23:18.840
Like that would be beautiful.

00:23:18.840 --> 00:23:23.840
That would solve, that would do a lot of backwards compatibility if we start turning that on.

00:23:23.840 --> 00:23:28.840
Yeah, you talked a lot about the, yeah, you talked about the remote code execution issues.

00:23:28.840 --> 00:23:36.840
A lot of that has to do with exceeding a buffer we've allocated, using a freed buffer before the pointer was gone.

00:23:36.840 --> 00:23:40.840
Like a lot of it has to do with this memory ownership and stuff that you're talking about.

00:23:40.840 --> 00:23:41.840
Yeah.

00:23:41.840 --> 00:23:42.840
The worst of it.

00:23:42.840 --> 00:23:44.840
And sometimes mismanagement of objects as well.

00:23:44.840 --> 00:23:47.840
And so basically, you know, you make a mem-

00:23:47.840 --> 00:23:49.840
Can I explain this or is this like-

00:23:49.840 --> 00:23:50.840
Yeah, yeah, please.

00:23:50.840 --> 00:23:51.840
Now go for it.

00:23:51.840 --> 00:23:52.840
Okay.

00:23:52.840 --> 00:23:57.840
So we over, we can overflow an integer, a string, a buffer, but basically like you declare a vector

00:23:57.840 --> 00:24:00.840
You declare a variable of some form.

00:24:00.840 --> 00:24:02.840
And let's say you're like, oh, my strings 20.

00:24:02.840 --> 00:24:03.840
Cool.

00:24:03.840 --> 00:24:06.840
If you put 25 in there, where do you think that extra five goes?

00:24:06.840 --> 00:24:07.840
Right?

00:24:07.840 --> 00:24:09.840
Next bit of execution probably.

00:24:09.840 --> 00:24:10.840
Yeah.

00:24:10.840 --> 00:24:11.840
Or the heap or something.

00:24:11.840 --> 00:24:12.840
Yeah.

00:24:12.840 --> 00:24:12.840
Yeah.

00:24:12.840 --> 00:24:13.840
Yeah.

00:24:13.840 --> 00:24:14.840
It goes somewhere else in the stack or the heap.

00:24:14.840 --> 00:24:15.840
And guess what?

00:24:15.840 --> 00:24:19.840
If you happen to do enough of it, you'll find the stack pointer.

00:24:19.840 --> 00:24:20.840
And guess what the stack pointer does?

00:24:20.840 --> 00:24:23.840
It tells you where the next instruction is.

00:24:23.840 --> 00:24:26.840
And what if I tell it where the next instruction is and it's in my overflow?

00:24:26.840 --> 00:24:27.840
Yeah.

00:24:27.840 --> 00:24:34.840
And what if I've added my own shell code with instructions to do bad stuff like open a web prompt?

00:24:34.840 --> 00:24:36.840
I would like a shell, please.

00:24:36.840 --> 00:24:37.840
A shell would be nice.

00:24:37.840 --> 00:24:38.840
Thank you.

00:24:38.840 --> 00:24:46.840
And then you can execute code on their server remotely, which is the RCE worst in the world thing we do not want to have happen.

00:24:46.840 --> 00:24:54.840
And this is because of memory safety, because it's not automatically checking the bounds for us.

00:24:54.840 --> 00:25:00.840
And because we ourselves have not done perfect input validation, which is a hard thing to get right.

00:25:00.840 --> 00:25:01.840
I was teaching it today.

00:25:01.840 --> 00:25:07.840
And literally we spent one hour and 15 minutes just on input validation.

00:25:07.840 --> 00:25:09.840
And they had a trillion questions.

00:25:09.840 --> 00:25:15.840
And a lot of them were like, yeah, but we don't need to do input validation if it's just internal.

00:25:15.840 --> 00:25:16.840
Right.

00:25:16.840 --> 00:25:19.840
And then we're like, are you handling the employee paychecks?

00:25:19.840 --> 00:25:21.840
Do you want me to see your employee paychecks?

00:25:21.840 --> 00:25:23.840
Then you probably need to validate.

00:25:23.840 --> 00:25:25.840
I'm a slippery fish.

00:25:25.840 --> 00:25:26.840
Yeah.

00:25:26.840 --> 00:25:33.840
Are you reading from the database that somebody else could have gotten into and then leveled up?

00:25:33.840 --> 00:25:34.840
Yeah.

00:25:34.840 --> 00:25:36.840
There is a lot there, Michael.

00:25:36.840 --> 00:25:37.840
There's so much.

00:25:37.840 --> 00:25:38.840
It's not good.

00:25:38.840 --> 00:25:40.840
It's a negotiation though, right?

00:25:40.840 --> 00:25:44.840
And it's about persuasion and it's about what their threat model looks like.

00:25:44.840 --> 00:25:55.820
Because if you're handling hundreds of millions of dollars a day, your threat model is very different than I used to work at a place and their entire job was to show videos to nurses and

00:25:55.820 --> 00:25:59.820
doctors that they had to watch each month so they could continue their certification.

00:25:59.820 --> 00:26:02.820
And it was like, did they see the video or did they not see it?

00:26:02.820 --> 00:26:03.820
Mm-hmm.

00:26:03.820 --> 00:26:04.820
Threat model low.

00:26:04.820 --> 00:26:05.820
Yeah.

00:26:05.820 --> 00:26:10.820
You don't want people to mess it up and pollute it or whatever or take it down.

00:26:10.820 --> 00:26:23.820
But at the same time, it's not going to make the front page of the news that we now know, everyone we know, that Nurse 7725 has not been up to date.

00:26:23.820 --> 00:26:24.820
All right.

00:26:24.820 --> 00:26:30.820
I mean, it's not great, but it's not the same as social security numbers and all that.

00:26:30.820 --> 00:26:31.820
Exactly.

00:26:31.820 --> 00:26:32.820
Yeah.

00:26:32.820 --> 00:26:33.820
All right.

00:26:33.820 --> 00:26:34.820
Let's talk about your book.

00:26:34.820 --> 00:26:36.820
I think your book is really good.

00:26:36.820 --> 00:26:37.820
Yes.

00:26:37.820 --> 00:26:46.820
Now, to be clear, specifically the Alice and Bob Learn Secure Coding, because I haven't read the other book, but if it's in the same style, it seems to me I'm sure it's also good.

00:26:46.820 --> 00:26:47.820
Tell us about your books.

00:26:47.820 --> 00:26:48.820
Thank you.

00:26:49.820 --> 00:26:53.820
So my new book's called Alice and Bob Learn Secure Coding.

00:26:53.820 --> 00:26:59.820
And I'm dyslexic and I'm about to get diagnosed for ADHD too, because why not?

00:26:59.820 --> 00:27:00.820
They go so well together.

00:27:00.820 --> 00:27:01.820
Yay.

00:27:01.820 --> 00:27:06.820
And so when I read a textbook, I find it really hard.

00:27:06.820 --> 00:27:07.820
So I read a zillion books.

00:27:07.820 --> 00:27:08.820
Like I love books.

00:27:08.820 --> 00:27:09.820
Sitting still is hard for me.

00:27:09.820 --> 00:27:10.820
Reading a textbook, I find really, really hard.

00:27:10.820 --> 00:27:11.820
I want that knowledge to be in my brain very badly.

00:27:11.820 --> 00:27:12.820
But sitting my butt still for eight hours is really difficult.

00:27:12.820 --> 00:27:13.820
And I found traditional textbooks really difficult.

00:27:13.820 --> 00:27:19.820
So I started blogging because I, I, someone double dog dared me when I worked at Microsoft and what else could I do, right?

00:27:19.820 --> 00:27:20.820
Right.

00:27:20.820 --> 00:27:21.820
Well, there's no way out.

00:27:21.820 --> 00:27:22.820
They've done it.

00:27:22.820 --> 00:27:23.820
I know.

00:27:23.820 --> 00:27:24.820
There's nothing I could do.

00:27:24.820 --> 00:27:25.820
Brock, you faded me into a corner.

00:27:25.820 --> 00:27:26.820
But I just kept looking at my brain.

00:27:26.820 --> 00:27:27.820
I was like, I'm not going to be a little bit.

00:27:27.820 --> 00:27:28.820
I'm not going to be a little bit.

00:27:28.820 --> 00:27:29.820
I'm going to be a little bit.

00:27:36.820 --> 00:27:37.820
I know.

00:27:37.820 --> 00:27:38.820
I, there's nothing I could do.

00:27:38.820 --> 00:27:41.820
Brock, you faded me into a corner.

00:27:41.820 --> 00:27:47.820
But I just kept blogging and blogging and people kept telling me I should write a book and publishers started reaching out to me.

00:27:47.820 --> 00:27:50.820
I'm like, yeah, but my blog's very casual language.

00:27:50.820 --> 00:27:53.820
I use a lot of examples with Alice and Bob.

00:27:53.820 --> 00:27:58.820
Alice and Bob were used by mathematicians to explain cryptography to normal people.

00:27:58.820 --> 00:28:00.820
So Alice wants to tell Bob a secret.

00:28:00.820 --> 00:28:02.820
How does Bob know it was Alice?

00:28:02.820 --> 00:28:03.820
Alice.

00:28:03.820 --> 00:28:07.820
And so I just kept using them because we all use them.

00:28:07.820 --> 00:28:14.820
And so basically Wiley approached me and they're like, yeah, you can write the weirdest textbook in the whole world.

00:28:14.820 --> 00:28:17.820
I'm like, because like Alice is going to date people.

00:28:17.820 --> 00:28:19.820
And he's like, okay.

00:28:19.820 --> 00:28:30.820
And he's, so my first book was about, it was for AppSec engineers and people that want to become like work in application security because there was no book of how to do that.

00:28:30.820 --> 00:28:32.820
So I wrote a book for past me.

00:28:32.820 --> 00:28:41.820
And so then when I thought about Alice and Bob having a sequel, I was like, I want to write a book for really past me for when I was a software developer.

00:28:41.820 --> 00:28:43.820
And so I was like, what should I cover?

00:28:43.820 --> 00:28:52.820
And so I covered the 10 top programming languages and the eight most popular frameworks within reason.

00:28:52.820 --> 00:28:58.820
So like some frame, like it was hard to pick the frameworks.

00:28:58.820 --> 00:29:00.820
Cause I was like, I was thinking about that when I was reading it.

00:29:00.820 --> 00:29:02.820
I'm like, oh yeah, these are, this is not so easy.

00:29:02.820 --> 00:29:03.820
It was hard.

00:29:03.820 --> 00:29:05.820
And so I asked a lot of my followers.

00:29:05.820 --> 00:29:10.820
And so you might disagree with me about the frameworks I chose, but I really liked .NET.

00:29:10.820 --> 00:29:12.820
So it was obviously going to be in there.

00:29:12.820 --> 00:29:14.820
Flask, obviously going to be in there.

00:29:14.820 --> 00:29:21.820
But I was like, should I put pandas in here or should I put, I put in jQuery and my advice is don't use jQuery.

00:29:21.820 --> 00:29:22.820
Yeah.

00:29:22.820 --> 00:29:25.820
That dollar document ready was so good.

00:29:25.820 --> 00:29:26.820
Come on.

00:29:26.820 --> 00:29:32.820
And so, so it was hard to choose.

00:29:32.820 --> 00:29:46.820
And then I wanted to cover like all the different agnostic programming advice, because to be quite blunt, there's a lot of stuff like input validation that applies to every single language in the world and every framework.

00:29:46.820 --> 00:29:47.820
It just doesn't matter.

00:29:47.820 --> 00:29:51.820
And I don't care if some of them say they do some input validation for you.

00:29:51.820 --> 00:29:52.820
It's not enough.

00:29:52.820 --> 00:29:53.820
Trust me.

00:29:53.820 --> 00:29:58.820
And so I wanted, so like the first third of the book is just completely agnostic.

00:29:58.820 --> 00:30:04.820
And I've been giving secure coding training basically since before the first book.

00:30:04.820 --> 00:30:08.820
And I just keep refining it and refining it and improving and improving it.

00:30:08.820 --> 00:30:12.820
And I was like, well, I have a lot to say on this subject now.

00:30:12.820 --> 00:30:17.820
And so then I asked all my followers, like, what do you want to see in the book?

00:30:17.820 --> 00:30:20.820
And they added a bunch of things like they're like, oh, I want to see this topic.

00:30:20.820 --> 00:30:21.820
I want to see that topic.

00:30:21.820 --> 00:30:22.820
So it got even bigger.

00:30:22.820 --> 00:30:33.820
But then the end of the book, the last third is the system development lifecycle, all the security steps, but from a developer's point of view.

00:30:33.820 --> 00:30:37.820
Because when I was a dev, it was like, why am I being subjected to this?

00:30:37.820 --> 00:30:39.820
Like, what, what's a threat model?

00:30:39.820 --> 00:30:45.820
I remember being in a meeting and this woman was like, you want to do a penetration test on me?

00:30:45.820 --> 00:30:52.820
And then she turned bright red and was like, I don't know if I should be in this meeting.

00:30:52.820 --> 00:30:55.820
I was like, no, no, no, no, no, no.

00:30:55.820 --> 00:30:56.820
She's like, it's so cool.

00:30:56.820 --> 00:30:57.820
It's not what you're thinking.

00:30:57.820 --> 00:30:58.820
I'm not a doctor.

00:30:58.820 --> 00:30:59.820
This is going to be funny.

00:30:59.820 --> 00:31:00.820
I know.

00:31:01.820 --> 00:31:02.820
I was like, your web app, your web app.

00:31:02.820 --> 00:31:05.820
She's like, you just used a lot of words that were uncomfortable.

00:31:05.820 --> 00:31:07.820
I'm like, I'm so sorry.

00:31:07.820 --> 00:31:17.820
And so it's like, what to expect when a penetration test happens or like in a threat model, like, bring your awesome ideas of how you would hack your app.

00:31:17.820 --> 00:31:21.820
And like, this is maybe how much will be expected from you.

00:31:21.820 --> 00:31:28.820
And why we like what all these tools are and what they do and how you might want to use them.

00:31:28.820 --> 00:31:35.820
Because I feel like sometimes we just, I've heard a lot of security teams say to me, well, they should know.

00:31:35.820 --> 00:31:38.820
Like, do you think if they knew they would have done that thing?

00:31:38.820 --> 00:31:39.820
No.

00:31:39.820 --> 00:31:41.820
Did you, did you tell them it explicitly?

00:31:41.820 --> 00:31:43.820
Well, I felt it was implied.

00:31:43.820 --> 00:31:45.820
Dude, that's not good enough.

00:31:45.820 --> 00:31:47.820
You know, yeah, I totally agree with you.

00:31:47.820 --> 00:31:49.820
And there's a really, let me do a quick search.

00:31:49.820 --> 00:31:55.820
There's a really interesting fact, at least from the Python space.

00:31:55.820 --> 00:32:03.820
If you look at the latest survey from the PSF and the JetBrains, how long have you been programming?

00:32:03.820 --> 00:32:05.820
There's a little one somewhere.

00:32:05.820 --> 00:32:05.820
Yeah.

00:32:05.820 --> 00:32:07.820
How long have you been programming professionally?

00:32:07.820 --> 00:32:09.820
33% less than a year.

00:32:09.820 --> 00:32:10.820
Wow.

00:32:10.820 --> 00:32:18.820
And if you look at less than two years, that's 50, that's half of the people doing software just got started.

00:32:18.820 --> 00:32:21.820
They probably don't even get the little Bobby table jokes.

00:32:21.820 --> 00:32:22.820
You know?

00:32:22.820 --> 00:32:23.820
I know.

00:32:23.820 --> 00:32:24.820
They need to read XKCD.

00:32:24.820 --> 00:32:25.820
Yes, I know.

00:32:25.820 --> 00:32:30.820
But you know, seriously, they, how are they supposed to know?

00:32:30.820 --> 00:32:33.820
They're struggling to just figure out how does it compile?

00:32:33.820 --> 00:32:35.820
Where do I get a virtual environment?

00:32:35.820 --> 00:32:36.820
Why won't I import that thing?

00:32:36.820 --> 00:32:41.820
They're, they're just, they're not at the place where they're, they're polishing it and they're, they're protecting.

00:32:41.820 --> 00:32:44.820
They haven't had the experience of, oh, I put it on the internet.

00:32:44.820 --> 00:32:45.820
I was hacked in eight seconds.

00:32:45.820 --> 00:32:46.820
You know?

00:32:46.820 --> 00:32:48.820
It hurts, man.

00:32:48.820 --> 00:32:55.820
I remember, so the guy that became my mentor, he gave a talk for my dev team.

00:32:55.820 --> 00:33:02.820
Cause I ran the community of practice where I work shocker, me being an extrovert wanting to run a community of practice.

00:33:02.820 --> 00:33:10.820
And so I invited him to come and talk and he took one of our apps and he was at the login screen and he's like, I'm going to break into your app without a password.

00:33:10.820 --> 00:33:14.820
And it's going to take over a minute just cause I'm talking.

00:33:14.820 --> 00:33:17.820
And then he just didn't ask kill injection.

00:33:17.820 --> 00:33:23.820
I just got in and I was like, no, no, no, no, no.

00:33:23.820 --> 00:33:25.820
And then he was like telling us.

00:33:25.820 --> 00:33:28.820
And then of course, like all the SQL codes going in my head.

00:33:28.820 --> 00:33:31.820
And I'm like, oh my gosh.

00:33:31.820 --> 00:33:40.820
What if, what if my name, what if my name was quote dash, no quote, semi-colon drop tables, semi-colon dash dash.

00:33:40.820 --> 00:33:42.820
That's an, that's an interesting name, isn't it?

00:33:42.820 --> 00:33:43.820
Right.

00:33:43.820 --> 00:33:46.820
We all have special names, but yeah.

00:33:46.820 --> 00:33:52.820
So I, I forgot when you asked about my book, part of why it is weird.

00:33:52.820 --> 00:33:54.820
I try to make it casual language.

00:33:54.820 --> 00:33:56.820
So it's really easy to understand.

00:33:56.820 --> 00:33:57.820
Yeah.

00:33:57.820 --> 00:34:01.820
And I honestly, I didn't, I didn't put that together, but I had that experience reading it.

00:34:01.820 --> 00:34:03.820
So I think, you know, that.

00:34:03.820 --> 00:34:04.820
Thank you.

00:34:04.820 --> 00:34:11.820
And I try to use like different ways of explaining the same thing, like with a story and then like the technical explanation.

00:34:11.820 --> 00:34:16.820
And then maybe there's like a funny story from Alice and Bob.

00:34:16.820 --> 00:34:24.820
Cause Alice will not put up with unethical dates with pen testers and Bob really worships this really cool guy.

00:34:24.820 --> 00:34:29.820
Um, and like seeing it, how it applies to people's real lives.

00:34:29.820 --> 00:34:33.820
I felt like hit home with a lot of people.

00:34:33.820 --> 00:34:39.820
Um, and so, yeah, I just, I want, I feel like security can be really hard.

00:34:39.820 --> 00:34:42.820
And I was like, how can I make it a lot easier for people?

00:34:42.820 --> 00:34:43.820
So that was my goal with the book.

00:34:43.820 --> 00:34:44.820
Both.

00:34:44.820 --> 00:34:45.820
Yeah.

00:34:46.820 --> 00:34:48.820
Well, I think it's, I think it's really approachable.

00:34:48.820 --> 00:34:54.820
So I want to pull up a few quotes out of it that I thought we could sort of riff on that I think would be fun here.

00:34:54.820 --> 00:35:06.820
So you start out the book by talking about humans and how humans are implicitly trusting of each other in general, right?

00:35:06.820 --> 00:35:07.820
In general.

00:35:07.820 --> 00:35:15.820
But you know, that's why we have societies and groups rather than every time we see a person, we either run away or attack, you know, like, that's just not how it works.

00:35:15.820 --> 00:35:16.820
To be a person, right?

00:35:16.820 --> 00:35:25.820
And that trust is not necessarily appropriately transferred to computer systems and communication systems and all.

00:35:25.820 --> 00:35:26.820
All right.

00:35:26.820 --> 00:35:34.820
So you gave some examples of implicit trust and you also, gave a, a warning or an important news.

00:35:34.820 --> 00:35:35.820
Maybe tell us about this bit.

00:35:35.820 --> 00:35:42.820
So basically when we started designing things, like we didn't even have passwords at first.

00:35:42.820 --> 00:35:47.820
Like I remember in college, my sister telling her friend, my sister is so crazy.

00:35:47.820 --> 00:35:49.820
She has a password on her computer.

00:35:49.820 --> 00:35:52.820
Like who wants to log into your stupid computer?

00:35:52.820 --> 00:35:55.820
And she, what are you working at a bank?

00:35:55.820 --> 00:35:56.820
Come on.

00:35:56.820 --> 00:35:57.820
Right.

00:35:57.820 --> 00:36:07.820
And so now we all have passwords on our computers and, but we design our systems the way that our society operates with implicit trust.

00:36:07.820 --> 00:36:14.820
Like just imagine like someone comes to your door with a package and they ring the doorbell, you open it.

00:36:14.820 --> 00:36:25.340
But in the animal kingdom, which I have watched a lot of nature documentaries because I have small children at home, panthers, if they see another panther, it's going down.

00:36:25.340 --> 00:36:29.560
They're going to fight or make a new baby panther or both.

00:36:29.560 --> 00:36:31.840
That is what happens in the animal kingdom.

00:36:31.840 --> 00:36:34.460
And so, like, they have no trust.

00:36:34.460 --> 00:36:37.880
Like, some of them, like, try to kill each other after they try to make baby panthers.

00:36:37.880 --> 00:36:41.300
Like, they're all over the place because they have no implicit trust.

00:36:41.300 --> 00:36:43.520
So you see them alone a lot.

00:36:44.120 --> 00:36:56.960
And so when we started designing networks, one of the things we would do is we would, first of all, a lot of networks in this world today are still flat, which means one firewall around the outside and that's it.

00:36:56.960 --> 00:37:01.720
So if you can get to anything in the network, you can get to everything in the network.

00:37:01.720 --> 00:37:03.400
And that is an implied trust.

00:37:03.400 --> 00:37:04.940
So then we came up with zoning.

00:37:04.940 --> 00:37:10.540
Like, the data, the databases are all in one zone and there's a firewall around that.

00:37:10.880 --> 00:37:16.080
And then we have, like, a public access zone and then we have a demilitarized zone because we think we're badasses, et cetera.

00:37:16.080 --> 00:37:16.760
Right?

00:37:16.760 --> 00:37:26.080
And but what happened is if you have an SQL injection, you've gotten behind the firewall and now you can get to every single database in the entire organization.

00:37:26.080 --> 00:37:27.860
You have hit the goldmine.

00:37:27.860 --> 00:37:28.860
Right?

00:37:28.860 --> 00:37:30.140
So that is bad.

00:37:30.800 --> 00:37:32.580
And then we came up with zero trust.

00:37:32.580 --> 00:37:35.520
The idea of everything is closed by default.

00:37:35.520 --> 00:37:40.500
And unless there's a business requirement, you don't open it.

00:37:40.500 --> 00:37:41.220
Right?

00:37:41.220 --> 00:37:47.260
So let's say you have a database and an API and it has a front end.

00:37:47.260 --> 00:37:49.360
And then you have a service account for those.

00:37:49.360 --> 00:37:52.900
So the service account only can talk to those three things.

00:37:53.560 --> 00:37:58.840
Oh, and it can talk to the secret management tool to get your secrets because you store your secrets in a correct place.

00:37:58.840 --> 00:38:01.120
You don't put those in the source code and just check them in the GitHub?

00:38:01.120 --> 00:38:02.240
No.

00:38:02.240 --> 00:38:04.940
Please do not do that.

00:38:04.940 --> 00:38:08.720
I only do that when I'm trying to prove a point.

00:38:11.000 --> 00:38:18.060
But then ideally, the API checks that who's calling it is its front end and not someone else.

00:38:18.060 --> 00:38:18.320
Right?

00:38:18.320 --> 00:38:21.320
And then it authenticates and authorizes to the database.

00:38:21.320 --> 00:38:23.800
And we have nothing else.

00:38:23.800 --> 00:38:25.460
No one else can call that API.

00:38:25.460 --> 00:38:30.060
Why would you be calling it unless you're a malicious actor or you're a tester?

00:38:30.060 --> 00:38:30.880
Right?

00:38:30.880 --> 00:38:33.020
So once the testing phase is over, we're in production.

00:38:33.020 --> 00:38:34.560
No one else should be talking to it.

00:38:34.560 --> 00:38:36.780
So you only accept connections from there.

00:38:36.960 --> 00:38:41.120
And if we do zero trust perfectly, it is amazing.

00:38:41.120 --> 00:38:48.240
But quite often, we have partial implementations because it's quite a lot of work to implement.

00:38:48.240 --> 00:38:51.500
And if you get it wrong, it can be painful.

00:38:51.500 --> 00:38:53.420
Yeah.

00:38:53.420 --> 00:38:55.200
Yeah.

00:38:55.200 --> 00:39:00.960
What do you think about things like finkst canaries and those types of things?

00:39:00.960 --> 00:39:03.340
Maybe tell people what that is real quick.

00:39:03.340 --> 00:39:04.380
Yeah.

00:39:04.380 --> 00:39:11.280
So there's this guy named Harum Mia who goes on Risky Business all the time, which is a podcast I like.

00:39:11.280 --> 00:39:12.380
It is a good podcast.

00:39:12.380 --> 00:39:12.980
Yeah.

00:39:12.980 --> 00:39:14.700
Patrick Gray and Alex Blow.

00:39:14.700 --> 00:39:16.940
What's the guy's first name?

00:39:16.940 --> 00:39:17.780
It's not Alex, is it?

00:39:17.780 --> 00:39:19.940
I thought Alex.

00:39:19.940 --> 00:39:21.880
Is it Nick?

00:39:21.880 --> 00:39:23.120
The guy that he chats with?

00:39:23.120 --> 00:39:25.000
I haven't listened to it in like a year.

00:39:25.000 --> 00:39:25.380
Yeah.

00:39:25.380 --> 00:39:25.700
I'm sorry.

00:39:25.700 --> 00:39:28.140
Last name Blow, but first name, forget it.

00:39:28.140 --> 00:39:29.260
Anyway, they do a good show.

00:39:29.260 --> 00:39:29.440
Yeah.

00:39:29.440 --> 00:39:30.240
So yeah, go on.

00:39:30.240 --> 00:39:31.860
They're really good.

00:39:31.860 --> 00:39:32.980
It is a fun show.

00:39:32.980 --> 00:39:34.680
And they're so like catty.

00:39:34.680 --> 00:39:35.280
I love it.

00:39:35.280 --> 00:39:36.700
Like they make fun of everything.

00:39:36.700 --> 00:39:37.560
Nothing is sacred.

00:39:37.560 --> 00:39:38.320
It's so fun.

00:39:38.320 --> 00:39:38.820
Absolutely.

00:39:39.820 --> 00:39:47.840
But basically, thanks Canary, the company that Harum Mia works for, which why I've heard so much about it because he's always on the show.

00:39:47.840 --> 00:39:52.260
They make basically like these things that go on your network.

00:39:52.260 --> 00:39:55.820
So for instance, it could be like a fake word file.

00:39:55.820 --> 00:40:00.400
It could be some sort of fake file somewhere on your network.

00:40:00.400 --> 00:40:04.680
And then you see if it gets stolen and shows up somewhere because it calls home.

00:40:04.680 --> 00:40:06.720
And so people go.

00:40:06.720 --> 00:40:10.000
So imagine like you have a data breach.

00:40:10.000 --> 00:40:16.140
And then you can see because it phones home or you search the internet all the time to look for that.

00:40:16.140 --> 00:40:17.980
And you see, oh crap, that's there.

00:40:17.980 --> 00:40:22.680
I actually was on Stack Overflow today as a viewer because I'm banned for life.

00:40:22.680 --> 00:40:23.720
That's a long story.

00:40:24.180 --> 00:40:27.880
I tried to answer all the subwrap questions in one day and they didn't like it.

00:40:27.880 --> 00:40:31.420
I feel like they should give you an award, not a ban.

00:40:31.420 --> 00:40:32.180
But okay.

00:40:32.180 --> 00:40:33.020
I know.

00:40:33.020 --> 00:40:35.860
I agree, right?

00:40:35.860 --> 00:40:38.020
Some of my answers they didn't like.

00:40:38.020 --> 00:40:39.320
Like don't suppress that result.

00:40:39.320 --> 00:40:40.260
You have cross-site scripting.

00:40:40.260 --> 00:40:41.220
Here's how you fix your code.

00:40:41.220 --> 00:40:42.980
They're like, you didn't answer his question.

00:40:42.980 --> 00:40:44.280
Down vote, down vote.

00:40:44.280 --> 00:40:45.900
Anyway.

00:40:45.900 --> 00:40:47.000
The internet can be harsh.

00:40:47.000 --> 00:40:49.500
What were we saying about this trust and well-meaningness?

00:40:49.500 --> 00:40:49.900
I don't know.

00:40:49.900 --> 00:40:51.220
Yeah.

00:40:51.220 --> 00:40:57.000
But so basically like this guy was saying his website keeps getting scraped by all his competitors

00:40:57.000 --> 00:40:59.980
rather than them typing out the information himself.

00:40:59.980 --> 00:41:06.700
So he puts fake musical artists into his database and then he goes to other companies and he searches

00:41:06.700 --> 00:41:08.480
for those fake musical artists.

00:41:08.480 --> 00:41:09.000
Nice.

00:41:09.000 --> 00:41:11.720
And then he sends them ceases and desists.

00:41:11.720 --> 00:41:13.000
That's clever.

00:41:13.000 --> 00:41:18.580
So like the idea of a canary is that like the canary in the coal mine, but basically

00:41:18.580 --> 00:41:19.780
someone steals it.

00:41:19.780 --> 00:41:23.860
And then if it can, I believe that some of them can call home.

00:41:23.860 --> 00:41:27.820
But basically if they use it somewhere, you can see it's yours.

00:41:27.820 --> 00:41:30.660
And then you're like, oh, we are in trouble.

00:41:30.660 --> 00:41:31.480
Yeah.

00:41:31.480 --> 00:41:33.500
It's an early, early alarm.

00:41:33.600 --> 00:41:36.320
The canary in the coal mine sort of deal, right?

00:41:36.320 --> 00:41:41.800
I think that it's a cool idea, but I think that if the canary calls out to you, you're

00:41:41.800 --> 00:41:43.740
already pretty screwed, right?

00:41:43.740 --> 00:41:44.080
Yeah.

00:41:44.080 --> 00:41:44.900
It's pretty bad.

00:41:44.900 --> 00:41:49.740
I think that it's cool, but it wouldn't be the first security measure I would do.

00:41:49.740 --> 00:41:54.880
It would be like, I have an advanced program that's like good and I want it to be super

00:41:54.880 --> 00:41:55.380
great.

00:41:56.820 --> 00:41:57.180
Yeah.

00:41:57.180 --> 00:41:57.820
Yeah.

00:41:57.820 --> 00:41:58.640
Sounds good.

00:41:58.640 --> 00:41:59.720
All right.

00:41:59.720 --> 00:42:03.620
So you say, if you only learn one single thing from your book or if this podcast episode,

00:42:03.620 --> 00:42:05.060
let's put it, let's adapt it.

00:42:05.060 --> 00:42:06.560
I hope it is this.

00:42:06.560 --> 00:42:10.120
Design every system with as little implied trust as possible.

00:42:10.120 --> 00:42:13.240
And I highlighted that in purple for you.

00:42:13.240 --> 00:42:13.560
How's that?

00:42:13.560 --> 00:42:16.320
It's true.

00:42:16.320 --> 00:42:21.600
We want to, so in my first book, I'm like, trust no one, not even your mom, because my mom

00:42:21.600 --> 00:42:25.620
accidentally sent me a virus one day and I opened it because it was from my mom.

00:42:26.660 --> 00:42:27.140
Oh no.

00:42:27.140 --> 00:42:33.340
And so you can't even trust your mom, even if your mom's a brilliant mathematician chemist,

00:42:33.340 --> 00:42:36.640
because she can still get a virus on her computer.

00:42:36.640 --> 00:42:37.160
Yeah.

00:42:37.160 --> 00:42:39.280
Because it turned out grandma sent it to her.

00:42:39.280 --> 00:42:39.980
Yeah.

00:42:39.980 --> 00:42:41.900
And she trusted grandma.

00:42:41.900 --> 00:42:42.460
What?

00:42:42.460 --> 00:42:45.360
Grandma's not even sophisticated enough to send a virus.

00:42:45.360 --> 00:42:46.140
Is she?

00:42:46.140 --> 00:42:46.600
I know.

00:42:46.600 --> 00:42:51.720
Well, it turned out she was, but anyway, so, so don't trust anyone.

00:42:51.720 --> 00:42:56.940
So when you get input to your app, to your API, wherever it comes from.

00:42:56.940 --> 00:42:59.520
So that can mean getting stuff out of your database.

00:42:59.520 --> 00:43:06.380
So unless it's a static table that you know for sure is trusted, you should be checking the

00:43:06.380 --> 00:43:07.160
stuff from the database.

00:43:07.300 --> 00:43:11.280
So let's say someone's like filling out a form and then you save it to the database.

00:43:11.280 --> 00:43:12.960
So you would want to validate those values.

00:43:12.960 --> 00:43:13.980
You save it to the database.

00:43:14.420 --> 00:43:18.780
So then let's say an API goes and get some of that data to go do stuff with it.

00:43:18.780 --> 00:43:21.720
I would validate those values again.

00:43:21.720 --> 00:43:27.900
And then we put it on a webpage and it has JavaScript, angly brackets in it.

00:43:27.900 --> 00:43:28.820
Yes.

00:43:28.820 --> 00:43:31.660
Then I would output and code it before I put it out there.

00:43:31.660 --> 00:43:35.640
And I would have content security policy header and a bunch of other things, but I digress.

00:43:36.000 --> 00:43:43.660
But if we could not trust anything that we get and always validate that it is what we are

00:43:43.660 --> 00:43:44.040
expecting.

00:43:44.040 --> 00:43:45.660
And if it's not, we reject it.

00:43:45.660 --> 00:43:47.120
So we don't try to fix it.

00:43:47.120 --> 00:43:49.560
Is it what we're expecting?

00:43:49.560 --> 00:43:53.200
And so this can mean like, so let's say it's a date of birth.

00:43:53.200 --> 00:43:56.260
So is it, first of all, is it a date?

00:43:56.800 --> 00:43:58.360
Is it in the past?

00:43:58.360 --> 00:44:00.880
Is it more than 150 years in the past?

00:44:00.880 --> 00:44:02.080
Because that's less likely.

00:44:02.080 --> 00:44:05.420
Is it in the format you're expecting?

00:44:05.420 --> 00:44:08.380
Those are some of the things that we could check.

00:44:08.380 --> 00:44:13.760
And if it's not any of, if any one of those things are wrong, reject and just say, hey,

00:44:13.760 --> 00:44:14.800
actually we're expecting this.

00:44:14.800 --> 00:44:18.040
But let's say you need a person's name.

00:44:18.040 --> 00:44:20.300
So I work with someone named Luke O'Malley.

00:44:20.300 --> 00:44:24.000
Well, he has a single quote in his last name, which is a special character.

00:44:24.000 --> 00:44:26.400
If we are going to use an SQL database.

00:44:26.700 --> 00:44:28.660
So what am I expecting?

00:44:28.660 --> 00:44:31.240
I'm expecting letters, lower and uppercase.

00:44:31.240 --> 00:44:35.260
And I'm expecting a hyphen and or a single quote.

00:44:35.260 --> 00:44:39.400
All of those are on my yes approved list, my allow list.

00:44:39.400 --> 00:44:43.100
So I check it against my allow list, not a block list.

00:44:43.100 --> 00:44:47.360
Because a block list of battle characters, guess what's going to happen?

00:44:47.360 --> 00:44:48.520
Tanya's goes around it.

00:44:48.520 --> 00:44:49.140
Yep, thanks.

00:44:49.140 --> 00:44:49.740
I'm in.

00:44:49.740 --> 00:44:53.740
You use the Unicode escape sequence for it or some rando thing.

00:44:53.740 --> 00:44:54.560
Yes.

00:44:54.560 --> 00:44:56.600
There's a zillion ways around it.

00:44:56.600 --> 00:45:02.220
And I remember when I learned that, how sad I was for all my past apps.

00:45:02.220 --> 00:45:10.060
And so you use an approved list of good stuff and you accept the single character and you accept the hyphen.

00:45:10.060 --> 00:45:12.560
And then you sanitize or escape them.

00:45:13.060 --> 00:45:15.440
So sanitize means changing it for a different value.

00:45:15.440 --> 00:45:18.740
So you might want to change the hyphen to a pipe.

00:45:18.740 --> 00:45:21.220
And you might probably not pipe.

00:45:21.220 --> 00:45:22.560
Maybe that's still a special character.

00:45:22.560 --> 00:45:24.360
But like, let's say the carrot.

00:45:24.360 --> 00:45:28.400
And then you change the single quote to the tilde symbol.

00:45:28.680 --> 00:45:31.200
And then those are not a problem.

00:45:31.200 --> 00:45:33.000
And then you pass that on.

00:45:33.000 --> 00:45:34.720
So you validate that it's what you're expecting.

00:45:34.720 --> 00:45:38.900
And then you have either sanitized it or escape them.

00:45:38.900 --> 00:45:41.440
So just put like a backslash in front of the special characters.

00:45:41.720 --> 00:45:48.600
Maybe HTML or URL encode them to that percent some numbers, which is the quote or I don't know whatever.

00:45:48.600 --> 00:45:49.800
Whatever it resolves to.

00:45:50.340 --> 00:45:52.700
It depends on what you want to do with it.

00:45:52.700 --> 00:46:00.260
So if you're going to take that and then put it into a parameter and send it to a parameterized query, maybe you want to escape it.

00:46:00.260 --> 00:46:03.080
It's going to escape it for you when it gets there.

00:46:03.080 --> 00:46:06.800
There's a lot of options, but single quotes are kind of the danger zone.

00:46:06.800 --> 00:46:07.980
So we want to be careful.

00:46:07.980 --> 00:46:09.000
They're definitely tricky.

00:46:09.000 --> 00:46:10.580
All right.

00:46:10.580 --> 00:46:11.740
Next section.

00:46:11.740 --> 00:46:14.480
This is the Python section.

00:46:15.700 --> 00:46:20.140
So you have, as you said, a bunch of different technologies.

00:46:20.140 --> 00:46:21.480
And they're quite up to date.

00:46:21.480 --> 00:46:23.020
You've got Node.js.

00:46:23.020 --> 00:46:27.420
You've got .NET Core, not the old crusty Windows only .NET.

00:46:27.420 --> 00:46:29.320
You've got Python, Python 3 stuff.

00:46:29.320 --> 00:46:31.420
So I think that's great.

00:46:31.420 --> 00:46:35.480
So let's talk about some of the what to do.

00:46:35.480 --> 00:46:39.420
Maybe just pick a few off this list that jump out at you that you want to talk about.

00:46:39.420 --> 00:46:40.840
Okay.

00:46:40.840 --> 00:46:42.440
So some of them are really obvious.

00:46:42.440 --> 00:46:44.040
Like, please use Python 3.

00:46:44.640 --> 00:46:46.680
It's time to say goodbye to Python 2.

00:46:46.680 --> 00:46:50.700
I know that we can still love it in our hearts, but new apps need to be Python 3.

00:46:50.700 --> 00:46:53.400
And updating our environment often.

00:46:53.400 --> 00:46:55.260
This goes for every framework.

00:46:55.260 --> 00:47:04.940
One thing is, is if you find a real security bug, reporting it to the security folks from Python, that is a valuable thing to do.

00:47:04.940 --> 00:47:11.740
Whatever programming language or framework you're in, if you feel you found a real, legit bug, you should support it.

00:47:11.740 --> 00:47:13.220
Or you should report it.

00:47:13.220 --> 00:47:19.120
Because as a result, when they fix it, they're fixing it for thousands and thousands and thousands of devs.

00:47:19.120 --> 00:47:21.340
And you are a wonderful human.

00:47:21.340 --> 00:47:22.340
So that is that.

00:47:22.340 --> 00:47:22.720
Pay it forward.

00:47:22.720 --> 00:47:23.760
Yeah.

00:47:23.760 --> 00:47:27.540
And I want to give a shout out to the PSF and Python folks.

00:47:28.260 --> 00:47:35.100
They've made a lot of efforts in putting more time and energy into the security of Python.

00:47:35.100 --> 00:47:41.920
Both Mike Fiedler got hired as the security person behind PyPI, the package index.

00:47:41.920 --> 00:47:47.200
And Seth Larson got hired for, more broadly, Python security.

00:47:47.200 --> 00:47:49.160
Hopefully, I characterized that right.

00:47:49.160 --> 00:47:51.740
But we now have two full-time people working on it.

00:47:51.740 --> 00:47:56.900
Whereas before, it was kind of core devs and other people contributing their spare time.

00:47:56.900 --> 00:47:58.060
Hopefully, they could grab it.

00:47:58.260 --> 00:47:59.180
So that's good.

00:47:59.180 --> 00:48:09.340
And you point out that there's a security at python.org email address for legitimate reports and not hassling busy people.

00:48:09.340 --> 00:48:10.220
Yes.

00:48:10.220 --> 00:48:11.220
Don't hassle them.

00:48:11.220 --> 00:48:13.780
Test and make sure it's repeatable.

00:48:13.780 --> 00:48:16.060
Like, these people are very busy.

00:48:18.120 --> 00:48:19.500
There are so many things.

00:48:19.500 --> 00:48:23.240
So one of the things was, so like, let's say you're taking, because we were talking about user input.

00:48:23.240 --> 00:48:30.040
And we're taking, so the bottom of that page, we're taking user input as a string from your code.

00:48:30.040 --> 00:48:37.380
And we can use the template class from the string module rather than other functions for string manipulation.

00:48:37.380 --> 00:48:40.380
So if we do that, it's safer.

00:48:40.380 --> 00:48:43.060
There's less string overloads.

00:48:43.060 --> 00:48:51.820
Like, if we avoid using, for instance, fstring and string format for handling user input, because that can be manipulated by the user.

00:48:51.820 --> 00:48:58.880
So it sounds weird, but like, using the template class from the string module can't be manipulated as easily.

00:48:58.880 --> 00:48:59.620
Interesting.

00:48:59.620 --> 00:49:01.460
And, yeah, I know.

00:49:01.460 --> 00:49:03.280
I had to do a lot of research for this.

00:49:03.280 --> 00:49:04.160
I bet.

00:49:04.160 --> 00:49:16.180
Yeah, and they just added a new type to the Python type system called a literal string, which works for SQL, for things that are not meant to accept user input.

00:49:16.180 --> 00:49:26.560
So if you had a literal string that was a query and you combined it with stuff that came from a regular string, like a user input, it'll fail the type system, basically.

00:49:26.560 --> 00:49:27.540
It still runs.

00:49:27.540 --> 00:49:28.760
That's the way Python types work.

00:49:28.760 --> 00:49:32.140
But at least you would check it with a mypy type of checker.

00:49:33.220 --> 00:49:34.460
That is very cool.

00:49:34.460 --> 00:49:35.820
Yeah, yeah, yeah.

00:49:35.820 --> 00:49:36.400
That's pretty neat.

00:49:36.400 --> 00:49:39.100
There's not too many tools to support it, but the static type checkers do.

00:49:39.100 --> 00:49:44.400
Another one I think that's worth calling out here is you talked about, be sure you pin your dependencies.

00:49:44.400 --> 00:49:46.340
Mm-hmm.

00:49:46.340 --> 00:49:47.300
Yes.

00:49:47.300 --> 00:49:51.800
I'm, like, looking through all of the notes.

00:49:51.800 --> 00:49:52.980
You have them.

00:49:52.980 --> 00:49:56.240
Pinning.

00:49:56.240 --> 00:50:01.240
So I got into, like, a lot of arguments with my technical editors about this one.

00:50:01.720 --> 00:50:11.580
So you want to pin your dependencies, like, as you're going through all the different environments and not allow it to update out when you get to prod.

00:50:11.580 --> 00:50:14.680
Because otherwise, you're all testing different versions.

00:50:14.680 --> 00:50:15.200
Right.

00:50:15.200 --> 00:50:15.420
Right?

00:50:15.420 --> 00:50:18.960
So you want to make sure you're using the same one across the board that you're test.

00:50:18.960 --> 00:50:20.720
Because otherwise, your tests aren't accurate.

00:50:20.720 --> 00:50:21.300
Right?

00:50:21.300 --> 00:50:21.940
Yeah.

00:50:22.040 --> 00:50:29.440
It might be the same, or it could be an important library got an update between when you checked it in and when it got built to a Docker container or something.

00:50:29.440 --> 00:50:30.360
And it's different.

00:50:30.360 --> 00:50:31.940
Mm-hmm.

00:50:32.120 --> 00:50:37.720
But the other thing is, is that you don't want it to be permanently like that forever.

00:50:37.720 --> 00:50:41.100
And so, like, when you're here.

00:50:41.100 --> 00:50:41.120
Yeah.

00:50:41.120 --> 00:50:42.240
So it sounds weird.

00:50:42.240 --> 00:50:43.480
So you pin it there.

00:50:43.480 --> 00:50:46.840
But then, I can't remember where it is.

00:50:46.900 --> 00:50:51.460
I think the big distinction is, are you building an application?

00:50:51.460 --> 00:50:54.640
Are you building a library people are building applications with?

00:50:54.640 --> 00:50:56.940
Because your application should pick its versions.

00:50:56.940 --> 00:51:03.480
But if you pick them concretely for the library, you're forcing potentially old, vulnerable versions onto people.

00:51:03.480 --> 00:51:04.620
Right?

00:51:05.220 --> 00:51:08.860
There's this tension of, what role am I playing, which I think is tricky.

00:51:08.860 --> 00:51:10.240
Yes.

00:51:10.240 --> 00:51:18.160
So, ideally, like, if you're, like, about to go to prod with something, you don't want it changing in different environments.

00:51:18.160 --> 00:51:19.240
That could be really bad.

00:51:19.240 --> 00:51:22.780
But, yeah, like you said, pinning the version.

00:51:22.780 --> 00:51:24.500
Well, I'm just, like, reading it on the screen.

00:51:24.500 --> 00:51:31.680
So, I remember, like, I was doing, like, a proof of concept with this company.

00:51:32.680 --> 00:51:37.760
Like, in order to install it, it wanted me to downgrade a bunch of NPM dependencies.

00:51:37.760 --> 00:51:43.740
And then it showed me that there were huge vulnerabilities in those dependencies that they'd asked me to use.

00:51:43.740 --> 00:51:45.680
And I was, like, well, like, deal breaker, buddy.

00:51:45.680 --> 00:51:46.480
Yeah.

00:51:46.480 --> 00:51:46.680
Right?

00:51:46.680 --> 00:51:55.940
And so, when you are creating, like, a product for someone, if they can see that and how it's compiled, like, that's a deal breaker for a lot of customers.

00:51:55.940 --> 00:51:59.920
Customers are very savvy in regarding security right now.

00:51:59.920 --> 00:52:01.460
And I love it.

00:52:01.940 --> 00:52:02.820
Yeah, it's really good.

00:52:02.820 --> 00:52:17.620
And even putting security aside, you can end up, if you have two libraries, they both use a sub-library, a dependency, and they have different pin versions or ones less than or equal to, the others greater than or equal to.

00:52:17.620 --> 00:52:19.180
And there's no intersection of those numbers.

00:52:19.180 --> 00:52:21.080
You just, well, I can't run this.

00:52:21.080 --> 00:52:27.540
I guess we just can't use these because it'll say I can't give you both greater than two and less than two at the same time, right?

00:52:28.060 --> 00:52:28.720
It's a hassle.

00:52:28.720 --> 00:52:28.940
Mm-hmm.

00:52:28.940 --> 00:52:31.580
But the security bit is also important, obviously.

00:52:31.580 --> 00:52:33.700
I agree.

00:52:33.700 --> 00:52:34.120
Let's see.

00:52:34.120 --> 00:52:34.560
Yeah.

00:52:34.560 --> 00:52:35.820
So, Bandit.

00:52:35.820 --> 00:52:39.760
Bandit's an interesting tool.

00:52:39.760 --> 00:52:46.540
Bandit is a free static analysis tool that specifically is made for Python.

00:52:48.140 --> 00:52:54.860
And so, for instance, if you're using Ruby, there's Breakman, and it's made just for Ruby, and that's it.

00:52:54.860 --> 00:52:58.180
So, it's awesome because it only cares about your language.

00:52:58.180 --> 00:53:04.500
Because it's free and open source, there's not a giant security team behind it supporting it.

00:53:04.860 --> 00:53:09.520
But if you have never used a static analysis tool, this is an excellent place to start.

00:53:09.520 --> 00:53:12.180
It's recommended over and over and over again.

00:53:12.180 --> 00:53:19.620
When I teach secure coding in this, I have this list of free Python resources.

00:53:19.620 --> 00:53:20.960
People love Python.

00:53:20.960 --> 00:53:24.040
People make a lot of tools for it because they love it.

00:53:24.040 --> 00:53:26.100
And Bandit is really popular.

00:53:26.100 --> 00:53:26.940
Yeah.

00:53:26.940 --> 00:53:27.520
That's awesome.

00:53:27.520 --> 00:53:28.680
And it has a cool logo.

00:53:28.680 --> 00:53:31.860
It is very cute.

00:53:31.860 --> 00:53:33.200
It is very cute.

00:53:33.200 --> 00:53:37.360
I like how they call it a security linter.

00:53:37.360 --> 00:53:40.540
I would say it's a bit more like stack analysis.

00:53:40.540 --> 00:53:47.660
Because it definitely is trying to find sources and syncs, doing flow analysis.

00:53:47.660 --> 00:53:50.400
I don't know if it does symbolic execution.

00:53:50.400 --> 00:53:52.280
I haven't seen under the hood.

00:53:52.280 --> 00:53:59.880
So, when you buy a SaaS tool, there's first generation and second generation and different ways that they work.

00:54:00.160 --> 00:54:04.200
And I'd love to know more under the hood of how it works.

00:54:04.200 --> 00:54:05.140
Yeah.

00:54:05.800 --> 00:54:06.240
Yeah.

00:54:06.240 --> 00:54:08.220
It looks really cool.

00:54:08.220 --> 00:54:18.660
You know, it'll find common things like pickle issues or parsing YAML that might be bad or, you know, all the different things that you're still allowed to do.

00:54:18.660 --> 00:54:21.060
But people decided probably are not the best choices.

00:54:21.060 --> 00:54:23.520
But we'll leave it there so we don't break things that are doing it.

00:54:23.580 --> 00:54:24.500
But don't do it.

00:54:24.500 --> 00:54:31.380
Kind of like the pointer safe string copies in C++.

00:54:31.380 --> 00:54:32.980
You're like, don't copy like you used to.

00:54:32.980 --> 00:54:36.160
Like, well, how do I do it now that I don't even know anymore, you know?

00:54:36.160 --> 00:54:42.580
I feel, too, that, like, so it's called security linter rather than stack analysis.

00:54:42.740 --> 00:54:46.780
I feel like it also focuses on code quality and not just security.

00:54:46.780 --> 00:54:52.200
And that's helpful, too, because if you have higher quality code, it's just going to be more secure.

00:54:52.200 --> 00:54:54.740
It's going to be easier to maintain, easier to debug.

00:54:54.740 --> 00:54:57.680
So, if there is a security problem, you can address it faster.

00:54:57.680 --> 00:55:01.020
You have less technical debt if you have higher quality code.

00:55:01.520 --> 00:55:02.800
So, that's a win as well.

00:55:02.800 --> 00:55:03.780
Absolutely.

00:55:03.780 --> 00:55:05.340
All right.

00:55:05.340 --> 00:55:12.040
Let's talk about SQL, relational databases, these kinds of things a little bit.

00:55:12.040 --> 00:55:17.760
I think there's, you know, the majority of people out there have an app that talks to a database.

00:55:17.760 --> 00:55:18.940
That database is relational.

00:55:18.940 --> 00:55:21.420
Usually, it's running on its own server.

00:55:21.420 --> 00:55:22.720
Yeah.

00:55:22.720 --> 00:55:28.060
And when things go bad, it's usually the data that came out of the server that makes the news.

00:55:28.060 --> 00:55:29.640
Not always, but usually.

00:55:30.580 --> 00:55:30.980
Yeah.

00:55:30.980 --> 00:55:31.720
But it can be the server.

00:55:31.720 --> 00:55:32.600
So, what's some advice here?

00:55:32.600 --> 00:55:38.240
So, an SQL server is a server, right?

00:55:38.240 --> 00:55:39.560
So, it is a server.

00:55:39.560 --> 00:55:40.580
You need to patch it.

00:55:40.580 --> 00:55:41.920
You need to keep it up to date.

00:55:41.920 --> 00:55:43.680
You need to harden it.

00:55:43.680 --> 00:55:45.400
It comes with a hardening guide.

00:55:45.400 --> 00:55:47.800
You should do all the steps in the hardening guide.

00:55:47.800 --> 00:55:52.360
You should make sure that every single person you work with cannot access it, right?

00:55:52.360 --> 00:55:56.800
Like, it seems really obvious, but you would be surprised.

00:55:58.140 --> 00:56:03.720
So, like, basic server hygiene applies to them.

00:56:03.720 --> 00:56:12.200
On top of that, then the SQL software, the SQL server software itself, it can be hardened as well.

00:56:12.200 --> 00:56:16.540
And that might sound odd, but, like, it has updates that it needs.

00:56:17.540 --> 00:56:25.080
So, you want to make sure that you have locked it down the way that you think that you should.

00:56:25.080 --> 00:56:26.400
Yeah.

00:56:26.400 --> 00:56:28.600
Absolutely.

00:56:28.600 --> 00:56:31.040
And it can run in different users as well, right?

00:56:31.100 --> 00:56:39.640
It's easy to, it's easiest if it just runs as root, but wouldn't it be better if it, in case somebody gets to it and breaks in through it, right?

00:56:39.640 --> 00:56:43.120
You don't want them to use it as a lateral movement.

00:56:43.120 --> 00:56:46.840
You know, first they got into the server and then they went over to, you know, who knows where.

00:56:46.840 --> 00:56:55.260
We also want to make sure, ideally, that people are not accessing it with database owner unless they're the database owner.

00:56:55.860 --> 00:56:56.040
Right?

00:56:56.040 --> 00:56:59.100
Like, ideally, DBO users are used rarely.

00:56:59.100 --> 00:57:02.760
Like, let's say you're using MS SQL server.

00:57:02.760 --> 00:57:05.800
Yeah, that has database owner privileges.

00:57:05.800 --> 00:57:08.300
I get it because you're a database administrator.

00:57:08.560 --> 00:57:14.120
But if your app or your API is accessing the database, we want to use a least privilege approach.

00:57:14.120 --> 00:57:17.340
So, if you're just doing select statements, just do a read-only user.

00:57:17.340 --> 00:57:22.820
If you're doing CRED, create, read, update, delete, then you should use a read-write user.

00:57:22.820 --> 00:57:27.560
But DBO is not almost ever actually needed, if we think about it.

00:57:27.560 --> 00:57:30.680
And so, if you don't have that, then less can happen than is bad.

00:57:30.680 --> 00:57:31.220
Right?

00:57:31.220 --> 00:57:34.280
Does it need access to every table or just these 10 tables?

00:57:34.280 --> 00:57:35.840
Mm-hmm.

00:57:35.840 --> 00:57:36.840
Exactly.

00:57:37.340 --> 00:57:45.140
Another thing is, like, classifying the data that's in each table as sensitive or not sensitive.

00:57:45.140 --> 00:57:52.840
And maybe you work for the government, so maybe it's, like, classified or secret or top secret or whatever your organization uses.

00:57:52.840 --> 00:57:57.060
But if you could classify those things and then label them.

00:57:57.980 --> 00:58:02.900
A lot of databases now have labels for sensitivity, which is awesome.

00:58:02.900 --> 00:58:04.680
But if not, just add an extra field.

00:58:04.680 --> 00:58:05.280
Yeah.

00:58:05.280 --> 00:58:07.400
If not, just, like, add a field called sensitivity.

00:58:07.400 --> 00:58:12.900
And then it's just, like, public or unclassified or super secret.

00:58:12.900 --> 00:58:13.820
Don't show people.

00:58:13.820 --> 00:58:15.540
Yeah.

00:58:15.740 --> 00:58:21.160
And when you do that, it makes life so much better if there is a security incident.

00:58:21.160 --> 00:58:25.420
Because I know if I need to freak out a little or if I need to freak out a lot.

00:58:25.840 --> 00:58:32.580
And if it's not labeled, I have to assume the absolute worst when I respond until I know it's a lower threat.

00:58:32.580 --> 00:58:35.540
And that really sucks.

00:58:35.540 --> 00:58:36.920
Yeah.

00:58:37.720 --> 00:58:38.540
Yeah, for sure.

00:58:38.540 --> 00:58:43.280
Another thing that you called out in this section is make sure that logging is turned on.

00:58:43.280 --> 00:58:47.020
And you need to do this before something goes bad.

00:58:47.020 --> 00:58:50.620
Because it's the logs that tell you what happened.

00:58:50.620 --> 00:58:52.100
Yes.

00:58:52.100 --> 00:58:57.500
I think logging, not just for databases, but across the board, logging is super important.

00:58:57.500 --> 00:58:58.640
Oh, yeah.

00:58:58.640 --> 00:59:03.860
I have a whole giant section in the book about what to log, what not to log, when to log.

00:59:04.140 --> 00:59:08.440
Like, exactly what I would love a log to look like, how to protect your logs.

00:59:08.440 --> 00:59:14.960
I had a customer, and there are, like, 28 of our customers, their credit cards got nicked.

00:59:14.960 --> 00:59:16.420
And Visa called us.

00:59:16.420 --> 00:59:20.460
And they want us to prove that it wasn't us.

00:59:20.460 --> 00:59:21.480
And I'm like, great.

00:59:21.480 --> 00:59:22.580
Let's go get the logs.

00:59:22.580 --> 00:59:25.400
They're like, we kind of deleted those.

00:59:25.400 --> 00:59:27.660
You know, they're hard to back up.

00:59:27.660 --> 00:59:29.980
I said, what?

00:59:29.980 --> 00:59:33.840
And they're like, well, we just switched to a new server four months ago.

00:59:34.300 --> 00:59:35.940
And so we just deleted the old server.

00:59:35.940 --> 00:59:38.020
So, like, and we just did that.

00:59:38.020 --> 00:59:40.460
So, like, for four months, we have no records.

00:59:40.460 --> 00:59:41.800
And I said, oh, my gosh.

00:59:41.800 --> 00:59:47.500
And so, luckily, it turned out there was a sandwich shop in the same building.

00:59:47.500 --> 00:59:51.100
And they caught an employee was skimming the cards.

00:59:51.100 --> 00:59:53.020
And so Visa's like, we figured it out.

00:59:53.020 --> 00:59:54.020
And we're like, great.

00:59:54.020 --> 00:59:55.240
I'm like, we're all getting fired.

00:59:57.020 --> 00:59:57.980
If they just knew.

00:59:57.980 --> 01:00:11.040
But if Visa yanks your ability to use it and your main way of making money is charging money over the internet, like, you've just reduced your ability to do the main purpose of capitalism.

01:00:11.040 --> 01:00:15.300
And, yeah, life is, you do not want to tick off Visa or MasterCard.

01:00:15.300 --> 01:00:16.760
No.

01:00:16.760 --> 01:00:17.340
Don't do it.

01:00:17.620 --> 01:00:20.620
All that stuff is definitely unnerving.

01:00:20.620 --> 01:00:22.300
Let's see.

01:00:22.300 --> 01:00:23.320
Some more advice you got.

01:00:23.320 --> 01:00:30.520
Use an ORM if you can because they basically are not immune, but they have a lot of automatic guards against.

01:00:30.520 --> 01:00:34.500
You're not writing direct string, so it's harder to concatenate that stuff.

01:00:35.940 --> 01:00:41.300
They will also do a lot of the code for you, depending upon the one that you use.

01:00:41.300 --> 01:00:44.300
Like, I've used the entity relationship framework with .NET.

01:00:44.300 --> 01:00:47.180
It's like, I'm going to write all your gets and sets and do this and that for you.

01:00:47.180 --> 01:00:47.840
I'm like, oh, sweet.

01:00:47.840 --> 01:00:48.380
Thanks, buddy.

01:00:48.380 --> 01:00:49.860
And even your migrations and stuff.

01:00:49.860 --> 01:00:50.040
Yeah.

01:00:50.040 --> 01:00:52.040
It's pretty nice.

01:00:52.040 --> 01:00:52.560
Yeah.

01:00:52.560 --> 01:00:52.860
It's real.

01:00:52.860 --> 01:00:53.920
I'm a fan.

01:00:53.920 --> 01:00:54.380
I'm a believer.

01:00:54.380 --> 01:00:56.520
I know some people say, oh, it's a little bit slower or whatever.

01:00:56.520 --> 01:00:57.180
Like, yeah.

01:00:57.180 --> 01:01:01.120
But I like getting stuff done and sleeping at night.

01:01:01.120 --> 01:01:05.600
So another one I think is really worth pointing out.

01:01:06.480 --> 01:01:09.460
Most important for databases, but also just generally, good idea.

01:01:09.460 --> 01:01:14.460
Have an extensive and well-thought-out backup plan and try to back up something at least once.

01:01:14.460 --> 01:01:16.300
Or try to restore something at least once.

01:01:16.300 --> 01:01:17.960
Yes.

01:01:17.960 --> 01:01:21.340
I worked somewhere and we had a computer problem.

01:01:21.340 --> 01:01:28.880
And they lost everyone's work in our entire 2,000-person department for the whole week.

01:01:28.880 --> 01:01:30.360
So for like the three days.

01:01:30.360 --> 01:01:31.120
It was the Wednesday.

01:01:31.120 --> 01:01:33.180
And they had lost all of our work.

01:01:33.180 --> 01:01:35.500
Everyone's work was not saved.

01:01:36.100 --> 01:01:36.880
All of it was gone.

01:01:36.880 --> 01:01:39.580
And we go to the backup guys.

01:01:39.580 --> 01:01:40.280
And we're like, okay.

01:01:40.280 --> 01:01:41.700
Do your thing.

01:01:41.700 --> 01:01:44.240
And they're like, oh, well, it'll take like at least a month.

01:01:44.240 --> 01:01:45.680
And we've never really tried it before.

01:01:45.680 --> 01:01:47.300
And we don't think it'll really work.

01:01:47.300 --> 01:01:50.040
And so you guys should just still redo it.

01:01:50.040 --> 01:01:53.580
And my boss was like, oh, I guess we have to redo it.

01:01:53.580 --> 01:01:57.520
And I was like, well, can I hire two new software developers?

01:01:57.520 --> 01:01:58.780
And he's like, why?

01:01:58.780 --> 01:02:00.940
I'm like, well, because those guys are obviously fired.

01:02:01.380 --> 01:02:01.820
Great.

01:02:01.820 --> 01:02:04.120
And then I can just like hire two new devs.

01:02:04.120 --> 01:02:04.740
It'll be great.

01:02:04.740 --> 01:02:06.660
And he's like, Tanya, go back to your room.

01:02:06.660 --> 01:02:10.460
But I'm like, we don't need them.

01:02:10.460 --> 01:02:14.980
Their job, they just proved that their job is completely worthless.

01:02:14.980 --> 01:02:16.660
So let's just get rid of them.

01:02:16.720 --> 01:02:19.220
And he was like, stop talking, go away.

01:02:19.220 --> 01:02:21.360
I understand you're frustrated.

01:02:21.360 --> 01:02:24.200
That's not constructive, Tanya.

01:02:24.200 --> 01:02:26.200
If I fire them, then they're going to have to fire me because I hire.

01:02:26.200 --> 01:02:26.700
No, I'm just kidding.

01:02:26.700 --> 01:02:30.240
You know, one thing that I, yeah.

01:02:30.240 --> 01:02:33.640
The one thing that comes to mind, though, is, you know, back in the day,

01:02:33.640 --> 01:02:37.140
we had Suburgeon and CVS and SourceSafe and all these things.

01:02:37.140 --> 01:02:39.640
And if something went wrong with that, it was just gone.

01:02:39.640 --> 01:02:40.580
It was just gone.

01:02:40.660 --> 01:02:46.320
And now we have Git and if something goes wrong, there might be 100 copies of it.

01:02:46.320 --> 01:02:52.080
It's less bad from a software person's perspective.

01:02:52.080 --> 01:02:56.560
Three times I have worked somewhere where they lost their code repository.

01:02:57.640 --> 01:02:57.840
Yeah.

01:02:57.840 --> 01:03:07.260
One of the times I started and one of the employees was junior and he had just deleted it by accident.

01:03:07.260 --> 01:03:15.380
And I managed to go to each person's computer and recover a ton of the code and put a lot of it back together.

01:03:15.380 --> 01:03:21.100
Another time someone just deleted it and they, I feel, were malicious.

01:03:21.460 --> 01:03:27.920
And then another time, basically, we didn't want to wait for shared services.

01:03:27.920 --> 01:03:32.940
So the Canadian government decided we would make a department that was the IT department for the whole government.

01:03:32.940 --> 01:03:34.520
And they just wouldn't give us a server.

01:03:34.520 --> 01:03:39.980
So we just took a server from another room and repurposed it and decided that was our code repo survey.

01:03:39.980 --> 01:03:41.620
And so I set up a whole network.

01:03:41.620 --> 01:03:43.700
I set up Active Directory and all this.

01:03:43.700 --> 01:03:45.460
I installed Team Foundation server.

01:03:45.460 --> 01:03:46.320
I did all the stuff.

01:03:46.320 --> 01:03:47.020
I set it all up.

01:03:47.020 --> 01:03:51.280
And I was like, listen, bud, I did this for you, but you need to back it up every night.

01:03:51.280 --> 01:03:52.740
And he promised me he would.

01:03:52.740 --> 01:03:55.100
And then five months later, it crashed.

01:03:55.100 --> 01:03:58.240
And he's like, are you going to make it go again?

01:03:58.240 --> 01:03:59.800
And it was a RAID server.

01:03:59.800 --> 01:04:02.300
And it automatically deleted everything.

01:04:02.300 --> 01:04:04.120
Yeah.

01:04:04.120 --> 01:04:06.340
And so I was like, well, get your backup.

01:04:06.340 --> 01:04:06.920
Did its job.

01:04:06.920 --> 01:04:07.440
It replicated.

01:04:07.440 --> 01:04:11.020
He had not backed it up a single time in five months.

01:04:11.020 --> 01:04:16.160
And we lost 11 contractors work for like months, like five months.

01:04:16.400 --> 01:04:18.380
I was like, I am so angry.

01:04:18.380 --> 01:04:20.700
And he's like, could you spend this weekend making us a new?

01:04:20.700 --> 01:04:21.520
I was like, no.

01:04:21.520 --> 01:04:23.640
I'm so angry at you.

01:04:23.640 --> 01:04:24.360
You'll make it.

01:04:24.360 --> 01:04:25.380
He's like, but I don't know how.

01:04:25.380 --> 01:04:27.080
I'm like, I guess it's tough to be you.

01:04:27.080 --> 01:04:28.540
You're going to learn.

01:04:28.540 --> 01:04:30.500
You're going to learn the hard way.

01:04:30.500 --> 01:04:31.380
Yeah.

01:04:31.380 --> 01:04:33.060
So we're pretty much out of time here.

01:04:33.060 --> 01:04:38.780
But I do want to maybe just point out that there is a whole section on Flask, which is pretty awesome.

01:04:39.780 --> 01:04:53.580
And you talk a lot about different extensions that you can use, like Flask Secrets for secret management or Flask WTF for CRCSRF protection and things like that.

01:04:53.640 --> 01:04:55.340
So there's a bunch of stuff in there.

01:04:55.340 --> 01:04:56.380
People want to go check that out.

01:04:56.380 --> 01:04:58.400
But I think we might need to call it for time.

01:04:58.400 --> 01:04:59.960
But yeah, this is good stuff.

01:04:59.960 --> 01:05:10.760
If you want to learn more besides obviously purchasing all of my books, I have a free online academy at academy.semgrep.dev.

01:05:12.040 --> 01:05:14.300
I don't know if you want me to spell it because that's like.

01:05:14.300 --> 01:05:21.340
I'll find it.

01:05:21.340 --> 01:05:21.920
I'll find it.

01:05:21.920 --> 01:05:22.160
There.

01:05:22.160 --> 01:05:23.020
There.

01:05:23.020 --> 01:05:26.780
Oh, it's like it's through my full time job.

01:05:26.780 --> 01:05:29.540
So I train on the side and I do stuff for them full time.

01:05:29.540 --> 01:05:31.160
But I put it in our private chat.

01:05:31.160 --> 01:05:34.840
And basically, I have a free secure coding course in there.

01:05:34.840 --> 01:05:36.220
It's a few years old.

01:05:36.400 --> 01:05:49.900
Like the book is all brand new stuff, but it covers like agnostic, you know, how to do input validation, how to do output encoding, how to how to make sure that you are using parameterized queries, how to configure every single security header.

01:05:49.900 --> 01:05:52.100
And it's just free.

01:05:52.100 --> 01:05:57.000
And I do that because I need us to do better.

01:05:57.000 --> 01:05:58.100
Real bad.

01:05:58.100 --> 01:06:00.760
Please, please, please, please, please.

01:06:00.760 --> 01:06:01.080
Yeah.

01:06:01.080 --> 01:06:01.760
Well, thank you.

01:06:01.760 --> 01:06:02.340
That's awesome.

01:06:02.340 --> 01:06:04.320
Thank you.

01:06:04.320 --> 01:06:05.180
Yeah.

01:06:05.200 --> 01:06:06.780
It's been a really fun conversation.

01:06:06.780 --> 01:06:10.240
And I feel like we could probably talk for another two hours.

01:06:10.240 --> 01:06:12.880
But I know.

01:06:12.880 --> 01:06:15.320
Well, maybe in another year or two, we'll come back.

01:06:15.320 --> 01:06:15.800
If you'll.

01:06:15.800 --> 01:06:16.080
Yeah.

01:06:16.080 --> 01:06:16.760
Yeah.

01:06:16.760 --> 01:06:17.420
That'd be amazing.

01:06:17.420 --> 01:06:20.540
Well, let's leave it with a final call to action.

01:06:20.540 --> 01:06:23.020
People are you have their attention.

01:06:23.020 --> 01:06:26.700
They thought, well, maybe maybe I should validate that or learn more or do more.

01:06:26.700 --> 01:06:29.100
What do you tell them before we wrap it up?

01:06:30.100 --> 01:06:39.260
I want you to go look at whatever framework that you are using and see if there are security features and start using them in your code.

01:06:39.260 --> 01:06:43.520
So if you're using Flask, there's a whole bunch of super awesome things in Flask.

01:06:43.520 --> 01:06:44.820
Please use them.

01:06:44.820 --> 01:06:46.460
Your life will be better.

01:06:46.460 --> 01:06:48.120
Yeah, absolutely.

01:06:48.120 --> 01:06:52.000
Well, thank you for sharing all your experience and the story.

01:06:52.000 --> 01:06:53.180
That's been a lot of fun.

01:06:53.900 --> 01:06:55.580
Thank you so much for having me, Michael.

01:06:55.580 --> 01:06:56.880
Yeah, you bet.

01:06:56.880 --> 01:06:57.400
Bye.

01:06:57.400 --> 01:07:02.160
Bye.

