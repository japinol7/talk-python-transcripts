WEBVTT

00:00:00.000 --> 00:00:04.000
Hey Christopher, welcome to Talk By The Mii.


00:00:04.000 --> 00:00:08.000
Ah, it's been a little over a year, I just looked it up. It's nice to be back.


00:00:08.000 --> 00:00:12.000
Yes, the annual appearance. I love it.


00:00:12.000 --> 00:00:16.000
Sure, you want to make it annual? I can go for three or four and that's the end of the future.


00:00:16.000 --> 00:00:20.000
Why not? We both spend a decent amount of time


00:00:20.000 --> 00:00:24.000
behind microphones these days, don't we?


00:00:24.000 --> 00:00:28.000
I seem to, yes. Yes, it does seem to be the way it is.


00:00:28.000 --> 00:00:32.000
It's a funny world, right?


00:00:32.000 --> 00:00:36.000
Yeah, well I was just looking it up because I figured


00:00:36.000 --> 00:00:40.000
your standard interview question, "So what have you been doing?" It's like, well,


00:00:40.000 --> 00:00:44.000
I've put out over a dozen courses since the last time I was on. So yes, as you said,


00:00:44.000 --> 00:00:48.000
it's a lot of time behind the mic. Not so much the live mic.


00:00:48.000 --> 00:00:52.000
So if I'm doing a little nervous, say the word "so" too many times.


00:00:52.000 --> 00:00:56.000
It makes me more human than in my courses, I guess.


00:00:56.000 --> 00:01:00.000
That's right. The magic of editing.


00:01:00.000 --> 00:01:04.000
That was a concise and quick response.


00:01:04.000 --> 00:01:08.000
It's great to have you back on the show and looking forward to


00:01:08.000 --> 00:01:12.000
talking about one of my very, very favorite topics,


00:01:12.000 --> 00:01:16.000
HTMX, this time in the context of Django.


00:01:16.000 --> 00:01:20.000
Yeah, I was actually just the other day listening to your episode


00:01:20.000 --> 00:01:24.000
428 when you had Vincent and Gibson on


00:01:24.000 --> 00:01:28.000
and you delved into HTMX a little bit. They seem to be big fans.


00:01:28.000 --> 00:01:32.000
It's, well,


00:01:32.000 --> 00:01:36.000
one of the sort of semi-gags in the course that we're going to


00:01:36.000 --> 00:01:40.000
talk about a little bit is I just kept telling people that I'm in love.


00:01:40.000 --> 00:01:44.000
It really is the answer. I'd love to see it become part of the HTML


00:01:44.000 --> 00:01:48.000
standard. It's a much happier way


00:01:48.000 --> 00:01:52.000
of coding. Makes me feel like the old days.


00:01:52.000 --> 00:01:56.000
Things are much simpler with it.


00:01:56.000 --> 00:02:00.000
Yeah, I totally agree. Carson Gross, the creator of it, does often say


00:02:00.000 --> 00:02:04.000
HTML just kind of stopped growing when JavaScript came along


00:02:04.000 --> 00:02:08.000
and this is what it should have been.


00:02:08.000 --> 00:02:12.000
Well, if I've got to do it, I'll take one for the team and build HTMX for everyone.


00:02:12.000 --> 00:02:16.000
You're right. It really should just be built in more or less, shouldn't it?


00:02:16.000 --> 00:02:20.000
Yeah, every once in a while you come across something where you sort of look at it and you're like, "Wait, this is the right way."


00:02:20.000 --> 00:02:24.000
"Crap, I've been doing it wrong for almost 30 years. This is the right way."


00:02:24.000 --> 00:02:28.000
Why didn't anyone tell me?


00:02:28.000 --> 00:02:32.000
It's a little bit of a, "Oh, wait,


00:02:32.000 --> 00:02:36.000
if I'd had this so long ago, it would have made this and this and this so much easier."


00:02:36.000 --> 00:02:40.000
It's definitely some forward progress.


00:02:40.000 --> 00:02:44.000
It is. Well, you mentioned


00:02:44.000 --> 00:02:48.000
when I had the Django chat guys on the show not too long ago,


00:02:48.000 --> 00:02:52.000
that was when we talked about Django.


00:02:52.000 --> 00:02:56.000
Surprise, surprise. But mostly, we started out


00:02:56.000 --> 00:03:00.000
with the focus of Django turning 18.


00:03:00.000 --> 00:03:04.000
Maybe we can just start with Django itself before we dive into HTMX


00:03:04.000 --> 00:03:08.000
because I think Django, more than the other


00:03:08.000 --> 00:03:12.000
frameworks, has its opinions and its styles and its way of doing things.


00:03:12.000 --> 00:03:16.000
Integrating with HTMX, I think, is


00:03:16.000 --> 00:03:20.000
a pretty interesting thing that other people


00:03:20.000 --> 00:03:24.000
and you've done as we'll talk about through this course that we're going to mention in a moment.


00:03:24.000 --> 00:03:28.000
What are your thoughts on Django over the years and Django


00:03:28.000 --> 00:03:32.000
being old enough to vote now?


00:03:32.000 --> 00:03:36.000
There's this line I came across that I've since stolen.


00:03:36.000 --> 00:03:40.000
Somebody said, "It's not a dinosaur, it's a shark."


00:03:40.000 --> 00:03:44.000
I love that concept. It's still


00:03:44.000 --> 00:03:48.000
evolving and it's still changing. It's still very actively developed.


00:03:48.000 --> 00:03:52.000
I've been playing with Django 5 recently and there's nothing in there


00:03:52.000 --> 00:03:56.000
that broke any of my 4 code. If you're going to be


00:03:56.000 --> 00:04:00.000
coding with the same library over and over again, that's actually desirable.


00:04:00.000 --> 00:04:04.000
You want the new features, but you don't want to have to go and redo something every single time.


00:04:04.000 --> 00:04:08.000
I don't want to knock view. It's got some strengths


00:04:08.000 --> 00:04:12.000
and we'll talk a little bit about that as well when we start getting into some of the HTMX


00:04:12.000 --> 00:04:16.000
stuff. By example, because I don't use it very frequently, it seems every time


00:04:16.000 --> 00:04:20.000
I go back it's like, "Oh, they've changed how this happens and I have to rethink this."


00:04:20.000 --> 00:04:24.000
I don't run into that with Django.


00:04:24.000 --> 00:04:28.000
It's become so large that it also


00:04:28.000 --> 00:04:32.000
addresses different problems for different people. I love that they're adding all this asynchronous


00:04:32.000 --> 00:04:36.000
stuff. I will probably never use it. I think it's great that it's out there


00:04:36.000 --> 00:04:40.000
because it solves a problem for those


00:04:40.000 --> 00:04:44.000
folks who are trying to use that kind of thing and they don't have to go off to another library.


00:04:44.000 --> 00:04:48.000
But for those of us who don't use it, it's like, "Yep, that's fine. Whatever. It doesn't


00:04:48.000 --> 00:04:52.000
break anything. They don't have to start from scratch." They keep chugging


00:04:52.000 --> 00:04:56.000
along. Both Will and Carlton


00:04:56.000 --> 00:05:00.000
commented about the community and they're right. It's there.


00:05:00.000 --> 00:05:04.000
Django,


00:05:04.000 --> 00:05:08.000
the project site that has all of the add-ons, there's over


00:05:08.000 --> 00:05:12.000
4,000 different apps and libraries that you can use. So it's not


00:05:12.000 --> 00:05:16.000
just the framework. It's not just the core. It's the ecosystem and it


00:05:16.000 --> 00:05:20.000
makes a big difference. It makes your life a lot easier that way. A lot of choice.


00:05:20.000 --> 00:05:24.000
More than almost any other individual library in Python,


00:05:24.000 --> 00:05:28.000
Django's got a massive community behind it.


00:05:28.000 --> 00:05:32.000
There aren't other conferences, right? There's PyCon and there's


00:05:32.000 --> 00:05:36.000
DjangoCon and everything else is go to a PyCon


00:05:36.000 --> 00:05:40.000
and talk about it in a room and then there's an entire conference for it. And two of them,


00:05:40.000 --> 00:05:44.000
right? There's Europe and the US, right? So it's a big deal.


00:05:44.000 --> 00:05:48.000
It is and it's been a while since I've been to a requests con.


00:05:48.000 --> 00:05:52.000
Although I do like requests, yeah.


00:05:52.000 --> 00:05:56.000
Also you mentioned the async stuff and some of these new things.


00:05:56.000 --> 00:06:00.000
Python and Django, it's just amazing how stable they are in the sense


00:06:00.000 --> 00:06:04.000
of two to three aside.


00:06:04.000 --> 00:06:08.000
It's very, very, very rare. Not never, but


00:06:08.000 --> 00:06:12.000
very rare that you have to go and fix code because a new version of Python came out.


00:06:12.000 --> 00:06:16.000
Yeah, it's the same thing, right? So 3.12 just launched. I've been playing with the


00:06:16.000 --> 00:06:20.000
RCs for a little bit. Just swap out the virtualenv


00:06:20.000 --> 00:06:24.000
and my code just keeps chucking along, right?


00:06:24.000 --> 00:06:28.000
I haven't run into a problem even with beta versions in years.


00:06:28.000 --> 00:06:32.000
And that stability, it's important, right?


00:06:32.000 --> 00:06:36.000
Like you kind of said, we're still hurting a little bit


00:06:36.000 --> 00:06:40.000
from the scars from two to three. So I think everybody's being cautious


00:06:40.000 --> 00:06:44.000
in the right way. Yeah, I think that's probably true.


00:06:44.000 --> 00:06:48.000
Also, some of those new features that maybe you won't


00:06:48.000 --> 00:06:52.000
use or I won't use or whatever, I think they're still really important to have


00:06:52.000 --> 00:06:56.000
because I don't really hear it so much anymore actually, but


00:06:56.000 --> 00:07:00.000
there used to be a lot of talk of like, "Oh, we're switching to Go because of async.


00:07:00.000 --> 00:07:04.000
We need async, so we're switching to Go because we need..."


00:07:04.000 --> 00:07:08.000
Even if you individually don't use it,


00:07:08.000 --> 00:07:12.000
having those features in Django or


00:07:12.000 --> 00:07:16.000
in Python, they're really important because they kind of


00:07:16.000 --> 00:07:20.000
knock that conversation out, right? They're like, "Oh, we had all these people who love Python


00:07:20.000 --> 00:07:24.000
but they had this one special case so they were forced to leave." Well, now they're not


00:07:24.000 --> 00:07:28.000
necessarily forced to leave because of that. And I think that's positive for everyone


00:07:28.000 --> 00:07:32.000
even if many people don't use it directly.


00:07:32.000 --> 00:07:36.000
Yeah, well, for sure. If async is what was stopping you


00:07:36.000 --> 00:07:40.000
from using Django and switching to FastAPI, then


00:07:40.000 --> 00:07:44.000
now you don't necessarily have to. And again, I'm a fan of FastAPI.


00:07:44.000 --> 00:07:48.000
A lot of it comes down to what you're building.


00:07:48.000 --> 00:07:52.000
I often get the question, "Why would I pick Django versus this


00:07:52.000 --> 00:07:56.000
versus that?" And I'm like, "Well, if you're building an actual project


00:07:56.000 --> 00:08:00.000
where you need web pages as well as the API


00:08:00.000 --> 00:08:04.000
as well as this and as well as that, well, you can do that with FastAPI plus SQLAlchemy


00:08:04.000 --> 00:08:08.000
plus something else. But it's all self-contained in Django


00:08:08.000 --> 00:08:12.000
and so things tend to work better. So those edge cases that you


00:08:12.000 --> 00:08:16.000
talk about that might cause you to go off to another library, even if they don't


00:08:16.000 --> 00:08:20.000
do it quite as well, just having it enough so that you don't leave


00:08:20.000 --> 00:08:24.000
makes the difference for sure.


00:08:24.000 --> 00:08:28.000
There's a whole show comparing Django to FastAPI right there, isn't there?


00:08:28.000 --> 00:08:32.000
Probably, yes. In Django or Django Ninja. Probably several, yes.


00:08:32.000 --> 00:08:36.000
Probably, but not this show, not this one.


00:08:36.000 --> 00:08:40.000
Alright, what's next? Let's talk about your book next.


00:08:40.000 --> 00:08:44.000
Ah, sure. So one of the things you've been up to in addition to courses


00:08:44.000 --> 00:08:48.000
is writing books, Django in action.


00:08:48.000 --> 00:08:52.000
Almost released, is that right?


00:08:52.000 --> 00:08:56.000
In singular, this is my first, so be kind.


00:08:56.000 --> 00:09:00.000
It's in early release, so you're able to purchase the


00:09:00.000 --> 00:09:04.000
first, I think we're up to seven chapters


00:09:04.000 --> 00:09:08.000
and essentially if you buy the electronic edition, then you


00:09:08.000 --> 00:09:12.000
get a chapter, about a chapter or two a month, it kind of comes out piecemeal.


00:09:12.000 --> 00:09:16.000
It's on, it's called Django in action


00:09:16.000 --> 00:09:20.000
it's on Django, it's divided into three parts


00:09:20.000 --> 00:09:24.000
so part one primarily is sort of that intro


00:09:24.000 --> 00:09:28.000
stuff, how to get projects going, what a view is, routes and all that kind of good thing


00:09:28.000 --> 00:09:32.000
part two is around the tools that are built into Django


00:09:32.000 --> 00:09:36.000
so how to use the admin, slightly more


00:09:36.000 --> 00:09:40.000
advanced topics and I'm currently in the process of writing part three


00:09:40.000 --> 00:09:44.000
and the intent of part three is how to extend your


00:09:44.000 --> 00:09:48.000
use to the third party libraries, you just mentioned


00:09:48.000 --> 00:09:52.000
Django Ninja, so I'm hoping to have a chapter both on Ninja and a chapter on


00:09:52.000 --> 00:09:56.000
HTMX and both of these will guide people to, okay great, so now you've


00:09:56.000 --> 00:10:00.000
got Django but you want to build X, I need an API, well how do I do that


00:10:00.000 --> 00:10:04.000
well there's Ninja and there's the DRF, I want to have a little more


00:10:04.000 --> 00:10:08.000
functionality, a little more dynamicism, oh okay, well a good answer


00:10:08.000 --> 00:10:12.000
to that now is HTMX, so this is how you wrap those things together


00:10:12.000 --> 00:10:16.000
so the intent is to try and cover that, I'm sort of hoping


00:10:16.000 --> 00:10:20.000
that there's enough there in part three that folks who have done


00:10:20.000 --> 00:10:24.000
a bit of Django before are still interested in it and can pick


00:10:24.000 --> 00:10:28.000
some new things up as you go along and


00:10:28.000 --> 00:10:32.000
with the release of Django 5 I've been busy going back in


00:10:32.000 --> 00:10:36.000
and adding, hey and this is what they added in 5 and this is what changes


00:10:36.000 --> 00:10:40.000
so trying to cover all of that, full


00:10:40.000 --> 00:10:44.000
publication will probably be early next year but if you're on the electronic


00:10:44.000 --> 00:10:48.000
copy you can start now and go


00:10:48.000 --> 00:10:52.000
from there, so yeah it's available


00:10:52.000 --> 00:10:56.000
and I guess while I'm on the topic I've been getting a lot of great feedback


00:10:56.000 --> 00:11:00.000
and we've got a forum for folks who've read the book and it makes a big difference to me


00:11:00.000 --> 00:11:04.000
because somebody says, oh hey I did this and it didn't quite work


00:11:04.000 --> 00:11:08.000
and I'm like, oh okay it shouldn't but let's add a couple sentences about that so it's


00:11:08.000 --> 00:11:12.000
kind of great to have this dynamic process going, improve it


00:11:12.000 --> 00:11:16.000
as I go along which is so those folks who have been


00:11:16.000 --> 00:11:20.000
participating in the early release, I very much appreciate that feedback


00:11:20.000 --> 00:11:24.000
It's cool to be able to build it out in public and not just


00:11:24.000 --> 00:11:28.000
drop 300 pages of printed something. Well you know


00:11:28.000 --> 00:11:32.000
it's something I'm sure you encounter with the courses all the time right?


00:11:32.000 --> 00:11:36.000
I've got, we'll call it a particular sense of humor shall we?


00:11:36.000 --> 00:11:40.000
and when I put something in a


00:11:40.000 --> 00:11:44.000
course that I find funny, it's not like you're, there's no audience right?


00:11:44.000 --> 00:11:48.000
You have no idea whether or not the joke lands


00:11:48.000 --> 00:11:52.000
it's sort of the same thing, you never get any of that kind of feedback with


00:11:52.000 --> 00:11:56.000
a course and a book can very much be the same way so yeah that early


00:11:56.000 --> 00:12:00.000
release in the forum helps a little bit so


00:12:00.000 --> 00:12:04.000
nobody's going to tell me whether or not I'm funny but they can at least catch whether or not the code works


00:12:04.000 --> 00:12:08.000
which is useful. Exactly.


00:12:08.000 --> 00:12:12.000
And speaking of projects you've been working on, one of the things that kind of inspired


00:12:12.000 --> 00:12:16.000
me to have you on the show to just dive into Django and HTMX is you actually did a


00:12:16.000 --> 00:12:20.000
talk Python course, HTMX and Django, modern Python


00:12:20.000 --> 00:12:24.000
web apps hold the JavaScript which is awesome. That's a really fun


00:12:24.000 --> 00:12:28.000
just under two hours course that really shows people


00:12:28.000 --> 00:12:32.000
how to integrate HTMX into Django. Yeah


00:12:32.000 --> 00:12:36.000
and you know we should shout out the, there's a sister course on there that you


00:12:36.000 --> 00:12:40.000
started out with Flask and essentially I took the same concepts


00:12:40.000 --> 00:12:44.000
and then stuck it in the Django world so if you're coming from


00:12:44.000 --> 00:12:48.000
Django instead of Flask then this I guess it's


00:12:48.000 --> 00:12:52.000
sort of the equivalent of translating it into Spanish so we cover a lot


00:12:52.000 --> 00:12:56.000
of the same kind of concepts in both courses


00:12:56.000 --> 00:13:00.000
we start with this video collector project so it's an actual


00:13:00.000 --> 00:13:04.000
project with clickable links and it allows you to sort of store


00:13:04.000 --> 00:13:08.000
videos that you see from YouTube and shows a little


00:13:08.000 --> 00:13:12.000
image of the thumbnail and you know who the author is


00:13:12.000 --> 00:13:16.000
so a little database kind of application. Start, we start


00:13:16.000 --> 00:13:20.000
there with a working project and then we HTMX-ify it. I'm just going to make


00:13:20.000 --> 00:13:24.000
words up. Yeah, it's a verb we can do it. Why not? We're making verbs today


00:13:24.000 --> 00:13:28.000
come on. It works. So in both courses we add like


00:13:28.000 --> 00:13:32.000
a click to edit so you've got a little link you click on the link and it turns into a form


00:13:32.000 --> 00:13:36.000
infinite scroll the idea is you scroll down the content keeps


00:13:36.000 --> 00:13:40.000
getting added searches you type which to me is just such a


00:13:40.000 --> 00:13:44.000
beautiful example right like if you've already got search on the website


00:13:44.000 --> 00:13:48.000
HTMX it's like four lines of code like it's startlingly


00:13:48.000 --> 00:13:52.000
easy to do it in a dynamic fashion and it's


00:13:52.000 --> 00:13:56.000
complete with things like it updates the URL so you can do deep linking


00:13:56.000 --> 00:14:00.000
and you can do you know back button goes to the previous search


00:14:00.000 --> 00:14:04.000
and all that basically comes by adding just a few attributes so that's


00:14:04.000 --> 00:14:08.000
beautiful and then the Django version of the course also has a


00:14:08.000 --> 00:14:12.000
fourth example which is how to take HTMX and integrate


00:14:12.000 --> 00:14:16.000
it in with bootstraps you've got libraries on top of libraries


00:14:16.000 --> 00:14:20.000
and how sort of that JavaScript event system works in that situation


00:14:20.000 --> 00:14:24.000
and how you can get those things going so yeah so it's very


00:14:24.000 --> 00:14:28.000
example driven let's add features and


00:14:28.000 --> 00:14:32.000
learn how HTMX works along the way you know what


00:14:32.000 --> 00:14:36.000
surprised me about getting into HTMX was


00:14:36.000 --> 00:14:40.000
you add all this functionality to this existing app kind of like


00:14:40.000 --> 00:14:44.000
you do in this course or I did in the flask course and the code


00:14:44.000 --> 00:14:48.000
actually gets cleaner and simpler at the end like this is how can


00:14:48.000 --> 00:14:52.000
it do more and be more easy to understand and clean them yeah


00:14:52.000 --> 00:14:56.000
than the previous version you know yeah yeah well and you know what we're going to


00:14:56.000 --> 00:15:00.000
spend a bunch of time talking about today too is there's some libraries out there that make it even better and


00:15:00.000 --> 00:15:04.000
some of these I found after writing the course so it's sort of


00:15:04.000 --> 00:15:08.000
like oh well hey if I do that and go back use that and I would write even less


00:15:08.000 --> 00:15:12.000
code which is fantastic yeah alright let's


00:15:12.000 --> 00:15:16.000
you know not everyone is in love has already had this love


00:15:16.000 --> 00:15:20.000
affair that you and I have had with HTMX so


00:15:20.000 --> 00:15:24.000
maybe you could just give us like a really quick


00:15:24.000 --> 00:15:28.000
overview of what HTMX is and I think maybe the way to do


00:15:28.000 --> 00:15:32.000
it would be just we could make a concrete example like click to edit


00:15:32.000 --> 00:15:36.000
or something like that we could just show like you know how


00:15:36.000 --> 00:15:40.000
maybe you could just talk us through an example real quick and that could suffice


00:15:40.000 --> 00:15:44.000
is what the idea is yeah so it's HTMX is a


00:15:44.000 --> 00:15:48.000
JavaScript library and it's a JavaScript library that if you're lucky


00:15:48.000 --> 00:15:52.000
means you'll never have to write JavaScript so you essentially drop it into


00:15:52.000 --> 00:15:56.000
your page and how it works is you apply


00:15:56.000 --> 00:16:00.000
a set of attributes to your HTML and those


00:16:00.000 --> 00:16:04.000
attributes affect how things work


00:16:04.000 --> 00:16:08.000
so all the attributes are namespaced they all start with HX


00:16:08.000 --> 00:16:12.000
and the key ones are HX get and HX post which


00:16:12.000 --> 00:16:16.000
you can see on the example there on the button there's an HX get


00:16:16.000 --> 00:16:20.000
and essentially what happens is for a button or a link


00:16:20.000 --> 00:16:24.000
you're replacing something like an HREF with this concept


00:16:24.000 --> 00:16:28.000
and when you click the button or the link


00:16:28.000 --> 00:16:32.000
that get fires an AJAX call to the server


00:16:32.000 --> 00:16:36.000
and the intent is instead of getting a full


00:16:36.000 --> 00:16:40.000
new page like you normally would when you click a link it will send


00:16:40.000 --> 00:16:44.000
back a little piece and that little piece is then injected


00:16:44.000 --> 00:16:48.000
into the page and you can use different attributes to control how


00:16:48.000 --> 00:16:52.000
the example that's up on the screen here is using the


00:16:52.000 --> 00:16:56.000
HX swap attribute and that essentially says


00:16:56.000 --> 00:17:00.000
replace the entire outer div with the content that comes back from the server


00:17:00.000 --> 00:17:04.000
so the div with the first name last


00:17:04.000 --> 00:17:08.000
name email which is just a read only gets replaced


00:17:08.000 --> 00:17:12.000
with the form that comes down from the server so now essentially we've got click to


00:17:12.000 --> 00:17:16.000
edit on something that was display and now is a form


00:17:16.000 --> 00:17:20.000
so that's the general idea. HTMX sets


00:17:20.000 --> 00:17:24.000
some headers so that when the server side you can


00:17:24.000 --> 00:17:28.000
tell whether or not it's actually a HTMX call or not


00:17:28.000 --> 00:17:32.000
and in the Django world this works really really well so a common pattern


00:17:32.000 --> 00:17:36.000
with a Django view when you're dealing with forms is say have


00:17:36.000 --> 00:17:40.000
a get and a post inside of the same view so you do a get to


00:17:40.000 --> 00:17:44.000
get the page and then the post when you're actually submitting the form


00:17:44.000 --> 00:17:48.000
for that page and you keep it all together inside of the same view function.


00:17:48.000 --> 00:17:52.000
HTMX can do something very similar and essentially instead of checking for get


00:17:52.000 --> 00:17:56.000
or post you check for this HTMX header and then you can either send down


00:17:56.000 --> 00:18:00.000
the whole page or the little partial replacement like in this example is the form


00:18:00.000 --> 00:18:04.000
that goes with it. So in addition to things


00:18:04.000 --> 00:18:08.000
like this form you can attach it to say


00:18:08.000 --> 00:18:12.000
we kind of talked about search as you type


00:18:12.000 --> 00:18:16.000
so you can attach these kinds of attributes to say an input tag


00:18:16.000 --> 00:18:20.000
and then when, yeah maybe you want to bring one of those up we've got it somewhere


00:18:20.000 --> 00:18:24.000
yeah perfect and there's additional


00:18:24.000 --> 00:18:28.000
things that you can set that change how it behaves so for example


00:18:28.000 --> 00:18:32.000
you want to activate this event when someone has typed something


00:18:32.000 --> 00:18:36.000
in so you're looking at the JavaScript key up event you only want to


00:18:36.000 --> 00:18:40.000
do it if the input has changed not just if the event


00:18:40.000 --> 00:18:44.000
has expired so if I'm using my arrow keys it doesn't send something off to the server


00:18:44.000 --> 00:18:48.000
and then you can put a delay in so that if we get a bunch of


00:18:48.000 --> 00:18:52.000
events at the same time it's not until there's a pause where you send it to the server


00:18:52.000 --> 00:18:56.000
so if somebody's rapidly typing you don't send every single keystroke up


00:18:56.000 --> 00:19:00.000
in the course I also cover you can set up


00:19:00.000 --> 00:19:04.000
conditionals on it as well so I've got to check in


00:19:04.000 --> 00:19:08.000
one version of one sample that checks whether or not there's actually content


00:19:08.000 --> 00:19:12.000
so you have to have typed at least three letters for example right so you can put these kinds


00:19:12.000 --> 00:19:16.000
of checks in and essentially it really is very much like


00:19:16.000 --> 00:19:20.000
round trip 1.0 web except


00:19:20.000 --> 00:19:24.000
what you're getting down is instead of a whole new page is you're getting a


00:19:24.000 --> 00:19:28.000
partial and the htmx library injects this in


00:19:28.000 --> 00:19:32.000
so you know it's a way of doing some


00:19:32.000 --> 00:19:36.000
very 2.0 stuff in a very 1.0 way


00:19:36.000 --> 00:19:40.000
which means you have very little javascript to have to write


00:19:40.000 --> 00:19:44.000
so I personally have always found react to be


00:19:44.000 --> 00:19:48.000
overkill and that's not I'm not trying to slag react people programming languages


00:19:48.000 --> 00:19:52.000
are a religious topic right this isn't me saying you shouldn't this is me


00:19:52.000 --> 00:19:56.000
saying it doesn't work for me and I started


00:19:56.000 --> 00:20:00.000
coding for the web back in the pearls CGI days and


00:20:00.000 --> 00:20:04.000
when javascript was first introduced one of the arguments for it was oh you don't


00:20:04.000 --> 00:20:08.000
need a tool chain right it just worked and you just refresh the page


00:20:08.000 --> 00:20:12.000
and it goes so the whole concept of like typescript and a transpiler


00:20:12.000 --> 00:20:16.000
and web packaging and all the other stuff that's attached to modern


00:20:16.000 --> 00:20:20.000
web dev I find exhausting and because of that I've


00:20:20.000 --> 00:20:24.000
kind of always headed towards view because it's a little lighter weight


00:20:24.000 --> 00:20:28.000
but even then I'm often doing things against recommendation I


00:20:28.000 --> 00:20:32.000
have been known to serve few javascript files through the


00:20:32.000 --> 00:20:36.000
jango template engine so that I can embed json objects and


00:20:36.000 --> 00:20:40.000
that's a no no but it's worked for me but I often


00:20:40.000 --> 00:20:44.000
find with view even though it's lighter weight because it's written


00:20:44.000 --> 00:20:48.000
for folks who primarily use node there's some assumptions in the documentation


00:20:48.000 --> 00:20:52.000
there's always there's always this bit of a challenge to sort of get it to work in jango


00:20:52.000 --> 00:20:56.000
and what I've you know I've gone back and looked at everywhere I've


00:20:56.000 --> 00:21:00.000
coded with view htmx solves like


00:21:00.000 --> 00:21:04.000
95 to 99% of the things that


00:21:04.000 --> 00:21:08.000
I would have done with view that I've done with view in the past and the only


00:21:08.000 --> 00:21:12.000
exception was I once wrote a drag and drop card game


00:21:12.000 --> 00:21:16.000
and I don't know if I could do that in htmx but pretty much


00:21:16.000 --> 00:21:20.000
everything else I could replace with htmx and the amount


00:21:20.000 --> 00:21:24.000
of code I'd have to write would be a lot less the amount of javascript I'd have to write


00:21:24.000 --> 00:21:28.000
which I always sort of felt is a necessary evil it would


00:21:28.000 --> 00:21:32.000
almost just go away and now it would be unnecessary and


00:21:32.000 --> 00:21:36.000
still evil but yeah that's me on my soapbox


00:21:36.000 --> 00:21:40.000
so yeah so that's the short version of it you've played with it a bit


00:21:40.000 --> 00:21:44.000
did I miss anything something you should highlight no I think that was a really great summary


00:21:44.000 --> 00:21:48.000
the one thing I would like to throw out there that is not immediately apparent to people but


00:21:48.000 --> 00:21:52.000
is a tremendous advantage of htmx


00:21:52.000 --> 00:21:56.000
is that typical web development puts


00:21:56.000 --> 00:22:00.000
you into different mindsets for different parts of the application


00:22:00.000 --> 00:22:04.000
and context so I'm working on the database so I've got to think about database


00:22:04.000 --> 00:22:08.000
access and security in that context now I'm working on server side code


00:22:08.000 --> 00:22:12.000
and what can I do on the server what kind of code can I run on the server what packages


00:22:12.000 --> 00:22:16.000
do I have available now I'm on the client side I can't do direct stuff I have to have


00:22:16.000 --> 00:22:20.000
an API to interact with the server so how do I build the API and there's all the


00:22:20.000 --> 00:22:24.000
restrictions of the code regardless whether it's javascript or something else in the front


00:22:24.000 --> 00:22:28.000
end and so you have these context switches of like where are you


00:22:28.000 --> 00:22:32.000
in the app and with htmx it's like everything's on the server everything's in one


00:22:32.000 --> 00:22:36.000
language everything's in python and django and whatever you do


00:22:36.000 --> 00:22:40.000
you do it in python and django in this context or whatever your web framework is


00:22:40.000 --> 00:22:44.000
and you know the title of the course hold the javascript


00:22:44.000 --> 00:22:48.000
when I did the original flask course I got a bunch of


00:22:48.000 --> 00:22:52.000
flack from somebody on the thing that artists formerly known as twitter


00:22:52.000 --> 00:22:56.000
like why are you hating on javascript this is just not what the world needs


00:22:56.000 --> 00:23:00.000
I'm like I'm not hating on javascript I'm hating on the idea of having to write in


00:23:00.000 --> 00:23:04.000
three or four languages to accomplish one thing and evidence of this


00:23:04.000 --> 00:23:08.000
like evidence of this benefit is it's popular in the node community


00:23:08.000 --> 00:23:12.000
yes right yeah it's popular in the javascript community and


00:23:12.000 --> 00:23:16.000
they don't hate javascript but they like us would also


00:23:16.000 --> 00:23:20.000
like to not have two different styles of javascript two different modes of javascript


00:23:20.000 --> 00:23:24.000
two different context of code execution in just one place


00:23:24.000 --> 00:23:28.000
and I think it's easy to see like how does this do something similar


00:23:28.000 --> 00:23:32.000
but cleaner than react it also transforms


00:23:32.000 --> 00:23:36.000
like where and how your code runs and I think that's really a big deal


00:23:36.000 --> 00:23:40.000
yeah well at risk of getting too far off topic


00:23:40.000 --> 00:23:44.000
right like the web is a giant house of cards and it always has been


00:23:44.000 --> 00:23:48.000
and our answer every single time has been


00:23:48.000 --> 00:23:52.000
oh let's add another layer of cards and we've been adding layers of cards


00:23:52.000 --> 00:23:56.000
for you know 20 years and it's shaky in places


00:23:56.000 --> 00:24:00.000
right so anything that takes a couple layers off the top and simplifies how you think about things


00:24:00.000 --> 00:24:04.000
I think is definitely a benefit and like you said


00:24:04.000 --> 00:24:08.000
you know htmx is tool agnostic


00:24:08.000 --> 00:24:12.000
right so it's got nothing to do with python


00:24:12.000 --> 00:24:16.000
it works with whatever your stack is and that in itself is something that is


00:24:16.000 --> 00:24:20.000
a thing of beauty because you know if you're


00:24:20.000 --> 00:24:24.000
an old person knock yourself out right you want to


00:24:24.000 --> 00:24:28.000
php whatever go for it it doesn't matter because


00:24:28.000 --> 00:24:32.000
essentially it's back to the fundamental idea that html is based on


00:24:32.000 --> 00:24:36.000
which is that hypertext concept of I click on something it goes and gets a new thing


00:24:36.000 --> 00:24:40.000
and it puts it in the page and in this case instead of it being the whole page


00:24:40.000 --> 00:24:44.000
it's a partial it's a powerful powerful tool


00:24:44.000 --> 00:24:48.000
indeed it sure is so


00:24:48.000 --> 00:24:52.000
just to kind of put a


00:24:52.000 --> 00:24:56.000
finalize this whole thought here is like so Mark's out there in the audience asking so most


00:24:56.000 --> 00:25:00.000
business cases use cases can be solved with htmx my vote


00:25:00.000 --> 00:25:04.000
is yeah especially if you put business use case if you're writing


00:25:04.000 --> 00:25:08.000
forms over data like sort of enterprise apps like


00:25:08.000 --> 00:25:12.000
99% right all the crud stuff like I said like


00:25:12.000 --> 00:25:16.000
I think the only thing I would the only place it would it doesn't really


00:25:16.000 --> 00:25:20.000
fit is when you're getting like to the level of something like games


00:25:20.000 --> 00:25:24.000
and in fact so we'll talk about it briefly but there's a there's a in a minute


00:25:24.000 --> 00:25:28.000
but there's a white paper on htmx.org that talks about one of the companies


00:25:28.000 --> 00:25:32.000
that actually did a conversion and you know they had a fully


00:25:32.000 --> 00:25:36.000
running site and converted it over to htmx


00:25:36.000 --> 00:25:40.000
and they had some big wins by doing that


00:25:40.000 --> 00:25:44.000
well come back to it in a minute but yeah I'd be


00:25:44.000 --> 00:25:48.000
I'm hard pressed to think of a business use case that wouldn't


00:25:48.000 --> 00:25:52.000
be improved by using htmx instead


00:25:52.000 --> 00:25:56.000
and it's so simple that like a lot of times the use case was


00:25:56.000 --> 00:26:00.000
well just the web app it's not dynamic it doesn't do that you can add a lot of


00:26:00.000 --> 00:26:04.000
cool dynamic features to an existing app rather than like oh we have this


00:26:04.000 --> 00:26:08.000
really complex react app that we're going to simplify I imagine you could


00:26:08.000 --> 00:26:12.000
it's kind of like a lift up the feature set then yeah well it's well there


00:26:12.000 --> 00:26:16.000
and in fairness you know some of this comes out of things like html5 as well


00:26:16.000 --> 00:26:20.000
right so having a email type on your input field means that there's a certain


00:26:20.000 --> 00:26:24.000
amount of validation that's happening in the browser now right so things that we used to


00:26:24.000 --> 00:26:28.000
have to do in JavaScript now the browser is taking care of some of that so by


00:26:28.000 --> 00:26:32.000
taking some of those kinds of features you know I don't have to have that check


00:26:32.000 --> 00:26:36.000
but manually written to get to the end


00:26:36.000 --> 00:26:40.000
of the browser so I don't have to have that manually written


00:26:40.000 --> 00:26:44.000
on the browser side anymore and then adding htmx to give that


00:26:44.000 --> 00:26:48.000
dynamicism you know it just sort of tops it up right so it's


00:26:48.000 --> 00:26:52.000
like I said it's a step forward the one other area where


00:26:52.000 --> 00:26:56.000
htmx seems like it's just not going to work is if you want to build


00:26:56.000 --> 00:27:00.000
offline progressive web apps because offline is


00:27:00.000 --> 00:27:04.000
like the antithesis of htmx


00:27:04.000 --> 00:27:08.000
here so what I thought we could do for


00:27:08.000 --> 00:27:12.000
our conversation here would be to focus on


00:27:12.000 --> 00:27:16.000
just a bunch of tools that people can bring to


00:27:16.000 --> 00:27:20.000
bear on making working mostly with Django


00:27:20.000 --> 00:27:24.000
but also some of the other web frameworks like other Python web frameworks


00:27:24.000 --> 00:27:28.000
and htmx together make that more seamless and we


00:27:28.000 --> 00:27:32.000
worked together to put together quite a list here didn't we so there's two


00:27:32.000 --> 00:27:36.000
awesome lists we'll talk about yeah so the 95%


00:27:36.000 --> 00:27:40.000
of what we're talking about we found sourced off of these two


00:27:40.000 --> 00:27:44.000
curated lists the first one's called awesome htmx


00:27:44.000 --> 00:27:48.000
and the second one is called awesome Python htmx


00:27:48.000 --> 00:27:52.000
the first one is a collection of all


00:27:52.000 --> 00:27:56.000
languages so it's got a section on Python but


00:27:56.000 --> 00:28:00.000
you know as we were saying if you're right there htmx from rails


00:28:00.000 --> 00:28:04.000
so if you're coming from somewhere else and you want to use htmx there's a whole


00:28:04.000 --> 00:28:08.000
lot of pieces in here and


00:28:08.000 --> 00:28:12.000
it ranges from things like tools and articles and that kind


00:28:12.000 --> 00:28:16.000
of stuff the second one is a Python specific one


00:28:16.000 --> 00:28:20.000
which is awesome Python htmx they call themselves


00:28:20.000 --> 00:28:24.000
pi hat a little bit overlap between the tool


00:28:24.000 --> 00:28:28.000
sets but again this is just sort of some mastered lists for


00:28:28.000 --> 00:28:32.000
the places you can go and get content and examples


00:28:32.000 --> 00:28:36.000
and all that kind of good stuff and in fact


00:28:36.000 --> 00:28:40.000
one of the first white papers that I wanted to talk about a little bit


00:28:40.000 --> 00:28:44.000
is on the awesome Python htmx list


00:28:44.000 --> 00:28:48.000
as I mentioned this there's a link to it on


00:28:48.000 --> 00:28:52.000
this list and as I mentioned this is actually a case study


00:28:52.000 --> 00:28:56.000
off of htmx.org it was presented at a


00:28:56.000 --> 00:29:00.000
Django con in 2022 so if you don't feel like reading you can


00:29:00.000 --> 00:29:04.000
go off and see the video but it's about a conversion


00:29:04.000 --> 00:29:08.000
and it took them about two months to completely convert


00:29:08.000 --> 00:29:12.000
from a react based site to htmx


00:29:12.000 --> 00:29:16.000
they had zero reduction in functionality


00:29:16.000 --> 00:29:20.000
67% reduction in the size of the code base so that's


00:29:20.000 --> 00:29:24.000
significant right like that's two thirds of your code you no longer have to maintain


00:29:24.000 --> 00:29:28.000
because it's gone increase the Python code by


00:29:28.000 --> 00:29:32.000
140% so that's sort of the trade off we're moving some of that


00:29:32.000 --> 00:29:36.000
JavaScript stuff onto the server side they reduced their total


00:29:36.000 --> 00:29:40.000
JavaScript dependencies by 96% which essentially means


00:29:40.000 --> 00:29:44.000
it's almost gone as a result of that they had


00:29:44.000 --> 00:29:48.000
shorter web build times shorter page loads less


00:29:48.000 --> 00:29:52.000
memory and because of the less memory they were also able to handle


00:29:52.000 --> 00:29:56.000
larger data sets so they were able to put more content on the page


00:29:56.000 --> 00:30:00.000
at a time using htmx than react because


00:30:00.000 --> 00:30:04.000
the amount of overhead react put on the page meant it was eating up


00:30:04.000 --> 00:30:08.000
space and it just couldn't handle it now you know it's


00:30:08.000 --> 00:30:12.000
one white paper and of course it's on the htmx.org site so of course it's going to


00:30:12.000 --> 00:30:16.000
be biased towards you should use htmx but it does show that this


00:30:16.000 --> 00:30:20.000
is being used in the real world and with a lot of success


00:30:20.000 --> 00:30:24.000
and so it's definitely something that you kind of want to look at


00:30:24.000 --> 00:30:28.000
I can't remember if I sent you the link but there's another one recently that


00:30:28.000 --> 00:30:32.000
showed up on bytecode this is a


00:30:32.000 --> 00:30:36.000
site that I've frequently linked to in the


00:30:36.000 --> 00:30:40.000
Pycoder newsletter a lot of really good content with the bytecode


00:30:40.000 --> 00:30:44.000
guy there it's he's done


00:30:44.000 --> 00:30:48.000
something called nope that's not it


00:30:48.000 --> 00:30:52.000
it's the three in real life use cases for


00:30:52.000 --> 00:30:56.000
Python and htmx it's byte without an i that's why


00:30:56.000 --> 00:31:00.000
it's the other kind of byte he's a little cranky


00:31:00.000 --> 00:31:04.000
there it is perfect so this is more of


00:31:04.000 --> 00:31:08.000
an anecdote than case study but essentially he's gone


00:31:08.000 --> 00:31:12.000
through three kinds of projects that he's recently done


00:31:12.000 --> 00:31:16.000
with Python that are web based and went


00:31:16.000 --> 00:31:20.000
oh let's use htmx instead and it's made his life easier and so essentially


00:31:20.000 --> 00:31:24.000
he's just saying hey here are some cases where I've actually done this and it's been useful


00:31:24.000 --> 00:31:28.000
and you know to the question we got earlier


00:31:28.000 --> 00:31:32.000
really it is that sort of hey I've got a form and I want the form to be slightly more dynamic


00:31:32.000 --> 00:31:36.000
so hey it would be an awful lot easier if I just stick this in and go


00:31:36.000 --> 00:31:40.000
and if I remember correctly he's using FastAPI with this as well right so it's


00:31:40.000 --> 00:31:44.000
not just Django or flask there's lots of choices out there


00:31:44.000 --> 00:31:48.000
yeah it works really well yeah he's using FastAPI


00:31:48.000 --> 00:31:52.000
FastAPI works equally well with it and some of the tools we'll talk about


00:31:52.000 --> 00:31:56.000
are relevant as well so


00:31:56.000 --> 00:32:00.000
very cool also maybe some other things on the list I'm just seeing


00:32:00.000 --> 00:32:04.000
on the screen right now is like there's an IntelliJ aka PyCharm


00:32:04.000 --> 00:32:08.000
plugin for htmx so it gives you autocomplete for all your htmx stuff


00:32:08.000 --> 00:32:12.000
and probably for VS Code as well so if you're gonna


00:32:12.000 --> 00:32:16.000
use one of those editors and do htmx be sure to install that so you get autocomplete


00:32:16.000 --> 00:32:20.000
and validation for the different things


00:32:20.000 --> 00:32:24.000
cool alright well let's talk about maybe the big first one


00:32:24.000 --> 00:32:28.000
Django-htmx for all the extensions for using Django


00:32:28.000 --> 00:32:32.000
with htmx so this is the go to


00:32:32.000 --> 00:32:36.000
not only is this the right way to do things but this is also


00:32:36.000 --> 00:32:40.000
in fact I talk about this in the Django version of the course


00:32:40.000 --> 00:32:44.000
but there's also about a half dozen libraries out there


00:32:44.000 --> 00:32:48.000
that all said oh we're just gonna do what he did but we're gonna do it for


00:32:48.000 --> 00:32:52.000
our library so this has been an inspiration to other folks as well


00:32:52.000 --> 00:32:56.000
it's by a gentleman named Adam Johnson and it's essentially some


00:32:56.000 --> 00:33:00.000
Django middleware and some utility classes so in Django


00:33:00.000 --> 00:33:04.000
each view gets a request object this library adds a member


00:33:04.000 --> 00:33:08.000
to that request object called htmx you can use


00:33:08.000 --> 00:33:12.000
that member as a boolean and if it evaluates to


00:33:12.000 --> 00:33:16.000
true then it was there's an htmx header so it was an htmx call


00:33:16.000 --> 00:33:20.000
and if it's false it wasn't so this is what I was referring to


00:33:20.000 --> 00:33:24.000
earlier about that idea of being able to have one view manage multiple


00:33:24.000 --> 00:33:28.000
things because essentially you just check this boolean and either I'm feeding


00:33:28.000 --> 00:33:32.000
out the full page or I'm feeding out the partial


00:33:32.000 --> 00:33:36.000
because the big concept in htmx is there'll be a request


00:33:36.000 --> 00:33:40.000
for the page which shows you the whole thing but an interaction won't want all the page content


00:33:40.000 --> 00:33:44.000
they just want the fragment that the new version of the fragment like the


00:33:44.000 --> 00:33:48.000
new table row that has been edited or something like that so on the


00:33:48.000 --> 00:33:52.000
server you gotta decide what version do I give them


00:33:52.000 --> 00:33:56.000
and this answers that question. Exactly and this is so you know to


00:33:56.000 --> 00:34:00.000
take it back to the click to edit example that we talked about at the top


00:34:00.000 --> 00:34:04.000
the first call to the page no htmx it shows the content


00:34:04.000 --> 00:34:08.000
of the page including the person's name and email address or whatever it is and then


00:34:08.000 --> 00:34:12.000
when somebody clicks the link and that needs to be replaced by the form you can use the same


00:34:12.000 --> 00:34:16.000
view and that view then just returns the form as a partial rather than


00:34:16.000 --> 00:34:20.000
the whole thing and so checking this boolean allows you to tell which mode am I


00:34:20.000 --> 00:34:24.000
in and how do I want to do that. It also


00:34:24.000 --> 00:34:28.000
can there's other information on as well so you can


00:34:28.000 --> 00:34:32.000
check things like the target and the triggers so these are other attributes


00:34:32.000 --> 00:34:36.000
that you can use to help you with the search. I didn't mention the triggers when I


00:34:36.000 --> 00:34:40.000
sort of explained things at the top but the trigger


00:34:40.000 --> 00:34:44.000
is that event management piece that I was talking about with like searches


00:34:44.000 --> 00:34:48.000
you type so the trigger says a key press or there's


00:34:48.000 --> 00:34:52.000
another one that allows you to do on scroll down right so when the tag


00:34:52.000 --> 00:34:56.000
is revealed then trigger the call so


00:34:56.000 --> 00:35:00.000
the Django htmx will give you information about what the


00:35:00.000 --> 00:35:04.000
target is and then you can use that to help you make decisions


00:35:04.000 --> 00:35:08.000
or if you've got multiple htmx things happening inside the same page


00:35:08.000 --> 00:35:12.000
you can suss it out that way. Quite


00:35:12.000 --> 00:35:16.000
frankly the boolean mechanism is enough for me to want to install


00:35:16.000 --> 00:35:20.000
this library. The rest of it I don't use very often but just


00:35:20.000 --> 00:35:24.000
being able to check which mode I'm in and not have to


00:35:24.000 --> 00:35:28.000
check that header myself is worth installing


00:35:28.000 --> 00:35:32.000
and it feels very Django-esque because


00:35:32.000 --> 00:35:36.000
it essentially just replaces that get post pattern that I was talking about earlier


00:35:36.000 --> 00:35:40.000
but instead with htmx. There's also some


00:35:40.000 --> 00:35:44.000
other utilities in here so the way


00:35:44.000 --> 00:35:48.000
the way that htmx works


00:35:48.000 --> 00:35:52.000
if a url is hit that's a 404 it just eats it


00:35:52.000 --> 00:35:56.000
there's a chunk of debug javascript that comes with this library


00:35:56.000 --> 00:36:00.000
that you can put in so that you actually get the Django 404 page so it essentially


00:36:00.000 --> 00:36:04.000
overrides the response back from the view


00:36:04.000 --> 00:36:08.000
and spits out an actual debug page that you're used to so it allows


00:36:08.000 --> 00:36:12.000
you to debug your htmx a little better and then there's some


00:36:12.000 --> 00:36:16.000
classes and functions for things like polling and controlling redirects


00:36:16.000 --> 00:36:20.000
and a few other things that are also


00:36:20.000 --> 00:36:24.000
useful for typing as well so if you're doing a type check


00:36:24.000 --> 00:36:28.000
that you want to replace that this call comes back with htmx


00:36:28.000 --> 00:36:32.000
then you can put it inside of your typing that this is this kind of class that comes back


00:36:32.000 --> 00:36:36.000
so very very handy library


00:36:36.000 --> 00:36:40.000
very strongly recommended that if you're doing Django and htmx this is the place


00:36:40.000 --> 00:36:44.000
to go. Okay this is the big one alright


00:36:44.000 --> 00:36:48.000
next up this is from the multilingual awesome list


00:36:48.000 --> 00:36:52.000
Django JS lib htmx


00:36:52.000 --> 00:36:56.000
so this one's pretty lightweight it pretty much allows you to


00:36:56.000 --> 00:37:00.000
use tags to drop the library in so it essentially just means


00:37:00.000 --> 00:37:04.000
you're scriptifying some of the things that you're using in the library


00:37:04.000 --> 00:37:08.000
I haven't used it myself I think a lot of it


00:37:08.000 --> 00:37:12.000
depends on how deep your pages have to go personally


00:37:12.000 --> 00:37:16.000
I would just stick this in and hard code it myself but it's there if you


00:37:16.000 --> 00:37:20.000
want it. Yep sounds good


00:37:20.000 --> 00:37:24.000
next up htmx flask this one I think is really interesting


00:37:24.000 --> 00:37:28.000
and you might be saying like well why do I Django we're talking about what I care about flask


00:37:28.000 --> 00:37:32.000
but we already went through two of the examples on the htmx.org


00:37:32.000 --> 00:37:36.000
site and what you see is the client side but there's no visibility


00:37:36.000 --> 00:37:40.000
to what the server side looks like in that example code but this


00:37:40.000 --> 00:37:44.000
this will help maybe


00:37:44.000 --> 00:37:48.000
this is all the


00:37:48.000 --> 00:37:52.000
excuse me there are three things called htmx flask flask htmx


00:37:52.000 --> 00:37:56.000
and flask htmx with a capital so


00:37:56.000 --> 00:38:00.000
they all start to blur together


00:38:00.000 --> 00:38:04.000
so yes this one is essentially if you


00:38:04.000 --> 00:38:08.000
at the top if you're not listening if you were watching


00:38:08.000 --> 00:38:12.000
Michael showed the htmx site


00:38:12.000 --> 00:38:16.000
and a couple of the examples this is a flask


00:38:16.000 --> 00:38:20.000
as they've redone all of those examples from the server in flask


00:38:20.000 --> 00:38:24.000
so if you're looking for how to implement these things rather than just


00:38:24.000 --> 00:38:28.000
in pure html and you want to see them in the flask server you can go that


00:38:28.000 --> 00:38:32.000
here and because it ties back to the actual


00:38:32.000 --> 00:38:36.000
htmx.org page it allows you to sort of see how all the pieces


00:38:36.000 --> 00:38:40.000
fit and and look your code up as you go yeah


00:38:40.000 --> 00:38:44.000
I think the examples are really awesome and simple on htmx.org but they don't


00:38:44.000 --> 00:38:48.000
they don't tell the whole story if you're trying to actually implement it


00:38:48.000 --> 00:38:52.000
and if you're like I just don't really know how to do that with my web framework here's at least


00:38:52.000 --> 00:38:56.000
a python set of examples that'll get you pretty close yeah and there's a


00:38:56.000 --> 00:39:00.000
few of these as well near the tail end here we'll talk about a couple


00:39:00.000 --> 00:39:04.000
others that there's one which is actually a board game which is a nice top to


00:39:04.000 --> 00:39:08.000
bottom full example but this one essentially relates the example


00:39:08.000 --> 00:39:12.000
content off the htmx site to your flask server nice


00:39:12.000 --> 00:39:16.000
all right server sent events


00:39:16.000 --> 00:39:20.000
so this is if you're using


00:39:20.000 --> 00:39:24.000
starlight the


00:39:24.000 --> 00:39:28.000
this is a tech demo essentially by Jan Vlasinski


00:39:28.000 --> 00:39:32.000
and essentially he's using fast api


00:39:32.000 --> 00:39:36.000
htmx and starlight and the page is


00:39:36.000 --> 00:39:40.000
the example is actually quite simple there's almost no content on it it's just a little


00:39:40.000 --> 00:39:44.000
bit of almost it almost looks like a debug so there's a few


00:39:44.000 --> 00:39:48.000
variables which are randomly generated inside of an asynchronous call on the


00:39:48.000 --> 00:39:52.000
server you run it using uvicorn and essentially when you visit


00:39:52.000 --> 00:39:56.000
the page the values update on the fly so the


00:39:56.000 --> 00:40:00.000
sleep in the server code is pretty short it's about a third of a second


00:40:00.000 --> 00:40:04.000
so the debug messages go flying by rather quickly


00:40:04.000 --> 00:40:08.000
but it gives you an idea essentially how to wire these kinds of


00:40:08.000 --> 00:40:12.000
things together I've never used starlet myself have you played with it at all


00:40:12.000 --> 00:40:16.000
only by way of using fast api and


00:40:16.000 --> 00:40:20.000
Litestar


00:40:20.000 --> 00:40:24.000
so they're both built on top of it but not directly


00:40:24.000 --> 00:40:28.000
but you know server sent events are interesting because


00:40:28.000 --> 00:40:32.000
like we've had traditional web interaction


00:40:32.000 --> 00:40:36.000
which we kind of talked about already and then you've got web sockets for super


00:40:36.000 --> 00:40:40.000
dynamic bidirectional communication but a lot of times people


00:40:40.000 --> 00:40:44.000
use web sockets because they just want to receive stuff that happens on


00:40:44.000 --> 00:40:48.000
the server on the client like a dashboard right the dashboard doesn't need to update


00:40:48.000 --> 00:40:52.000
the server and broadcast it just wants all its pieces update live


00:40:52.000 --> 00:40:56.000
and so server sent events are like a lightweight web socket type thing and it's


00:40:56.000 --> 00:41:00.000
really cool to be able to plug that in with htmx I think


00:41:00.000 --> 00:41:04.000
and I haven't played with it myself but htmx also has a polling mechanism


00:41:04.000 --> 00:41:08.000
so if you're not using technology on the server side that can enable this


00:41:08.000 --> 00:41:12.000
you can get around it the other way obviously an event from the server is


00:41:12.000 --> 00:41:16.000
far less noisy than polling but by


00:41:16.000 --> 00:41:20.000
using it basically gives you a couple different options so if you happen to be using


00:41:20.000 --> 00:41:24.000
something that isn't asynchronous you don't want to go all the way down that path


00:41:24.000 --> 00:41:28.000
you could also look at the polling techniques inside of htmx to get you


00:41:28.000 --> 00:41:32.000
to solve similar kinds of problems yeah if you're not building a


00:41:32.000 --> 00:41:36.000
massive massively busy website maybe it's


00:41:36.000 --> 00:41:40.000
totally fine to just pull it right yeah well some of it also has to do with the frequency


00:41:40.000 --> 00:41:44.000
right like if it's data that only needs to update you know once every 30 seconds or so


00:41:44.000 --> 00:41:48.000
then well if somebody's on a page that might be the right way to go yep


00:41:48.000 --> 00:41:52.000
alright now over to


00:41:52.000 --> 00:41:56.000
this we'll start pulling some items off the pie hat sure


00:41:56.000 --> 00:42:00.000
yeah so another example on here yeah another list here


00:42:00.000 --> 00:42:04.000
we sort of started talking a little bit about this I've been hopping around a bit


00:42:04.000 --> 00:42:08.000
the so that white paper that I talked about is on here


00:42:08.000 --> 00:42:12.000
and a bunch of some of the other tools that we've got as well


00:42:12.000 --> 00:42:16.000
good overall list has some


00:42:16.000 --> 00:42:20.000
sort of a nice breakdown that it's got sort of the resources as in like here are some articles


00:42:20.000 --> 00:42:24.000
you can read you know they've got a link to your flask


00:42:24.000 --> 00:42:28.000
course so I think we need to do a PR here and we definitely got to do


00:42:28.000 --> 00:42:32.000
a PR and but I appreciate one in there we do


00:42:32.000 --> 00:42:36.000
I appreciate however this got here thank you people so but yeah we got


00:42:36.000 --> 00:42:40.000
to do a PR so so yeah so some good links in here to some


00:42:40.000 --> 00:42:44.000
obviously to some quality content that they've


00:42:44.000 --> 00:42:48.000
that's right that's right yeah so there's


00:42:48.000 --> 00:42:52.000
a bunch of different ones and I think probably the helper libraries is the section


00:42:52.000 --> 00:42:56.000
that has like really what people are imagining when they're


00:42:56.000 --> 00:43:00.000
thinking awesome list at least awesome list for programming so


00:43:00.000 --> 00:43:04.000
yeah in fact so there's three on here that I think I'm going to want to sort of cover


00:43:04.000 --> 00:43:08.000
back to back because they're all essentially the same idea


00:43:08.000 --> 00:43:12.000
so I mentioned that Django HTMX is a


00:43:12.000 --> 00:43:16.000
like a sort of the go to way of doing the Django stuff


00:43:16.000 --> 00:43:20.000
and it inspired a bunch of other people well there's ASGI HTMX


00:43:20.000 --> 00:43:24.000
Starlette HTMX and HTMX flask and all three


00:43:24.000 --> 00:43:28.000
of these sorry I'm flapping around as we go along there we go you're trying to


00:43:28.000 --> 00:43:32.000
keep up so all three of these are essentially like the Django HTMX


00:43:32.000 --> 00:43:36.000
library but for those appropriate other libraries


00:43:36.000 --> 00:43:40.000
so they essentially add that meta information


00:43:40.000 --> 00:43:44.000
to the requests or in the case of ASGI to the


00:43:44.000 --> 00:43:48.000
scope and it's the same kind of thing it gives you an idea what the headers there and what the other


00:43:48.000 --> 00:43:52.000
information is so if you're if you're not on Django if you're


00:43:52.000 --> 00:43:56.000
on flask then HTMX flask or ASGI HTMX


00:43:56.000 --> 00:44:00.000
will work and essentially solve the same kind of problems that Django HTMX


00:44:00.000 --> 00:44:04.000
does and all three of those are listed on that on that pie hat


00:44:04.000 --> 00:44:08.000
piece so that's ASGI HTMX is by


00:44:08.000 --> 00:44:12.000
Floremont Monca Starlette HTMX is by Felix Ingram


00:44:12.000 --> 00:44:16.000
and HTMX flask is by Sergei Pons


00:44:16.000 --> 00:44:20.000
Frank says not sure how to say his last name there yeah so a lot of


00:44:20.000 --> 00:44:24.000
good work going on in this space


00:44:24.000 --> 00:44:28.000
all right how about Django HTMX patterns ah yes


00:44:28.000 --> 00:44:32.000
good old spooky looky so he's got an awesome


00:44:32.000 --> 00:44:36.000
GitHub handle here this is Luke Plant who


00:44:36.000 --> 00:44:40.000
is or was I'm not sure the time frame on that but


00:44:40.000 --> 00:44:44.000
was heavily involved with Django he was a core developer for a while and essentially


00:44:44.000 --> 00:44:48.000
he's written up a article here on good ways


00:44:48.000 --> 00:44:52.000
of interacting with Django and HTMX there's some code examples


00:44:52.000 --> 00:44:56.000
to go with it we're going to talk in a minute about


00:44:56.000 --> 00:45:00.000
the block render block library


00:45:00.000 --> 00:45:04.000
he's a fan of that approach essentially this is got good reasons


00:45:04.000 --> 00:45:08.000
for how you group your snippets together that idea of having


00:45:08.000 --> 00:45:12.000
your code in all your code in the same view as well as keeping your snippets possibly


00:45:12.000 --> 00:45:16.000
even the same file he talks about these kinds of things as well


00:45:16.000 --> 00:45:20.000
as sort of hands you off to some of the toolkits that we're talking about as well to help


00:45:20.000 --> 00:45:24.000
you do this so he's I'm


00:45:24.000 --> 00:45:28.000
a fan he's also got a great article called Django views the right way


00:45:28.000 --> 00:45:32.000
which is he tends to write fairly opinionated pieces


00:45:32.000 --> 00:45:36.000
and of course when you agree with his opinion that's fantastic must be brilliant


00:45:36.000 --> 00:45:40.000
so he's very


00:45:40.000 --> 00:45:44.000
finally someone standing up for our way of thinking exactly so he's very pro function based


00:45:44.000 --> 00:45:48.000
views and for folks who aren't Django people that's a Coke versus Pepsi thing


00:45:48.000 --> 00:45:52.000
versus class based views so but because I tend to my


00:45:52.000 --> 00:45:56.000
bias heads in that direction he must be right so everything else he's written is brilliant


00:45:56.000 --> 00:46:00.000
as well so but a lot of good information in here to dig around


00:46:00.000 --> 00:46:04.000
some best practices as well as I said to some


00:46:04.000 --> 00:46:08.000
references to the kinds of libraries we're talking about to make your life easier


00:46:08.000 --> 00:46:12.000
yeah I think these kinds of things like these pattern ideas


00:46:12.000 --> 00:46:16.000
really help you think about how am I going to add that into my


00:46:16.000 --> 00:46:20.000
application right instead of just here's some libraries and here's


00:46:20.000 --> 00:46:24.000
a htmx and here's a you know like how does it look right you know how do you make


00:46:24.000 --> 00:46:28.000
your Django code better and cleaner by putting this stuff together


00:46:28.000 --> 00:46:32.000
yeah well and honestly like you know my


00:46:32.000 --> 00:46:36.000
tongue planted in my firmly in my cheek with you know the whole function versus class thing


00:46:36.000 --> 00:46:40.000
notwithstanding one of the things I love about these kinds of opinion pieces is


00:46:40.000 --> 00:46:44.000
it allows you to help sort of formulate oh does that fit in my


00:46:44.000 --> 00:46:48.000
version or does it not fit in my version and how does this map to what I'm doing


00:46:48.000 --> 00:46:52.000
it allows you to sort of think more deeply about the patterns that you're using as you're coding


00:46:52.000 --> 00:46:56.000
and it might you might leave an article like that and go oh


00:46:56.000 --> 00:47:00.000
I now I understand more about why I chose what I did and I'm going to stick with it


00:47:00.000 --> 00:47:04.000
it might be the opposite of what that article is there but it opens you up to other ways of


00:47:04.000 --> 00:47:08.000
thinking about these things right it's it comes from that


00:47:08.000 --> 00:47:12.000
practice of doing it rather than like you said just a couple quick examples


00:47:12.000 --> 00:47:16.000
another thing about patterns that I've always loved


00:47:16.000 --> 00:47:20.000
design patterns programming style is


00:47:20.000 --> 00:47:24.000
when you think about a problem if you just think about like kind of the idea of the pattern


00:47:24.000 --> 00:47:28.000
like what are the steps it's hard to think about it


00:47:28.000 --> 00:47:32.000
really down in the details but if you can think about as


00:47:32.000 --> 00:47:36.000
the whole thing that the pattern applies to and what of its benefits


00:47:36.000 --> 00:47:40.000
and trade-offs you can think at a much higher level and sort of it lets


00:47:40.000 --> 00:47:44.000
you not think in detail right like you could say well


00:47:44.000 --> 00:47:48.000
I want to have you know outside the web you can say I want to have a way where we just have one variable


00:47:48.000 --> 00:47:52.000
just copy of it it's just one and everybody shares it instead of passing it around


00:47:52.000 --> 00:47:56.000
like okay or you could say we have a singleton like boom like


00:47:56.000 --> 00:48:00.000
that one statement just what are the


00:48:00.000 --> 00:48:04.000
what are the benefits what are the drawbacks what are the use cases like it makes testing hard


00:48:04.000 --> 00:48:08.000
it makes reuse really easy because you just grab it like


00:48:08.000 --> 00:48:12.000
and it's sort of like that for htmx right as you think


00:48:12.000 --> 00:48:16.000
like oh this pattern applies right here let's go or it doesn't because


00:48:16.000 --> 00:48:20.000
of and it becomes some of it's a vocabulary thing as well right so


00:48:20.000 --> 00:48:24.000
the there's this concept we're going to spend a little bit of time


00:48:24.000 --> 00:48:28.000
talking about in a minute that is the partials which is those little snippets


00:48:28.000 --> 00:48:32.000
that I was talking about and in fact if I remember correctly


00:48:32.000 --> 00:48:36.000
part the term partials has been stolen it's something rails uses right


00:48:36.000 --> 00:48:40.000
but by using that same by using that same vocabulary


00:48:40.000 --> 00:48:44.000
it allows you to sort of talk about these things like you said at that higher level concept


00:48:44.000 --> 00:48:48.000
right so that the patterns help with the vocabulary help with you communicate about those concepts


00:48:48.000 --> 00:48:52.000
rather than spending the first 10 minutes of your conversation trying to establish whether or not you're talking


00:48:52.000 --> 00:48:56.000
about the same thing yes exactly exactly


00:48:56.000 --> 00:49:00.000
speaking of we have fragments and we have partials and this is a little


00:49:00.000 --> 00:49:04.000
bit of an alternate like this is a coke


00:49:04.000 --> 00:49:08.000
versus pepsi as well yeah and I think you know


00:49:08.000 --> 00:49:12.000
considering you're the maintainer of the sister library


00:49:12.000 --> 00:49:16.000
to this maybe this one should be you maybe you want to talk a little bit about


00:49:16.000 --> 00:49:20.000
yeah yeah yeah sure so


00:49:20.000 --> 00:49:24.000
well so my understanding here with the


00:49:24.000 --> 00:49:28.000
with the Jinja partials one is you


00:49:28.000 --> 00:49:32.000
can express parts of your page to contain


00:49:32.000 --> 00:49:36.000
the template data that you want so for example here's a whole thing you know


00:49:36.000 --> 00:49:40.000
with a HTML and a head and a body and then it has one thing says this is a block


00:49:40.000 --> 00:49:44.000
and it says just a paragraph this is a magic number with that value right


00:49:44.000 --> 00:49:48.000
so with this thing


00:49:48.000 --> 00:49:52.000
what you can do is you can say just grab that thing we called


00:49:52.000 --> 00:49:56.000
content and provide the data over to it because I don't want to


00:49:56.000 --> 00:50:00.000
show the whole page I want to show just this section of it the benefit


00:50:00.000 --> 00:50:04.000
of this and there's an essay over on htmx.org


00:50:04.000 --> 00:50:08.000
something about the locality of behavior and


00:50:08.000 --> 00:50:12.000
things like that I believe is what it something titled like that and the idea


00:50:12.000 --> 00:50:16.000
is I have my entire HTML listed all


00:50:16.000 --> 00:50:20.000
in one as if it was a static page and I can use the server side


00:50:20.000 --> 00:50:24.000
to grab pieces out of the HTML and make them dynamic


00:50:24.000 --> 00:50:28.000
sections right like I described like grab this block


00:50:28.000 --> 00:50:32.000
render it using the template engine the Jinja


00:50:32.000 --> 00:50:36.000
two fragments okay so that's the I don't know Coke


00:50:36.000 --> 00:50:40.000
should we Coke or Pepsi which one does it get but let's call this one


00:50:40.000 --> 00:50:44.000
the Coke style and that I think is really useful right because


00:50:44.000 --> 00:50:48.000
what is your alternative


00:50:48.000 --> 00:50:52.000
have that HTML in two places that's not a great option


00:50:52.000 --> 00:50:56.000
right you don't want to have it's just like you wouldn't duplicate code you don't want to duplicate the design


00:50:56.000 --> 00:51:00.000
and the HTML and stuff that makes up the part of the page and have


00:51:00.000 --> 00:51:04.000
in line for the main one and then a second copy just so you can make it


00:51:04.000 --> 00:51:08.000
dynamic so I'm not against this I think this is really a neat idea


00:51:08.000 --> 00:51:12.000
here to be able to grab that section and render that


00:51:12.000 --> 00:51:16.000
Pepsi side


00:51:16.000 --> 00:51:20.000
Michael's library called Jinja partials which says


00:51:20.000 --> 00:51:24.000
instead of putting all into one big place let's treat it more like


00:51:24.000 --> 00:51:28.000
function based programming right so


00:51:28.000 --> 00:51:32.000
what you can do is you can say I'm going to define


00:51:32.000 --> 00:51:36.000
an HTML partial or piece that just has


00:51:36.000 --> 00:51:40.000
that section that you're interested in right so


00:51:40.000 --> 00:51:44.000
maybe you might have like one part that displays


00:51:44.000 --> 00:51:48.000
a particular video in our example from the course right and that thing has


00:51:48.000 --> 00:51:52.000
to be past certain bits of information


00:51:52.000 --> 00:51:56.000
like what the video is so you can get the ID and so on


00:51:56.000 --> 00:52:00.000
and then when you use it you kind of instead of putting the HTML in line you call it


00:52:00.000 --> 00:52:04.000
like a function in the HTML so you would say


00:52:04.000 --> 00:52:08.000
like div here's the thing that contains it you know render partial here's the


00:52:08.000 --> 00:52:12.000
thing and you call it so it's kind of two sides of the same coin but


00:52:12.000 --> 00:52:16.000
very much Coke Pepsi is a good analogy here like this one says


00:52:16.000 --> 00:52:20.000
I would like to maybe be able to reuse that across different pages


00:52:20.000 --> 00:52:24.000
just like you would a function in Python I might want to use it more than


00:52:24.000 --> 00:52:28.000
one place and so it makes sense to have it in its own separate


00:52:28.000 --> 00:52:32.000
thing right like in this example you might want to show a video but you might want to


00:52:32.000 --> 00:52:36.000
do it on like a list of videos and you might want to do it on a profile


00:52:36.000 --> 00:52:40.000
page where you have favorites right and those wouldn't the


00:52:40.000 --> 00:52:44.000
fragment style you would have to duplicate that HTML so


00:52:44.000 --> 00:52:48.000
this one allows you to have like a


00:52:48.000 --> 00:52:52.000
nice simple way to do that right and then on the server side it makes


00:52:52.000 --> 00:52:56.000
it simpler because I don't know if there's any examples here


00:52:56.000 --> 00:53:00.000
I'm sure there is but on the server side all you do is you just say


00:53:00.000 --> 00:53:04.000
the template response is the partial and you just provide


00:53:04.000 --> 00:53:08.000
the data and you don't have to do like if it's the full thing or if it's partial thing


00:53:08.000 --> 00:53:12.000
I'm going to do different stuff on the server right so


00:53:12.000 --> 00:53:16.000
that's the Jinja partials I don't have a


00:53:16.000 --> 00:53:20.000
Django partials but you know this applies for Flask, FastAPI


00:53:20.000 --> 00:53:24.000
and others. So on the Django template library the


00:53:24.000 --> 00:53:28.000
include tag is


00:53:28.000 --> 00:53:32.000
either slightly more powerful than the Jinja one


00:53:32.000 --> 00:53:36.000
or just better documented because a lot of the things you


00:53:36.000 --> 00:53:40.000
a lot of the reasons you wrote this library I can do with the existing


00:53:40.000 --> 00:53:44.000
Django include tag so there's like a tiny little use case where it doesn't overlap


00:53:44.000 --> 00:53:48.000
but like everything in the course for example I was able to do quite simply with


00:53:48.000 --> 00:53:52.000
just using the include tag. There is a


00:53:52.000 --> 00:53:56.000
library out there that is the what did you say it was


00:53:56.000 --> 00:54:00.000
the Coke version and that is the Django render block


00:54:00.000 --> 00:54:04.000
this is by Patrick Cloak and essentially he's


00:54:04.000 --> 00:54:08.000
using something very similar to the Jinja 2 fragments and


00:54:08.000 --> 00:54:12.000
it essentially allows you to pull out a template block


00:54:12.000 --> 00:54:16.000
from a page. This is actually SpookyLuki's


00:54:16.000 --> 00:54:20.000
preferred approach it's in his patterns. I think


00:54:20.000 --> 00:54:24.000
in this case I'm a Pepsi guy I'm with you I would rather have the piece inside


00:54:24.000 --> 00:54:28.000
its own file but I think the reason


00:54:28.000 --> 00:54:32.000
behind having it in the blocks is essentially you can turn conditionals


00:54:32.000 --> 00:54:36.000
on have that one page the whole thing gets rendered and then the snippets are


00:54:36.000 --> 00:54:40.000
always using the same library and you can just flag hey I want this partial


00:54:40.000 --> 00:54:44.000
piece coming out of it. So yeah essentially


00:54:44.000 --> 00:54:48.000
these are very very similar concepts just the Django versus the


00:54:48.000 --> 00:54:52.000
Django templating because of course Django is in Django


00:54:52.000 --> 00:54:56.000
as well so the Django native templating versus the Django piece


00:54:56.000 --> 00:55:00.000
and you can take either approach depending on what works for you.


00:55:00.000 --> 00:55:04.000
Yep and just to wrap this up before I get a lot of email. A lot of


00:55:04.000 --> 00:55:08.000
email. There's a whole section that says why not just use include or


00:55:08.000 --> 00:55:12.000
macro from Jinja and there's a great long discussion here with lots


00:55:12.000 --> 00:55:16.000
of examples. The short version is with


00:55:16.000 --> 00:55:20.000
macro if you want to render the template alone you


00:55:20.000 --> 00:55:24.000
have to have a third page that just calls the macro


00:55:24.000 --> 00:55:28.000
that just embeds the macro and then calls it


00:55:28.000 --> 00:55:32.000
in an empty page for the template. Why not use include


00:55:32.000 --> 00:55:36.000
well with include


00:55:36.000 --> 00:55:40.000
you have to have the


00:55:40.000 --> 00:55:44.000
variable names in the partial match the consumer so it's


00:55:44.000 --> 00:55:48.000
as if you had to say I want to function I want to call a function but


00:55:48.000 --> 00:55:52.000
your local variable names have to match exactly the parameter


00:55:52.000 --> 00:55:56.000
names in every use case. You can't say like user


00:55:56.000 --> 00:56:00.000
where there was a user name. Nope you can't call this function. You're supposed to call your local variable


00:56:00.000 --> 00:56:04.000
user. You know it's so there's a there's a look


00:56:04.000 --> 00:56:08.000
at that discussion and then then email me if you have to. And that's why


00:56:08.000 --> 00:56:12.000
the Django one doesn't have this problem is because the include tag in Django


00:56:12.000 --> 00:56:16.000
has a with keyword which allows you to essentially


00:56:16.000 --> 00:56:20.000
say I want this bit of context passed in as that value


00:56:20.000 --> 00:56:24.000
so you can essentially the equivalent there would be with video equals V


00:56:24.000 --> 00:56:28.000
email equals user dot email to accomplish the same thing which is why


00:56:28.000 --> 00:56:32.000
I could get away with not needing the extra library. Nice


00:56:32.000 --> 00:56:36.000
there is somebody down here who said


00:56:36.000 --> 00:56:40.000
I'm not sure what their name is


00:56:40.000 --> 00:56:44.000
but I think they found an internal like a deeply internal


00:56:44.000 --> 00:56:48.000
function from within


00:56:48.000 --> 00:56:52.000
Jinja I think I'm not sure if it's in


00:56:52.000 --> 00:56:56.000
Jinja or flask but you're able effectively to do the same thing but it's like


00:56:56.000 --> 00:57:00.000
I don't know I'm not a fan I like grabbing some random internal thing going


00:57:00.000 --> 00:57:04.000
I think we'll probably just use that you know. Also just


00:57:04.000 --> 00:57:08.000
there's a chameleon's partial if you're a chameleon template person that does the same thing


00:57:08.000 --> 00:57:12.000
it's a Jinja partial as well. Yeah when you first showed this to me I looked


00:57:12.000 --> 00:57:16.000
it up in the Jinja docs because I don't use Jinja as often and it kind of


00:57:16.000 --> 00:57:20.000
hints that this is there but it was really really unclear


00:57:20.000 --> 00:57:24.000
it just sort of gave one example and didn't explain it and so


00:57:24.000 --> 00:57:28.000
it doesn't surprise me that there's something that can be done but


00:57:28.000 --> 00:57:32.000
maybe it's publicly available and if they got documented


00:57:32.000 --> 00:57:36.000
a little better it might solve the problem and you could you know close up that chunk of


00:57:36.000 --> 00:57:40.000
code you had to maintain. Yeah I mean I'm not necessarily in love


00:57:40.000 --> 00:57:44.000
with it I just I created it because I want to have really nice clean code right yeah exactly


00:57:44.000 --> 00:57:48.000
of the problem you know pull up the Django render block you already really talked about


00:57:48.000 --> 00:57:52.000
that one that's on the similar side as to the


00:57:52.000 --> 00:57:56.000
fragments. Fragments sorry. Fragments what we talked about that's right


00:57:56.000 --> 00:58:00.000
where all the stuff is together and I think that's a good idea if you're never


00:58:00.000 --> 00:58:04.000
ever going to use that block of that bit of HTML


00:58:04.000 --> 00:58:08.000
and dynamic bit anywhere else but as soon as you are then it's like well


00:58:08.000 --> 00:58:12.000
it's starting to get I don't know that's my philosophy. Yeah I've always


00:58:12.000 --> 00:58:16.000
you know one of the reasons I use the include template even for


00:58:16.000 --> 00:58:20.000
I use it even just to shrink the size of the HTML file like I don't even care


00:58:20.000 --> 00:58:24.000
if it's not reused sometimes I just find it easier to read because HTML is so


00:58:24.000 --> 00:58:28.000
verbose I sometimes just find it easier to read something that goes oh include


00:58:28.000 --> 00:58:32.000
a row from this row file I'm like oh okay I don't have to think about how


00:58:32.000 --> 00:58:36.000
many divs are in the row I understand what's in that row and it allows me to read it easier so


00:58:36.000 --> 00:58:40.000
obviously the cost of that is performance of compiling the template but


00:58:40.000 --> 00:58:44.000
I'll take that for code readability every day of the week just throw more CPU at it


00:58:44.000 --> 00:58:48.000
Yeah I'm 100% with you and


00:58:48.000 --> 00:58:52.000
you don't have to worry about whether the 17th div


00:58:52.000 --> 00:58:56.000
is matching or not or yeah all that stuff. Yeah.


00:58:56.000 --> 00:59:00.000
Okay you talked about Flask HTML the ASGI one


00:59:00.000 --> 00:59:04.000
HX requests. What's this one about?


00:59:04.000 --> 00:59:08.000
This is similar right? Yeah so this


00:59:08.000 --> 00:59:12.000
no this is a it solves the same problem but in a different fashion


00:59:12.000 --> 00:59:16.000
Okay. So this is by a gentleman named Jakob Lundstein


00:59:16.000 --> 00:59:20.000
and essentially he's using a lot of the class based


00:59:20.000 --> 00:59:24.000
view philosophy not that he's actually using class based


00:59:24.000 --> 00:59:28.000
views but essentially you are building out your


00:59:28.000 --> 00:59:32.000
requests HX request handling as classes


00:59:32.000 --> 00:59:36.000
and he's gone to the level of you


00:59:36.000 --> 00:59:40.000
defining custom tags that you use instead of the attribute


00:59:40.000 --> 00:59:44.000
and it will automatically wire that together so you don't even have to declare


00:59:44.000 --> 00:59:48.000
your URLs and this is and again you know back to that


00:59:48.000 --> 00:59:52.000
Coke versus Pepsi thing this is sort of that the definition between


00:59:52.000 --> 00:59:56.000
function based and class based the contrast between function and class based


00:59:56.000 --> 01:00:00.000
classes always made me a little uncomfortable because they're a little bit magic


01:00:00.000 --> 01:00:04.000
and it often means writing less code but if for


01:00:04.000 --> 01:00:08.000
someone who isn't used to it they have to go digging to understand what's happening


01:00:08.000 --> 01:00:12.000
he's definitely taken a bit of a magic approach here there's less


01:00:12.000 --> 01:00:16.000
code but you can but you've got this


01:00:16.000 --> 01:00:20.000
magical wiring of change email as you've got up on the screen


01:00:20.000 --> 01:00:24.000
getting wired to the actual HX change email underneath and being able


01:00:24.000 --> 01:00:28.000
to find all that code so if you're a class based view person


01:00:28.000 --> 01:00:32.000
this will probably feel very very natural and a good approach to take


01:00:32.000 --> 01:00:36.000
if you're not already intimately familiar with class based views


01:00:36.000 --> 01:00:40.000
this wouldn't be somewhere where I would send you


01:00:40.000 --> 01:00:44.000
but yeah. - You're going to add more overhead to figure out how to put all that


01:00:44.000 --> 01:00:48.000
together. - Exactly. - To use the other libraries. - That's right.


01:00:48.000 --> 01:00:52.000
- Alright well we have a lot of things we've been going through


01:00:52.000 --> 01:00:56.000
but I think we're getting close to the end of the list here Django dashboards


01:00:56.000 --> 01:01:00.000
- Yeah actually why don't we just skip down to


01:01:00.000 --> 01:01:04.000
Auella Club and maybe we can cap it out right there because I think that's probably a really


01:01:04.000 --> 01:01:08.000
good example. - On this page? - No no a different library


01:01:08.000 --> 01:01:12.000
just the last one there it's Auella dash club


01:01:12.000 --> 01:01:16.000
- Hold on I've got to get back


01:01:16.000 --> 01:01:20.000
Where am I? Oh on our notes


01:01:20.000 --> 01:01:24.000
right? - Yes sorry. - Yeah somebody different places


01:01:24.000 --> 01:01:34.000
- Speaking of things you can fix and edit. - Yeah.


01:01:34.000 --> 01:01:38.000
- This is a live stream ladies and gentlemen. - Exactly.


01:01:38.000 --> 01:01:42.000
I don't see this where is this?


01:01:42.000 --> 01:01:46.000
- I thought it was in Pyhat.


01:01:46.000 --> 01:01:50.000
- Okay Pyhat.


01:01:50.000 --> 01:01:54.000
Could be in the other one. - There we go it's in chat.


01:01:54.000 --> 01:01:58.000
- Oh it was in the original one. - Oh it was in the original one.


01:01:58.000 --> 01:02:02.000
- The multi-lingual version. - I had it in the wrong list my apologies.


01:02:02.000 --> 01:02:06.000
- That's fine. - So this is if you want to go one


01:02:06.000 --> 01:02:10.000
place to see everything working together this is the place to go.


01:02:10.000 --> 01:02:14.000
So this is also by Adam Johnson so he's the same guy who does


01:02:14.000 --> 01:02:18.000
Django HTMX. Auella is a Nambian game


01:02:18.000 --> 01:02:22.000
that is kind of similar to another game called Hus.


01:02:22.000 --> 01:02:26.000
I will admit I couldn't fully wrap my head around the rules of the game.


01:02:26.000 --> 01:02:30.000
It's essentially like a little board with holes in it


01:02:30.000 --> 01:02:34.000
and there's stones in the board. There's a good picture up there.


01:02:34.000 --> 01:02:38.000
The rules are on your turn you have to move some of your stones


01:02:38.000 --> 01:02:42.000
and if you move them correctly your turn is done. If you don't move them correctly


01:02:42.000 --> 01:02:46.000
you can take other people's stones whatever. So it's one of those


01:02:46.000 --> 01:02:50.000
very simple games with a lot of strategy. And like I said I didn't quite fully


01:02:50.000 --> 01:02:54.000
wrap my head around the game but that's not what I was here for.


01:02:54.000 --> 01:02:58.000
He's written a HTMX based version


01:02:58.000 --> 01:03:02.000
on the web here. You've got a fully


01:03:02.000 --> 01:03:06.000
automated computer opponent so you can play against the computer. It has


01:03:06.000 --> 01:03:10.000
the layout of the board with the number of rows and stones and then


01:03:10.000 --> 01:03:14.000
there's a number for how many stones are in each hole and if you click


01:03:14.000 --> 01:03:18.000
one of the links, one of the numbers, it automatically moves the


01:03:18.000 --> 01:03:22.000
stones according to the rules. And all of this of course


01:03:22.000 --> 01:03:26.000
as you can imagine is updated through HTMX.


01:03:26.000 --> 01:03:30.000
He even has the base version of this ships with


01:03:30.000 --> 01:03:34.000
the Django debug toolbar on so you can watch


01:03:34.000 --> 01:03:38.000
what is going on. And then in the background because it will host


01:03:38.000 --> 01:03:42.000
multiple games at a time, we were talking a bit about that polling concept.


01:03:42.000 --> 01:03:46.000
It's using the HTMX's polling mechanism


01:03:46.000 --> 01:03:50.000
and in the top right hand corner there's a little report of how many games are in progress


01:03:50.000 --> 01:03:54.000
at the moment. So this is, I really really like this


01:03:54.000 --> 01:03:58.000
example. So there's other examples that are good on the list but most of them are toys.


01:03:58.000 --> 01:04:02.000
They either show off something like an event coming from the server and you know no


01:04:02.000 --> 01:04:06.000
cleanliness. One of the other examples I played with was like a little book database


01:04:06.000 --> 01:04:10.000
and you know it worked but if you typed in a


01:04:10.000 --> 01:04:14.000
number in a place that was, a name in a place where it was supposed to have a number it would crash.


01:04:14.000 --> 01:04:18.000
This is actually a working application and so you've got


01:04:18.000 --> 01:04:22.000
a nice solid example to how everything works, all the different attributes


01:04:22.000 --> 01:04:26.000
and go. So if you're comfortable enough with, if you're new to Django


01:04:26.000 --> 01:04:30.000
then maybe this isn't where you start. But if you're comfortable with Django and you really


01:04:30.000 --> 01:04:34.000
just want to see one place where all the HX parts are working together


01:04:34.000 --> 01:04:38.000
and it's a fun way to learn something, this would be the, this would definitely


01:04:38.000 --> 01:04:40.000
be the example I would use.


01:04:40.000 --> 01:04:44.000
Excellent, yeah it looks like quite a cool


01:04:44.000 --> 01:04:48.000
way to build things with HTMX. I'm not even sure I would have


01:04:48.000 --> 01:04:52.000
thought HTMX totally applies at this level of kind of interactivity


01:04:52.000 --> 01:04:56.000
because it says you can do player versus player games with


01:04:56.000 --> 01:05:00.000
the polling trigger and stuff like that. Yep, yeah it's


01:05:00.000 --> 01:05:04.000
a pretty deep example but of course you kind of expect it out of the HTMX


01:05:04.000 --> 01:05:08.000
Django HTMX guy, right? So, and actually so as an


01:05:08.000 --> 01:05:12.000
aside there's also a relatively decent demo inside


01:05:12.000 --> 01:05:16.000
of that library as well. So if you grab, if you get clone


01:05:16.000 --> 01:05:20.000
Django HTMX there's an examples directory that also has


01:05:20.000 --> 01:05:24.000
not quite as comprehensive this but that's another good place to start as well if you're looking for


01:05:24.000 --> 01:05:28.000
sample code. So plenty of good stuff out there with


01:05:28.000 --> 01:05:32.000
good real world purpose.


01:05:32.000 --> 01:05:36.000
Yeah, absolutely. Cool, well quite the


01:05:36.000 --> 01:05:40.000
look inside of HTMX Christopher, thank you. Yeah, it's


01:05:40.000 --> 01:05:44.000
been fun. Yeah, so many things these days to make it work


01:05:44.000 --> 01:05:48.000
with Django. When I started out like many of these libraries didn't exist.


01:05:48.000 --> 01:05:52.000
I would have probably just grabbed one and used it.


01:05:52.000 --> 01:05:56.000
Had it at the time, you know. It definitely makes a big


01:05:56.000 --> 01:06:00.000
difference and the HTMX community is, I accidentally


01:06:00.000 --> 01:06:04.000
found out very, very vibrant. Somebody found the future


01:06:04.000 --> 01:06:08.000
table of contents of my book and posted on


01:06:08.000 --> 01:06:12.000
as you said the artist formerly known as Twitter. Hey, there's an HTMX chapter


01:06:12.000 --> 01:06:16.000
coming in this Django book and my feed just exploded for like the next


01:06:16.000 --> 01:06:20.000
three days of everybody going, yay HTMX. So there's a


01:06:20.000 --> 01:06:24.000
very strong and excited community out there that's playing with this tool


01:06:24.000 --> 01:06:28.000
and as I said it makes a real big difference in your ability to build stuff


01:06:28.000 --> 01:06:32.000
quickly and effectively. Sure does and speaking to the long term


01:06:32.000 --> 01:06:36.000
sustainability right at the top of the HTMX.org page it says we're excited


01:06:36.000 --> 01:06:40.000
to announce that HTMX has been accepted into the first


01:06:40.000 --> 01:06:44.000
class of the GitHub open source accelerator. So more momentum


01:06:44.000 --> 01:06:48.000
for HTMX. Excellent. Alright, final call


01:06:48.000 --> 01:06:52.000
to action. People want to get started with this stuff. They want to dive into it a little bit more. What do you tell them?


01:06:52.000 --> 01:06:56.000
Start with the page you've got up right now


01:06:56.000 --> 01:07:00.000
for sure. HTMX.org is a good place to go


01:07:00.000 --> 01:07:04.000
and you know at risk of sounding like an infomercial we have a couple of really


01:07:04.000 --> 01:07:08.000
high quality courses that you could also check out.


01:07:08.000 --> 01:07:12.000
Definitely be places to go to go with things and


01:07:12.000 --> 01:07:16.000
of course we'll link in the show notes to all those lists but there's a lot


01:07:16.000 --> 01:07:20.000
of content there if you just kind of want to go digging and play around. Yeah we only


01:07:20.000 --> 01:07:24.000
just touched on a little tiny bit of it so plenty more to go into


01:07:24.000 --> 01:07:28.000
lots of interviews, lots of example, lots of blog posts


01:07:28.000 --> 01:07:32.000
and articles that you can go check out and your book. Your book will


01:07:32.000 --> 01:07:36.000
be out in spring so people can check that out as well. Appreciate it. Yes.


01:07:36.000 --> 01:07:40.000
Thank you so much for being on the show. Always nice to catch up with you.


01:07:40.000 --> 01:07:44.000
Glad to be here. Yeah. See ya. Bye.


01:07:44.000 --> 01:07:46.000
you

